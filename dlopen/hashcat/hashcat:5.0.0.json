{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/src/opencl.c": "/**\n * Author......: See docs/credits.txt\n * License.....: MIT\n */\n\n#include \"common.h\"\n#include \"types.h\"\n#include \"memory.h\"\n#include \"locking.h\"\n#include \"thread.h\"\n#include \"timer.h\"\n#include \"tuningdb.h\"\n#include \"rp.h\"\n#include \"rp_cpu.h\"\n#include \"mpsp.h\"\n#include \"straight.h\"\n#include \"combinator.h\"\n#include \"convert.h\"\n#include \"stdout.h\"\n#include \"filehandling.h\"\n#include \"interface.h\"\n#include \"wordlist.h\"\n#include \"shared.h\"\n#include \"hashes.h\"\n#include \"cpu_md5.h\"\n#include \"event.h\"\n#include \"dynloader.h\"\n#include \"opencl.h\"\n\n#if defined (__linux__)\nstatic const char *dri_card0_path = \"/dev/dri/card0\";\n\nstatic const char *drm_card0_vendor_path = \"/sys/class/drm/card0/device/vendor\";\nstatic const char *drm_card0_driver_path = \"/sys/class/drm/card0/device/driver\";\n#endif\n\nstatic const u32 full01 = 0x01010101;\nstatic const u32 full06 = 0x06060606;\nstatic const u32 full80 = 0x80808080;\n\nstatic double TARGET_MSEC_PROFILE[4] = { 2, 12, 96, 480 };\n\nstatic int ocl_check_dri (MAYBE_UNUSED hashcat_ctx_t *hashcat_ctx)\n{\n  #if defined (__linux__)\n\n  // This check makes sense only if we're not root\n\n  const uid_t uid = getuid ();\n\n  if (uid == 0) return 0;\n\n  // No GPU available! That's fine, so we don't need to check if we have access to it.\n\n  if (hc_path_exist (dri_card0_path) == false) return 0;\n\n  // Now we need to check if this an AMD vendor, because this is when the problems start\n\n  FILE *fd_drm = fopen (drm_card0_vendor_path, \"rb\");\n\n  if (fd_drm == NULL) return 0;\n\n  u32 vendor = 0;\n\n  if (fscanf (fd_drm, \"0x%x\", &vendor) != 1)\n  {\n    fclose (fd_drm);\n\n    return 0;\n  }\n\n  fclose (fd_drm);\n\n  if (vendor != 4098) return 0;\n\n  // Now the problem is only with AMDGPU-PRO, not with oldschool AMD driver\n\n  char buf[HCBUFSIZ_TINY];\n\n  const ssize_t len = readlink (drm_card0_driver_path, buf, HCBUFSIZ_TINY - 1);\n\n  if (len == -1) return 0;\n\n  buf[len] = 0;\n\n  if (strstr (buf, \"amdgpu\") == NULL) return 0;\n\n  // Now do the real check\n\n  FILE *fd_dri = fopen (dri_card0_path, \"rb\");\n\n  if (fd_dri == NULL)\n  {\n    event_log_error (hashcat_ctx, \"Cannot access %s: %m.\", dri_card0_path);\n\n    event_log_warning (hashcat_ctx, \"This causes some drivers to crash when OpenCL is used!\");\n    event_log_warning (hashcat_ctx, \"Adding your user to the \\\"video\\\" group usually fixes this problem:\");\n    event_log_warning (hashcat_ctx, \"$ sudo usermod -a -G video $LOGNAME\");\n    event_log_warning (hashcat_ctx, NULL);\n\n    return -1;\n  }\n\n  fclose (fd_dri);\n\n  #endif // __linux__\n\n  return 0;\n}\n\nstatic int setup_opencl_platforms_filter (hashcat_ctx_t *hashcat_ctx, const char *opencl_platforms, u32 *out)\n{\n  u32 opencl_platforms_filter = 0;\n\n  if (opencl_platforms)\n  {\n    char *platforms = hcstrdup (opencl_platforms);\n\n    if (platforms == NULL) return -1;\n\n    char *saveptr = NULL;\n\n    char *next = strtok_r (platforms, \",\", &saveptr);\n\n    do\n    {\n      int platform = (int) strtol (next, NULL, 10);\n\n      if (platform < 1 || platform > 32)\n      {\n        event_log_error (hashcat_ctx, \"Invalid OpenCL platform %d specified.\", platform);\n\n        hcfree (platforms);\n\n        return -1;\n      }\n\n      opencl_platforms_filter |= 1u << (platform - 1);\n\n    } while ((next = strtok_r ((char *) NULL, \",\", &saveptr)) != NULL);\n\n    hcfree (platforms);\n  }\n  else\n  {\n    opencl_platforms_filter = -1u;\n  }\n\n  *out = opencl_platforms_filter;\n\n  return 0;\n}\n\nstatic int setup_devices_filter (hashcat_ctx_t *hashcat_ctx, const char *opencl_devices, u32 *out)\n{\n  u32 devices_filter = 0;\n\n  if (opencl_devices)\n  {\n    char *devices = hcstrdup (opencl_devices);\n\n    if (devices == NULL) return -1;\n\n    char *saveptr = NULL;\n\n    char *next = strtok_r (devices, \",\", &saveptr);\n\n    do\n    {\n      int device_id = (int) strtol (next, NULL, 10);\n\n      if (device_id < 1 || device_id > 32)\n      {\n        event_log_error (hashcat_ctx, \"Invalid device_id %d specified.\", device_id);\n\n        hcfree (devices);\n\n        return -1;\n      }\n\n      devices_filter |= 1u << (device_id - 1);\n\n    } while ((next = strtok_r ((char *) NULL, \",\", &saveptr)) != NULL);\n\n    hcfree (devices);\n  }\n  else\n  {\n    devices_filter = -1u;\n  }\n\n  *out = devices_filter;\n\n  return 0;\n}\n\nstatic int setup_device_types_filter (hashcat_ctx_t *hashcat_ctx, const char *opencl_device_types, cl_device_type *out)\n{\n  cl_device_type device_types_filter = 0;\n\n  if (opencl_device_types)\n  {\n    char *device_types = hcstrdup (opencl_device_types);\n\n    if (device_types == NULL) return -1;\n\n    char *saveptr = NULL;\n\n    char *next = strtok_r (device_types, \",\", &saveptr);\n\n    do\n    {\n      int device_type = (int) strtol (next, NULL, 10);\n\n      if (device_type < 1 || device_type > 3)\n      {\n        event_log_error (hashcat_ctx, \"Invalid device_type %d specified.\", device_type);\n\n        hcfree (device_types);\n\n        return -1;\n      }\n\n      device_types_filter |= 1u << device_type;\n\n    } while ((next = strtok_r (NULL, \",\", &saveptr)) != NULL);\n\n    hcfree (device_types);\n  }\n  else\n  {\n    // Do not use CPU by default, this often reduces GPU performance because\n    // the CPU is too busy to handle GPU synchronization\n\n    device_types_filter = CL_DEVICE_TYPE_ALL & ~CL_DEVICE_TYPE_CPU;\n  }\n\n  *out = device_types_filter;\n\n  return 0;\n}\n\nstatic int read_kernel_binary (hashcat_ctx_t *hashcat_ctx, const char *kernel_file, size_t *kernel_lengths, char **kernel_sources, const bool force_recompile)\n{\n  FILE *fp = fopen (kernel_file, \"rb\");\n\n  if (fp != NULL)\n  {\n    struct stat st;\n\n    if (stat (kernel_file, &st))\n    {\n      fclose (fp);\n\n      return -1;\n    }\n\n    #define EXTRASZ 100\n\n    char *buf = (char *) hcmalloc (st.st_size + 1 + EXTRASZ);\n\n    size_t num_read = hc_fread (buf, sizeof (char), st.st_size, fp);\n\n    fclose (fp);\n\n    if (num_read != (size_t) st.st_size)\n    {\n      event_log_error (hashcat_ctx, \"%s: %s\", kernel_file, strerror (errno));\n\n      hcfree (buf);\n\n      return -1;\n    }\n\n    buf[st.st_size] = 0;\n\n    if (force_recompile == true)\n    {\n      // this adds some hopefully unique data to the opencl kernel source\n      // the effect should be that opencl kernel compiler caching see this as new \"uncached\" source\n      // we have to do this since they do not check for the changes only in the #include source\n\n      time_t tlog = time (NULL);\n\n      const int extra_len = snprintf (buf + st.st_size, EXTRASZ, \"\\n//%u\\n\", (u32) tlog);\n\n      st.st_size += extra_len;\n    }\n\n    kernel_lengths[0] = (size_t) st.st_size;\n\n    kernel_sources[0] = buf;\n  }\n  else\n  {\n    event_log_error (hashcat_ctx, \"%s: %s\", kernel_file, strerror (errno));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int write_kernel_binary (hashcat_ctx_t *hashcat_ctx, char *kernel_file, char *binary, size_t binary_size)\n{\n  if (binary_size > 0)\n  {\n    FILE *fp = fopen (kernel_file, \"wb\");\n\n    if (fp == NULL)\n    {\n      event_log_error (hashcat_ctx, \"%s: %s\", kernel_file, strerror (errno));\n\n      return -1;\n    }\n\n    if (lock_file (fp) == -1)\n    {\n      fclose (fp);\n\n      event_log_error (hashcat_ctx, \"%s: %s\", kernel_file, strerror (errno));\n\n      return -1;\n    }\n\n    hc_fwrite (binary, sizeof (char), binary_size, fp);\n\n    fflush (fp);\n\n    fclose (fp);\n  }\n\n  return 0;\n}\n\nvoid generate_source_kernel_filename (const bool slow_candidates, const u32 attack_exec, const u32 attack_kern, const u32 kern_type, const u32 opti_type, char *shared_dir, char *source_file)\n{\n  if (opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n  {\n    if (attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n    {\n      if (slow_candidates == true)\n      {\n        snprintf (source_file, 255, \"%s/OpenCL/m%05d_a0-optimized.cl\", shared_dir, (int) kern_type);\n      }\n      else\n      {\n        if (attack_kern == ATTACK_KERN_STRAIGHT)\n          snprintf (source_file, 255, \"%s/OpenCL/m%05d_a0-optimized.cl\", shared_dir, (int) kern_type);\n        else if (attack_kern == ATTACK_KERN_COMBI)\n          snprintf (source_file, 255, \"%s/OpenCL/m%05d_a1-optimized.cl\", shared_dir, (int) kern_type);\n        else if (attack_kern == ATTACK_KERN_BF)\n          snprintf (source_file, 255, \"%s/OpenCL/m%05d_a3-optimized.cl\", shared_dir, (int) kern_type);\n        else if (attack_kern == ATTACK_KERN_NONE)\n          snprintf (source_file, 255, \"%s/OpenCL/m%05d_a0-optimized.cl\", shared_dir, (int) kern_type);\n      }\n    }\n    else\n    {\n      snprintf (source_file, 255, \"%s/OpenCL/m%05d-optimized.cl\", shared_dir, (int) kern_type);\n    }\n  }\n  else\n  {\n    if (attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n    {\n      if (slow_candidates == true)\n      {\n        snprintf (source_file, 255, \"%s/OpenCL/m%05d_a0-pure.cl\", shared_dir, (int) kern_type);\n      }\n      else\n      {\n        if (attack_kern == ATTACK_KERN_STRAIGHT)\n          snprintf (source_file, 255, \"%s/OpenCL/m%05d_a0-pure.cl\", shared_dir, (int) kern_type);\n        else if (attack_kern == ATTACK_KERN_COMBI)\n          snprintf (source_file, 255, \"%s/OpenCL/m%05d_a1-pure.cl\", shared_dir, (int) kern_type);\n        else if (attack_kern == ATTACK_KERN_BF)\n          snprintf (source_file, 255, \"%s/OpenCL/m%05d_a3-pure.cl\", shared_dir, (int) kern_type);\n        else if (attack_kern == ATTACK_KERN_NONE)\n          snprintf (source_file, 255, \"%s/OpenCL/m%05d_a0-pure.cl\", shared_dir, (int) kern_type);\n      }\n    }\n    else\n    {\n      snprintf (source_file, 255, \"%s/OpenCL/m%05d-pure.cl\", shared_dir, (int) kern_type);\n    }\n  }\n}\n\nvoid generate_cached_kernel_filename (const bool slow_candidates, const u32 attack_exec, const u32 attack_kern, const u32 kern_type, const u32 opti_type, char *profile_dir, const char *device_name_chksum, char *cached_file)\n{\n  if (opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n  {\n    if (attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n    {\n      if (slow_candidates == true)\n      {\n        snprintf (cached_file, 255, \"%s/kernels/m%05d_a0-optimized.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n      }\n      else\n      {\n        if (attack_kern == ATTACK_KERN_STRAIGHT)\n          snprintf (cached_file, 255, \"%s/kernels/m%05d_a0-optimized.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n        else if (attack_kern == ATTACK_KERN_COMBI)\n          snprintf (cached_file, 255, \"%s/kernels/m%05d_a1-optimized.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n        else if (attack_kern == ATTACK_KERN_BF)\n          snprintf (cached_file, 255, \"%s/kernels/m%05d_a3-optimized.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n        else if (attack_kern == ATTACK_KERN_NONE)\n          snprintf (cached_file, 255, \"%s/kernels/m%05d_a0-optimized.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n      }\n    }\n    else\n    {\n      snprintf (cached_file, 255, \"%s/kernels/m%05d-optimized.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n    }\n  }\n  else\n  {\n    if (attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n    {\n      if (slow_candidates == true)\n      {\n        snprintf (cached_file, 255, \"%s/kernels/m%05d_a0-pure.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n      }\n      else\n      {\n        if (attack_kern == ATTACK_KERN_STRAIGHT)\n          snprintf (cached_file, 255, \"%s/kernels/m%05d_a0-pure.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n        else if (attack_kern == ATTACK_KERN_COMBI)\n          snprintf (cached_file, 255, \"%s/kernels/m%05d_a1-pure.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n        else if (attack_kern == ATTACK_KERN_BF)\n          snprintf (cached_file, 255, \"%s/kernels/m%05d_a3-pure.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n        else if (attack_kern == ATTACK_KERN_NONE)\n          snprintf (cached_file, 255, \"%s/kernels/m%05d_a0-pure.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n      }\n    }\n    else\n    {\n      snprintf (cached_file, 255, \"%s/kernels/m%05d-pure.%s.kernel\", profile_dir, (int) kern_type, device_name_chksum);\n    }\n  }\n}\n\nvoid generate_source_kernel_mp_filename (const u32 opti_type, const u64 opts_type, char *shared_dir, char *source_file)\n{\n  if ((opti_type & OPTI_TYPE_BRUTE_FORCE) && (opts_type & OPTS_TYPE_PT_GENERATE_BE))\n  {\n    snprintf (source_file, 255, \"%s/OpenCL/markov_be.cl\", shared_dir);\n  }\n  else\n  {\n    snprintf (source_file, 255, \"%s/OpenCL/markov_le.cl\", shared_dir);\n  }\n}\n\nvoid generate_cached_kernel_mp_filename (const u32 opti_type, const u64 opts_type, char *profile_dir, const char *device_name_chksum_amp_mp, char *cached_file)\n{\n  if ((opti_type & OPTI_TYPE_BRUTE_FORCE) && (opts_type & OPTS_TYPE_PT_GENERATE_BE))\n  {\n    snprintf (cached_file, 255, \"%s/kernels/markov_be.%s.kernel\", profile_dir, device_name_chksum_amp_mp);\n  }\n  else\n  {\n    snprintf (cached_file, 255, \"%s/kernels/markov_le.%s.kernel\", profile_dir, device_name_chksum_amp_mp);\n  }\n}\n\nvoid generate_source_kernel_amp_filename (const u32 attack_kern, char *shared_dir, char *source_file)\n{\n  snprintf (source_file, 255, \"%s/OpenCL/amp_a%u.cl\", shared_dir, attack_kern);\n}\n\nvoid generate_cached_kernel_amp_filename (const u32 attack_kern, char *profile_dir, const char *device_name_chksum_amp_mp, char *cached_file)\n{\n  snprintf (cached_file, 255, \"%s/kernels/amp_a%u.%s.kernel\", profile_dir, attack_kern, device_name_chksum_amp_mp);\n}\n\nint ocl_init (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  memset (ocl, 0, sizeof (OCL_PTR));\n\n  #if   defined (_WIN)\n  ocl->lib = hc_dlopen (\"OpenCL\");\n  #elif defined (__APPLE__)\n  ocl->lib = hc_dlopen (\"/System/Library/Frameworks/OpenCL.framework/OpenCL\", RTLD_NOW);\n  #elif defined (__CYGWIN__)\n  ocl->lib = hc_dlopen (\"opencl.dll\", RTLD_NOW);\n\n  if (ocl->lib == NULL) ocl->lib = hc_dlopen (\"cygOpenCL-1.dll\", RTLD_NOW);\n  #else\n  ocl->lib = hc_dlopen (\"libOpenCL.so\", RTLD_NOW);\n\n  if (ocl->lib == NULL) ocl->lib = hc_dlopen (\"libOpenCL.so.1\", RTLD_NOW);\n  #endif\n\n  if (ocl->lib == NULL)\n  {\n    event_log_error (hashcat_ctx, \"Cannot find an OpenCL ICD loader library.\");\n\n    event_log_warning (hashcat_ctx, \"You are probably missing the native OpenCL runtime or driver for your platform.\");\n    event_log_warning (hashcat_ctx, NULL);\n\n    #if defined (__linux__)\n    event_log_warning (hashcat_ctx, \"* AMD GPUs on Linux require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"RadeonOpenCompute (ROCm)\\\" Software Platform (1.6.180 or later)\");\n    #elif defined (_WIN)\n    event_log_warning (hashcat_ctx, \"* AMD GPUs on Windows require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"AMD Radeon Software Crimson Edition\\\" (15.12 or later)\");\n    #endif\n\n    event_log_warning (hashcat_ctx, \"* Intel CPUs require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"OpenCL Runtime for Intel Core and Intel Xeon Processors\\\" (16.1.1 or later)\");\n\n    #if defined (__linux__)\n    event_log_warning (hashcat_ctx, \"* Intel GPUs on Linux require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"OpenCL 2.0 GPU Driver Package for Linux\\\" (2.0 or later)\");\n    #elif defined (_WIN)\n    event_log_warning (hashcat_ctx, \"* Intel GPUs on Windows require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"OpenCL Driver for Intel Iris and Intel HD Graphics\\\"\");\n    #endif\n\n    event_log_warning (hashcat_ctx, \"* NVIDIA GPUs require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"NVIDIA Driver\\\" (367.x or later)\");\n    event_log_warning (hashcat_ctx, NULL);\n\n    return -1;\n  }\n\n  HC_LOAD_FUNC(ocl, clBuildProgram, OCL_CLBUILDPROGRAM, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clCreateBuffer, OCL_CLCREATEBUFFER, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clCreateCommandQueue, OCL_CLCREATECOMMANDQUEUE, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clCreateContext, OCL_CLCREATECONTEXT, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clCreateKernel, OCL_CLCREATEKERNEL, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clCreateProgramWithBinary, OCL_CLCREATEPROGRAMWITHBINARY, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clCreateProgramWithSource, OCL_CLCREATEPROGRAMWITHSOURCE, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clEnqueueCopyBuffer, OCL_CLENQUEUECOPYBUFFER, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clEnqueueMapBuffer, OCL_CLENQUEUEMAPBUFFER, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clEnqueueNDRangeKernel, OCL_CLENQUEUENDRANGEKERNEL, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clEnqueueReadBuffer, OCL_CLENQUEUEREADBUFFER, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clEnqueueUnmapMemObject, OCL_CLENQUEUEUNMAPMEMOBJECT, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clEnqueueWriteBuffer, OCL_CLENQUEUEWRITEBUFFER, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clFinish, OCL_CLFINISH, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clFlush, OCL_CLFLUSH, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetDeviceIDs, OCL_CLGETDEVICEIDS, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetDeviceInfo, OCL_CLGETDEVICEINFO, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetEventInfo, OCL_CLGETEVENTINFO, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetKernelWorkGroupInfo, OCL_CLGETKERNELWORKGROUPINFO, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetPlatformIDs, OCL_CLGETPLATFORMIDS, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetPlatformInfo, OCL_CLGETPLATFORMINFO, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetProgramBuildInfo, OCL_CLGETPROGRAMBUILDINFO, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetProgramInfo, OCL_CLGETPROGRAMINFO, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clReleaseCommandQueue, OCL_CLRELEASECOMMANDQUEUE, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clReleaseContext, OCL_CLRELEASECONTEXT, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clReleaseKernel, OCL_CLRELEASEKERNEL, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clReleaseMemObject, OCL_CLRELEASEMEMOBJECT, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clReleaseProgram, OCL_CLRELEASEPROGRAM, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clSetKernelArg, OCL_CLSETKERNELARG, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clWaitForEvents, OCL_CLWAITFOREVENTS, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clGetEventProfilingInfo, OCL_CLGETEVENTPROFILINGINFO, OpenCL, 1)\n  HC_LOAD_FUNC(ocl, clReleaseEvent, OCL_CLRELEASEEVENT, OpenCL, 1)\n\n  return 0;\n}\n\nvoid ocl_close (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  if (ocl)\n  {\n    if (ocl->lib)\n    {\n      hc_dlclose (ocl->lib);\n    }\n\n    hcfree (opencl_ctx->ocl);\n  }\n}\n\nint hc_clEnqueueNDRangeKernel (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t *global_work_offset, const size_t *global_work_size, const size_t *local_work_size, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clEnqueueNDRangeKernel (command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size, num_events_in_wait_list, event_wait_list, event);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clEnqueueNDRangeKernel(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetEventInfo (hashcat_ctx_t *hashcat_ctx, cl_event event, cl_event_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetEventInfo (event, param_name, param_value_size, param_value, param_value_size_ret);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetEventInfo(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clFlush (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clFlush (command_queue);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clFlush(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clFinish (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clFinish (command_queue);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clFinish(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clSetKernelArg (hashcat_ctx_t *hashcat_ctx, cl_kernel kernel, cl_uint arg_index, size_t arg_size, const void *arg_value)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clSetKernelArg (kernel, arg_index, arg_size, arg_value);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clSetKernelArg(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clEnqueueWriteBuffer (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, size_t offset, size_t cb, const void *ptr, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clEnqueueWriteBuffer (command_queue, buffer, blocking_write, offset, cb, ptr, num_events_in_wait_list, event_wait_list, event);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clEnqueueWriteBuffer(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clEnqueueCopyBuffer (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, size_t src_offset, size_t dst_offset, size_t cb, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clEnqueueCopyBuffer (command_queue, src_buffer, dst_buffer, src_offset, dst_offset, cb, num_events_in_wait_list, event_wait_list, event);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clEnqueueCopyBuffer(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clEnqueueReadBuffer (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, size_t offset, size_t cb, void *ptr, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clEnqueueReadBuffer (command_queue, buffer, blocking_read, offset, cb, ptr, num_events_in_wait_list, event_wait_list, event);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clEnqueueReadBuffer(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetPlatformIDs (hashcat_ctx_t *hashcat_ctx, cl_uint num_entries, cl_platform_id *platforms, cl_uint *num_platforms)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetPlatformIDs (num_entries, platforms, num_platforms);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetPlatformIDs(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetPlatformInfo (hashcat_ctx_t *hashcat_ctx, cl_platform_id platform, cl_platform_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetPlatformInfo (platform, param_name, param_value_size, param_value, param_value_size_ret);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetPlatformInfo(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetDeviceIDs (hashcat_ctx_t *hashcat_ctx, cl_platform_id platform, cl_device_type device_type, cl_uint num_entries, cl_device_id *devices, cl_uint *num_devices)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetDeviceIDs (platform, device_type, num_entries, devices, num_devices);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetDeviceIDs(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetDeviceInfo (hashcat_ctx_t *hashcat_ctx, cl_device_id device, cl_device_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetDeviceInfo (device, param_name, param_value_size, param_value, param_value_size_ret);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetDeviceInfo(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clCreateContext (hashcat_ctx_t *hashcat_ctx, cl_context_properties *properties, cl_uint num_devices, const cl_device_id *devices, void (CL_CALLBACK *pfn_notify) (const char *, const void *, size_t, void *), void *user_data, cl_context *context)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  cl_int CL_err;\n\n  *context = ocl->clCreateContext (properties, num_devices, devices, pfn_notify, user_data, &CL_err);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clCreateContext(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clCreateCommandQueue (hashcat_ctx_t *hashcat_ctx, cl_context context, cl_device_id device, cl_command_queue_properties properties, cl_command_queue *command_queue)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  cl_int CL_err;\n\n  *command_queue = ocl->clCreateCommandQueue (context, device, properties, &CL_err);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clCreateCommandQueue(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clCreateBuffer (hashcat_ctx_t *hashcat_ctx, cl_context context, cl_mem_flags flags, size_t size, void *host_ptr, cl_mem *mem)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  cl_int CL_err;\n\n  *mem = ocl->clCreateBuffer (context, flags, size, host_ptr, &CL_err);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clCreateBuffer(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clCreateProgramWithSource (hashcat_ctx_t *hashcat_ctx, cl_context context, cl_uint count, char **strings, const size_t *lengths, cl_program *program)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  cl_int CL_err;\n\n  *program = ocl->clCreateProgramWithSource (context, count, (const char **) strings, lengths, &CL_err);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clCreateProgramWithSource(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clCreateProgramWithBinary (hashcat_ctx_t *hashcat_ctx, cl_context context, cl_uint num_devices, const cl_device_id *device_list, const size_t *lengths, unsigned char **binaries, cl_int *binary_status, cl_program *program)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  cl_int CL_err;\n\n  *program = ocl->clCreateProgramWithBinary (context, num_devices, device_list, lengths, (const unsigned char **) binaries, binary_status, &CL_err);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clCreateProgramWithBinary(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clBuildProgram (hashcat_ctx_t *hashcat_ctx, cl_program program, cl_uint num_devices, const cl_device_id *device_list, const char *options, void (CL_CALLBACK *pfn_notify) (cl_program program, void *user_data), void *user_data)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clBuildProgram (program, num_devices, device_list, options, pfn_notify, user_data);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clBuildProgram(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clCreateKernel (hashcat_ctx_t *hashcat_ctx, cl_program program, const char *kernel_name, cl_kernel *kernel)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  cl_int CL_err;\n\n  *kernel = ocl->clCreateKernel (program, kernel_name, &CL_err);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clCreateKernel(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clReleaseMemObject (hashcat_ctx_t *hashcat_ctx, cl_mem mem)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clReleaseMemObject (mem);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clReleaseMemObject(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clReleaseKernel (hashcat_ctx_t *hashcat_ctx, cl_kernel kernel)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clReleaseKernel (kernel);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clReleaseKernel(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clReleaseProgram (hashcat_ctx_t *hashcat_ctx, cl_program program)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clReleaseProgram (program);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clReleaseProgram(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clReleaseCommandQueue (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clReleaseCommandQueue (command_queue);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clReleaseCommandQueue(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clReleaseContext (hashcat_ctx_t *hashcat_ctx, cl_context context)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clReleaseContext (context);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clReleaseContext(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clEnqueueMapBuffer (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_map, cl_map_flags map_flags, size_t offset, size_t size, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event, void **buf)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  cl_int CL_err;\n\n  *buf = ocl->clEnqueueMapBuffer (command_queue, buffer, blocking_map, map_flags, offset, size, num_events_in_wait_list, event_wait_list, event, &CL_err);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clEnqueueMapBuffer(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clEnqueueUnmapMemObject (hashcat_ctx_t *hashcat_ctx, cl_command_queue command_queue, cl_mem memobj, void *mapped_ptr, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clEnqueueUnmapMemObject (command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, event);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clEnqueueUnmapMemObject(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetKernelWorkGroupInfo (hashcat_ctx_t *hashcat_ctx, cl_kernel kernel, cl_device_id device, cl_kernel_work_group_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetKernelWorkGroupInfo (kernel, device, param_name, param_value_size, param_value, param_value_size_ret);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetKernelWorkGroupInfo(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetProgramBuildInfo (hashcat_ctx_t *hashcat_ctx, cl_program program, cl_device_id device, cl_program_build_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetProgramBuildInfo (program, device, param_name, param_value_size, param_value, param_value_size_ret);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetProgramBuildInfo(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetProgramInfo (hashcat_ctx_t *hashcat_ctx, cl_program program, cl_program_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetProgramInfo (program, param_name, param_value_size, param_value, param_value_size_ret);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetProgramInfo(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clWaitForEvents (hashcat_ctx_t *hashcat_ctx, cl_uint num_events, const cl_event *event_list)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clWaitForEvents (num_events, event_list);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clWaitForEvents(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clGetEventProfilingInfo (hashcat_ctx_t *hashcat_ctx, cl_event event, cl_profiling_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clGetEventProfilingInfo (event, param_name, param_value_size, param_value, param_value_size_ret);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clGetEventProfilingInfo(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint hc_clReleaseEvent (hashcat_ctx_t *hashcat_ctx, cl_event event)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  OCL_PTR *ocl = opencl_ctx->ocl;\n\n  const cl_int CL_err = ocl->clReleaseEvent (event);\n\n  if (CL_err != CL_SUCCESS)\n  {\n    event_log_error (hashcat_ctx, \"clReleaseEvent(): %s\", val2cstr_cl (CL_err));\n\n    return -1;\n  }\n\n  return 0;\n}\n\nint gidd_to_pw_t (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, const u64 gidd, pw_t *pw)\n{\n  pw_idx_t pw_idx;\n\n  int CL_rc;\n\n  CL_rc = hc_clEnqueueReadBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_idx, CL_TRUE, gidd * sizeof (pw_idx_t), sizeof (pw_idx_t), &pw_idx, 0, NULL, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  const u32 off = pw_idx.off;\n  const u32 cnt = pw_idx.cnt;\n  const u32 len = pw_idx.len;\n\n  if (cnt > 0)\n  {\n    CL_rc = hc_clEnqueueReadBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_comp_buf, CL_TRUE, off * sizeof (u32), cnt * sizeof (u32), pw->i, 0, NULL, NULL);\n\n    if (CL_rc == -1) return -1;\n  }\n\n  for (u32 i = cnt; i < 64; i++)\n  {\n    pw->i[i] = 0;\n  }\n\n  pw->pw_len = len;\n\n  return 0;\n}\n\nint choose_kernel (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, const u32 highest_pw_len, const u64 pws_cnt, const u32 fast_iteration, const u32 salt_pos)\n{\n  hashconfig_t   *hashconfig   = hashcat_ctx->hashconfig;\n  hashes_t       *hashes       = hashcat_ctx->hashes;\n  status_ctx_t   *status_ctx   = hashcat_ctx->status_ctx;\n  user_options_t *user_options = hashcat_ctx->user_options;\n\n  if (hashconfig->hash_mode == 2000)\n  {\n    return process_stdout (hashcat_ctx, device_param, pws_cnt);\n  }\n\n  int CL_rc;\n\n  if (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n  {\n    if (user_options->attack_mode == ATTACK_MODE_BF)\n    {\n      if (user_options->slow_candidates == true)\n      {\n      }\n      else\n      {\n        if (hashconfig->opts_type & OPTS_TYPE_PT_BITSLICE)\n        {\n          const u32 size_tm = 32 * sizeof (bs_word_t);\n\n          CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_tm_c, size_tm);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = run_kernel_tm (hashcat_ctx, device_param);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clEnqueueCopyBuffer (hashcat_ctx, device_param->command_queue, device_param->d_tm_c, device_param->d_bfs_c, 0, 0, size_tm, 0, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n    }\n\n    if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n    {\n      if (highest_pw_len < 16)\n      {\n        CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_1, pws_cnt, true, fast_iteration);\n\n        if (CL_rc == -1) return -1;\n      }\n      else if (highest_pw_len < 32)\n      {\n        CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_2, pws_cnt, true, fast_iteration);\n\n        if (CL_rc == -1) return -1;\n      }\n      else\n      {\n        CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_3, pws_cnt, true, fast_iteration);\n\n        if (CL_rc == -1) return -1;\n      }\n    }\n    else\n    {\n      CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_4, pws_cnt, true, fast_iteration);\n\n      if (CL_rc == -1) return -1;\n    }\n  }\n  else\n  {\n    bool run_init = true;\n    bool run_loop = true;\n    bool run_comp = true;\n\n    if (run_init == true)\n    {\n      CL_rc = hc_clEnqueueCopyBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_amp_buf, device_param->d_pws_buf, 0, 0, pws_cnt * sizeof (pw_t), 0, NULL, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      if (user_options->slow_candidates == true)\n      {\n      }\n      else\n      {\n        CL_rc = run_kernel_amp (hashcat_ctx, device_param, pws_cnt);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_1, pws_cnt, false, 0);\n\n      if (CL_rc == -1) return -1;\n\n      if (hashconfig->opts_type & OPTS_TYPE_HOOK12)\n      {\n        CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_12, pws_cnt, false, 0);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = hc_clEnqueueReadBuffer (hashcat_ctx, device_param->command_queue, device_param->d_hooks, CL_TRUE, 0, device_param->size_hooks, device_param->hooks_buf, 0, NULL, NULL);\n\n        if (CL_rc == -1) return -1;\n\n        // do something with data\n\n        CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_hooks, CL_TRUE, 0, device_param->size_hooks, device_param->hooks_buf, 0, NULL, NULL);\n\n        if (CL_rc == -1) return -1;\n      }\n    }\n\n    if (run_loop == true)\n    {\n      u32 iter = hashes->salts_buf[salt_pos].salt_iter;\n\n      u32 loop_step = device_param->kernel_loops;\n\n      for (u32 loop_pos = 0, slow_iteration = 0; loop_pos < iter; loop_pos += loop_step, slow_iteration++)\n      {\n        u32 loop_left = iter - loop_pos;\n\n        loop_left = MIN (loop_left, loop_step);\n\n        device_param->kernel_params_buf32[28] = loop_pos;\n        device_param->kernel_params_buf32[29] = loop_left;\n\n        CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_2, pws_cnt, true, slow_iteration);\n\n        if (CL_rc == -1) return -1;\n\n        //bug?\n        //while (status_ctx->run_thread_level2 == false) break;\n        if (status_ctx->run_thread_level2 == false) break;\n\n        /**\n         * speed\n         */\n\n        const float iter_part = (float) (loop_pos + loop_left) / iter;\n\n        const u64 perf_sum_all = (u64) (pws_cnt * iter_part);\n\n        double speed_msec = hc_timer_get (device_param->timer_speed);\n\n        const u32 speed_pos = device_param->speed_pos;\n\n        device_param->speed_cnt[speed_pos] = perf_sum_all;\n\n        device_param->speed_msec[speed_pos] = speed_msec;\n\n        if (user_options->speed_only == true)\n        {\n          if (speed_msec > 4000)\n          {\n            device_param->outerloop_multi *= (double) iter / (double) (loop_pos + loop_left);\n\n            device_param->speed_pos = 1;\n\n            device_param->speed_only_finish = true;\n\n            return 0;\n          }\n        }\n      }\n\n      if (hashconfig->opts_type & OPTS_TYPE_HOOK23)\n      {\n        CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_23, pws_cnt, false, 0);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = hc_clEnqueueReadBuffer (hashcat_ctx, device_param->command_queue, device_param->d_hooks, CL_TRUE, 0, device_param->size_hooks, device_param->hooks_buf, 0, NULL, NULL);\n\n        if (CL_rc == -1) return -1;\n\n        /*\n         * The following section depends on the hash mode\n         */\n\n        switch (hashconfig->hash_mode)\n        {\n          // for 7z we only need device_param->hooks_buf, but other hooks could use any info from device_param. All of them should/must update hooks_buf\n          case 11600: seven_zip_hook_func (device_param, hashes->hook_salts_buf, salt_pos, pws_cnt); break;\n        }\n\n        /*\n         * END of hash mode specific hook operations\n         */\n\n        CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_hooks, CL_TRUE, 0, device_param->size_hooks, device_param->hooks_buf, 0, NULL, NULL);\n\n        if (CL_rc == -1) return -1;\n      }\n    }\n\n    // init2 and loop2 are kind of special, we use run_loop for them, too\n\n    if (run_loop == true)\n    {\n      // note: they also do not influence the performance screen\n      // in case you want to use this, this cane make sense only if your input data comes out of tmps[]\n\n      if (hashconfig->opts_type & OPTS_TYPE_INIT2)\n      {\n        CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_INIT2, pws_cnt, false, 0);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      if (hashconfig->opts_type & OPTS_TYPE_LOOP2)\n      {\n        u32 iter = hashes->salts_buf[salt_pos].salt_iter2;\n\n        u32 loop_step = device_param->kernel_loops;\n\n        for (u32 loop_pos = 0, slow_iteration = 0; loop_pos < iter; loop_pos += loop_step, slow_iteration++)\n        {\n          u32 loop_left = iter - loop_pos;\n\n          loop_left = MIN (loop_left, loop_step);\n\n          device_param->kernel_params_buf32[28] = loop_pos;\n          device_param->kernel_params_buf32[29] = loop_left;\n\n          CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_LOOP2, pws_cnt, true, slow_iteration);\n\n          if (CL_rc == -1) return -1;\n\n          //bug?\n          //while (status_ctx->run_thread_level2 == false) break;\n          if (status_ctx->run_thread_level2 == false) break;\n        }\n      }\n    }\n\n    if (run_comp == true)\n    {\n      if ((hashconfig->hash_mode == 2500) || (hashconfig->hash_mode == 2501))\n      {\n        const u32 loops_cnt = hashes->salts_buf[salt_pos].digests_cnt;\n\n        for (u32 loops_pos = 0; loops_pos < loops_cnt; loops_pos++)\n        {\n          device_param->kernel_params_buf32[28] = loops_pos;\n          device_param->kernel_params_buf32[29] = loops_cnt;\n\n          const u32 digests_offset = hashes->salts_buf[salt_pos].digests_offset;\n\n          wpa_eapol_t *wpa_eapols = (wpa_eapol_t *) hashes->esalts_buf;\n\n          wpa_eapol_t *wpa_eapol = &wpa_eapols[digests_offset + loops_pos];\n\n          if (wpa_eapol->keyver == 1)\n          {\n            CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_AUX1, pws_cnt, false, 0);\n\n            if (CL_rc == -1) return -1;\n          }\n          else if (wpa_eapol->keyver == 2)\n          {\n            CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_AUX2, pws_cnt, false, 0);\n\n            if (CL_rc == -1) return -1;\n          }\n          else if (wpa_eapol->keyver == 3)\n          {\n            CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_AUX3, pws_cnt, false, 0);\n\n            if (CL_rc == -1) return -1;\n          }\n\n          if (status_ctx->run_thread_level2 == false) break;\n        }\n      }\n      else if ((hashconfig->hash_mode == 16800) || (hashconfig->hash_mode == 16801))\n      {\n        const u32 loops_cnt = hashes->salts_buf[salt_pos].digests_cnt;\n\n        for (u32 loops_pos = 0; loops_pos < loops_cnt; loops_pos++)\n        {\n          device_param->kernel_params_buf32[28] = loops_pos;\n          device_param->kernel_params_buf32[29] = loops_cnt;\n\n          CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_AUX1, pws_cnt, false, 0);\n\n          if (CL_rc == -1) return -1;\n\n          if (status_ctx->run_thread_level2 == false) break;\n        }\n      }\n      else\n      {\n        CL_rc = run_kernel (hashcat_ctx, device_param, KERN_RUN_3, pws_cnt, false, 0);\n\n        if (CL_rc == -1) return -1;\n      }\n    }\n  }\n\n  return 0;\n}\n\nvoid rebuild_pws_compressed_append (hc_device_param_t *device_param, const u64 pws_cnt, const u8 chr)\n{\n  // this function is used if we have to modify the compressed pws buffer in order to\n  // append some data to each password candidate\n\n  u32      *tmp_pws_comp = (u32 *)      hcmalloc (device_param->size_pws_comp);\n  pw_idx_t *tmp_pws_idx  = (pw_idx_t *) hcmalloc (device_param->size_pws_idx);\n\n  for (u32 i = 0; i < pws_cnt; i++)\n  {\n    pw_idx_t *pw_idx_src = device_param->pws_idx + i;\n    pw_idx_t *pw_idx_dst = tmp_pws_idx + i;\n\n    const u32 src_off = pw_idx_src->off;\n    const u32 src_len = pw_idx_src->len;\n\n    u8 buf[256];\n\n    memcpy (buf, device_param->pws_comp + src_off, src_len);\n\n    buf[src_len] = chr;\n\n    const u32 dst_len = src_len + 1;\n\n    const u32 dst_pw_len4 = (dst_len + 3) & ~3; // round up to multiple of 4\n\n    const u32 dst_pw_len4_cnt = dst_pw_len4 / 4;\n\n    pw_idx_dst->cnt = dst_pw_len4_cnt;\n    pw_idx_dst->len = src_len; // this is intenionally! src_len can not be dst_len, we dont want the kernel to think 0x80 is part of the password\n\n    u8 *dst = (u8 *) (tmp_pws_comp + pw_idx_dst->off);\n\n    memcpy (dst, buf, dst_len);\n\n    memset (dst + dst_len, 0, dst_pw_len4 - dst_len);\n\n    // prepare next element\n\n    pw_idx_t *pw_idx_dst_next = pw_idx_dst + 1;\n\n    pw_idx_dst_next->off = pw_idx_dst->off + pw_idx_dst->cnt;\n  }\n\n  memcpy (device_param->pws_comp, tmp_pws_comp, device_param->size_pws_comp);\n  memcpy (device_param->pws_idx,  tmp_pws_idx,  device_param->size_pws_idx);\n\n  hcfree (tmp_pws_comp);\n  hcfree (tmp_pws_idx);\n}\n\nint run_kernel (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, const u32 kern_run, const u64 num, const u32 event_update, const u32 iteration)\n{\n  const hashconfig_t   *hashconfig   = hashcat_ctx->hashconfig;\n  const status_ctx_t   *status_ctx   = hashcat_ctx->status_ctx;\n  const user_options_t *user_options = hashcat_ctx->user_options;\n\n  u64 num_elements = num;\n\n  device_param->kernel_params_buf64[34] = num;\n\n  u64       kernel_threads = 0;\n  cl_kernel kernel = NULL;\n\n  switch (kern_run)\n  {\n    case KERN_RUN_1:\n      kernel          = device_param->kernel1;\n      kernel_threads  = device_param->kernel_wgs1;\n      break;\n    case KERN_RUN_12:\n      kernel          = device_param->kernel12;\n      kernel_threads  = device_param->kernel_wgs12;\n      break;\n    case KERN_RUN_2:\n      kernel          = device_param->kernel2;\n      kernel_threads  = device_param->kernel_wgs2;\n      break;\n    case KERN_RUN_23:\n      kernel          = device_param->kernel23;\n      kernel_threads  = device_param->kernel_wgs23;\n      break;\n    case KERN_RUN_3:\n      kernel          = device_param->kernel3;\n      kernel_threads  = device_param->kernel_wgs3;\n      break;\n    case KERN_RUN_4:\n      kernel          = device_param->kernel4;\n      kernel_threads  = device_param->kernel_wgs4;\n      break;\n    case KERN_RUN_INIT2:\n      kernel          = device_param->kernel_init2;\n      kernel_threads  = device_param->kernel_wgs_init2;\n      break;\n    case KERN_RUN_LOOP2:\n      kernel          = device_param->kernel_loop2;\n      kernel_threads  = device_param->kernel_wgs_loop2;\n      break;\n    case KERN_RUN_AUX1:\n      kernel          = device_param->kernel_aux1;\n      kernel_threads  = device_param->kernel_wgs_aux1;\n      break;\n    case KERN_RUN_AUX2:\n      kernel          = device_param->kernel_aux2;\n      kernel_threads  = device_param->kernel_wgs_aux2;\n      break;\n    case KERN_RUN_AUX3:\n      kernel          = device_param->kernel_aux3;\n      kernel_threads  = device_param->kernel_wgs_aux3;\n      break;\n    case KERN_RUN_AUX4:\n      kernel          = device_param->kernel_aux4;\n      kernel_threads  = device_param->kernel_wgs_aux4;\n      break;\n    default:\n      event_log_error (hashcat_ctx, \"Invalid kernel specified.\");\n      return -1;\n  }\n\n  kernel_threads = MIN (kernel_threads, device_param->kernel_threads);\n\n  // kernel_threads = power_of_two_floor_32 (kernel_threads);\n\n  num_elements = round_up_multiple_64 (num_elements, kernel_threads);\n\n  int CL_rc;\n\n  for (u32 i = 0; i <= 23; i++)\n  {\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, i, sizeof (cl_mem), device_param->kernel_params[i]);\n\n    if (CL_rc == -1) return -1;\n  }\n\n  for (u32 i = 24; i <= 33; i++)\n  {\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, i, sizeof (cl_uint), device_param->kernel_params[i]);\n\n    if (CL_rc == -1) return -1;\n  }\n\n  for (u32 i = 34; i <= 34; i++)\n  {\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, i, sizeof (cl_ulong), device_param->kernel_params[i]);\n\n    if (CL_rc == -1) return -1;\n  }\n\n  cl_event event;\n\n  if ((hashconfig->opts_type & OPTS_TYPE_PT_BITSLICE) && (user_options->attack_mode == ATTACK_MODE_BF))\n  {\n    const size_t global_work_size[3] = { num_elements,  32, 1 };\n    const size_t local_work_size[3]  = { kernel_threads, 1, 1 };\n\n    CL_rc = hc_clEnqueueNDRangeKernel (hashcat_ctx, device_param->command_queue, kernel, 2, NULL, global_work_size, local_work_size, 0, NULL, &event);\n\n    if (CL_rc == -1) return -1;\n  }\n  else\n  {\n    if (kern_run == KERN_RUN_1)\n    {\n      if (hashconfig->opti_type & OPTI_TYPE_SLOW_HASH_SIMD_INIT)\n      {\n        num_elements = CEILDIV (num_elements, device_param->vector_width);\n      }\n    }\n    else if (kern_run == KERN_RUN_2)\n    {\n      if (hashconfig->opti_type & OPTI_TYPE_SLOW_HASH_SIMD_LOOP)\n      {\n        num_elements = CEILDIV (num_elements, device_param->vector_width);\n      }\n    }\n    else if (kern_run == KERN_RUN_3)\n    {\n      if (hashconfig->opti_type & OPTI_TYPE_SLOW_HASH_SIMD_COMP)\n      {\n        num_elements = CEILDIV (num_elements, device_param->vector_width);\n      }\n    }\n\n    num_elements = round_up_multiple_64 (num_elements, kernel_threads);\n\n    const size_t global_work_size[3] = { num_elements,   1, 1 };\n    const size_t local_work_size[3]  = { kernel_threads, 1, 1 };\n\n    CL_rc = hc_clEnqueueNDRangeKernel (hashcat_ctx, device_param->command_queue, kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, &event);\n\n    if (CL_rc == -1) return -1;\n  }\n\n  CL_rc = hc_clFlush (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  if (device_param->nvidia_spin_damp > 0)\n  {\n    if (status_ctx->devices_status == STATUS_RUNNING)\n    {\n      if (iteration < EXPECTED_ITERATIONS)\n      {\n        switch (kern_run)\n        {\n          case KERN_RUN_1:      if (device_param->exec_us_prev1[iteration]      > 0) usleep ((useconds_t)(device_param->exec_us_prev1[iteration]      * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_2:      if (device_param->exec_us_prev2[iteration]      > 0) usleep ((useconds_t)(device_param->exec_us_prev2[iteration]      * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_3:      if (device_param->exec_us_prev3[iteration]      > 0) usleep ((useconds_t)(device_param->exec_us_prev3[iteration]      * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_4:      if (device_param->exec_us_prev4[iteration]      > 0) usleep ((useconds_t)(device_param->exec_us_prev4[iteration]      * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_INIT2:  if (device_param->exec_us_prev_init2[iteration] > 0) usleep ((useconds_t)(device_param->exec_us_prev_init2[iteration] * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_LOOP2:  if (device_param->exec_us_prev_loop2[iteration] > 0) usleep ((useconds_t)(device_param->exec_us_prev_loop2[iteration] * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_AUX1:   if (device_param->exec_us_prev_aux1[iteration]  > 0) usleep ((useconds_t)(device_param->exec_us_prev_aux1[iteration]  * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_AUX2:   if (device_param->exec_us_prev_aux2[iteration]  > 0) usleep ((useconds_t)(device_param->exec_us_prev_aux2[iteration]  * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_AUX3:   if (device_param->exec_us_prev_aux3[iteration]  > 0) usleep ((useconds_t)(device_param->exec_us_prev_aux3[iteration]  * device_param->nvidia_spin_damp)); break;\n          case KERN_RUN_AUX4:   if (device_param->exec_us_prev_aux4[iteration]  > 0) usleep ((useconds_t)(device_param->exec_us_prev_aux4[iteration]  * device_param->nvidia_spin_damp)); break;\n        }\n      }\n    }\n  }\n\n  CL_rc = hc_clWaitForEvents (hashcat_ctx, 1, &event);\n\n  if (CL_rc == -1) return -1;\n\n  cl_ulong time_start;\n  cl_ulong time_end;\n\n  CL_rc = hc_clGetEventProfilingInfo (hashcat_ctx, event, CL_PROFILING_COMMAND_START, sizeof (time_start), &time_start, NULL); if (CL_rc == -1) return -1;\n  CL_rc = hc_clGetEventProfilingInfo (hashcat_ctx, event, CL_PROFILING_COMMAND_END,   sizeof (time_end),   &time_end,   NULL); if (CL_rc == -1) return -1;\n\n  const double exec_us = (double) (time_end - time_start) / 1000;\n\n  if (status_ctx->devices_status == STATUS_RUNNING)\n  {\n    if (iteration < EXPECTED_ITERATIONS)\n    {\n      switch (kern_run)\n      {\n        case KERN_RUN_1:      device_param->exec_us_prev1[iteration]      = exec_us; break;\n        case KERN_RUN_2:      device_param->exec_us_prev2[iteration]      = exec_us; break;\n        case KERN_RUN_3:      device_param->exec_us_prev3[iteration]      = exec_us; break;\n        case KERN_RUN_4:      device_param->exec_us_prev4[iteration]      = exec_us; break;\n        case KERN_RUN_INIT2:  device_param->exec_us_prev_init2[iteration] = exec_us; break;\n        case KERN_RUN_LOOP2:  device_param->exec_us_prev_loop2[iteration] = exec_us; break;\n        case KERN_RUN_AUX1:   device_param->exec_us_prev_aux1[iteration]  = exec_us; break;\n        case KERN_RUN_AUX2:   device_param->exec_us_prev_aux2[iteration]  = exec_us; break;\n        case KERN_RUN_AUX3:   device_param->exec_us_prev_aux3[iteration]  = exec_us; break;\n        case KERN_RUN_AUX4:   device_param->exec_us_prev_aux4[iteration]  = exec_us; break;\n      }\n    }\n  }\n\n  if (event_update)\n  {\n    u32 exec_pos = device_param->exec_pos;\n\n    device_param->exec_msec[exec_pos] = exec_us / 1000;\n\n    exec_pos++;\n\n    if (exec_pos == EXEC_CACHE)\n    {\n      exec_pos = 0;\n    }\n\n    device_param->exec_pos = exec_pos;\n  }\n\n  CL_rc = hc_clReleaseEvent (hashcat_ctx, event);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFinish (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  return 0;\n}\n\nint run_kernel_mp (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, const u32 kern_run, const u64 num)\n{\n  u64 num_elements = num;\n\n  switch (kern_run)\n  {\n    case KERN_RUN_MP:   device_param->kernel_params_mp_buf64[8]   = num; break;\n    case KERN_RUN_MP_R: device_param->kernel_params_mp_r_buf64[8] = num; break;\n    case KERN_RUN_MP_L: device_param->kernel_params_mp_l_buf64[9] = num; break;\n  }\n\n  u64       kernel_threads = 0;\n  cl_kernel kernel = NULL;\n\n  switch (kern_run)\n  {\n    case KERN_RUN_MP:\n      kernel          = device_param->kernel_mp;\n      kernel_threads  = device_param->kernel_wgs_mp;\n      break;\n    case KERN_RUN_MP_R:\n      kernel          = device_param->kernel_mp_r;\n      kernel_threads  = device_param->kernel_wgs_mp_r;\n      break;\n    case KERN_RUN_MP_L:\n      kernel          = device_param->kernel_mp_l;\n      kernel_threads  = device_param->kernel_wgs_mp_l;\n      break;\n    default:\n      event_log_error (hashcat_ctx, \"Invalid kernel specified.\");\n      return -1;\n  }\n\n  num_elements = round_up_multiple_64 (num_elements, kernel_threads);\n\n  int CL_rc;\n\n  switch (kern_run)\n  {\n    case KERN_RUN_MP:   CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 3, sizeof (cl_ulong), device_param->kernel_params_mp[3]);   if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 4, sizeof (cl_uint),  device_param->kernel_params_mp[4]);   if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 5, sizeof (cl_uint),  device_param->kernel_params_mp[5]);   if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 6, sizeof (cl_uint),  device_param->kernel_params_mp[6]);   if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 7, sizeof (cl_uint),  device_param->kernel_params_mp[7]);   if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 8, sizeof (cl_ulong), device_param->kernel_params_mp[8]);   if (CL_rc == -1) return -1;\n                        break;\n    case KERN_RUN_MP_R: CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 3, sizeof (cl_ulong), device_param->kernel_params_mp_r[3]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 4, sizeof (cl_uint),  device_param->kernel_params_mp_r[4]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 5, sizeof (cl_uint),  device_param->kernel_params_mp_r[5]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 6, sizeof (cl_uint),  device_param->kernel_params_mp_r[6]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 7, sizeof (cl_uint),  device_param->kernel_params_mp_r[7]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 8, sizeof (cl_ulong), device_param->kernel_params_mp_r[8]); if (CL_rc == -1) return -1;\n                        break;\n    case KERN_RUN_MP_L: CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 3, sizeof (cl_ulong), device_param->kernel_params_mp_l[3]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 4, sizeof (cl_uint),  device_param->kernel_params_mp_l[4]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 5, sizeof (cl_uint),  device_param->kernel_params_mp_l[5]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 6, sizeof (cl_uint),  device_param->kernel_params_mp_l[6]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 7, sizeof (cl_uint),  device_param->kernel_params_mp_l[7]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 8, sizeof (cl_uint),  device_param->kernel_params_mp_l[8]); if (CL_rc == -1) return -1;\n                        CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 9, sizeof (cl_ulong), device_param->kernel_params_mp_l[9]); if (CL_rc == -1) return -1;\n                        break;\n  }\n\n  const size_t global_work_size[3] = { num_elements,   1, 1 };\n  const size_t local_work_size[3]  = { kernel_threads, 1, 1 };\n\n  CL_rc = hc_clEnqueueNDRangeKernel (hashcat_ctx, device_param->command_queue, kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFlush (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFinish (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  return 0;\n}\n\nint run_kernel_tm (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param)\n{\n  const u64 num_elements = 1024; // fixed\n\n  const u64 kernel_threads = MIN (num_elements, device_param->kernel_wgs_tm);\n\n  cl_kernel kernel = device_param->kernel_tm;\n\n  const size_t global_work_size[3] = { num_elements,    1, 1 };\n  const size_t local_work_size[3]  = { kernel_threads,  1, 1 };\n\n  int CL_rc;\n\n  CL_rc = hc_clEnqueueNDRangeKernel (hashcat_ctx, device_param->command_queue, kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFlush (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFinish (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  return 0;\n}\n\nint run_kernel_amp (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, const u64 num)\n{\n  u64 num_elements = num;\n\n  device_param->kernel_params_amp_buf64[6] = num_elements;\n\n  const u64 kernel_threads = device_param->kernel_wgs_amp;\n\n  num_elements = round_up_multiple_64 (num_elements, kernel_threads);\n\n  cl_kernel kernel = device_param->kernel_amp;\n\n  int CL_rc;\n\n  CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 6, sizeof (cl_ulong), device_param->kernel_params_amp[6]);\n\n  if (CL_rc == -1) return -1;\n\n  const size_t global_work_size[3] = { num_elements,    1, 1 };\n  const size_t local_work_size[3]  = { kernel_threads,  1, 1 };\n\n  CL_rc = hc_clEnqueueNDRangeKernel (hashcat_ctx, device_param->command_queue, kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFlush (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFinish (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  return 0;\n}\n\nint run_kernel_atinit (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, cl_mem buf, const u64 num)\n{\n  u64 num_elements = num;\n\n  device_param->kernel_params_atinit_buf64[1] = num_elements;\n\n  const u64 kernel_threads = device_param->kernel_wgs_atinit;\n\n  num_elements = round_up_multiple_64 (num_elements, kernel_threads);\n\n  cl_kernel kernel = device_param->kernel_atinit;\n\n  const size_t global_work_size[3] = { num_elements,    1, 1 };\n  const size_t local_work_size[3]  = { kernel_threads,  1, 1 };\n\n  int CL_rc;\n\n  CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 0, sizeof (cl_mem), (void *) &buf);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 1, sizeof (cl_ulong), device_param->kernel_params_atinit[1]);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clEnqueueNDRangeKernel (hashcat_ctx, device_param->command_queue, kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFlush (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFinish (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  return 0;\n}\n\nint run_kernel_memset (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, cl_mem buf, const u32 value, const u64 size)\n{\n  const u64 num16d = size / 16;\n  const u64 num16m = size % 16;\n\n  if (num16d)\n  {\n    device_param->kernel_params_memset_buf32[1] = value;\n    device_param->kernel_params_memset_buf64[2] = num16d;\n\n    const u64 kernel_threads = device_param->kernel_wgs_memset;\n\n    u64 num_elements = num16d;\n\n    num_elements = round_up_multiple_64 (num_elements, kernel_threads);\n\n    cl_kernel kernel = device_param->kernel_memset;\n\n    int CL_rc;\n\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 0, sizeof (cl_mem),   (void *) &buf);                         if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 1, sizeof (cl_uint),  device_param->kernel_params_memset[1]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 2, sizeof (cl_ulong), device_param->kernel_params_memset[2]); if (CL_rc == -1) return -1;\n\n    const size_t global_work_size[3] = { num_elements,   1, 1 };\n    const size_t local_work_size[3]  = { kernel_threads, 1, 1 };\n\n    CL_rc = hc_clEnqueueNDRangeKernel (hashcat_ctx, device_param->command_queue, kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = hc_clFlush (hashcat_ctx, device_param->command_queue);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = hc_clFinish (hashcat_ctx, device_param->command_queue);\n\n    if (CL_rc == -1) return -1;\n  }\n\n  if (num16m)\n  {\n    u32 tmp[4];\n\n    tmp[0] = value;\n    tmp[1] = value;\n    tmp[2] = value;\n    tmp[3] = value;\n\n    int CL_rc;\n\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, buf, CL_TRUE, num16d * 16, num16m, tmp, 0, NULL, NULL);\n\n    if (CL_rc == -1) return -1;\n  }\n\n  return 0;\n}\n\nint run_kernel_decompress (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, const u64 num)\n{\n  u64 num_elements = num;\n\n  device_param->kernel_params_decompress_buf64[3] = num_elements;\n\n  const u64 kernel_threads = device_param->kernel_wgs_decompress;\n\n  num_elements = round_up_multiple_64 (num_elements, kernel_threads);\n\n  cl_kernel kernel = device_param->kernel_decompress;\n\n  const size_t global_work_size[3] = { num_elements,    1, 1 };\n  const size_t local_work_size[3]  = { kernel_threads,  1, 1 };\n\n  int CL_rc;\n\n  CL_rc = hc_clSetKernelArg (hashcat_ctx, kernel, 3, sizeof (cl_ulong), device_param->kernel_params_decompress[3]);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clEnqueueNDRangeKernel (hashcat_ctx, device_param->command_queue, kernel, 1, NULL, global_work_size, local_work_size, 0, NULL, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFlush (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  CL_rc = hc_clFinish (hashcat_ctx, device_param->command_queue);\n\n  if (CL_rc == -1) return -1;\n\n  return 0;\n}\n\nint run_kernel_bzero (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, cl_mem buf, const u64 size)\n{\n  return run_kernel_memset (hashcat_ctx, device_param, buf, 0, size);\n}\n\nint run_copy (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, const u64 pws_cnt)\n{\n  combinator_ctx_t     *combinator_ctx      = hashcat_ctx->combinator_ctx;\n  hashconfig_t         *hashconfig          = hashcat_ctx->hashconfig;\n  user_options_t       *user_options        = hashcat_ctx->user_options;\n  user_options_extra_t *user_options_extra  = hashcat_ctx->user_options_extra;\n\n  // init speed timer\n\n  #if defined (_WIN)\n  if (device_param->timer_speed.QuadPart == 0)\n  {\n    hc_timer_set (&device_param->timer_speed);\n  }\n  #else\n  if (device_param->timer_speed.tv_sec == 0)\n  {\n    hc_timer_set (&device_param->timer_speed);\n  }\n  #endif\n\n  if (user_options->slow_candidates == true)\n  {\n    int CL_rc;\n\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_idx, CL_TRUE, 0, pws_cnt * sizeof (pw_idx_t), device_param->pws_idx, 0, NULL, NULL);\n\n    if (CL_rc == -1) return -1;\n\n    const pw_idx_t *pw_idx = device_param->pws_idx + pws_cnt;\n\n    const u32 off = pw_idx->off;\n\n    if (off)\n    {\n      CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_comp_buf, CL_TRUE, 0, off * sizeof (u32), device_param->pws_comp, 0, NULL, NULL);\n\n      if (CL_rc == -1) return -1;\n    }\n\n    CL_rc = run_kernel_decompress (hashcat_ctx, device_param, pws_cnt);\n\n    if (CL_rc == -1) return -1;\n  }\n  else\n  {\n    if (user_options_extra->attack_kern == ATTACK_KERN_STRAIGHT)\n    {\n      int CL_rc;\n\n      CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_idx, CL_TRUE, 0, pws_cnt * sizeof (pw_idx_t), device_param->pws_idx, 0, NULL, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      const pw_idx_t *pw_idx = device_param->pws_idx + pws_cnt;\n\n      const u32 off = pw_idx->off;\n\n      if (off)\n      {\n        CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_comp_buf, CL_TRUE, 0, off * sizeof (u32), device_param->pws_comp, 0, NULL, NULL);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      CL_rc = run_kernel_decompress (hashcat_ctx, device_param, pws_cnt);\n\n      if (CL_rc == -1) return -1;\n    }\n    else if (user_options_extra->attack_kern == ATTACK_KERN_COMBI)\n    {\n      if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n      {\n        if (user_options->attack_mode == ATTACK_MODE_COMBI)\n        {\n          if (combinator_ctx->combs_mode == COMBINATOR_MODE_BASE_RIGHT)\n          {\n            if (hashconfig->opts_type & OPTS_TYPE_PT_ADD01)\n            {\n              rebuild_pws_compressed_append (device_param, pws_cnt, 0x01);\n            }\n            else if (hashconfig->opts_type & OPTS_TYPE_PT_ADD06)\n            {\n              rebuild_pws_compressed_append (device_param, pws_cnt, 0x06);\n            }\n            else if (hashconfig->opts_type & OPTS_TYPE_PT_ADD80)\n            {\n              rebuild_pws_compressed_append (device_param, pws_cnt, 0x80);\n            }\n          }\n        }\n        else if (user_options->attack_mode == ATTACK_MODE_HYBRID2)\n        {\n          if (hashconfig->opts_type & OPTS_TYPE_PT_ADD01)\n          {\n            rebuild_pws_compressed_append (device_param, pws_cnt, 0x01);\n          }\n          else if (hashconfig->opts_type & OPTS_TYPE_PT_ADD06)\n          {\n            rebuild_pws_compressed_append (device_param, pws_cnt, 0x06);\n          }\n          else if (hashconfig->opts_type & OPTS_TYPE_PT_ADD80)\n          {\n            rebuild_pws_compressed_append (device_param, pws_cnt, 0x80);\n          }\n        }\n\n        int CL_rc;\n\n        CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_idx, CL_TRUE, 0, pws_cnt * sizeof (pw_idx_t), device_param->pws_idx, 0, NULL, NULL);\n\n        if (CL_rc == -1) return -1;\n\n        const pw_idx_t *pw_idx = device_param->pws_idx + pws_cnt;\n\n        const u32 off = pw_idx->off;\n\n        if (off)\n        {\n          CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_comp_buf, CL_TRUE, 0, off * sizeof (u32), device_param->pws_comp, 0, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n\n        CL_rc = run_kernel_decompress (hashcat_ctx, device_param, pws_cnt);\n\n        if (CL_rc == -1) return -1;\n      }\n      else\n      {\n        if (user_options->attack_mode == ATTACK_MODE_COMBI)\n        {\n          int CL_rc;\n\n          CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_idx, CL_TRUE, 0, pws_cnt * sizeof (pw_idx_t), device_param->pws_idx, 0, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          const pw_idx_t *pw_idx = device_param->pws_idx + pws_cnt;\n\n          const u32 off = pw_idx->off;\n\n          if (off)\n          {\n            CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_comp_buf, CL_TRUE, 0, off * sizeof (u32), device_param->pws_comp, 0, NULL, NULL);\n\n            if (CL_rc == -1) return -1;\n          }\n\n          CL_rc = run_kernel_decompress (hashcat_ctx, device_param, pws_cnt);\n\n          if (CL_rc == -1) return -1;\n        }\n        else if (user_options->attack_mode == ATTACK_MODE_HYBRID1)\n        {\n          int CL_rc;\n\n          CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_idx, CL_TRUE, 0, pws_cnt * sizeof (pw_idx_t), device_param->pws_idx, 0, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          const pw_idx_t *pw_idx = device_param->pws_idx + pws_cnt;\n\n          const u32 off = pw_idx->off;\n\n          if (off)\n          {\n            CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_pws_comp_buf, CL_TRUE, 0, off * sizeof (u32), device_param->pws_comp, 0, NULL, NULL);\n\n            if (CL_rc == -1) return -1;\n          }\n\n          CL_rc = run_kernel_decompress (hashcat_ctx, device_param, pws_cnt);\n\n          if (CL_rc == -1) return -1;\n        }\n        else if (user_options->attack_mode == ATTACK_MODE_HYBRID2)\n        {\n          const u64 off = device_param->words_off;\n\n          device_param->kernel_params_mp_buf64[3] = off;\n\n          const int CL_rc = run_kernel_mp (hashcat_ctx, device_param, KERN_RUN_MP, pws_cnt);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n    }\n    else if (user_options_extra->attack_kern == ATTACK_KERN_BF)\n    {\n      const u64 off = device_param->words_off;\n\n      device_param->kernel_params_mp_l_buf64[3] = off;\n\n      const int CL_rc = run_kernel_mp (hashcat_ctx, device_param, KERN_RUN_MP_L, pws_cnt);\n\n      if (CL_rc == -1) return -1;\n    }\n  }\n\n  return 0;\n}\n\nint run_cracker (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, const u64 pws_cnt)\n{\n  combinator_ctx_t      *combinator_ctx     = hashcat_ctx->combinator_ctx;\n  hashconfig_t          *hashconfig         = hashcat_ctx->hashconfig;\n  hashes_t              *hashes             = hashcat_ctx->hashes;\n  mask_ctx_t            *mask_ctx           = hashcat_ctx->mask_ctx;\n  status_ctx_t          *status_ctx         = hashcat_ctx->status_ctx;\n  straight_ctx_t        *straight_ctx       = hashcat_ctx->straight_ctx;\n  user_options_t        *user_options       = hashcat_ctx->user_options;\n  user_options_extra_t  *user_options_extra = hashcat_ctx->user_options_extra;\n\n  // do the on-the-fly combinator mode encoding\n\n  bool iconv_enabled = false;\n\n  iconv_t iconv_ctx = NULL;\n\n  char *iconv_tmp = NULL;\n\n  if (strcmp (user_options->encoding_from, user_options->encoding_to) != 0)\n  {\n    iconv_enabled = true;\n\n    iconv_ctx = iconv_open (user_options->encoding_to, user_options->encoding_from);\n\n    if (iconv_ctx == (iconv_t) -1) return -1;\n\n    iconv_tmp = (char *) hcmalloc (HCBUFSIZ_TINY);\n  }\n\n  // find higest password length, this is for optimization stuff\n\n  u32 highest_pw_len = 0;\n\n  if (user_options->slow_candidates == true)\n  {\n    /*\n    for (u64 pws_idx = 0; pws_idx < pws_cnt; pws_idx++)\n    {\n      pw_idx_t *pw_idx = device_param->pws_idx + pws_idx;\n\n      highest_pw_len = MAX (highest_pw_len, pw_idx->len);\n    }\n    */\n  }\n  else\n  {\n    if (user_options_extra->attack_kern == ATTACK_KERN_STRAIGHT)\n    {\n    }\n    else if (user_options_extra->attack_kern == ATTACK_KERN_COMBI)\n    {\n    }\n    else if (user_options_extra->attack_kern == ATTACK_KERN_BF)\n    {\n      highest_pw_len = device_param->kernel_params_mp_l_buf32[4]\n                     + device_param->kernel_params_mp_l_buf32[5];\n    }\n  }\n\n  // we make use of this in status view\n\n  device_param->outerloop_multi = 1;\n  device_param->outerloop_msec  = 0;\n  device_param->outerloop_pos   = 0;\n  device_param->outerloop_left  = pws_cnt;\n\n  // loop start: most outer loop = salt iteration, then innerloops (if multi)\n\n  for (u32 salt_pos = 0; salt_pos < hashes->salts_cnt; salt_pos++)\n  {\n    while (status_ctx->devices_status == STATUS_PAUSED) sleep (1);\n\n    salt_t *salt_buf = &hashes->salts_buf[salt_pos];\n\n    device_param->kernel_params_buf32[27] = salt_pos;\n    device_param->kernel_params_buf32[31] = salt_buf->digests_cnt;\n    device_param->kernel_params_buf32[32] = salt_buf->digests_offset;\n\n    FILE *combs_fp = device_param->combs_fp;\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      if ((user_options->attack_mode == ATTACK_MODE_COMBI) || (((hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL) == 0) && (user_options->attack_mode == ATTACK_MODE_HYBRID2)))\n      {\n        rewind (combs_fp);\n      }\n    }\n\n    // iteration type\n\n    u32 innerloop_step = 0;\n    u32 innerloop_cnt  = 0;\n\n    if (user_options->slow_candidates == true)\n    {\n      innerloop_step = 1;\n      innerloop_cnt  = 1;\n    }\n    else\n    {\n      if   (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL) innerloop_step = device_param->kernel_loops;\n      else                                                        innerloop_step = 1;\n\n      if      (user_options_extra->attack_kern == ATTACK_KERN_STRAIGHT)  innerloop_cnt = (u32) straight_ctx->kernel_rules_cnt;\n      else if (user_options_extra->attack_kern == ATTACK_KERN_COMBI)     innerloop_cnt = (u32) combinator_ctx->combs_cnt;\n      else if (user_options_extra->attack_kern == ATTACK_KERN_BF)        innerloop_cnt = (u32) mask_ctx->bfs_cnt;\n    }\n\n    // innerloops\n\n    for (u32 innerloop_pos = 0; innerloop_pos < innerloop_cnt; innerloop_pos += innerloop_step)\n    {\n      while (status_ctx->devices_status == STATUS_PAUSED) sleep (1);\n\n      u32 fast_iteration = 0;\n\n      u32 innerloop_left = innerloop_cnt - innerloop_pos;\n\n      if (innerloop_left > innerloop_step)\n      {\n        innerloop_left = innerloop_step;\n\n        fast_iteration = 1;\n      }\n\n      hc_thread_mutex_lock (status_ctx->mux_display);\n\n      device_param->innerloop_pos  = innerloop_pos;\n      device_param->innerloop_left = innerloop_left;\n\n      device_param->kernel_params_buf32[30] = (u32) innerloop_left;\n\n      device_param->outerloop_multi = (double) innerloop_cnt / (double) (innerloop_pos + innerloop_left);\n\n      hc_thread_mutex_unlock (status_ctx->mux_display);\n\n      if (hashes->salts_shown[salt_pos] == 1)\n      {\n        status_ctx->words_progress_done[salt_pos] += (u64) pws_cnt * innerloop_left;\n\n        continue;\n      }\n\n      // initialize and copy amplifiers\n\n      if (user_options->slow_candidates == true)\n      {\n      }\n      else\n      {\n        if (user_options_extra->attack_kern == ATTACK_KERN_STRAIGHT)\n        {\n          const int CL_rc = hc_clEnqueueCopyBuffer (hashcat_ctx, device_param->command_queue, device_param->d_rules, device_param->d_rules_c, innerloop_pos * sizeof (kernel_rule_t), 0, innerloop_left * sizeof (kernel_rule_t), 0, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n        else if (user_options_extra->attack_kern == ATTACK_KERN_COMBI)\n        {\n          if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n          {\n            if (user_options->attack_mode == ATTACK_MODE_COMBI)\n            {\n              char *line_buf = device_param->scratch_buf;\n\n              u32 i = 0;\n\n              while (i < innerloop_left)\n              {\n                if (feof (combs_fp)) break;\n\n                size_t line_len = fgetl (combs_fp, line_buf);\n\n                line_len = convert_from_hex (hashcat_ctx, line_buf, line_len);\n\n                if (line_len >= PW_MAX) continue;\n\n                char *line_buf_new = line_buf;\n\n                char rule_buf_out[RP_PASSWORD_SIZE];\n\n                if (run_rule_engine (user_options_extra->rule_len_r, user_options->rule_buf_r))\n                {\n                  if (line_len >= RP_PASSWORD_SIZE) continue;\n\n                  memset (rule_buf_out, 0, sizeof (rule_buf_out));\n\n                  const int rule_len_out = _old_apply_rule (user_options->rule_buf_r, user_options_extra->rule_len_r, line_buf, (u32) line_len, rule_buf_out);\n\n                  if (rule_len_out < 0)\n                  {\n                    status_ctx->words_progress_rejected[salt_pos] += pws_cnt;\n\n                    continue;\n                  }\n\n                  line_len = rule_len_out;\n\n                  line_buf_new = rule_buf_out;\n                }\n\n                // do the on-the-fly encoding\n\n                if (iconv_enabled == true)\n                {\n                  char  *iconv_ptr = iconv_tmp;\n                  size_t iconv_sz  = HCBUFSIZ_TINY;\n\n                  const size_t iconv_rc = iconv (iconv_ctx, &line_buf_new, &line_len, &iconv_ptr, &iconv_sz);\n\n                  if (iconv_rc == (size_t) -1) continue;\n\n                  line_buf_new = iconv_tmp;\n                  line_len     = HCBUFSIZ_TINY - iconv_sz;\n                }\n\n                line_len = MIN (line_len, PW_MAX - 1);\n\n                u8 *ptr = (u8 *) device_param->combs_buf[i].i;\n\n                memcpy (ptr, line_buf_new, line_len);\n\n                memset (ptr + line_len, 0, PW_MAX - line_len);\n\n                if (hashconfig->opts_type & OPTS_TYPE_PT_UPPER)\n                {\n                  uppercase (ptr, line_len);\n                }\n\n                if (combinator_ctx->combs_mode == COMBINATOR_MODE_BASE_LEFT)\n                {\n                  if (hashconfig->opts_type & OPTS_TYPE_PT_ADD80)\n                  {\n                    ptr[line_len] = 0x80;\n                  }\n\n                  if (hashconfig->opts_type & OPTS_TYPE_PT_ADD06)\n                  {\n                    ptr[line_len] = 0x06;\n                  }\n\n                  if (hashconfig->opts_type & OPTS_TYPE_PT_ADD01)\n                  {\n                    ptr[line_len] = 0x01;\n                  }\n                }\n\n                device_param->combs_buf[i].pw_len = (u32) line_len;\n\n                i++;\n              }\n\n              for (u32 j = i; j < innerloop_left; j++)\n              {\n                memset (&device_param->combs_buf[j], 0, sizeof (pw_t));\n              }\n\n              innerloop_left = i;\n\n              const int CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_combs_c, CL_TRUE, 0, innerloop_left * sizeof (pw_t), device_param->combs_buf, 0, NULL, NULL);\n\n              if (CL_rc == -1) return -1;\n            }\n            else if (user_options->attack_mode == ATTACK_MODE_HYBRID1)\n            {\n              u64 off = innerloop_pos;\n\n              device_param->kernel_params_mp_buf64[3] = off;\n\n              int CL_rc;\n\n              CL_rc = run_kernel_mp (hashcat_ctx, device_param, KERN_RUN_MP, innerloop_left);\n\n              if (CL_rc == -1) return -1;\n\n              CL_rc = hc_clEnqueueCopyBuffer (hashcat_ctx, device_param->command_queue, device_param->d_combs, device_param->d_combs_c, 0, 0, innerloop_left * sizeof (pw_t), 0, NULL, NULL);\n\n              if (CL_rc == -1) return -1;\n            }\n            else if (user_options->attack_mode == ATTACK_MODE_HYBRID2)\n            {\n              u64 off = innerloop_pos;\n\n              device_param->kernel_params_mp_buf64[3] = off;\n\n              int CL_rc;\n\n              CL_rc = run_kernel_mp (hashcat_ctx, device_param, KERN_RUN_MP, innerloop_left);\n\n              if (CL_rc == -1) return -1;\n\n              CL_rc = hc_clEnqueueCopyBuffer (hashcat_ctx, device_param->command_queue, device_param->d_combs, device_param->d_combs_c, 0, 0, innerloop_left * sizeof (pw_t), 0, NULL, NULL);\n\n              if (CL_rc == -1) return -1;\n            }\n          }\n          else\n          {\n            if ((user_options->attack_mode == ATTACK_MODE_COMBI) || (user_options->attack_mode == ATTACK_MODE_HYBRID2))\n            {\n              char *line_buf = device_param->scratch_buf;\n\n              u32 i = 0;\n\n              while (i < innerloop_left)\n              {\n                if (feof (combs_fp)) break;\n\n                size_t line_len = fgetl (combs_fp, line_buf);\n\n                line_len = convert_from_hex (hashcat_ctx, line_buf, line_len);\n\n                if (line_len >= PW_MAX) continue;\n\n                char *line_buf_new = line_buf;\n\n                char rule_buf_out[RP_PASSWORD_SIZE];\n\n                if (run_rule_engine (user_options_extra->rule_len_r, user_options->rule_buf_r))\n                {\n                  if (line_len >= RP_PASSWORD_SIZE) continue;\n\n                  memset (rule_buf_out, 0, sizeof (rule_buf_out));\n\n                  const int rule_len_out = _old_apply_rule (user_options->rule_buf_r, user_options_extra->rule_len_r, line_buf, (u32) line_len, rule_buf_out);\n\n                  if (rule_len_out < 0)\n                  {\n                    status_ctx->words_progress_rejected[salt_pos] += pws_cnt;\n\n                    continue;\n                  }\n\n                  line_len = rule_len_out;\n\n                  line_buf_new = rule_buf_out;\n                }\n\n                // do the on-the-fly encoding\n\n                if (iconv_enabled == true)\n                {\n                  char  *iconv_ptr = iconv_tmp;\n                  size_t iconv_sz  = HCBUFSIZ_TINY;\n\n                  const size_t iconv_rc = iconv (iconv_ctx, &line_buf_new, &line_len, &iconv_ptr, &iconv_sz);\n\n                  if (iconv_rc == (size_t) -1) continue;\n\n                  line_buf_new = iconv_tmp;\n                  line_len     = HCBUFSIZ_TINY - iconv_sz;\n                }\n\n                line_len = MIN (line_len, PW_MAX - 1);\n\n                u8 *ptr = (u8 *) device_param->combs_buf[i].i;\n\n                memcpy (ptr, line_buf_new, line_len);\n\n                memset (ptr + line_len, 0, PW_MAX - line_len);\n\n                if (hashconfig->opts_type & OPTS_TYPE_PT_UPPER)\n                {\n                  uppercase (ptr, line_len);\n                }\n\n                /*\n                if (combinator_ctx->combs_mode == COMBINATOR_MODE_BASE_LEFT)\n                {\n                  if (hashconfig->opts_type & OPTS_TYPE_PT_ADD80)\n                  {\n                    ptr[line_len] = 0x80;\n                  }\n\n                  if (hashconfig->opts_type & OPTS_TYPE_PT_ADD06)\n                  {\n                    ptr[line_len] = 0x06;\n                  }\n\n                  if (hashconfig->opts_type & OPTS_TYPE_PT_ADD01)\n                  {\n                    ptr[line_len] = 0x01;\n                  }\n                }\n                */\n\n                device_param->combs_buf[i].pw_len = (u32) line_len;\n\n                i++;\n              }\n\n              for (u32 j = i; j < innerloop_left; j++)\n              {\n                memset (&device_param->combs_buf[j], 0, sizeof (pw_t));\n              }\n\n              innerloop_left = i;\n\n              const int CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_combs_c, CL_TRUE, 0, innerloop_left * sizeof (pw_t), device_param->combs_buf, 0, NULL, NULL);\n\n              if (CL_rc == -1) return -1;\n            }\n            else if (user_options->attack_mode == ATTACK_MODE_HYBRID1)\n            {\n              u64 off = innerloop_pos;\n\n              device_param->kernel_params_mp_buf64[3] = off;\n\n              int CL_rc;\n\n              CL_rc = run_kernel_mp (hashcat_ctx, device_param, KERN_RUN_MP, innerloop_left);\n\n              if (CL_rc == -1) return -1;\n\n              CL_rc = hc_clEnqueueCopyBuffer (hashcat_ctx, device_param->command_queue, device_param->d_combs, device_param->d_combs_c, 0, 0, innerloop_left * sizeof (pw_t), 0, NULL, NULL);\n\n              if (CL_rc == -1) return -1;\n            }\n          }\n        }\n        else if (user_options_extra->attack_kern == ATTACK_KERN_BF)\n        {\n          u64 off = innerloop_pos;\n\n          device_param->kernel_params_mp_r_buf64[3] = off;\n\n          int CL_rc;\n\n          CL_rc = run_kernel_mp (hashcat_ctx, device_param, KERN_RUN_MP_R, innerloop_left);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clEnqueueCopyBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bfs, device_param->d_bfs_c, 0, 0, innerloop_left * sizeof (bf_t), 0, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n\n      const int rc = choose_kernel (hashcat_ctx, device_param, highest_pw_len, pws_cnt, fast_iteration, salt_pos);\n\n      if (rc == -1) return -1;\n\n      /**\n       * benchmark was aborted because too long kernel runtime (slow hashes only)\n       */\n\n      if ((user_options->speed_only == true) && (device_param->speed_only_finish == true))\n      {\n        // nothing to do in that case\n      }\n      else\n      {\n        /**\n         * speed\n         */\n\n        if (status_ctx->run_thread_level2 == true)\n        {\n          const u64 perf_sum_all = (u64) pws_cnt * innerloop_left;\n\n          const double speed_msec = hc_timer_get (device_param->timer_speed);\n\n          hc_timer_set (&device_param->timer_speed);\n\n          u32 speed_pos = device_param->speed_pos;\n\n          device_param->speed_cnt[speed_pos] = perf_sum_all;\n\n          device_param->speed_msec[speed_pos] = speed_msec;\n\n          speed_pos++;\n\n          if (speed_pos == SPEED_CACHE)\n          {\n            speed_pos = 0;\n          }\n\n          device_param->speed_pos = speed_pos;\n\n          /**\n           * progress\n           */\n\n          hc_thread_mutex_lock (status_ctx->mux_counter);\n\n          status_ctx->words_progress_done[salt_pos] += perf_sum_all;\n\n          hc_thread_mutex_unlock (status_ctx->mux_counter);\n        }\n      }\n\n      /**\n       * benchmark, part2\n       */\n\n      if (user_options->speed_only == true)\n      {\n        // let's abort this so that the user doesn't have to wait too long on the result\n        // for slow hashes it's fine anyway as boost mode should be turned on\n\n        if (hashconfig->attack_exec == ATTACK_EXEC_OUTSIDE_KERNEL)\n        {\n          device_param->speed_only_finish = true;\n\n          break;\n        }\n        else\n        {\n          double total = device_param->speed_msec[0];\n\n          for (u32 speed_pos = 1; speed_pos < device_param->speed_pos; speed_pos++)\n          {\n            total += device_param->speed_msec[speed_pos];\n          }\n\n          // it's unclear if 4s is enough to turn on boost mode for all opencl device\n\n          if ((total > 4000) || (device_param->speed_pos == SPEED_CACHE - 1))\n          {\n            device_param->speed_only_finish = true;\n\n            break;\n          }\n        }\n      }\n\n      if (device_param->speed_only_finish == true) break;\n\n      /**\n       * result\n       */\n\n      check_cracked (hashcat_ctx, device_param, salt_pos);\n\n      if (status_ctx->run_thread_level2 == false) break;\n    }\n\n    if (user_options->speed_only == true) break;\n\n    //status screen makes use of this, can't reset here\n    //device_param->innerloop_msec = 0;\n    //device_param->innerloop_pos  = 0;\n    //device_param->innerloop_left = 0;\n\n    if (status_ctx->run_thread_level2 == false) break;\n  }\n\n  //status screen makes use of this, can't reset here\n  //device_param->outerloop_msec = 0;\n  //device_param->outerloop_pos  = 0;\n  //device_param->outerloop_left = 0;\n\n  if (user_options->speed_only == true)\n  {\n    double total = device_param->speed_msec[0];\n\n    for (u32 speed_pos = 1; speed_pos < device_param->speed_pos; speed_pos++)\n    {\n      total += device_param->speed_msec[speed_pos];\n    }\n\n    device_param->outerloop_msec = total * hashes->salts_cnt * device_param->outerloop_multi;\n  }\n\n  return 0;\n}\n\nint opencl_ctx_init (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t   *opencl_ctx   = hashcat_ctx->opencl_ctx;\n  user_options_t *user_options = hashcat_ctx->user_options;\n\n  opencl_ctx->enabled = false;\n\n  if (user_options->example_hashes == true) return 0;\n  if (user_options->keyspace       == true) return 0;\n  if (user_options->left           == true) return 0;\n  if (user_options->show           == true) return 0;\n  if (user_options->usage          == true) return 0;\n  if (user_options->version        == true) return 0;\n\n  hc_device_param_t *devices_param = (hc_device_param_t *) hccalloc (DEVICES_MAX, sizeof (hc_device_param_t));\n\n  opencl_ctx->devices_param = devices_param;\n\n  /**\n   * Load and map OpenCL library calls\n   */\n\n  OCL_PTR *ocl = (OCL_PTR *) hcmalloc (sizeof (OCL_PTR));\n\n  opencl_ctx->ocl = ocl;\n\n  const int rc_ocl_init = ocl_init (hashcat_ctx);\n\n  if (rc_ocl_init == -1) return -1;\n\n  /**\n   * Some permission pre-check, because AMDGPU-PRO Driver crashes if the user has no permission to do this\n   */\n\n  const int rc_ocl_check = ocl_check_dri (hashcat_ctx);\n\n  if (rc_ocl_check == -1) return -1;\n\n  /**\n   * OpenCL platform selection\n   */\n\n  u32 opencl_platforms_filter;\n\n  const int rc_platforms_filter = setup_opencl_platforms_filter (hashcat_ctx, user_options->opencl_platforms, &opencl_platforms_filter);\n\n  if (rc_platforms_filter == -1) return -1;\n\n  opencl_ctx->opencl_platforms_filter = opencl_platforms_filter;\n\n  /**\n   * OpenCL device selection\n   */\n\n  u32 devices_filter;\n\n  const int rc_devices_filter = setup_devices_filter (hashcat_ctx, user_options->opencl_devices, &devices_filter);\n\n  if (rc_devices_filter == -1) return -1;\n\n  opencl_ctx->devices_filter = devices_filter;\n\n  /**\n   * OpenCL device type selection\n   */\n\n  cl_device_type device_types_filter;\n\n  const int rc_device_types_filter = setup_device_types_filter (hashcat_ctx, user_options->opencl_device_types, &device_types_filter);\n\n  if (rc_device_types_filter == -1) return -1;\n\n  opencl_ctx->device_types_filter = device_types_filter;\n\n  /**\n   * OpenCL platforms: detect\n   */\n\n  char          **platforms_vendor      = (char **) hccalloc (CL_PLATFORMS_MAX, sizeof (char *));\n  char          **platforms_name        = (char **) hccalloc (CL_PLATFORMS_MAX, sizeof (char *));\n  char          **platforms_version     = (char **) hccalloc (CL_PLATFORMS_MAX, sizeof (char *));\n  bool           *platforms_skipped     = (bool *)  hccalloc (CL_PLATFORMS_MAX, sizeof (bool));\n  cl_uint         platforms_cnt         = 0;\n  cl_platform_id *platforms             = (cl_platform_id *) hccalloc (CL_PLATFORMS_MAX, sizeof (cl_platform_id));\n  cl_uint         platform_devices_cnt  = 0;\n  cl_device_id   *platform_devices      = (cl_device_id *) hccalloc (DEVICES_MAX, sizeof (cl_device_id));\n\n  int CL_rc = hc_clGetPlatformIDs (hashcat_ctx, CL_PLATFORMS_MAX, platforms, &platforms_cnt);\n\n  #define FREE_OPENCL_CTX_ON_ERROR \\\n  {                                \\\n      hcfree (platforms_vendor);   \\\n      hcfree (platforms_name);     \\\n      hcfree (platforms_version);  \\\n      hcfree (platforms_skipped);  \\\n      hcfree (platforms);          \\\n      hcfree (platform_devices);   \\\n  }\n\n  if (CL_rc == -1)\n  {\n    FREE_OPENCL_CTX_ON_ERROR;\n\n    return -1;\n  }\n\n  if (platforms_cnt == 0)\n  {\n    event_log_error (hashcat_ctx, \"ATTENTION! No OpenCL-compatible platform found.\");\n\n    event_log_warning (hashcat_ctx, \"You are probably missing the OpenCL runtime installation.\");\n    event_log_warning (hashcat_ctx, NULL);\n\n    #if defined (__linux__)\n    event_log_warning (hashcat_ctx, \"* AMD GPUs on Linux require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"AMDGPU-PRO Driver\\\" (16.40 or later)\");\n    #elif defined (_WIN)\n    event_log_warning (hashcat_ctx, \"* AMD GPUs on Windows require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"AMD Radeon Software Crimson Edition\\\" (15.12 or later)\");\n    #endif\n\n    event_log_warning (hashcat_ctx, \"* Intel CPUs require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"OpenCL Runtime for Intel Core and Intel Xeon Processors\\\" (16.1.1 or later)\");\n\n    #if defined (__linux__)\n    event_log_warning (hashcat_ctx, \"* Intel GPUs on Linux require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"OpenCL 2.0 GPU Driver Package for Linux\\\" (2.0 or later)\");\n    #elif defined (_WIN)\n    event_log_warning (hashcat_ctx, \"* Intel GPUs on Windows require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"OpenCL Driver for Intel Iris and Intel HD Graphics\\\"\");\n    #endif\n\n    event_log_warning (hashcat_ctx, \"* NVIDIA GPUs require this runtime and/or driver:\");\n    event_log_warning (hashcat_ctx, \"  \\\"NVIDIA Driver\\\" (367.x or later)\");\n    event_log_warning (hashcat_ctx, NULL);\n\n    FREE_OPENCL_CTX_ON_ERROR;\n\n    return -1;\n  }\n\n  if (opencl_platforms_filter != (u32) -1)\n  {\n    u32 platform_cnt_mask = ~(((u32) -1 >> platforms_cnt) << platforms_cnt);\n\n    if (opencl_platforms_filter > platform_cnt_mask)\n    {\n      event_log_error (hashcat_ctx, \"An invalid platform was specified using the --opencl-platforms parameter.\");\n      event_log_error (hashcat_ctx, \"The specified platform was higher than the number of available platforms (%u).\", platforms_cnt);\n\n      FREE_OPENCL_CTX_ON_ERROR;\n\n      return -1;\n    }\n  }\n\n  if (user_options->opencl_device_types == NULL)\n  {\n    /**\n     * OpenCL device types:\n     *   In case the user did not specify --opencl-device-types and the user runs hashcat in a system with only a CPU only he probably want to use that CPU.\n     */\n\n    cl_device_type device_types_all = 0;\n\n    for (u32 platform_id = 0; platform_id < platforms_cnt; platform_id++)\n    {\n      if ((opencl_platforms_filter & (1u << platform_id)) == 0) continue;\n\n      cl_platform_id platform = platforms[platform_id];\n\n      CL_rc = hc_clGetDeviceIDs (hashcat_ctx, platform, CL_DEVICE_TYPE_ALL, DEVICES_MAX, platform_devices, &platform_devices_cnt);\n\n      if (CL_rc == -1) continue;\n\n      for (u32 platform_devices_id = 0; platform_devices_id < platform_devices_cnt; platform_devices_id++)\n      {\n        cl_device_id device = platform_devices[platform_devices_id];\n\n        cl_device_type device_type;\n\n        CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device, CL_DEVICE_TYPE, sizeof (device_type), &device_type, NULL);\n\n        if (CL_rc == -1)\n        {\n          FREE_OPENCL_CTX_ON_ERROR;\n\n          return -1;\n        }\n\n        device_types_all |= device_type;\n      }\n    }\n\n    // In such a case, automatically enable cpu_md5CPU device type support, since it's disabled by default.\n\n    if ((device_types_all & (CL_DEVICE_TYPE_GPU | CL_DEVICE_TYPE_ACCELERATOR)) == 0)\n    {\n      device_types_filter |= CL_DEVICE_TYPE_CPU;\n    }\n\n    // In another case, when the user uses --stdout, using CPU devices is much faster to setup\n    // If we have a CPU device, force it to be used\n\n    if (user_options->stdout_flag == true)\n    {\n      if (device_types_all & CL_DEVICE_TYPE_CPU)\n      {\n        device_types_filter = CL_DEVICE_TYPE_CPU;\n      }\n    }\n\n    opencl_ctx->device_types_filter = device_types_filter;\n  }\n\n  opencl_ctx->enabled = true;\n\n  opencl_ctx->platforms_vendor      = platforms_vendor;\n  opencl_ctx->platforms_name        = platforms_name;\n  opencl_ctx->platforms_version     = platforms_version;\n  opencl_ctx->platforms_skipped     = platforms_skipped;\n  opencl_ctx->platforms_cnt         = platforms_cnt;\n  opencl_ctx->platforms             = platforms;\n  opencl_ctx->platform_devices_cnt  = platform_devices_cnt;\n  opencl_ctx->platform_devices      = platform_devices;\n\n  return 0;\n}\n\nvoid opencl_ctx_destroy (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (opencl_ctx->enabled == false) return;\n\n  ocl_close (hashcat_ctx);\n\n  hcfree (opencl_ctx->devices_param);\n\n  hcfree (opencl_ctx->platforms);\n  hcfree (opencl_ctx->platform_devices);\n  hcfree (opencl_ctx->platforms_vendor);\n  hcfree (opencl_ctx->platforms_name);\n  hcfree (opencl_ctx->platforms_version);\n  hcfree (opencl_ctx->platforms_skipped);\n\n  memset (opencl_ctx, 0, sizeof (opencl_ctx_t));\n}\n\nint opencl_ctx_devices_init (hashcat_ctx_t *hashcat_ctx, const int comptime)\n{\n  opencl_ctx_t   *opencl_ctx   = hashcat_ctx->opencl_ctx;\n  user_options_t *user_options = hashcat_ctx->user_options;\n\n  if (opencl_ctx->enabled == false) return 0;\n\n  /**\n   * OpenCL devices: simply push all devices from all platforms into the same device array\n   */\n\n  cl_uint         platforms_cnt         = opencl_ctx->platforms_cnt;\n  cl_platform_id *platforms             = opencl_ctx->platforms;\n  cl_uint         platform_devices_cnt  = opencl_ctx->platform_devices_cnt;\n  cl_device_id   *platform_devices      = opencl_ctx->platform_devices;\n\n  bool need_adl     = false;\n  bool need_nvml    = false;\n  bool need_nvapi   = false;\n  bool need_sysfs   = false;\n\n  u32 devices_cnt = 0;\n\n  u32 devices_active = 0;\n\n  for (u32 platform_id = 0; platform_id < platforms_cnt; platform_id++)\n  {\n    size_t param_value_size = 0;\n\n    cl_platform_id platform = platforms[platform_id];\n\n    // platform vendor\n\n    int CL_rc;\n\n    CL_rc = hc_clGetPlatformInfo (hashcat_ctx, platform, CL_PLATFORM_VENDOR, 0, NULL, &param_value_size);\n\n    if (CL_rc == -1) return -1;\n\n    char *platform_vendor = (char *) hcmalloc (param_value_size);\n\n    CL_rc = hc_clGetPlatformInfo (hashcat_ctx, platform, CL_PLATFORM_VENDOR, param_value_size, platform_vendor, NULL);\n\n    if (CL_rc == -1) return -1;\n\n    opencl_ctx->platforms_vendor[platform_id] = platform_vendor;\n\n    // platform name\n\n    CL_rc = hc_clGetPlatformInfo (hashcat_ctx, platform, CL_PLATFORM_NAME, 0, NULL, &param_value_size);\n\n    if (CL_rc == -1) return -1;\n\n    char *platform_name = (char *) hcmalloc (param_value_size);\n\n    CL_rc = hc_clGetPlatformInfo (hashcat_ctx, platform, CL_PLATFORM_NAME, param_value_size, platform_name, NULL);\n\n    if (CL_rc == -1) return -1;\n\n    opencl_ctx->platforms_name[platform_id] = platform_name;\n\n    // platform version\n\n    CL_rc = hc_clGetPlatformInfo (hashcat_ctx, platform, CL_PLATFORM_VERSION, 0, NULL, &param_value_size);\n\n    if (CL_rc == -1) return -1;\n\n    char *platform_version = (char *) hcmalloc (param_value_size);\n\n    CL_rc = hc_clGetPlatformInfo (hashcat_ctx, platform, CL_PLATFORM_VERSION, param_value_size, platform_version, NULL);\n\n    if (CL_rc == -1) return -1;\n\n    opencl_ctx->platforms_version[platform_id] = platform_version;\n\n    // find our own platform vendor because pocl and mesa are pushing original vendor_id through opencl\n    // this causes trouble with vendor id based macros\n    // we'll assign generic to those without special optimization available\n\n    cl_uint platform_vendor_id = 0;\n\n    if (strcmp (platform_vendor, CL_VENDOR_AMD1) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_AMD;\n    }\n    else if (strcmp (platform_vendor, CL_VENDOR_AMD2) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_AMD;\n    }\n    else if (strcmp (platform_vendor, CL_VENDOR_AMD_USE_INTEL) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_AMD_USE_INTEL;\n    }\n    else if (strcmp (platform_vendor, CL_VENDOR_APPLE) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_APPLE;\n    }\n    else if (strcmp (platform_vendor, CL_VENDOR_INTEL_BEIGNET) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_INTEL_BEIGNET;\n    }\n    else if (strcmp (platform_vendor, CL_VENDOR_INTEL_SDK) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_INTEL_SDK;\n    }\n    else if (strcmp (platform_vendor, CL_VENDOR_MESA) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_MESA;\n    }\n    else if (strcmp (platform_vendor, CL_VENDOR_NV) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_NV;\n    }\n    else if (strcmp (platform_vendor, CL_VENDOR_POCL) == 0)\n    {\n      platform_vendor_id = VENDOR_ID_POCL;\n    }\n    else\n    {\n      platform_vendor_id = VENDOR_ID_GENERIC;\n    }\n\n    bool platform_skipped = ((opencl_ctx->opencl_platforms_filter & (1u << platform_id)) == 0);\n\n    CL_rc = hc_clGetDeviceIDs (hashcat_ctx, platform, CL_DEVICE_TYPE_ALL, DEVICES_MAX, platform_devices, &platform_devices_cnt);\n\n    if (CL_rc == -1)\n    {\n      //event_log_error (hashcat_ctx, \"clGetDeviceIDs(): %s\", val2cstr_cl (CL_rc));\n\n      //return -1;\n\n      platform_skipped = true;\n    }\n\n    opencl_ctx->platforms_skipped[platform_id] = platform_skipped;\n\n    if (platform_skipped == true) continue;\n\n    if (user_options->force == false)\n    {\n      if (platform_vendor_id == VENDOR_ID_MESA)\n      {\n        event_log_error (hashcat_ctx, \"Mesa (Gallium) OpenCL platform detected!\");\n\n        event_log_warning (hashcat_ctx, \"The Mesa platform can cause errors that are often mistaken for bugs in hashcat.\");\n        event_log_warning (hashcat_ctx, \"You are STRONGLY encouraged to use the drivers listed in docs/readme.txt.\");\n        event_log_warning (hashcat_ctx, \"You can use --force to override this, but do not report related errors.\");\n        event_log_warning (hashcat_ctx, \"You can also use --opencl-platforms to skip the Mesa platform(s).\");\n        event_log_warning (hashcat_ctx, NULL);\n\n        return -1;\n      }\n    }\n\n    hc_device_param_t *devices_param = opencl_ctx->devices_param;\n\n    for (u32 platform_devices_id = 0; platform_devices_id < platform_devices_cnt; platform_devices_id++)\n    {\n      const u32 device_id = devices_cnt;\n\n      hc_device_param_t *device_param = &devices_param[device_id];\n\n      device_param->platform_vendor_id = platform_vendor_id;\n\n      device_param->device = platform_devices[platform_devices_id];\n\n      device_param->device_id = device_id;\n\n      device_param->platform_devices_id = platform_devices_id;\n\n      device_param->platform = platform;\n\n      // device_type\n\n      cl_device_type device_type;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_TYPE, sizeof (device_type), &device_type, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_type &= ~CL_DEVICE_TYPE_DEFAULT;\n\n      device_param->device_type = device_type;\n\n      // device_name\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_NAME, 0, NULL, &param_value_size);\n\n      if (CL_rc == -1) return -1;\n\n      char *device_name = (char *) hcmalloc (param_value_size);\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_NAME, param_value_size, device_name, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_name = device_name;\n\n      hc_string_trim_leading (device_param->device_name);\n\n      hc_string_trim_trailing (device_param->device_name);\n\n      // device_vendor\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_VENDOR, 0, NULL, &param_value_size);\n\n      if (CL_rc == -1) return -1;\n\n      char *device_vendor = (char *) hcmalloc (param_value_size);\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_VENDOR, param_value_size, device_vendor, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_vendor = device_vendor;\n\n      cl_uint device_vendor_id = 0;\n\n      if (strcmp (device_vendor, CL_VENDOR_AMD1) == 0)\n      {\n        device_vendor_id = VENDOR_ID_AMD;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_AMD2) == 0)\n      {\n        device_vendor_id = VENDOR_ID_AMD;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_AMD_USE_INTEL) == 0)\n      {\n        device_vendor_id = VENDOR_ID_AMD_USE_INTEL;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_APPLE) == 0)\n      {\n        device_vendor_id = VENDOR_ID_APPLE;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_APPLE_USE_AMD) == 0)\n      {\n        device_vendor_id = VENDOR_ID_AMD;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_APPLE_USE_NV) == 0)\n      {\n        device_vendor_id = VENDOR_ID_NV;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_INTEL_BEIGNET) == 0)\n      {\n        device_vendor_id = VENDOR_ID_INTEL_BEIGNET;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_INTEL_SDK) == 0)\n      {\n        device_vendor_id = VENDOR_ID_INTEL_SDK;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_MESA) == 0)\n      {\n        device_vendor_id = VENDOR_ID_MESA;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_NV) == 0)\n      {\n        device_vendor_id = VENDOR_ID_NV;\n      }\n      else if (strcmp (device_vendor, CL_VENDOR_POCL) == 0)\n      {\n        device_vendor_id = VENDOR_ID_POCL;\n      }\n      else\n      {\n        device_vendor_id = VENDOR_ID_GENERIC;\n      }\n\n      device_param->device_vendor_id = device_vendor_id;\n\n      // device_version\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_VERSION, 0, NULL, &param_value_size);\n\n      if (CL_rc == -1) return -1;\n\n      char *device_version = (char *) hcmalloc (param_value_size);\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_VERSION, param_value_size, device_version, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_version = device_version;\n\n      // device_opencl_version\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_OPENCL_C_VERSION, 0, NULL, &param_value_size);\n\n      if (CL_rc == -1) return -1;\n\n      char *device_opencl_version = (char *) hcmalloc (param_value_size);\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_OPENCL_C_VERSION, param_value_size, device_opencl_version, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_opencl_version = device_opencl_version;\n\n      // max_compute_units\n\n      cl_uint device_processors;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_MAX_COMPUTE_UNITS, sizeof (device_processors), &device_processors, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_processors = device_processors;\n\n      // device_global_mem\n\n      cl_ulong device_global_mem;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_GLOBAL_MEM_SIZE, sizeof (device_global_mem), &device_global_mem, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_global_mem = device_global_mem;\n\n      device_param->device_available_mem = 0;\n\n      // device_maxmem_alloc\n\n      cl_ulong device_maxmem_alloc;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_MAX_MEM_ALLOC_SIZE, sizeof (device_maxmem_alloc), &device_maxmem_alloc, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_maxmem_alloc = device_maxmem_alloc;\n\n      // note we'll limit to 2gb, otherwise this causes all kinds of weird errors because of possible integer overflows in opencl runtimes\n      // testwise disabling that\n      //device_param->device_maxmem_alloc = MIN (device_maxmem_alloc, 0x7fffffff);\n\n      // max_work_group_size\n\n      size_t device_maxworkgroup_size;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof (device_maxworkgroup_size), &device_maxworkgroup_size, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_maxworkgroup_size = device_maxworkgroup_size;\n\n      // max_clock_frequency\n\n      cl_uint device_maxclock_frequency;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_MAX_CLOCK_FREQUENCY, sizeof (device_maxclock_frequency), &device_maxclock_frequency, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->device_maxclock_frequency = device_maxclock_frequency;\n\n      // device_endian_little\n\n      cl_bool device_endian_little;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_ENDIAN_LITTLE, sizeof (device_endian_little), &device_endian_little, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      if (device_endian_little == CL_FALSE)\n      {\n        event_log_error (hashcat_ctx, \"* Device #%u: This device is not little-endian.\", device_id + 1);\n\n        device_param->skipped = true;\n      }\n\n      // device_available\n\n      cl_bool device_available;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_AVAILABLE, sizeof (device_available), &device_available, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      if (device_available == CL_FALSE)\n      {\n        event_log_error (hashcat_ctx, \"* Device #%u: This device is not available.\", device_id + 1);\n\n        device_param->skipped = true;\n      }\n\n      // device_compiler_available\n\n      cl_bool device_compiler_available;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_COMPILER_AVAILABLE, sizeof (device_compiler_available), &device_compiler_available, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      if (device_compiler_available == CL_FALSE)\n      {\n        event_log_error (hashcat_ctx, \"* Device #%u: No compiler is available for this device.\", device_id + 1);\n\n        device_param->skipped = true;\n      }\n\n      // device_execution_capabilities\n\n      cl_device_exec_capabilities device_execution_capabilities;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_EXECUTION_CAPABILITIES, sizeof (device_execution_capabilities), &device_execution_capabilities, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      if ((device_execution_capabilities & CL_EXEC_KERNEL) == 0)\n      {\n        event_log_error (hashcat_ctx, \"* Device #%u: This device does not support executing kernels.\", device_id + 1);\n\n        device_param->skipped = true;\n      }\n\n      // device_extensions\n\n      size_t device_extensions_size;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_EXTENSIONS, 0, NULL, &device_extensions_size);\n\n      if (CL_rc == -1) return -1;\n\n      char *device_extensions = hcmalloc (device_extensions_size + 1);\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_EXTENSIONS, device_extensions_size, device_extensions, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      if (strstr (device_extensions, \"base_atomics\") == 0)\n      {\n        event_log_error (hashcat_ctx, \"* Device #%u: This device does not support base atomics.\", device_id + 1);\n\n        device_param->skipped = true;\n      }\n\n      if (strstr (device_extensions, \"byte_addressable_store\") == 0)\n      {\n        event_log_error (hashcat_ctx, \"* Device #%u: This device does not support byte-addressable store.\", device_id + 1);\n\n        device_param->skipped = true;\n      }\n\n      hcfree (device_extensions);\n\n      // device_max_constant_buffer_size\n\n      cl_ulong device_max_constant_buffer_size;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE, sizeof (device_max_constant_buffer_size), &device_max_constant_buffer_size, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      if (device_max_constant_buffer_size < 65536)\n      {\n        event_log_error (hashcat_ctx, \"* Device #%u: This device's constant buffer size is too small.\", device_id + 1);\n\n        device_param->skipped = true;\n      }\n\n      // device_local_mem_size\n\n      cl_ulong device_local_mem_size;\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_LOCAL_MEM_SIZE, sizeof (device_local_mem_size), &device_local_mem_size, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      if (device_local_mem_size < 32768)\n      {\n        event_log_error (hashcat_ctx, \"* Device #%u: This device's local mem size is too small.\", device_id + 1);\n\n        device_param->skipped = true;\n      }\n\n      device_param->device_local_mem_size = device_local_mem_size;\n\n      // If there's both an Intel CPU and an AMD OpenCL runtime it's a tricky situation\n      // Both platforms support CPU device types and therefore both will try to use 100% of the physical resources\n      // This results in both utilizing it for 50%\n      // However, Intel has much better SIMD control over their own hardware\n      // It makes sense to give them full control over their own hardware\n\n      if (device_type & CL_DEVICE_TYPE_CPU)\n      {\n        if (device_param->device_vendor_id == VENDOR_ID_AMD_USE_INTEL)\n        {\n          if (user_options->force == false)\n          {\n            if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"* Device #%u: Not a native Intel OpenCL runtime. Expect massive speed loss.\", device_id + 1);\n            if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"             You can use --force to override, but do not report related errors.\");\n\n            device_param->skipped = true;\n          }\n        }\n      }\n\n      // Since some times we get reports from users about not working hashcat, dropping error messages like:\n      // CL_INVALID_COMMAND_QUEUE and CL_OUT_OF_RESOURCES\n      // Turns out that this is caused by Intel OpenCL runtime handling their GPU devices\n      // Disable such devices unless the user forces to use it\n\n      #if !defined (__APPLE__)\n      if (device_type & CL_DEVICE_TYPE_GPU)\n      {\n        if ((device_param->device_vendor_id == VENDOR_ID_INTEL_SDK) || (device_param->device_vendor_id == VENDOR_ID_INTEL_BEIGNET))\n        {\n          if (user_options->force == false)\n          {\n            if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"* Device #%u: Intel's OpenCL runtime (GPU only) is currently broken.\", device_id + 1);\n            if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"             We are waiting for updated OpenCL drivers from Intel.\");\n            if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"             You can use --force to override, but do not report related errors.\");\n\n            device_param->skipped = true;\n          }\n        }\n      }\n      #endif // __APPLE__\n\n      // skipped\n\n      if ((opencl_ctx->devices_filter & (1u << device_id)) == 0)\n      {\n        device_param->skipped = true;\n      }\n\n      if ((opencl_ctx->device_types_filter & (device_type)) == 0)\n      {\n        device_param->skipped = true;\n      }\n\n      // driver_version\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DRIVER_VERSION, 0, NULL, &param_value_size);\n\n      if (CL_rc == -1) return -1;\n\n      char *driver_version = (char *) hcmalloc (param_value_size);\n\n      CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DRIVER_VERSION, param_value_size, driver_version, NULL);\n\n      if (CL_rc == -1) return -1;\n\n      device_param->driver_version = driver_version;\n\n      // vendor specific\n\n      if (device_param->device_type & CL_DEVICE_TYPE_GPU)\n      {\n        if ((device_param->platform_vendor_id == VENDOR_ID_AMD) && (device_param->device_vendor_id == VENDOR_ID_AMD))\n        {\n          need_adl = true;\n\n          #if defined (__linux__)\n          need_sysfs = true;\n          #endif\n        }\n\n        if ((device_param->platform_vendor_id == VENDOR_ID_NV) && (device_param->device_vendor_id == VENDOR_ID_NV))\n        {\n          need_nvml = true;\n\n          #if defined (_WIN) || defined (__CYGWIN__)\n          need_nvapi = true;\n          #endif\n        }\n      }\n\n      if (device_param->device_type & CL_DEVICE_TYPE_GPU)\n      {\n        if ((device_param->platform_vendor_id == VENDOR_ID_AMD) && (device_param->device_vendor_id == VENDOR_ID_AMD))\n        {\n          cl_device_topology_amd amdtopo;\n\n          CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_TOPOLOGY_AMD, sizeof (amdtopo), &amdtopo, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          device_param->pcie_bus      = amdtopo.pcie.bus;\n          device_param->pcie_device   = amdtopo.pcie.device;\n          device_param->pcie_function = amdtopo.pcie.function;\n\n          #if defined (__linux__)\n\n          // check for AMD ROCm driver (only available on linux)\n\n          const char *t1 = strstr (device_param->driver_version, \"HSA\");\n          const char *t2 = strstr (device_param->driver_version, \"LC\");\n          const char *t3 = strstr (device_param->driver_version, \"PAL\");\n\n          if ((t1 == NULL) && (t2 == NULL) && (t3 == NULL))\n          {\n            device_param->is_rocm = false;\n          }\n          else\n          {\n            device_param->is_rocm = true;\n          }\n\n          #else\n\n          device_param->is_rocm = false;\n\n          #endif\n        }\n\n        if ((device_param->platform_vendor_id == VENDOR_ID_NV) && (device_param->device_vendor_id == VENDOR_ID_NV))\n        {\n          cl_uint pci_bus_id_nv;  // is cl_uint the right type for them??\n          cl_uint pci_slot_id_nv;\n\n          CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_PCI_BUS_ID_NV, sizeof (pci_bus_id_nv), &pci_bus_id_nv, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_PCI_SLOT_ID_NV, sizeof (pci_slot_id_nv), &pci_slot_id_nv, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          device_param->pcie_bus      = (u8) (pci_bus_id_nv);\n          device_param->pcie_device   = (u8) (pci_slot_id_nv >> 3);\n          device_param->pcie_function = (u8) (pci_slot_id_nv & 7);\n\n          cl_uint sm_minor = 0;\n          cl_uint sm_major = 0;\n\n          CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV, sizeof (sm_minor), &sm_minor, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV, sizeof (sm_major), &sm_major, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          device_param->sm_minor = sm_minor;\n          device_param->sm_major = sm_major;\n\n          cl_uint kernel_exec_timeout = 0;\n\n          CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV, sizeof (kernel_exec_timeout), &kernel_exec_timeout, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          device_param->kernel_exec_timeout = kernel_exec_timeout;\n\n          // CPU burning loop damper\n          // Value is given as number between 0-100\n          // By default 100%\n\n          device_param->nvidia_spin_damp = (double) user_options->nvidia_spin_damp;\n\n          if (user_options->nvidia_spin_damp_chgd == false)\n          {\n            if (user_options->attack_mode == ATTACK_MODE_STRAIGHT)\n            {\n              /**\n               * the workaround is not a friend of rule based attacks\n               * the words from the wordlist combined with fast and slow rules cause\n               * fluctuations which cause inaccurate wait time estimations\n               * using a reduced damping percentage almost compensates this\n               */\n\n              device_param->nvidia_spin_damp = 64;\n            }\n          }\n\n          device_param->nvidia_spin_damp /= 100;\n        }\n      }\n\n      // common driver check\n\n      if (device_param->skipped == false)\n      {\n        if ((user_options->force == false) && (user_options->opencl_info == false))\n        {\n          if (device_type & CL_DEVICE_TYPE_CPU)\n          {\n            if (device_param->platform_vendor_id == VENDOR_ID_INTEL_SDK)\n            {\n              bool intel_warn = false;\n\n              // Intel OpenCL runtime 18\n\n              int opencl_driver1 = 0;\n              int opencl_driver2 = 0;\n              int opencl_driver3 = 0;\n              int opencl_driver4 = 0;\n\n              const int res18 = sscanf (device_param->driver_version, \"%u.%u.%u.%u\", &opencl_driver1, &opencl_driver2, &opencl_driver3, &opencl_driver4);\n\n              if (res18 == 4)\n              {\n                // so far all versions 18 are ok\n              }\n              else\n              {\n                // Intel OpenCL runtime 16\n\n                float opencl_version = 0;\n                int   opencl_build   = 0;\n\n                const int res16 = sscanf (device_param->device_version, \"OpenCL %f (Build %d)\", &opencl_version, &opencl_build);\n\n                if (res16 == 2)\n                {\n                  if (opencl_build < 25) intel_warn = true;\n                }\n              }\n\n              if (intel_warn == true)\n              {\n                event_log_error (hashcat_ctx, \"* Device #%u: Outdated or broken Intel OpenCL runtime detected!\", device_id + 1);\n\n                event_log_warning (hashcat_ctx, \"You are STRONGLY encouraged to use the officially supported NVIDIA driver.\");\n                event_log_warning (hashcat_ctx, \"See hashcat.net for officially supported NVIDIA drivers.\");\n                event_log_warning (hashcat_ctx, \"See also: https://hashcat.net/faq/wrongdriver\");\n                event_log_warning (hashcat_ctx, \"You can use --force to override this, but do not report related errors.\");\n                event_log_warning (hashcat_ctx, NULL);\n\n                return -1;\n              }\n            }\n          }\n          else if (device_type & CL_DEVICE_TYPE_GPU)\n          {\n            if (device_param->platform_vendor_id == VENDOR_ID_AMD)\n            {\n              bool amd_warn = true;\n\n              #if defined (__linux__)\n              if (device_param->is_rocm == false)\n              {\n                // ROCm is so much better, we should give the user some hint and remove this block\n\n                // AMDGPU-PRO Driver 16.40 and higher\n                if (strtoul (device_param->driver_version, NULL, 10) >= 2117) amd_warn = false;\n                // AMDGPU-PRO Driver 16.50 is known to be broken\n                if (strtoul (device_param->driver_version, NULL, 10) == 2236) amd_warn = true;\n                // AMDGPU-PRO Driver 16.60 is known to be broken\n                if (strtoul (device_param->driver_version, NULL, 10) == 2264) amd_warn = true;\n                // AMDGPU-PRO Driver 17.10 is known to be broken\n                if (strtoul (device_param->driver_version, NULL, 10) == 2348) amd_warn = true;\n                // AMDGPU-PRO Driver 17.20 (2416) is fine, doesn't need check will match >= 2117\n              }\n              else\n              {\n                // Support for ROCm platform\n                if (strtof (device_param->driver_version, NULL) >= 1.1f) amd_warn = false;\n              }\n              #elif defined (_WIN)\n              // AMD Radeon Software 14.9 and higher, should be updated to 15.12\n              if (strtoul (device_param->driver_version, NULL, 10) >= 1573) amd_warn = false;\n              #else\n              // we have no information about other os\n              if (amd_warn == true) amd_warn = false;\n              #endif\n\n              if (amd_warn == true)\n              {\n                event_log_error (hashcat_ctx, \"* Device #%u: Outdated or broken AMD driver detected!\", device_id + 1);\n\n                event_log_warning (hashcat_ctx, \"You are STRONGLY encouraged to use the officially supported AMD driver.\");\n                event_log_warning (hashcat_ctx, \"See hashcat.net for officially supported AMD drivers.\");\n                event_log_warning (hashcat_ctx, \"See also: https://hashcat.net/faq/wrongdriver\");\n                event_log_warning (hashcat_ctx, \"You can use --force to override this, but do not report related errors.\");\n                event_log_warning (hashcat_ctx, NULL);\n\n                return -1;\n              }\n            }\n\n            if (device_param->platform_vendor_id == VENDOR_ID_NV)\n            {\n              int nv_warn = true;\n\n              // nvidia driver 367.x and higher\n              if (strtoul (device_param->driver_version, NULL, 10) >= 367) nv_warn = false;\n\n              if (nv_warn == true)\n              {\n                event_log_error (hashcat_ctx, \"* Device #%u: Outdated or broken NVIDIA driver detected!\", device_id + 1);\n\n                event_log_warning (hashcat_ctx, \"You are STRONGLY encouraged to use the officially supported NVIDIA driver.\");\n                event_log_warning (hashcat_ctx, \"See hashcat's homepage for officially supported NVIDIA drivers.\");\n                event_log_warning (hashcat_ctx, \"See also: https://hashcat.net/faq/wrongdriver\");\n                event_log_warning (hashcat_ctx, \"You can use --force to override this, but do not report related errors.\");\n                event_log_warning (hashcat_ctx, NULL);\n\n                return -1;\n              }\n\n              if (device_param->sm_major < 5)\n              {\n                if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"* Device #%u: This hardware has outdated CUDA compute capability (%u.%u).\", device_id + 1, device_param->sm_major, device_param->sm_minor);\n                if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"             For modern OpenCL performance, upgrade to hardware that supports\");\n                if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"             CUDA compute capability version 5.0 (Maxwell) or higher.\");\n              }\n\n              if (device_param->kernel_exec_timeout != 0)\n              {\n                if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"* Device #%u: WARNING! Kernel exec timeout is not disabled.\", device_id + 1);\n                if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"             This may cause \\\"CL_OUT_OF_RESOURCES\\\" or related errors.\");\n                if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"             To disable the timeout, see: https://hashcat.net/q/timeoutpatch\");\n              }\n            }\n\n            if ((strstr (device_param->device_opencl_version, \"beignet\")) || (strstr (device_param->device_version, \"beignet\")))\n            {\n              event_log_error (hashcat_ctx, \"* Device #%u: Intel beignet driver detected!\", device_id + 1);\n\n              event_log_warning (hashcat_ctx, \"The beignet driver has been marked as likely to fail kernel compilation.\");\n              event_log_warning (hashcat_ctx, \"You can use --force to override this, but do not report related errors.\");\n              event_log_warning (hashcat_ctx, NULL);\n\n              return -1;\n            }\n          }\n        }\n\n        /**\n         * activate device\n         */\n\n        devices_active++;\n      }\n\n      // next please\n\n      devices_cnt++;\n    }\n  }\n\n  if (devices_active == 0)\n  {\n    event_log_error (hashcat_ctx, \"No devices found/left.\");\n\n    return -1;\n  }\n\n  // additional check to see if the user has chosen a device that is not within the range of available devices (i.e. larger than devices_cnt)\n\n  if (opencl_ctx->devices_filter != (u32) -1)\n  {\n    const u32 devices_cnt_mask = ~(((u32) -1 >> devices_cnt) << devices_cnt);\n\n    if (opencl_ctx->devices_filter > devices_cnt_mask)\n    {\n      event_log_error (hashcat_ctx, \"An invalid device was specified using the --opencl-devices parameter.\");\n      event_log_error (hashcat_ctx, \"The specified device was higher than the number of available devices (%u).\", devices_cnt);\n\n      return -1;\n    }\n  }\n\n  opencl_ctx->target_msec     = TARGET_MSEC_PROFILE[user_options->workload_profile - 1];\n\n  opencl_ctx->devices_cnt     = devices_cnt;\n  opencl_ctx->devices_active  = devices_active;\n\n  opencl_ctx->need_adl        = need_adl;\n  opencl_ctx->need_nvml       = need_nvml;\n  opencl_ctx->need_nvapi      = need_nvapi;\n  opencl_ctx->need_sysfs      = need_sysfs;\n\n  opencl_ctx->comptime        = comptime;\n\n  return 0;\n}\n\nvoid opencl_ctx_devices_destroy (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (opencl_ctx->enabled == false) return;\n\n  for (u32 platform_id = 0; platform_id < opencl_ctx->platforms_cnt; platform_id++)\n  {\n    hcfree (opencl_ctx->platforms_vendor[platform_id]);\n    hcfree (opencl_ctx->platforms_name[platform_id]);\n    hcfree (opencl_ctx->platforms_version[platform_id]);\n  }\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    hcfree (device_param->device_name);\n    hcfree (device_param->device_version);\n    hcfree (device_param->driver_version);\n    hcfree (device_param->device_opencl_version);\n    hcfree (device_param->device_vendor);\n  }\n\n  opencl_ctx->devices_cnt    = 0;\n  opencl_ctx->devices_active = 0;\n\n  opencl_ctx->need_adl    = false;\n  opencl_ctx->need_nvml   = false;\n  opencl_ctx->need_nvapi  = false;\n  opencl_ctx->need_sysfs  = false;\n}\n\nstatic bool is_same_device_type (const hc_device_param_t *src, const hc_device_param_t *dst)\n{\n  if (strcmp (src->device_name,    dst->device_name)    != 0) return false;\n  if (strcmp (src->device_vendor,  dst->device_vendor)  != 0) return false;\n  if (strcmp (src->device_version, dst->device_version) != 0) return false;\n  if (strcmp (src->driver_version, dst->driver_version) != 0) return false;\n\n  if (src->device_processors         != dst->device_processors)         return false;\n  if (src->device_maxclock_frequency != dst->device_maxclock_frequency) return false;\n  if (src->device_maxworkgroup_size  != dst->device_maxworkgroup_size)  return false;\n\n  // memory size can be different, depending on which gpu has a monitor connected\n  // if (src->device_maxmem_alloc       != dst->device_maxmem_alloc)       return false;\n  // if (src->device_global_mem         != dst->device_global_mem)         return false;\n\n  if (src->sm_major != dst->sm_major) return false;\n  if (src->sm_minor != dst->sm_minor) return false;\n\n  if (src->kernel_exec_timeout != dst->kernel_exec_timeout) return false;\n\n  return true;\n}\n\nvoid opencl_ctx_devices_sync_tuning (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (opencl_ctx->enabled == false) return;\n\n  for (u32 device_id_src = 0; device_id_src < opencl_ctx->devices_cnt; device_id_src++)\n  {\n    hc_device_param_t *device_param_src = &opencl_ctx->devices_param[device_id_src];\n\n    if (device_param_src->skipped == true) continue;\n\n    for (u32 device_id_dst = device_id_src; device_id_dst < opencl_ctx->devices_cnt; device_id_dst++)\n    {\n      hc_device_param_t *device_param_dst = &opencl_ctx->devices_param[device_id_dst];\n\n      if (device_param_dst->skipped == true) continue;\n\n      if (is_same_device_type (device_param_src, device_param_dst) == false) continue;\n\n      device_param_dst->kernel_accel = device_param_src->kernel_accel;\n      device_param_dst->kernel_loops = device_param_src->kernel_loops;\n\n      const u32 kernel_power = device_param_dst->hardware_power * device_param_dst->kernel_accel;\n\n      device_param_dst->kernel_power = kernel_power;\n    }\n  }\n}\n\nvoid opencl_ctx_devices_update_power (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t         *opencl_ctx          = hashcat_ctx->opencl_ctx;\n  status_ctx_t         *status_ctx          = hashcat_ctx->status_ctx;\n  user_options_extra_t *user_options_extra  = hashcat_ctx->user_options_extra;\n  user_options_t       *user_options        = hashcat_ctx->user_options;\n\n  if (opencl_ctx->enabled == false) return;\n\n  u32 kernel_power_all = 0;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    kernel_power_all += device_param->kernel_power;\n  }\n\n  opencl_ctx->kernel_power_all = kernel_power_all;\n\n  /*\n   * Inform user about possible slow speeds\n   */\n\n  if ((user_options_extra->wordlist_mode == WL_MODE_FILE) || (user_options_extra->wordlist_mode == WL_MODE_MASK))\n  {\n    if (status_ctx->words_base < kernel_power_all)\n    {\n      if (user_options->quiet == false)\n      {\n        event_log_advice (hashcat_ctx, \"The wordlist or mask that you are using is too small.\");\n        event_log_advice (hashcat_ctx, \"This means that hashcat cannot use the full parallel power of your device(s).\");\n        event_log_advice (hashcat_ctx, \"Unless you supply more work, your cracking speed will drop.\");\n        event_log_advice (hashcat_ctx, \"For tips on supplying more work, see: https://hashcat.net/faq/morework\");\n        event_log_advice (hashcat_ctx, NULL);\n      }\n    }\n  }\n}\n\nvoid opencl_ctx_devices_kernel_loops (hashcat_ctx_t *hashcat_ctx)\n{\n  combinator_ctx_t     *combinator_ctx      = hashcat_ctx->combinator_ctx;\n  hashconfig_t         *hashconfig          = hashcat_ctx->hashconfig;\n  hashes_t             *hashes              = hashcat_ctx->hashes;\n  mask_ctx_t           *mask_ctx            = hashcat_ctx->mask_ctx;\n  opencl_ctx_t         *opencl_ctx          = hashcat_ctx->opencl_ctx;\n  straight_ctx_t       *straight_ctx        = hashcat_ctx->straight_ctx;\n  user_options_t       *user_options        = hashcat_ctx->user_options;\n  user_options_extra_t *user_options_extra  = hashcat_ctx->user_options_extra;\n\n  if (opencl_ctx->enabled == false) return;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    device_param->kernel_loops_min = device_param->kernel_loops_min_sav;\n    device_param->kernel_loops_max = device_param->kernel_loops_max_sav;\n\n    if (device_param->kernel_loops_min < device_param->kernel_loops_max)\n    {\n      u32 innerloop_cnt = 0;\n\n      if (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n      {\n        if (user_options->slow_candidates == true)\n        {\n          innerloop_cnt = 1;\n        }\n        else\n        {\n          if      (user_options_extra->attack_kern == ATTACK_KERN_STRAIGHT)  innerloop_cnt = MIN (KERNEL_RULES, (u32) straight_ctx->kernel_rules_cnt);\n          else if (user_options_extra->attack_kern == ATTACK_KERN_COMBI)     innerloop_cnt = MIN (KERNEL_COMBS, (u32) combinator_ctx->combs_cnt);\n          else if (user_options_extra->attack_kern == ATTACK_KERN_BF)        innerloop_cnt = MIN (KERNEL_BFS,   (u32) mask_ctx->bfs_cnt);\n        }\n      }\n      else\n      {\n        innerloop_cnt = hashes->salts_buf[0].salt_iter;\n      }\n\n      if ((innerloop_cnt >= device_param->kernel_loops_min) &&\n          (innerloop_cnt <= device_param->kernel_loops_max))\n      {\n        device_param->kernel_loops_max = innerloop_cnt;\n      }\n    }\n  }\n}\n\nstatic int get_kernel_wgs (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, cl_kernel kernel, u32 *result)\n{\n  int CL_rc;\n\n  size_t work_group_size;\n\n  CL_rc = hc_clGetKernelWorkGroupInfo (hashcat_ctx, kernel, device_param->device, CL_KERNEL_WORK_GROUP_SIZE, sizeof (work_group_size), &work_group_size, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  u32 kernel_threads = (u32) work_group_size;\n\n  size_t compile_work_group_size[3];\n\n  CL_rc = hc_clGetKernelWorkGroupInfo (hashcat_ctx, kernel, device_param->device, CL_KERNEL_COMPILE_WORK_GROUP_SIZE, sizeof (compile_work_group_size), &compile_work_group_size, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  const size_t cwgs_total = compile_work_group_size[0] * compile_work_group_size[1] * compile_work_group_size[2];\n\n  if (cwgs_total > 0)\n  {\n    kernel_threads = MIN (kernel_threads, (u32) cwgs_total);\n  }\n\n  *result = kernel_threads;\n\n  return 0;\n}\n\nstatic int get_kernel_preferred_wgs_multiple (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, cl_kernel kernel, u32 *result)\n{\n  int CL_rc;\n\n  size_t preferred_work_group_size_multiple;\n\n  CL_rc = hc_clGetKernelWorkGroupInfo (hashcat_ctx, kernel, device_param->device, CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE, sizeof (preferred_work_group_size_multiple), &preferred_work_group_size_multiple, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  *result = (u32) preferred_work_group_size_multiple;\n\n  return 0;\n}\n\nstatic int get_kernel_local_mem_size (hashcat_ctx_t *hashcat_ctx, hc_device_param_t *device_param, cl_kernel kernel, u64 *result)\n{\n  int CL_rc;\n\n  cl_ulong local_mem_size;\n\n  CL_rc = hc_clGetKernelWorkGroupInfo (hashcat_ctx, kernel, device_param->device, CL_KERNEL_LOCAL_MEM_SIZE, sizeof (local_mem_size), &local_mem_size, NULL);\n\n  if (CL_rc == -1) return -1;\n\n  *result = local_mem_size;\n\n  return 0;\n}\n\nint opencl_session_begin (hashcat_ctx_t *hashcat_ctx)\n{\n  bitmap_ctx_t         *bitmap_ctx          = hashcat_ctx->bitmap_ctx;\n  folder_config_t      *folder_config       = hashcat_ctx->folder_config;\n  hashconfig_t         *hashconfig          = hashcat_ctx->hashconfig;\n  hashes_t             *hashes              = hashcat_ctx->hashes;\n  opencl_ctx_t         *opencl_ctx          = hashcat_ctx->opencl_ctx;\n  straight_ctx_t       *straight_ctx        = hashcat_ctx->straight_ctx;\n  user_options_extra_t *user_options_extra  = hashcat_ctx->user_options_extra;\n  user_options_t       *user_options        = hashcat_ctx->user_options;\n\n  if (opencl_ctx->enabled == false) return 0;\n\n  /**\n   * Some algorithm, like descrypt, can benefit from JIT compilation\n   */\n\n  opencl_ctx->force_jit_compilation = -1;\n\n  if (hashconfig->hash_mode == 8900)\n  {\n    opencl_ctx->force_jit_compilation = 8900;\n  }\n  else if (hashconfig->hash_mode == 9300)\n  {\n    opencl_ctx->force_jit_compilation = 8900;\n  }\n  else if (hashconfig->hash_mode == 15700)\n  {\n    opencl_ctx->force_jit_compilation = 15700;\n  }\n  else if (hashconfig->hash_mode == 1500 && user_options->attack_mode == ATTACK_MODE_BF && hashes->salts_cnt == 1 && user_options->slow_candidates == false)\n  {\n    opencl_ctx->force_jit_compilation = 1500;\n  }\n\n  u32 hardware_power_all = 0;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    int CL_rc = CL_SUCCESS;\n\n    /**\n     * host buffer\n     */\n\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    bool skipped_temp = false;\n\n    #if defined (__APPLE__)\n\n    /**\n     * If '--force' is not set, we proceed to excluding unstable hash-modes,\n     * too high kernel runtime, even on -u1 -n1, therefore likely to run into trap 6\n     */\n\n    if ((user_options->hash_mode ==  1500)\n     || (user_options->hash_mode ==  3000)\n     || (user_options->hash_mode ==  3200)\n     || (user_options->hash_mode ==  8900)\n     || (user_options->hash_mode ==  9300)\n     || (user_options->hash_mode ==  9800)\n     || (user_options->hash_mode == 12500)\n     || (user_options->hash_mode == 14000)\n     || (user_options->hash_mode == 14100)\n     || (user_options->hash_mode == 15700))\n    {\n      skipped_temp = true;\n    }\n\n    #endif // __APPLE__\n\n    if ((skipped_temp == true) && (user_options->force == false))\n    {\n      event_log_warning (hashcat_ctx, \"* Device #%u: Skipping unstable hash-mode %u for this device.\", device_id + 1, user_options->hash_mode);\n      event_log_warning (hashcat_ctx, \"             You can use --force to override, but do not report related errors.\");\n\n      device_param->skipped = true;\n\n      device_param->skipped_temp = true;\n\n      continue;\n    }\n\n    // vector_width\n\n    cl_uint vector_width;\n\n    if (user_options->opencl_vector_width_chgd == false)\n    {\n      // tuning db\n\n      tuning_db_entry_t *tuningdb_entry;\n\n      if (user_options->slow_candidates == true)\n      {\n        tuningdb_entry = tuning_db_search (hashcat_ctx, device_param->device_name, device_param->device_type, 0, hashconfig->hash_mode);\n      }\n      else\n      {\n        tuningdb_entry = tuning_db_search (hashcat_ctx, device_param->device_name, device_param->device_type, user_options->attack_mode, hashconfig->hash_mode);\n      }\n\n      if (tuningdb_entry == NULL || tuningdb_entry->vector_width == -1)\n      {\n        if (hashconfig->opti_type & OPTI_TYPE_USES_BITS_64)\n        {\n          CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG, sizeof (vector_width), &vector_width, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n        else\n        {\n          CL_rc = hc_clGetDeviceInfo (hashcat_ctx, device_param->device, CL_DEVICE_NATIVE_VECTOR_WIDTH_INT,  sizeof (vector_width), &vector_width, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n      else\n      {\n        vector_width = (cl_uint) tuningdb_entry->vector_width;\n      }\n    }\n    else\n    {\n      vector_width = user_options->opencl_vector_width;\n    }\n\n    // We can't have SIMD in kernels where we have an unknown final password length\n    // It also turns out that pure kernels (that have a higher register pressure)\n    // actually run faster on scalar GPU (like 1080) without SIMD\n\n    if ((hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL) == 0)\n    {\n      if (device_param->device_type & CL_DEVICE_TYPE_GPU)\n      {\n        vector_width = 1;\n      }\n    }\n\n    if (vector_width > 16) vector_width = 16;\n\n    device_param->vector_width = vector_width;\n\n    /**\n     * kernel accel and loops tuning db adjustment\n     */\n\n    device_param->kernel_accel_min = 1;\n    device_param->kernel_accel_max = 1024;\n\n    device_param->kernel_loops_min = 1;\n    device_param->kernel_loops_max = 1024;\n\n    tuning_db_entry_t *tuningdb_entry;\n\n    if (user_options->slow_candidates == true)\n    {\n      tuningdb_entry = tuning_db_search (hashcat_ctx, device_param->device_name, device_param->device_type, 0, hashconfig->hash_mode);\n    }\n    else\n    {\n      tuningdb_entry = tuning_db_search (hashcat_ctx, device_param->device_name, device_param->device_type, user_options->attack_mode, hashconfig->hash_mode);\n    }\n\n    if (tuningdb_entry != NULL)\n    {\n      u32 _kernel_accel = tuningdb_entry->kernel_accel;\n      u32 _kernel_loops = tuningdb_entry->kernel_loops;\n\n      if (_kernel_accel)\n      {\n        device_param->kernel_accel_min = _kernel_accel;\n        device_param->kernel_accel_max = _kernel_accel;\n      }\n\n      if (_kernel_loops)\n      {\n        if (user_options->workload_profile == 1)\n        {\n          _kernel_loops = (_kernel_loops > 8) ? _kernel_loops / 8 : 1;\n        }\n        else if (user_options->workload_profile == 2)\n        {\n          _kernel_loops = (_kernel_loops > 4) ? _kernel_loops / 4 : 1;\n        }\n\n        device_param->kernel_loops_min = _kernel_loops;\n        device_param->kernel_loops_max = _kernel_loops;\n      }\n    }\n\n    // commandline parameters overwrite tuningdb entries\n\n    if (user_options->kernel_accel_chgd == true)\n    {\n      device_param->kernel_accel_min = user_options->kernel_accel;\n      device_param->kernel_accel_max = user_options->kernel_accel;\n    }\n\n    if (user_options->kernel_loops_chgd == true)\n    {\n      device_param->kernel_loops_min = user_options->kernel_loops;\n      device_param->kernel_loops_max = user_options->kernel_loops;\n    }\n\n    // limit scrypt accel otherwise we hurt ourself when calculating the scrypt tmto\n\n    #define SCRYPT_MAX_ACCEL 16\n\n    if ((hashconfig->hash_mode == 8900) || (hashconfig->hash_mode == 9300) || (hashconfig->hash_mode == 15700))\n    {\n      // 16 is actually a bit low, we may need to change this depending on user response\n\n      device_param->kernel_accel_max = MIN (device_param->kernel_accel_max, SCRYPT_MAX_ACCEL);\n    }\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      // we have some absolute limits for fast hashes (because of limit constant memory), make sure not to overstep\n\n      if (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n      {\n        if (user_options_extra->attack_kern == ATTACK_KERN_STRAIGHT)\n        {\n          device_param->kernel_loops_min = MIN (device_param->kernel_loops_min, KERNEL_RULES);\n          device_param->kernel_loops_max = MIN (device_param->kernel_loops_max, KERNEL_RULES);\n        }\n        else if (user_options_extra->attack_kern == ATTACK_KERN_COMBI)\n        {\n          device_param->kernel_loops_min = MIN (device_param->kernel_loops_min, KERNEL_COMBS);\n          device_param->kernel_loops_max = MIN (device_param->kernel_loops_max, KERNEL_COMBS);\n        }\n        else if (user_options_extra->attack_kern == ATTACK_KERN_BF)\n        {\n          device_param->kernel_loops_min = MIN (device_param->kernel_loops_min, KERNEL_BFS);\n          device_param->kernel_loops_max = MIN (device_param->kernel_loops_max, KERNEL_BFS);\n        }\n      }\n    }\n\n    /**\n     * device properties\n     */\n\n    const u32 device_processors = device_param->device_processors;\n\n    /**\n     * create context for each device\n     */\n\n    cl_context_properties properties[3];\n\n    properties[0] = CL_CONTEXT_PLATFORM;\n    properties[1] = (cl_context_properties) device_param->platform;\n    properties[2] = 0;\n\n    CL_rc = hc_clCreateContext (hashcat_ctx, properties, 1, &device_param->device, NULL, NULL, &device_param->context);\n\n    if (CL_rc == -1) return -1;\n\n    /**\n     * create command-queue\n     */\n\n    // not supported with NV\n    // device_param->command_queue = hc_clCreateCommandQueueWithProperties (hashcat_ctx, device_param->device, NULL);\n\n    CL_rc = hc_clCreateCommandQueue (hashcat_ctx, device_param->context, device_param->device, CL_QUEUE_PROFILING_ENABLE, &device_param->command_queue);\n\n    if (CL_rc == -1) return -1;\n\n    // device_available_mem\n\n    #define MAX_ALLOC_CHECKS_CNT  8192\n    #define MAX_ALLOC_CHECKS_SIZE (64 * 1024 * 1024)\n\n    device_param->device_available_mem = device_param->device_global_mem - MAX_ALLOC_CHECKS_SIZE;\n\n    if ((device_param->device_type & CL_DEVICE_TYPE_GPU) && ((device_param->platform_vendor_id == VENDOR_ID_NV) || ((device_param->platform_vendor_id == VENDOR_ID_AMD) && (device_param->is_rocm == false))))\n    {\n      // OK, so the problem here is the following:\n      // There's just CL_DEVICE_GLOBAL_MEM_SIZE to ask OpenCL about the total memory on the device,\n      // but there's no way to ask for available memory on the device.\n      // In combination, most OpenCL runtimes implementation of clCreateBuffer()\n      // are doing so called lazy memory allocation on the device.\n      // Now, if the user has X11 (or a game or anything that takes a lot of GPU memory)\n      // running on the host we end up with an error type of this:\n      // clEnqueueNDRangeKernel(): CL_MEM_OBJECT_ALLOCATION_FAILURE\n      // The clEnqueueNDRangeKernel() is because of the lazy allocation\n      // The best way to workaround this problem is if we would be able to ask for available memory,\n      // The idea here is to try to evaluate available memory by allocating it till it errors\n\n      cl_mem *tmp_device = (cl_mem *) hccalloc (MAX_ALLOC_CHECKS_CNT, sizeof (cl_mem));\n\n      u64 c;\n\n      for (c = 0; c < MAX_ALLOC_CHECKS_CNT; c++)\n      {\n        if (((c + 1 + 1) * MAX_ALLOC_CHECKS_SIZE) >= device_param->device_global_mem) break;\n\n        cl_int CL_err;\n\n        OCL_PTR *ocl = opencl_ctx->ocl;\n\n        tmp_device[c] = ocl->clCreateBuffer (device_param->context, CL_MEM_READ_WRITE, MAX_ALLOC_CHECKS_SIZE, NULL, &CL_err);\n\n        if (CL_err != CL_SUCCESS)\n        {\n          c--;\n\n          break;\n        }\n\n        // transfer only a few byte should be enough to force the runtime to actually allocate the memory\n\n        u8 tmp_host[8];\n\n        CL_err = ocl->clEnqueueReadBuffer  (device_param->command_queue, tmp_device[c], CL_TRUE, 0, sizeof (tmp_host), tmp_host, 0, NULL, NULL);\n\n        if (CL_err != CL_SUCCESS) break;\n\n        CL_err = ocl->clEnqueueWriteBuffer (device_param->command_queue, tmp_device[c], CL_TRUE, 0, sizeof (tmp_host), tmp_host, 0, NULL, NULL);\n\n        if (CL_err != CL_SUCCESS) break;\n\n        CL_err = ocl->clEnqueueReadBuffer  (device_param->command_queue, tmp_device[c], CL_TRUE, MAX_ALLOC_CHECKS_SIZE - sizeof (tmp_host), sizeof (tmp_host), tmp_host, 0, NULL, NULL);\n\n        if (CL_err != CL_SUCCESS) break;\n\n        CL_err = ocl->clEnqueueWriteBuffer (device_param->command_queue, tmp_device[c], CL_TRUE, MAX_ALLOC_CHECKS_SIZE - sizeof (tmp_host), sizeof (tmp_host), tmp_host, 0, NULL, NULL);\n\n        if (CL_err != CL_SUCCESS) break;\n      }\n\n      device_param->device_available_mem = c * MAX_ALLOC_CHECKS_SIZE;\n\n      // clean up\n\n      for (c = 0; c < MAX_ALLOC_CHECKS_CNT; c++)\n      {\n        if (((c + 1 + 1) * MAX_ALLOC_CHECKS_SIZE) >= device_param->device_global_mem) break;\n\n        if (tmp_device[c] != NULL)\n        {\n          CL_rc = hc_clReleaseMemObject (hashcat_ctx, tmp_device[c]);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n\n      hcfree (tmp_device);\n    }\n\n    /**\n     * create input buffers on device : calculate size of fixed memory buffers\n     */\n\n    size_t size_root_css   = SP_PW_MAX *           sizeof (cs_t);\n    size_t size_markov_css = SP_PW_MAX * CHARSIZ * sizeof (cs_t);\n\n    device_param->size_root_css   = size_root_css;\n    device_param->size_markov_css = size_markov_css;\n\n    size_t size_results = sizeof (u32);\n\n    device_param->size_results = size_results;\n\n    size_t size_rules   = (size_t) straight_ctx->kernel_rules_cnt * sizeof (kernel_rule_t);\n    size_t size_rules_c = (size_t) KERNEL_RULES                   * sizeof (kernel_rule_t);\n\n    size_t size_plains  = (size_t) hashes->digests_cnt * sizeof (plain_t);\n    size_t size_salts   = (size_t) hashes->salts_cnt   * sizeof (salt_t);\n    size_t size_esalts  = (size_t) hashes->digests_cnt * (size_t) hashconfig->esalt_size;\n    size_t size_shown   = (size_t) hashes->digests_cnt * sizeof (u32);\n    size_t size_digests = (size_t) hashes->digests_cnt * (size_t) hashconfig->dgst_size;\n\n    device_param->size_plains   = size_plains;\n    device_param->size_digests  = size_digests;\n    device_param->size_shown    = size_shown;\n    device_param->size_salts    = size_salts;\n\n    size_t size_combs = KERNEL_COMBS * sizeof (pw_t);\n    size_t size_bfs   = KERNEL_BFS   * sizeof (bf_t);\n    size_t size_tm    = 32           * sizeof (bs_word_t);\n\n    size_t size_st_digests = 1 * hashconfig->dgst_size;\n    size_t size_st_salts   = 1 * sizeof (salt_t);\n    size_t size_st_esalts  = 1 * hashconfig->esalt_size;\n\n    device_param->size_st_digests = size_st_digests;\n    device_param->size_st_salts   = size_st_salts;\n    device_param->size_st_esalts  = size_st_esalts;\n\n    /**\n     * some algorithms need a fixed kernel-loops count\n     */\n\n    const u32 kernel_loops_fixed = hashconfig_get_kernel_loops (hashcat_ctx);\n\n    if (kernel_loops_fixed != 0)\n    {\n      device_param->kernel_loops_min = kernel_loops_fixed;\n      device_param->kernel_loops_max = kernel_loops_fixed;\n    }\n\n    device_param->kernel_loops_min_sav = device_param->kernel_loops_min;\n    device_param->kernel_loops_max_sav = device_param->kernel_loops_max;\n\n    device_param->size_bfs      = size_bfs;\n    device_param->size_combs    = size_combs;\n    device_param->size_rules    = size_rules;\n    device_param->size_rules_c  = size_rules_c;\n\n    // scryptV stuff\n\n    size_t scrypt_tmp_size   = 0;\n    size_t scrypt_tmto_final = 0;\n\n    size_t size_scrypt = 4;\n\n    if ((hashconfig->hash_mode == 8900) || (hashconfig->hash_mode == 9300) || (hashconfig->hash_mode == 15700))\n    {\n      // we need to check that all hashes have the same scrypt settings\n\n      const u32 scrypt_N = hashes->salts_buf[0].scrypt_N;\n      const u32 scrypt_r = hashes->salts_buf[0].scrypt_r;\n      const u32 scrypt_p = hashes->salts_buf[0].scrypt_p;\n\n      for (u32 i = 1; i < hashes->salts_cnt; i++)\n      {\n        if ((hashes->salts_buf[i].scrypt_N != scrypt_N)\n         || (hashes->salts_buf[i].scrypt_r != scrypt_r)\n         || (hashes->salts_buf[i].scrypt_p != scrypt_p))\n        {\n          event_log_error (hashcat_ctx, \"Mixed scrypt settings are not supported.\");\n\n          return -1;\n        }\n      }\n\n      scrypt_tmp_size = (128 * scrypt_r * scrypt_p);\n\n      hashconfig->tmp_size = scrypt_tmp_size;\n\n      u32 tmto_start = 1;\n      u32 tmto_stop  = 6;\n\n      if (user_options->scrypt_tmto)\n      {\n        tmto_start = user_options->scrypt_tmto;\n        tmto_stop  = user_options->scrypt_tmto;\n      }\n\n      const u32 scrypt_threads = hashconfig_forced_kernel_threads (hashcat_ctx);\n\n      const size_t kernel_power_max = SCRYPT_MAX_ACCEL * device_processors * scrypt_threads;\n\n      // size_pws\n\n      const size_t size_pws = kernel_power_max * sizeof (pw_t);\n\n      const size_t size_pws_amp = size_pws;\n\n      // size_pws_comp\n\n      const size_t size_pws_comp = kernel_power_max * (sizeof (u32) * 64);\n\n      // size_pws_idx\n\n      const size_t size_pws_idx = (kernel_power_max + 1) * sizeof (pw_idx_t);\n\n      // size_tmps\n\n      const size_t size_tmps = kernel_power_max * hashconfig->tmp_size;\n\n      // size_hooks\n\n      const size_t size_hooks = kernel_power_max * hashconfig->hook_size;\n\n      const u64 scrypt_extra_space\n        = bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + size_bfs\n        + size_combs\n        + size_digests\n        + size_esalts\n        + size_hooks\n        + size_markov_css\n        + size_plains\n        + size_pws\n        + size_pws_amp\n        + size_pws_comp\n        + size_pws_idx\n        + size_results\n        + size_root_css\n        + size_rules\n        + size_rules_c\n        + size_salts\n        + size_shown\n        + size_tm\n        + size_tmps\n        + size_st_digests\n        + size_st_salts\n        + size_st_esalts;\n\n      bool not_enough_memory = true;\n\n      u32 tmto;\n\n      for (tmto = tmto_start; tmto <= tmto_stop; tmto++)\n      {\n        size_scrypt = (128 * scrypt_r) * scrypt_N;\n\n        size_scrypt /= 1u << tmto;\n\n        size_scrypt *= kernel_power_max;\n\n        if ((size_scrypt / 4) > device_param->device_maxmem_alloc)\n        {\n          if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"Increasing single-block device memory allocatable for --scrypt-tmto %u.\", tmto);\n\n          continue;\n        }\n\n        if ((size_scrypt + scrypt_extra_space) > device_param->device_available_mem)\n        {\n          if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"Increasing total device memory allocatable for --scrypt-tmto %u.\", tmto);\n\n          continue;\n        }\n\n        for (u32 salts_pos = 0; salts_pos < hashes->salts_cnt; salts_pos++)\n        {\n          scrypt_tmto_final = tmto;\n        }\n\n        not_enough_memory = false;\n\n        break;\n      }\n\n      if (not_enough_memory == true)\n      {\n        event_log_error (hashcat_ctx, \"Cannot allocate enough device memory. Perhaps retry with -n 1.\");\n\n        return -1;\n      }\n\n      #if defined (DEBUG)\n      if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"SCRYPT tmto optimizer value set to: %lu, mem: %lu\", scrypt_tmto_final, size_scrypt);\n      if (user_options->quiet == false) event_log_warning (hashcat_ctx, NULL);\n      #endif\n    }\n\n    size_t size_scrypt4 = size_scrypt / 4;\n\n    /**\n     * default building options\n     */\n\n    if (chdir (folder_config->cpath_real) == -1)\n    {\n      event_log_error (hashcat_ctx, \"%s: %s\", folder_config->cpath_real, strerror (errno));\n\n      return -1;\n    }\n\n    // include check\n    // this test needs to be done manually because of macOS opencl runtime\n    // if there's a problem with permission, its not reporting back and erroring out silently\n\n    #define files_cnt 16\n\n    const char *files_names[files_cnt] =\n    {\n      \"inc_cipher_aes.cl\",\n      \"inc_cipher_serpent.cl\",\n      \"inc_cipher_twofish.cl\",\n      \"inc_common.cl\",\n      \"inc_comp_multi_bs.cl\",\n      \"inc_comp_multi.cl\",\n      \"inc_comp_single_bs.cl\",\n      \"inc_comp_single.cl\",\n      \"inc_hash_constants.h\",\n      \"inc_hash_functions.cl\",\n      \"inc_rp_optimized.cl\",\n      \"inc_rp_optimized.h\",\n      \"inc_simd.cl\",\n      \"inc_scalar.cl\",\n      \"inc_types.cl\",\n      \"inc_vendor.cl\",\n    };\n\n    for (int i = 0; i < files_cnt; i++)\n    {\n      if (hc_path_read (files_names[i]) == false)\n      {\n        event_log_error (hashcat_ctx, \"%s: %s\", files_names[i], strerror (errno));\n\n        return -1;\n      }\n    }\n\n    // return back to the folder we came from initially (workaround)\n\n    #if defined (_WIN)\n    if (chdir (\"..\") == -1)\n    {\n      event_log_error (hashcat_ctx, \"%s: %s\", \"..\", strerror (errno));\n\n      return -1;\n    }\n    #else\n    if (chdir (folder_config->cwd) == -1)\n    {\n      event_log_error (hashcat_ctx, \"%s: %s\", folder_config->cwd, strerror (errno));\n\n      return -1;\n    }\n    #endif\n\n    char build_opts_base[1024] = { 0 };\n\n    #if defined (_WIN)\n    snprintf (build_opts_base, sizeof (build_opts_base) - 1, \"-cl-std=CL1.2 -I OpenCL -I \\\"%s\\\"\", folder_config->cpath_real);\n    #else\n    snprintf (build_opts_base, sizeof (build_opts_base) - 1, \"-cl-std=CL1.2 -I OpenCL -I %s\", folder_config->cpath_real);\n    #endif\n\n    // we don't have sm_* on vendors not NV but it doesn't matter\n\n    char build_opts[2048] = { 0 };\n\n    #if defined (DEBUG)\n    snprintf (build_opts, sizeof (build_opts) - 1, \"%s -D VENDOR_ID=%u -D CUDA_ARCH=%u -D AMD_ROCM=%u -D VECT_SIZE=%u -D DEVICE_TYPE=%u -D DGST_R0=%u -D DGST_R1=%u -D DGST_R2=%u -D DGST_R3=%u -D DGST_ELEM=%u -D KERN_TYPE=%u -D _unroll\", build_opts_base, device_param->platform_vendor_id, (device_param->sm_major * 100) + device_param->sm_minor, device_param->is_rocm, device_param->vector_width, (u32) device_param->device_type, hashconfig->dgst_pos0, hashconfig->dgst_pos1, hashconfig->dgst_pos2, hashconfig->dgst_pos3, hashconfig->dgst_size / 4, hashconfig->kern_type);\n    #else\n    snprintf (build_opts, sizeof (build_opts) - 1, \"%s -D VENDOR_ID=%u -D CUDA_ARCH=%u -D AMD_ROCM=%u -D VECT_SIZE=%u -D DEVICE_TYPE=%u -D DGST_R0=%u -D DGST_R1=%u -D DGST_R2=%u -D DGST_R3=%u -D DGST_ELEM=%u -D KERN_TYPE=%u -D _unroll -w\", build_opts_base, device_param->platform_vendor_id, (device_param->sm_major * 100) + device_param->sm_minor, device_param->is_rocm, device_param->vector_width, (u32) device_param->device_type, hashconfig->dgst_pos0, hashconfig->dgst_pos1, hashconfig->dgst_pos2, hashconfig->dgst_pos3, hashconfig->dgst_size / 4, hashconfig->kern_type);\n    #endif\n\n    /*\n    if (device_param->device_type & CL_DEVICE_TYPE_CPU)\n    {\n      if (device_param->platform_vendor_id == VENDOR_ID_INTEL_SDK)\n      {\n        strncat (build_opts, \" -cl-opt-disable\", 16);\n      }\n    }\n    */\n\n    #if defined (DEBUG)\n    if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"* Device #%u: build_opts '%s'\", device_id + 1, build_opts);\n    #endif\n\n    /**\n     * device_name_chksum\n     */\n\n    char *device_name_chksum        = (char *) hcmalloc (HCBUFSIZ_TINY);\n    char *device_name_chksum_amp_mp = (char *) hcmalloc (HCBUFSIZ_TINY);\n\n    #if defined (__x86_64__)\n    const size_t dnclen        = snprintf (device_name_chksum,        HCBUFSIZ_TINY - 1, \"%d-%u-%u-%s-%s-%s-%d-%u-%u\", 64, device_param->platform_vendor_id, device_param->vector_width, device_param->device_name, device_param->device_version, device_param->driver_version, opencl_ctx->comptime, user_options->opencl_vector_width, user_options->hash_mode);\n    const size_t dnclen_amp_mp = snprintf (device_name_chksum_amp_mp, HCBUFSIZ_TINY - 1, \"%d-%u-%s-%s-%s-%d\",          64, device_param->platform_vendor_id,                             device_param->device_name, device_param->device_version, device_param->driver_version, opencl_ctx->comptime);\n    #else\n    const size_t dnclen        = snprintf (device_name_chksum,        HCBUFSIZ_TINY - 1, \"%d-%u-%u-%s-%s-%s-%d-%u-%u\", 32, device_param->platform_vendor_id, device_param->vector_width, device_param->device_name, device_param->device_version, device_param->driver_version, opencl_ctx->comptime, user_options->opencl_vector_width, user_options->hash_mode);\n    const size_t dnclen_amp_mp = snprintf (device_name_chksum_amp_mp, HCBUFSIZ_TINY - 1, \"%d-%u-%s-%s-%s-%d\",          32, device_param->platform_vendor_id,                             device_param->device_name, device_param->device_version, device_param->driver_version, opencl_ctx->comptime);\n    #endif\n\n    u32 device_name_digest[4] = { 0 };\n\n    for (size_t i = 0; i < dnclen; i += 64)\n    {\n      md5_64 ((u32 *) (device_name_chksum + i), device_name_digest);\n    }\n\n    snprintf (device_name_chksum, HCBUFSIZ_TINY - 1, \"%08x\", device_name_digest[0]);\n\n    u32 device_name_digest_amp_mp[4] = { 0 };\n\n    for (size_t i = 0; i < dnclen_amp_mp; i += 64)\n    {\n      md5_64 ((u32 *) (device_name_chksum_amp_mp + i), device_name_digest_amp_mp);\n    }\n\n    snprintf (device_name_chksum_amp_mp, HCBUFSIZ_TINY - 1, \"%08x\", device_name_digest_amp_mp[0]);\n\n    /**\n     * main kernel\n     */\n\n    {\n      /**\n       * kernel source filename\n       */\n\n      char source_file[256] = { 0 };\n\n      generate_source_kernel_filename (user_options->slow_candidates, hashconfig->attack_exec, user_options_extra->attack_kern, hashconfig->kern_type, hashconfig->opti_type, folder_config->shared_dir, source_file);\n\n      if (hc_path_read (source_file) == false)\n      {\n        event_log_error (hashcat_ctx, \"%s: %s\", source_file, strerror (errno));\n\n        return -1;\n      }\n\n      /**\n       * kernel cached filename\n       */\n\n      char cached_file[256] = { 0 };\n\n      generate_cached_kernel_filename (user_options->slow_candidates, hashconfig->attack_exec, user_options_extra->attack_kern, hashconfig->kern_type, hashconfig->opti_type, folder_config->profile_dir, device_name_chksum, cached_file);\n\n      bool cached = true;\n\n      if (hc_path_read (cached_file) == false)\n      {\n        cached = false;\n      }\n\n      if (hc_path_is_empty (cached_file) == true)\n      {\n        cached = false;\n      }\n\n      /**\n       * kernel compile or load\n       */\n\n      size_t kernel_lengths_buf = 0;\n\n      size_t *kernel_lengths = &kernel_lengths_buf;\n\n      char *kernel_sources_buf = NULL;\n\n      char **kernel_sources = &kernel_sources_buf;\n\n      if (opencl_ctx->force_jit_compilation == -1)\n      {\n        if (cached == false)\n        {\n          #if defined (DEBUG)\n          if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"* Device #%u: Kernel %s not found in cache! Building may take a while...\", device_id + 1, filename_from_filepath (cached_file));\n          #endif\n\n          const int rc_read_kernel = read_kernel_binary (hashcat_ctx, source_file, kernel_lengths, kernel_sources, true);\n\n          if (rc_read_kernel == -1) return -1;\n\n          CL_rc = hc_clCreateProgramWithSource (hashcat_ctx, device_param->context, 1, kernel_sources, NULL, &device_param->program);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clBuildProgram (hashcat_ctx, device_param->program, 1, &device_param->device, build_opts, NULL, NULL);\n\n          //if (CL_rc == -1) return -1;\n\n          size_t build_log_size = 0;\n\n          hc_clGetProgramBuildInfo (hashcat_ctx, device_param->program, device_param->device, CL_PROGRAM_BUILD_LOG, 0, NULL, &build_log_size);\n\n          //if (CL_rc == -1) return -1;\n\n          #if defined (DEBUG)\n          if ((build_log_size > 1) || (CL_rc == -1))\n          #else\n          if (CL_rc == -1)\n          #endif\n          {\n            char *build_log = (char *) hcmalloc (build_log_size + 1);\n\n            int CL_rc_build = hc_clGetProgramBuildInfo (hashcat_ctx, device_param->program, device_param->device, CL_PROGRAM_BUILD_LOG, build_log_size, build_log, NULL);\n\n            if (CL_rc_build == -1) return -1;\n\n            puts (build_log);\n\n            hcfree (build_log);\n          }\n\n          if (CL_rc == -1)\n          {\n            device_param->skipped = true;\n\n            event_log_error (hashcat_ctx, \"* Device #%u: Kernel %s build failed - proceeding without this device.\", device_id + 1, source_file);\n\n            continue;\n          }\n\n          size_t binary_size;\n\n          CL_rc = hc_clGetProgramInfo (hashcat_ctx, device_param->program, CL_PROGRAM_BINARY_SIZES, sizeof (size_t), &binary_size, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          char *binary = (char *) hcmalloc (binary_size);\n\n          CL_rc = hc_clGetProgramInfo (hashcat_ctx, device_param->program, CL_PROGRAM_BINARIES, sizeof (char *), &binary, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          const int rc_write = write_kernel_binary (hashcat_ctx, cached_file, binary, binary_size);\n\n          if (rc_write == -1) return -1;\n\n          hcfree (binary);\n        }\n        else\n        {\n          const int rc_read_kernel = read_kernel_binary (hashcat_ctx, cached_file, kernel_lengths, kernel_sources, false);\n\n          if (rc_read_kernel == -1) return -1;\n\n          CL_rc = hc_clCreateProgramWithBinary (hashcat_ctx, device_param->context, 1, &device_param->device, kernel_lengths, (unsigned char **) kernel_sources, NULL, &device_param->program);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clBuildProgram (hashcat_ctx, device_param->program, 1, &device_param->device, build_opts, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n      else\n      {\n        const int rc_read_kernel = read_kernel_binary (hashcat_ctx, source_file, kernel_lengths, kernel_sources, true);\n\n        if (rc_read_kernel == -1) return -1;\n\n        CL_rc = hc_clCreateProgramWithSource (hashcat_ctx, device_param->context, 1, kernel_sources, NULL, &device_param->program);\n\n        if (CL_rc == -1) return -1;\n\n        char *build_opts_update;\n\n        if (opencl_ctx->force_jit_compilation == 1500)\n        {\n          hc_asprintf (&build_opts_update, \"%s -DDESCRYPT_SALT=%u\", build_opts, hashes->salts_buf[0].salt_buf[0]);\n        }\n        else if ((opencl_ctx->force_jit_compilation == 8900) || (opencl_ctx->force_jit_compilation == 15700))\n        {\n          hc_asprintf (&build_opts_update,\"%s -DSCRYPT_N=%u -DSCRYPT_R=%u -DSCRYPT_P=%u -DSCRYPT_TMTO=%u -DSCRYPT_TMP_ELEM=%\" PRIu64, build_opts, hashes->salts_buf[0].scrypt_N, hashes->salts_buf[0].scrypt_r, hashes->salts_buf[0].scrypt_p, 1u << scrypt_tmto_final, (u64) scrypt_tmp_size / 16);\n        }\n        else\n        {\n          hc_asprintf (&build_opts_update, \"%s\", build_opts);\n        }\n\n        CL_rc = hc_clBuildProgram (hashcat_ctx, device_param->program, 1, &device_param->device, build_opts_update, NULL, NULL);\n\n        free (build_opts_update);\n\n        //if (CL_rc == -1) return -1;\n\n        size_t build_log_size = 0;\n\n        hc_clGetProgramBuildInfo (hashcat_ctx, device_param->program, device_param->device, CL_PROGRAM_BUILD_LOG, 0, NULL, &build_log_size);\n\n        //if (CL_rc == -1) return -1;\n\n        #if defined (DEBUG)\n        if ((build_log_size > 1) || (CL_rc == -1))\n        #else\n        if (CL_rc == -1)\n        #endif\n        {\n          char *build_log = (char *) hcmalloc (build_log_size + 1);\n\n          int CL_rc_build = hc_clGetProgramBuildInfo (hashcat_ctx, device_param->program, device_param->device, CL_PROGRAM_BUILD_LOG, build_log_size, build_log, NULL);\n\n          if (CL_rc_build == -1) return -1;\n\n          puts (build_log);\n\n          hcfree (build_log);\n        }\n\n        if (CL_rc == -1)\n        {\n          device_param->skipped = true;\n\n          event_log_error (hashcat_ctx, \"* Device #%u: Kernel %s build failed - proceeding without this device.\", device_id + 1, source_file);\n\n          continue;\n        }\n      }\n\n      hcfree (kernel_sources[0]);\n    }\n\n    /**\n     * word generator kernel\n     */\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      if (user_options->attack_mode != ATTACK_MODE_STRAIGHT)\n      {\n        /**\n         * kernel mp source filename\n         */\n\n        char source_file[256] = { 0 };\n\n        generate_source_kernel_mp_filename (hashconfig->opti_type, hashconfig->opts_type, folder_config->shared_dir, source_file);\n\n        if (hc_path_read (source_file) == false)\n        {\n          event_log_error (hashcat_ctx, \"%s: %s\", source_file, strerror (errno));\n\n          return -1;\n        }\n\n        /**\n         * kernel mp cached filename\n         */\n\n        char cached_file[256] = { 0 };\n\n        generate_cached_kernel_mp_filename (hashconfig->opti_type, hashconfig->opts_type, folder_config->profile_dir, device_name_chksum_amp_mp, cached_file);\n\n        bool cached = true;\n\n        if (hc_path_read (cached_file) == false)\n        {\n          cached = false;\n        }\n\n        if (hc_path_is_empty (cached_file) == true)\n        {\n          cached = false;\n        }\n\n        /**\n         * kernel compile or load\n         */\n\n        size_t kernel_lengths_buf = 0;\n\n        size_t *kernel_lengths = &kernel_lengths_buf;\n\n        char *kernel_sources_buf = NULL;\n\n        char **kernel_sources = &kernel_sources_buf;\n\n        if (cached == false)\n        {\n          #if defined (DEBUG)\n          if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"* Device #%u: Kernel %s not found in cache! Building may take a while...\", device_id + 1, filename_from_filepath (cached_file));\n          #endif\n\n          const int rc_read_kernel = read_kernel_binary (hashcat_ctx, source_file, kernel_lengths, kernel_sources, true);\n\n          if (rc_read_kernel == -1) return -1;\n\n          CL_rc = hc_clCreateProgramWithSource (hashcat_ctx, device_param->context, 1, kernel_sources, NULL, &device_param->program_mp);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clBuildProgram (hashcat_ctx, device_param->program_mp, 1, &device_param->device, build_opts, NULL, NULL);\n\n          //if (CL_rc == -1) return -1;\n\n          size_t build_log_size = 0;\n\n          hc_clGetProgramBuildInfo (hashcat_ctx, device_param->program_mp, device_param->device, CL_PROGRAM_BUILD_LOG, 0, NULL, &build_log_size);\n\n          //if (CL_rc == -1) return -1;\n\n          #if defined (DEBUG)\n          if ((build_log_size > 1) || (CL_rc == -1))\n          #else\n          if (CL_rc == -1)\n          #endif\n          {\n            char *build_log = (char *) hcmalloc (build_log_size + 1);\n\n            int CL_rc_build = hc_clGetProgramBuildInfo (hashcat_ctx, device_param->program_mp, device_param->device, CL_PROGRAM_BUILD_LOG, build_log_size, build_log, NULL);\n\n            if (CL_rc_build == -1) return -1;\n\n            puts (build_log);\n\n            hcfree (build_log);\n          }\n\n          if (CL_rc == -1)\n          {\n            device_param->skipped = true;\n\n            event_log_error (hashcat_ctx, \"* Device #%u: Kernel %s build failed - proceeding without this device.\", device_id + 1, source_file);\n\n            continue;\n          }\n\n          size_t binary_size;\n\n          CL_rc = hc_clGetProgramInfo (hashcat_ctx, device_param->program_mp, CL_PROGRAM_BINARY_SIZES, sizeof (size_t), &binary_size, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          char *binary = (char *) hcmalloc (binary_size);\n\n          CL_rc = hc_clGetProgramInfo (hashcat_ctx, device_param->program_mp, CL_PROGRAM_BINARIES, sizeof (char *), &binary, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          write_kernel_binary (hashcat_ctx, cached_file, binary, binary_size);\n\n          hcfree (binary);\n        }\n        else\n        {\n          const int rc_read_kernel = read_kernel_binary (hashcat_ctx, cached_file, kernel_lengths, kernel_sources, false);\n\n          if (rc_read_kernel == -1) return -1;\n\n          CL_rc = hc_clCreateProgramWithBinary (hashcat_ctx, device_param->context, 1, &device_param->device, kernel_lengths, (unsigned char **) kernel_sources, NULL, &device_param->program_mp);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clBuildProgram (hashcat_ctx, device_param->program_mp, 1, &device_param->device, build_opts, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n\n        hcfree (kernel_sources[0]);\n      }\n    }\n\n    /**\n     * amplifier kernel\n     */\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      if (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n      {\n\n      }\n      else\n      {\n        /**\n         * kernel amp source filename\n         */\n\n        char source_file[256] = { 0 };\n\n        generate_source_kernel_amp_filename (user_options_extra->attack_kern, folder_config->shared_dir, source_file);\n\n        if (hc_path_read (source_file) == false)\n        {\n          event_log_error (hashcat_ctx, \"%s: %s\", source_file, strerror (errno));\n\n          return -1;\n        }\n\n        /**\n         * kernel amp cached filename\n         */\n\n        char cached_file[256] = { 0 };\n\n        generate_cached_kernel_amp_filename (user_options_extra->attack_kern, folder_config->profile_dir, device_name_chksum_amp_mp, cached_file);\n\n        bool cached = true;\n\n        if (hc_path_read (cached_file) == false)\n        {\n          cached = false;\n        }\n\n        if (hc_path_is_empty (cached_file) == true)\n        {\n          cached = false;\n        }\n\n        /**\n         * kernel compile or load\n         */\n\n        size_t kernel_lengths_buf = 0;\n\n        size_t *kernel_lengths = &kernel_lengths_buf;\n\n        char *kernel_sources_buf = NULL;\n\n        char **kernel_sources = &kernel_sources_buf;\n\n        if (cached == false)\n        {\n          #if defined (DEBUG)\n          if (user_options->quiet == false) event_log_warning (hashcat_ctx, \"* Device #%u: Kernel %s not found in cache! Building may take a while...\", device_id + 1, filename_from_filepath (cached_file));\n          #endif\n\n          const int rc_read_kernel = read_kernel_binary (hashcat_ctx, source_file, kernel_lengths, kernel_sources, true);\n\n          if (rc_read_kernel == -1) return -1;\n\n          CL_rc = hc_clCreateProgramWithSource (hashcat_ctx, device_param->context, 1, kernel_sources, NULL, &device_param->program_amp);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clBuildProgram (hashcat_ctx, device_param->program_amp, 1, &device_param->device, build_opts, NULL, NULL);\n\n          //if (CL_rc == -1) return -1;\n\n          size_t build_log_size = 0;\n\n          hc_clGetProgramBuildInfo (hashcat_ctx, device_param->program_amp, device_param->device, CL_PROGRAM_BUILD_LOG, 0, NULL, &build_log_size);\n\n          //if (CL_rc == -1) return -1;\n\n          #if defined (DEBUG)\n          if ((build_log_size > 1) || (CL_rc == -1))\n          #else\n          if (CL_rc == -1)\n          #endif\n          {\n            char *build_log = (char *) hcmalloc (build_log_size + 1);\n\n            int CL_rc_build_info = hc_clGetProgramBuildInfo (hashcat_ctx, device_param->program_amp, device_param->device, CL_PROGRAM_BUILD_LOG, build_log_size, build_log, NULL);\n\n            if (CL_rc_build_info == -1) return -1;\n\n            puts (build_log);\n\n            hcfree (build_log);\n          }\n\n          if (CL_rc == -1)\n          {\n            device_param->skipped = true;\n\n            event_log_error (hashcat_ctx, \"* Device #%u: Kernel %s build failed - proceeding without this device.\", device_id + 1, source_file);\n\n            continue;\n          }\n\n          size_t binary_size;\n\n          CL_rc = hc_clGetProgramInfo (hashcat_ctx, device_param->program_amp, CL_PROGRAM_BINARY_SIZES, sizeof (size_t), &binary_size, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          char *binary = (char *) hcmalloc (binary_size);\n\n          CL_rc = hc_clGetProgramInfo (hashcat_ctx, device_param->program_amp, CL_PROGRAM_BINARIES, sizeof (char *), &binary, NULL);\n\n          if (CL_rc == -1) return -1;\n\n          write_kernel_binary (hashcat_ctx, cached_file, binary, binary_size);\n\n          hcfree (binary);\n        }\n        else\n        {\n          const int rc_read_kernel = read_kernel_binary (hashcat_ctx, cached_file, kernel_lengths, kernel_sources, false);\n\n          if (rc_read_kernel == -1) return -1;\n\n          CL_rc = hc_clCreateProgramWithBinary (hashcat_ctx, device_param->context, 1, &device_param->device, kernel_lengths, (unsigned char **) kernel_sources, NULL, &device_param->program_amp);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = hc_clBuildProgram (hashcat_ctx, device_param->program_amp, 1, &device_param->device, build_opts, NULL, NULL);\n\n          if (CL_rc == -1) return -1;\n        }\n\n        hcfree (kernel_sources[0]);\n      }\n    }\n\n    hcfree (device_name_chksum);\n    hcfree (device_name_chksum_amp_mp);\n\n    // some algorithm collide too fast, make that impossible\n\n    if (user_options->benchmark == true)\n    {\n      ((u32 *) hashes->digests_buf)[0] = -1u;\n      ((u32 *) hashes->digests_buf)[1] = -1u;\n      ((u32 *) hashes->digests_buf)[2] = -1u;\n      ((u32 *) hashes->digests_buf)[3] = -1u;\n    }\n\n    /**\n     * global buffers\n     */\n\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   bitmap_ctx->bitmap_size, NULL, &device_param->d_bitmap_s1_a);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   bitmap_ctx->bitmap_size, NULL, &device_param->d_bitmap_s1_b);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   bitmap_ctx->bitmap_size, NULL, &device_param->d_bitmap_s1_c);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   bitmap_ctx->bitmap_size, NULL, &device_param->d_bitmap_s1_d);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   bitmap_ctx->bitmap_size, NULL, &device_param->d_bitmap_s2_a);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   bitmap_ctx->bitmap_size, NULL, &device_param->d_bitmap_s2_b);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   bitmap_ctx->bitmap_size, NULL, &device_param->d_bitmap_s2_c);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   bitmap_ctx->bitmap_size, NULL, &device_param->d_bitmap_s2_d);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_plains,             NULL, &device_param->d_plain_bufs);     if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   size_digests,            NULL, &device_param->d_digests_buf);    if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_shown,              NULL, &device_param->d_digests_shown);  if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   size_salts,              NULL, &device_param->d_salt_bufs);      if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_results,            NULL, &device_param->d_result);         if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_scrypt4,            NULL, &device_param->d_scryptV0_buf);   if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_scrypt4,            NULL, &device_param->d_scryptV1_buf);   if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_scrypt4,            NULL, &device_param->d_scryptV2_buf);   if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_scrypt4,            NULL, &device_param->d_scryptV3_buf);   if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   size_st_digests,         NULL, &device_param->d_st_digests_buf); if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   size_st_salts,           NULL, &device_param->d_st_salts_buf);   if (CL_rc == -1) return -1;\n\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bitmap_s1_a,     CL_TRUE, 0, bitmap_ctx->bitmap_size, bitmap_ctx->bitmap_s1_a, 0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bitmap_s1_b,     CL_TRUE, 0, bitmap_ctx->bitmap_size, bitmap_ctx->bitmap_s1_b, 0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bitmap_s1_c,     CL_TRUE, 0, bitmap_ctx->bitmap_size, bitmap_ctx->bitmap_s1_c, 0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bitmap_s1_d,     CL_TRUE, 0, bitmap_ctx->bitmap_size, bitmap_ctx->bitmap_s1_d, 0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bitmap_s2_a,     CL_TRUE, 0, bitmap_ctx->bitmap_size, bitmap_ctx->bitmap_s2_a, 0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bitmap_s2_b,     CL_TRUE, 0, bitmap_ctx->bitmap_size, bitmap_ctx->bitmap_s2_b, 0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bitmap_s2_c,     CL_TRUE, 0, bitmap_ctx->bitmap_size, bitmap_ctx->bitmap_s2_c, 0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_bitmap_s2_d,     CL_TRUE, 0, bitmap_ctx->bitmap_size, bitmap_ctx->bitmap_s2_d, 0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_digests_buf,     CL_TRUE, 0, size_digests,            hashes->digests_buf,     0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_salt_bufs,       CL_TRUE, 0, size_salts,              hashes->salts_buf,       0, NULL, NULL); if (CL_rc == -1) return -1;\n\n    /**\n     * special buffers\n     */\n\n    if (user_options->slow_candidates == true)\n    {\n      CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_rules_c, NULL, &device_param->d_rules_c); if (CL_rc == -1) return -1;\n    }\n    else\n    {\n      if (user_options_extra->attack_kern == ATTACK_KERN_STRAIGHT)\n      {\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_rules,   NULL, &device_param->d_rules);   if (CL_rc == -1) return -1;\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_rules_c, NULL, &device_param->d_rules_c); if (CL_rc == -1) return -1;\n\n        CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_rules, CL_TRUE, 0, size_rules, straight_ctx->kernel_rules_buf, 0, NULL, NULL); if (CL_rc == -1) return -1;\n      }\n      else if (user_options_extra->attack_kern == ATTACK_KERN_COMBI)\n      {\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_combs,      NULL, &device_param->d_combs);          if (CL_rc == -1) return -1;\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_combs,      NULL, &device_param->d_combs_c);        if (CL_rc == -1) return -1;\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_root_css,   NULL, &device_param->d_root_css_buf);   if (CL_rc == -1) return -1;\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_markov_css, NULL, &device_param->d_markov_css_buf); if (CL_rc == -1) return -1;\n      }\n      else if (user_options_extra->attack_kern == ATTACK_KERN_BF)\n      {\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_bfs,        NULL, &device_param->d_bfs);            if (CL_rc == -1) return -1;\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_bfs,        NULL, &device_param->d_bfs_c);          if (CL_rc == -1) return -1;\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_tm,         NULL, &device_param->d_tm_c);           if (CL_rc == -1) return -1;\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_root_css,   NULL, &device_param->d_root_css_buf);   if (CL_rc == -1) return -1;\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_markov_css, NULL, &device_param->d_markov_css_buf); if (CL_rc == -1) return -1;\n      }\n    }\n\n    if (size_esalts)\n    {\n      CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_esalts, NULL, &device_param->d_esalt_bufs);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_esalt_bufs, CL_TRUE, 0, size_esalts, hashes->esalts_buf, 0, NULL, NULL);\n\n      if (CL_rc == -1) return -1;\n    }\n\n    if (hashconfig->st_hash != NULL)\n    {\n      CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_st_digests_buf,  CL_TRUE, 0, size_st_digests,         hashes->st_digests_buf,  0, NULL, NULL); if (CL_rc == -1) return -1;\n      CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_st_salts_buf,    CL_TRUE, 0, size_st_salts,           hashes->st_salts_buf,    0, NULL, NULL); if (CL_rc == -1) return -1;\n\n      if (size_esalts)\n      {\n        CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY, size_st_esalts, NULL, &device_param->d_st_esalts_buf);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_st_esalts_buf, CL_TRUE, 0, size_st_esalts, hashes->st_esalts_buf, 0, NULL, NULL);\n\n        if (CL_rc == -1) return -1;\n      }\n    }\n\n    /**\n     * kernel args\n     */\n\n    device_param->kernel_params_buf32[24] = bitmap_ctx->bitmap_mask;\n    device_param->kernel_params_buf32[25] = bitmap_ctx->bitmap_shift1;\n    device_param->kernel_params_buf32[26] = bitmap_ctx->bitmap_shift2;\n    device_param->kernel_params_buf32[27] = 0; // salt_pos\n    device_param->kernel_params_buf32[28] = 0; // loop_pos\n    device_param->kernel_params_buf32[29] = 0; // loop_cnt\n    device_param->kernel_params_buf32[30] = 0; // kernel_rules_cnt\n    device_param->kernel_params_buf32[31] = 0; // digests_cnt\n    device_param->kernel_params_buf32[32] = 0; // digests_offset\n    device_param->kernel_params_buf32[33] = 0; // combs_mode\n    device_param->kernel_params_buf64[34] = 0; // gid_max\n\n    device_param->kernel_params[ 0] = NULL; // &device_param->d_pws_buf;\n    device_param->kernel_params[ 1] = &device_param->d_rules_c;\n    device_param->kernel_params[ 2] = &device_param->d_combs_c;\n    device_param->kernel_params[ 3] = &device_param->d_bfs_c;\n    device_param->kernel_params[ 4] = NULL; // &device_param->d_tmps;\n    device_param->kernel_params[ 5] = NULL; // &device_param->d_hooks;\n    device_param->kernel_params[ 6] = &device_param->d_bitmap_s1_a;\n    device_param->kernel_params[ 7] = &device_param->d_bitmap_s1_b;\n    device_param->kernel_params[ 8] = &device_param->d_bitmap_s1_c;\n    device_param->kernel_params[ 9] = &device_param->d_bitmap_s1_d;\n    device_param->kernel_params[10] = &device_param->d_bitmap_s2_a;\n    device_param->kernel_params[11] = &device_param->d_bitmap_s2_b;\n    device_param->kernel_params[12] = &device_param->d_bitmap_s2_c;\n    device_param->kernel_params[13] = &device_param->d_bitmap_s2_d;\n    device_param->kernel_params[14] = &device_param->d_plain_bufs;\n    device_param->kernel_params[15] = &device_param->d_digests_buf;\n    device_param->kernel_params[16] = &device_param->d_digests_shown;\n    device_param->kernel_params[17] = &device_param->d_salt_bufs;\n    device_param->kernel_params[18] = &device_param->d_esalt_bufs;\n    device_param->kernel_params[19] = &device_param->d_result;\n    device_param->kernel_params[20] = &device_param->d_scryptV0_buf;\n    device_param->kernel_params[21] = &device_param->d_scryptV1_buf;\n    device_param->kernel_params[22] = &device_param->d_scryptV2_buf;\n    device_param->kernel_params[23] = &device_param->d_scryptV3_buf;\n    device_param->kernel_params[24] = &device_param->kernel_params_buf32[24];\n    device_param->kernel_params[25] = &device_param->kernel_params_buf32[25];\n    device_param->kernel_params[26] = &device_param->kernel_params_buf32[26];\n    device_param->kernel_params[27] = &device_param->kernel_params_buf32[27];\n    device_param->kernel_params[28] = &device_param->kernel_params_buf32[28];\n    device_param->kernel_params[29] = &device_param->kernel_params_buf32[29];\n    device_param->kernel_params[30] = &device_param->kernel_params_buf32[30];\n    device_param->kernel_params[31] = &device_param->kernel_params_buf32[31];\n    device_param->kernel_params[32] = &device_param->kernel_params_buf32[32];\n    device_param->kernel_params[33] = &device_param->kernel_params_buf32[33];\n    device_param->kernel_params[34] = &device_param->kernel_params_buf64[34];\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      device_param->kernel_params_mp_buf64[3] = 0;\n      device_param->kernel_params_mp_buf32[4] = 0;\n      device_param->kernel_params_mp_buf32[5] = 0;\n      device_param->kernel_params_mp_buf32[6] = 0;\n      device_param->kernel_params_mp_buf32[7] = 0;\n      device_param->kernel_params_mp_buf64[8] = 0;\n\n      if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n      {\n        device_param->kernel_params_mp[0] = &device_param->d_combs;\n      }\n      else\n      {\n        if (user_options->attack_mode == ATTACK_MODE_HYBRID1)\n        {\n          device_param->kernel_params_mp[0] = &device_param->d_combs;\n        }\n        else\n        {\n          device_param->kernel_params_mp[0] = NULL; // (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n                                                    // ? &device_param->d_pws_buf\n                                                    // : &device_param->d_pws_amp_buf;\n        }\n      }\n\n      device_param->kernel_params_mp[1] = &device_param->d_root_css_buf;\n      device_param->kernel_params_mp[2] = &device_param->d_markov_css_buf;\n      device_param->kernel_params_mp[3] = &device_param->kernel_params_mp_buf64[3];\n      device_param->kernel_params_mp[4] = &device_param->kernel_params_mp_buf32[4];\n      device_param->kernel_params_mp[5] = &device_param->kernel_params_mp_buf32[5];\n      device_param->kernel_params_mp[6] = &device_param->kernel_params_mp_buf32[6];\n      device_param->kernel_params_mp[7] = &device_param->kernel_params_mp_buf32[7];\n      device_param->kernel_params_mp[8] = &device_param->kernel_params_mp_buf64[8];\n\n      device_param->kernel_params_mp_l_buf64[3] = 0;\n      device_param->kernel_params_mp_l_buf32[4] = 0;\n      device_param->kernel_params_mp_l_buf32[5] = 0;\n      device_param->kernel_params_mp_l_buf32[6] = 0;\n      device_param->kernel_params_mp_l_buf32[7] = 0;\n      device_param->kernel_params_mp_l_buf32[8] = 0;\n      device_param->kernel_params_mp_l_buf64[9] = 0;\n\n      device_param->kernel_params_mp_l[0] = NULL; // (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n                                                  // ? &device_param->d_pws_buf\n                                                  // : &device_param->d_pws_amp_buf;\n      device_param->kernel_params_mp_l[1] = &device_param->d_root_css_buf;\n      device_param->kernel_params_mp_l[2] = &device_param->d_markov_css_buf;\n      device_param->kernel_params_mp_l[3] = &device_param->kernel_params_mp_l_buf64[3];\n      device_param->kernel_params_mp_l[4] = &device_param->kernel_params_mp_l_buf32[4];\n      device_param->kernel_params_mp_l[5] = &device_param->kernel_params_mp_l_buf32[5];\n      device_param->kernel_params_mp_l[6] = &device_param->kernel_params_mp_l_buf32[6];\n      device_param->kernel_params_mp_l[7] = &device_param->kernel_params_mp_l_buf32[7];\n      device_param->kernel_params_mp_l[8] = &device_param->kernel_params_mp_l_buf32[8];\n      device_param->kernel_params_mp_l[9] = &device_param->kernel_params_mp_l_buf64[9];\n\n      device_param->kernel_params_mp_r_buf64[3] = 0;\n      device_param->kernel_params_mp_r_buf32[4] = 0;\n      device_param->kernel_params_mp_r_buf32[5] = 0;\n      device_param->kernel_params_mp_r_buf32[6] = 0;\n      device_param->kernel_params_mp_r_buf32[7] = 0;\n      device_param->kernel_params_mp_r_buf64[8] = 0;\n\n      device_param->kernel_params_mp_r[0] = &device_param->d_bfs;\n      device_param->kernel_params_mp_r[1] = &device_param->d_root_css_buf;\n      device_param->kernel_params_mp_r[2] = &device_param->d_markov_css_buf;\n      device_param->kernel_params_mp_r[3] = &device_param->kernel_params_mp_r_buf64[3];\n      device_param->kernel_params_mp_r[4] = &device_param->kernel_params_mp_r_buf32[4];\n      device_param->kernel_params_mp_r[5] = &device_param->kernel_params_mp_r_buf32[5];\n      device_param->kernel_params_mp_r[6] = &device_param->kernel_params_mp_r_buf32[6];\n      device_param->kernel_params_mp_r[7] = &device_param->kernel_params_mp_r_buf32[7];\n      device_param->kernel_params_mp_r[8] = &device_param->kernel_params_mp_r_buf64[8];\n\n      device_param->kernel_params_amp_buf32[5] = 0; // combs_mode\n      device_param->kernel_params_amp_buf64[6] = 0; // gid_max\n\n      device_param->kernel_params_amp[0] = NULL; // &device_param->d_pws_buf;\n      device_param->kernel_params_amp[1] = NULL; // &device_param->d_pws_amp_buf;\n      device_param->kernel_params_amp[2] = &device_param->d_rules_c;\n      device_param->kernel_params_amp[3] = &device_param->d_combs_c;\n      device_param->kernel_params_amp[4] = &device_param->d_bfs_c;\n      device_param->kernel_params_amp[5] = &device_param->kernel_params_amp_buf32[5];\n      device_param->kernel_params_amp[6] = &device_param->kernel_params_amp_buf64[6];\n\n      device_param->kernel_params_tm[0] = &device_param->d_bfs_c;\n      device_param->kernel_params_tm[1] = &device_param->d_tm_c;\n    }\n\n    device_param->kernel_params_memset_buf32[1] = 0; // value\n    device_param->kernel_params_memset_buf64[2] = 0; // gid_max\n\n    device_param->kernel_params_memset[0] = NULL;\n    device_param->kernel_params_memset[1] = &device_param->kernel_params_memset_buf32[1];\n    device_param->kernel_params_memset[2] = &device_param->kernel_params_memset_buf64[2];\n\n    device_param->kernel_params_atinit_buf64[1] = 0; // gid_max\n\n    device_param->kernel_params_atinit[0] = NULL;\n    device_param->kernel_params_atinit[1] = &device_param->kernel_params_atinit_buf64[1];\n\n    device_param->kernel_params_decompress_buf64[3] = 0; // gid_max\n\n    device_param->kernel_params_decompress[0] = NULL; // &device_param->d_pws_idx;\n    device_param->kernel_params_decompress[1] = NULL; // &device_param->d_pws_comp_buf;\n    device_param->kernel_params_decompress[2] = NULL; // (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n                                                      // ? &device_param->d_pws_buf\n                                                      // : &device_param->d_pws_amp_buf;\n    device_param->kernel_params_decompress[3] = &device_param->kernel_params_decompress_buf64[3];\n\n    /**\n     * kernel name\n     */\n\n    char kernel_name[64] = { 0 };\n\n    if (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n    {\n      if (hashconfig->opti_type & OPTI_TYPE_SINGLE_HASH)\n      {\n        if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n        {\n          // kernel1\n\n          snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_s%02d\", hashconfig->kern_type, 4);\n\n          CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel1);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_wgs1);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_local_mem_size1);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_preferred_wgs_multiple1);\n\n          if (CL_rc == -1) return -1;\n\n          // kernel2\n\n          snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_s%02d\", hashconfig->kern_type, 8);\n\n          CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel2);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_wgs2);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_local_mem_size2);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_preferred_wgs_multiple2);\n\n          if (CL_rc == -1) return -1;\n\n          // kernel3\n\n          snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_s%02d\", hashconfig->kern_type, 16);\n\n          CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel3);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_wgs3);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_local_mem_size3);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_preferred_wgs_multiple3);\n\n          if (CL_rc == -1) return -1;\n        }\n        else\n        {\n          snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_sxx\", hashconfig->kern_type);\n\n          CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel4);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel4, &device_param->kernel_wgs4);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel4, &device_param->kernel_local_mem_size4);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel4, &device_param->kernel_preferred_wgs_multiple4);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n      else\n      {\n        if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n        {\n          // kernel1\n\n          snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_m%02d\", hashconfig->kern_type, 4);\n\n          CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel1);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_wgs1);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_local_mem_size1);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_preferred_wgs_multiple1);\n\n          if (CL_rc == -1) return -1;\n\n          // kernel2\n\n          snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_m%02d\", hashconfig->kern_type, 8);\n\n          CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel2);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_wgs2);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_local_mem_size2);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_preferred_wgs_multiple2);\n\n          if (CL_rc == -1) return -1;\n\n          // kernel3\n\n          snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_m%02d\", hashconfig->kern_type, 16);\n\n          CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel3);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_wgs3);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_local_mem_size3);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_preferred_wgs_multiple3);\n\n          if (CL_rc == -1) return -1;\n        }\n        else\n        {\n          snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_mxx\", hashconfig->kern_type);\n\n          CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel4);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel4, &device_param->kernel_wgs4);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel4, &device_param->kernel_local_mem_size4);\n\n          if (CL_rc == -1) return -1;\n\n          CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel4, &device_param->kernel_preferred_wgs_multiple4);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n\n      if (user_options->slow_candidates == true)\n      {\n      }\n      else\n      {\n        if (user_options->attack_mode == ATTACK_MODE_BF)\n        {\n          if (hashconfig->opts_type & OPTS_TYPE_PT_BITSLICE)\n          {\n            snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_tm\", hashconfig->kern_type);\n\n            CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel_tm);\n\n            if (CL_rc == -1) return -1;\n\n            CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_tm, &device_param->kernel_wgs_tm);\n\n            if (CL_rc == -1) return -1;\n\n            CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_tm, &device_param->kernel_local_mem_size_tm);\n\n            if (CL_rc == -1) return -1;\n\n            CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_tm, &device_param->kernel_preferred_wgs_multiple_tm);\n\n            if (CL_rc == -1) return -1;\n          }\n        }\n      }\n    }\n    else\n    {\n      // kernel1\n\n      snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_init\", hashconfig->kern_type);\n\n      CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel1);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_wgs1);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_local_mem_size1);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel1, &device_param->kernel_preferred_wgs_multiple1);\n\n      if (CL_rc == -1) return -1;\n\n      // kernel2\n\n      snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_loop\", hashconfig->kern_type);\n\n      CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel2);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_wgs2);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_local_mem_size2);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel2, &device_param->kernel_preferred_wgs_multiple2);\n\n      if (CL_rc == -1) return -1;\n\n      // kernel3\n\n      snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_comp\", hashconfig->kern_type);\n\n      CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel3);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_wgs3);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_local_mem_size3);\n\n      if (CL_rc == -1) return -1;\n\n      CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel3, &device_param->kernel_preferred_wgs_multiple3);\n\n      if (CL_rc == -1) return -1;\n\n      // kernel12\n\n      if (hashconfig->opts_type & OPTS_TYPE_HOOK12)\n      {\n        snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_hook12\", hashconfig->kern_type);\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel12);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel12, &device_param->kernel_wgs12);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel12, &device_param->kernel_local_mem_size12);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel12, &device_param->kernel_preferred_wgs_multiple12);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      // kernel23\n\n      if (hashconfig->opts_type & OPTS_TYPE_HOOK23)\n      {\n        snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_hook23\", hashconfig->kern_type);\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel23);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel23, &device_param->kernel_wgs23);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel23, &device_param->kernel_local_mem_size23);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel23, &device_param->kernel_preferred_wgs_multiple23);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      // init2\n\n      if (hashconfig->opts_type & OPTS_TYPE_INIT2)\n      {\n        snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_init2\", hashconfig->kern_type);\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel_init2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_init2, &device_param->kernel_wgs_init2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_init2, &device_param->kernel_local_mem_size_init2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_init2, &device_param->kernel_preferred_wgs_multiple_init2);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      // loop2\n\n      if (hashconfig->opts_type & OPTS_TYPE_LOOP2)\n      {\n        snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_loop2\", hashconfig->kern_type);\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel_loop2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_loop2, &device_param->kernel_wgs_loop2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_loop2, &device_param->kernel_local_mem_size_loop2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_loop2, &device_param->kernel_preferred_wgs_multiple_loop2);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      // aux1\n\n      if (hashconfig->opts_type & OPTS_TYPE_AUX1)\n      {\n        snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_aux1\", hashconfig->kern_type);\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel_aux1);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_aux1, &device_param->kernel_wgs_aux1);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_aux1, &device_param->kernel_local_mem_size_aux1);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_aux1, &device_param->kernel_preferred_wgs_multiple_aux1);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      // aux2\n\n      if (hashconfig->opts_type & OPTS_TYPE_AUX2)\n      {\n        snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_aux2\", hashconfig->kern_type);\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel_aux2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_aux2, &device_param->kernel_wgs_aux2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_aux2, &device_param->kernel_local_mem_size_aux2);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_aux2, &device_param->kernel_preferred_wgs_multiple_aux2);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      // aux3\n\n      if (hashconfig->opts_type & OPTS_TYPE_AUX3)\n      {\n        snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_aux3\", hashconfig->kern_type);\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel_aux3);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_aux3, &device_param->kernel_wgs_aux3);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_aux3, &device_param->kernel_local_mem_size_aux3);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_aux3, &device_param->kernel_preferred_wgs_multiple_aux3);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      // aux4\n\n      if (hashconfig->opts_type & OPTS_TYPE_AUX4)\n      {\n        snprintf (kernel_name, sizeof (kernel_name) - 1, \"m%05u_aux4\", hashconfig->kern_type);\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, kernel_name, &device_param->kernel_aux4);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_aux4, &device_param->kernel_wgs_aux4);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_aux4, &device_param->kernel_local_mem_size_aux4);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_aux4, &device_param->kernel_preferred_wgs_multiple_aux4);\n\n        if (CL_rc == -1) return -1;\n      }\n    }\n\n    // GPU memset\n\n    CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, \"gpu_memset\", &device_param->kernel_memset);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_memset, &device_param->kernel_wgs_memset);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_memset, &device_param->kernel_local_mem_size_memset);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_memset, &device_param->kernel_preferred_wgs_multiple_memset);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_memset, 0, sizeof (cl_mem),   device_param->kernel_params_memset[0]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_memset, 1, sizeof (cl_uint),  device_param->kernel_params_memset[1]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_memset, 2, sizeof (cl_ulong), device_param->kernel_params_memset[2]); if (CL_rc == -1) return -1;\n\n    // GPU autotune init\n\n    CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, \"gpu_atinit\", &device_param->kernel_atinit);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_atinit, &device_param->kernel_wgs_atinit);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_atinit, &device_param->kernel_local_mem_size_atinit);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_atinit, &device_param->kernel_preferred_wgs_multiple_atinit);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_atinit, 0, sizeof (cl_mem),   device_param->kernel_params_atinit[0]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_atinit, 1, sizeof (cl_ulong), device_param->kernel_params_atinit[1]); if (CL_rc == -1) return -1;\n\n    // GPU decompress\n\n    CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program, \"gpu_decompress\", &device_param->kernel_decompress);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_decompress, &device_param->kernel_wgs_decompress);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_decompress, &device_param->kernel_local_mem_size_decompress);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_decompress, &device_param->kernel_preferred_wgs_multiple_decompress);\n\n    if (CL_rc == -1) return -1;\n\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_decompress, 0, sizeof (cl_mem),   device_param->kernel_params_decompress[0]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_decompress, 1, sizeof (cl_mem),   device_param->kernel_params_decompress[1]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_decompress, 2, sizeof (cl_mem),   device_param->kernel_params_decompress[2]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_decompress, 3, sizeof (cl_ulong), device_param->kernel_params_decompress[3]); if (CL_rc == -1) return -1;\n\n    // MP start\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      if (user_options->attack_mode == ATTACK_MODE_BF)\n      {\n        // mp_l\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program_mp, \"l_markov\", &device_param->kernel_mp_l);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_mp_l, &device_param->kernel_wgs_mp_l);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_mp_l, &device_param->kernel_local_mem_size_mp_l);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_mp_l, &device_param->kernel_preferred_wgs_multiple_mp_l);\n\n        if (CL_rc == -1) return -1;\n\n        // mp_r\n\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program_mp, \"r_markov\", &device_param->kernel_mp_r);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_mp_r, &device_param->kernel_wgs_mp_r);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_mp_r, &device_param->kernel_local_mem_size_mp_r);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_mp_r, &device_param->kernel_preferred_wgs_multiple_mp_r);\n\n        if (CL_rc == -1) return -1;\n\n        if (hashconfig->opts_type & OPTS_TYPE_PT_BITSLICE)\n        {\n          CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_tm, 0, sizeof (cl_mem), device_param->kernel_params_tm[0]); if (CL_rc == -1) return -1;\n          CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_tm, 1, sizeof (cl_mem), device_param->kernel_params_tm[1]); if (CL_rc == -1) return -1;\n        }\n      }\n      else if (user_options->attack_mode == ATTACK_MODE_HYBRID1)\n      {\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program_mp, \"C_markov\", &device_param->kernel_mp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_mp, &device_param->kernel_wgs_mp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_mp, &device_param->kernel_local_mem_size_mp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_mp, &device_param->kernel_preferred_wgs_multiple_mp);\n\n        if (CL_rc == -1) return -1;\n      }\n      else if (user_options->attack_mode == ATTACK_MODE_HYBRID2)\n      {\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program_mp, \"C_markov\", &device_param->kernel_mp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_mp, &device_param->kernel_wgs_mp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_mp, &device_param->kernel_local_mem_size_mp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_mp, &device_param->kernel_preferred_wgs_multiple_mp);\n\n        if (CL_rc == -1) return -1;\n      }\n    }\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      if (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n      {\n        // nothing to do\n      }\n      else\n      {\n        CL_rc = hc_clCreateKernel (hashcat_ctx, device_param->program_amp, \"amp\", &device_param->kernel_amp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_wgs (hashcat_ctx, device_param, device_param->kernel_amp, &device_param->kernel_wgs_amp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_local_mem_size (hashcat_ctx, device_param, device_param->kernel_amp, &device_param->kernel_local_mem_size_amp);\n\n        if (CL_rc == -1) return -1;\n\n        CL_rc = get_kernel_preferred_wgs_multiple (hashcat_ctx, device_param, device_param->kernel_amp, &device_param->kernel_preferred_wgs_multiple_amp);\n\n        if (CL_rc == -1) return -1;\n      }\n\n      if (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n      {\n        // nothing to do\n      }\n      else\n      {\n        for (u32 i = 0; i < 5; i++)\n        {\n          CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_amp, i, sizeof (cl_mem), device_param->kernel_params_amp[i]);\n\n          if (CL_rc == -1) return -1;\n        }\n\n        for (u32 i = 5; i < 6; i++)\n        {\n          CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_amp, i, sizeof (cl_uint), device_param->kernel_params_amp[i]);\n\n          if (CL_rc == -1) return -1;\n        }\n\n        for (u32 i = 6; i < 7; i++)\n        {\n          CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_amp, i, sizeof (cl_ulong), device_param->kernel_params_amp[i]);\n\n          if (CL_rc == -1) return -1;\n        }\n      }\n    }\n\n    // zero some data buffers\n\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_plain_bufs,    device_param->size_plains);   if (CL_rc == -1) return -1;\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_digests_shown, device_param->size_shown);    if (CL_rc == -1) return -1;\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_result,        device_param->size_results);  if (CL_rc == -1) return -1;\n\n    /**\n     * special buffers\n     */\n\n    if (user_options->slow_candidates == true)\n    {\n      CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_rules_c, size_rules_c); if (CL_rc == -1) return -1;\n    }\n    else\n    {\n      if (user_options_extra->attack_kern == ATTACK_KERN_STRAIGHT)\n      {\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_rules_c, size_rules_c); if (CL_rc == -1) return -1;\n      }\n      else if (user_options_extra->attack_kern == ATTACK_KERN_COMBI)\n      {\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_combs,          size_combs);       if (CL_rc == -1) return -1;\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_combs_c,        size_combs);       if (CL_rc == -1) return -1;\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_root_css_buf,   size_root_css);    if (CL_rc == -1) return -1;\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_markov_css_buf, size_markov_css);  if (CL_rc == -1) return -1;\n      }\n      else if (user_options_extra->attack_kern == ATTACK_KERN_BF)\n      {\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_bfs,            size_bfs);         if (CL_rc == -1) return -1;\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_bfs_c,          size_bfs);         if (CL_rc == -1) return -1;\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_tm_c,           size_tm);          if (CL_rc == -1) return -1;\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_root_css_buf,   size_root_css);    if (CL_rc == -1) return -1;\n        CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_markov_css_buf, size_markov_css);  if (CL_rc == -1) return -1;\n      }\n    }\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      if ((user_options->attack_mode == ATTACK_MODE_HYBRID1) || (user_options->attack_mode == ATTACK_MODE_HYBRID2))\n      {\n        /**\n         * prepare mp\n         */\n\n        if (user_options->attack_mode == ATTACK_MODE_HYBRID1)\n        {\n          device_param->kernel_params_mp_buf32[5] = 0;\n          device_param->kernel_params_mp_buf32[6] = 0;\n          device_param->kernel_params_mp_buf32[7] = 0;\n\n          if (hashconfig->opts_type & OPTS_TYPE_PT_ADD01)     device_param->kernel_params_mp_buf32[5] = full01;\n          if (hashconfig->opts_type & OPTS_TYPE_PT_ADD06)     device_param->kernel_params_mp_buf32[5] = full06;\n          if (hashconfig->opts_type & OPTS_TYPE_PT_ADD80)     device_param->kernel_params_mp_buf32[5] = full80;\n          if (hashconfig->opts_type & OPTS_TYPE_PT_ADDBITS14) device_param->kernel_params_mp_buf32[6] = 1;\n          if (hashconfig->opts_type & OPTS_TYPE_PT_ADDBITS15) device_param->kernel_params_mp_buf32[7] = 1;\n        }\n        else if (user_options->attack_mode == ATTACK_MODE_HYBRID2)\n        {\n          device_param->kernel_params_mp_buf32[5] = 0;\n          device_param->kernel_params_mp_buf32[6] = 0;\n          device_param->kernel_params_mp_buf32[7] = 0;\n        }\n\n        for (u32 i = 0; i < 3; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp, i, sizeof (cl_mem), device_param->kernel_params_mp[i]); if (CL_rc == -1) return -1; }\n      }\n      else if (user_options->attack_mode == ATTACK_MODE_BF)\n      {\n        /**\n         * prepare mp_r and mp_l\n         */\n\n        device_param->kernel_params_mp_l_buf32[6] = 0;\n        device_param->kernel_params_mp_l_buf32[7] = 0;\n        device_param->kernel_params_mp_l_buf32[8] = 0;\n\n        if (hashconfig->opts_type & OPTS_TYPE_PT_ADD01)     device_param->kernel_params_mp_l_buf32[6] = full01;\n        if (hashconfig->opts_type & OPTS_TYPE_PT_ADD06)     device_param->kernel_params_mp_l_buf32[6] = full06;\n        if (hashconfig->opts_type & OPTS_TYPE_PT_ADD80)     device_param->kernel_params_mp_l_buf32[6] = full80;\n        if (hashconfig->opts_type & OPTS_TYPE_PT_ADDBITS14) device_param->kernel_params_mp_l_buf32[7] = 1;\n        if (hashconfig->opts_type & OPTS_TYPE_PT_ADDBITS15) device_param->kernel_params_mp_l_buf32[8] = 1;\n\n        for (u32 i = 0; i < 3; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_l, i, sizeof (cl_mem), device_param->kernel_params_mp_l[i]); if (CL_rc == -1) return -1; }\n        for (u32 i = 0; i < 3; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_r, i, sizeof (cl_mem), device_param->kernel_params_mp_r[i]); if (CL_rc == -1) return -1; }\n      }\n    }\n\n    /**\n     * now everything that depends on threads and accel, basically dynamic workload\n     */\n\n    const u32 kernel_threads = hashconfig_get_kernel_threads (hashcat_ctx, device_param);\n\n    device_param->kernel_threads = kernel_threads;\n\n    device_param->hardware_power = device_processors * kernel_threads;\n\n    u32 kernel_accel_min = device_param->kernel_accel_min;\n    u32 kernel_accel_max = device_param->kernel_accel_max;\n\n    // find out if we would request too much memory on memory blocks which are based on kernel_accel\n\n    size_t size_pws      = 4;\n    size_t size_pws_amp  = 4;\n    size_t size_pws_comp = 4;\n    size_t size_pws_idx  = 4;\n    size_t size_pws_pre  = 4;\n    size_t size_pws_base = 4;\n    size_t size_tmps     = 4;\n    size_t size_hooks    = 4;\n    #ifdef WITH_BRAIN\n    size_t size_brain_link_in  = 4;\n    size_t size_brain_link_out = 4;\n    #endif\n\n    // instead of a thread limit we can also use a memory limit.\n    // this value should represent a reasonable amount of memory a host system has per GPU.\n    // note we're allocating 3 blocks of that size.\n\n    #define PWS_SPACE (1024 * 1024 * 1024)\n\n    // sometimes device_available_mem and device_maxmem_alloc reported back from the opencl runtime are a bit inaccurate.\n    // let's add some extra space just to be sure.\n\n    #define EXTRA_SPACE (64 * 1024 * 1024)\n\n    while (kernel_accel_max >= kernel_accel_min)\n    {\n      const u64 kernel_power_max = device_param->hardware_power * kernel_accel_max;\n\n      // size_pws\n\n      size_pws = (size_t) kernel_power_max * sizeof (pw_t);\n\n      size_pws_amp = (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL) ? 1 : size_pws;\n\n      // size_pws_comp\n\n      size_pws_comp = (size_t) kernel_power_max * (sizeof (u32) * 64);\n\n      // size_pws_idx\n\n      size_pws_idx = (size_t) (kernel_power_max + 1) * sizeof (pw_idx_t);\n\n      // size_tmps\n\n      size_tmps = (size_t) kernel_power_max * hashconfig->tmp_size;\n\n      // size_hooks\n\n      size_hooks = (size_t) kernel_power_max * hashconfig->hook_size;\n\n      #ifdef WITH_BRAIN\n      // size_brains\n\n      size_brain_link_in  = (size_t) kernel_power_max * 1;\n      size_brain_link_out = (size_t) kernel_power_max * 8;\n      #endif\n\n      if (user_options->slow_candidates == true)\n      {\n        // size_pws_pre\n\n        size_pws_pre = (size_t) kernel_power_max * sizeof (pw_pre_t);\n\n        // size_pws_base\n\n        size_pws_base = (size_t) kernel_power_max * sizeof (pw_pre_t);\n      }\n\n      // now check if all device-memory sizes which depend on the kernel_accel_max amplifier are within its boundaries\n      // if not, decrease amplifier and try again\n\n      int memory_limit_hit = 0;\n\n      if (size_pws > PWS_SPACE) memory_limit_hit = 1;\n\n      if ((size_pws   + EXTRA_SPACE) > device_param->device_maxmem_alloc) memory_limit_hit = 1;\n      if ((size_tmps  + EXTRA_SPACE) > device_param->device_maxmem_alloc) memory_limit_hit = 1;\n      if ((size_hooks + EXTRA_SPACE) > device_param->device_maxmem_alloc) memory_limit_hit = 1;\n\n      const size_t size_total\n        = bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + bitmap_ctx->bitmap_size\n        + size_bfs\n        + size_combs\n        + size_digests\n        + size_esalts\n        + size_hooks\n        + size_markov_css\n        + size_plains\n        + size_pws\n        + size_pws_amp\n        + size_pws_comp\n        + size_pws_idx\n        + size_results\n        + size_root_css\n        + size_rules\n        + size_rules_c\n        + size_salts\n        + size_scrypt4\n        + size_scrypt4\n        + size_scrypt4\n        + size_scrypt4\n        + size_shown\n        + size_tm\n        + size_tmps\n        + size_st_digests\n        + size_st_salts\n        + size_st_esalts;\n\n      if ((size_total + EXTRA_SPACE) > device_param->device_available_mem) memory_limit_hit = 1;\n\n      const size_t size_total_host\n        = size_pws_comp\n        + size_pws_idx\n        + size_hooks\n        #ifdef WITH_BRAIN\n        + size_brain_link_in\n        + size_brain_link_out\n        #endif\n        + size_pws_pre\n        + size_pws_base;\n\n      if ((size_total_host + EXTRA_SPACE) > device_param->device_maxmem_alloc) memory_limit_hit = 1;\n\n      if (memory_limit_hit == 1)\n      {\n        kernel_accel_max--;\n\n        continue;\n      }\n\n      break;\n    }\n\n    if (kernel_accel_max < kernel_accel_min)\n    {\n      event_log_error (hashcat_ctx, \"* Device #%u: Not enough allocatable device memory for this attack.\", device_id + 1);\n\n      return -1;\n    }\n\n    device_param->kernel_accel_min = kernel_accel_min;\n    device_param->kernel_accel_max = kernel_accel_max;\n\n    device_param->size_pws      = size_pws;\n    device_param->size_pws_amp  = size_pws_amp;\n    device_param->size_pws_comp = size_pws_comp;\n    device_param->size_pws_idx  = size_pws_idx;\n    device_param->size_pws_pre  = size_pws_pre;\n    device_param->size_pws_base = size_pws_base;\n    device_param->size_tmps     = size_tmps;\n    device_param->size_hooks    = size_hooks;\n    #ifdef WITH_BRAIN\n    device_param->size_brain_link_in  = size_brain_link_in;\n    device_param->size_brain_link_out = size_brain_link_out;\n    #endif\n\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_pws,      NULL, &device_param->d_pws_buf);      if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_pws_amp,  NULL, &device_param->d_pws_amp_buf);  if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   size_pws_comp, NULL, &device_param->d_pws_comp_buf); if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_ONLY,   size_pws_idx,  NULL, &device_param->d_pws_idx);      if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_tmps,     NULL, &device_param->d_tmps);         if (CL_rc == -1) return -1;\n    CL_rc = hc_clCreateBuffer (hashcat_ctx, device_param->context, CL_MEM_READ_WRITE,  size_hooks,    NULL, &device_param->d_hooks);        if (CL_rc == -1) return -1;\n\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_pws_buf,       device_param->size_pws);      if (CL_rc == -1) return -1;\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_pws_amp_buf,   device_param->size_pws_amp);  if (CL_rc == -1) return -1;\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_pws_comp_buf,  device_param->size_pws_comp); if (CL_rc == -1) return -1;\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_pws_idx,       device_param->size_pws_idx);  if (CL_rc == -1) return -1;\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_tmps,          device_param->size_tmps);     if (CL_rc == -1) return -1;\n    CL_rc = run_kernel_bzero (hashcat_ctx, device_param, device_param->d_hooks,         device_param->size_hooks);    if (CL_rc == -1) return -1;\n\n    /**\n     * main host data\n     */\n\n    u32 *pws_comp = (u32 *) hcmalloc (size_pws_comp);\n\n    device_param->pws_comp = pws_comp;\n\n    pw_idx_t *pws_idx = (pw_idx_t *) hcmalloc (size_pws_idx);\n\n    device_param->pws_idx = pws_idx;\n\n    pw_t *combs_buf = (pw_t *) hccalloc (KERNEL_COMBS, sizeof (pw_t));\n\n    device_param->combs_buf = combs_buf;\n\n    void *hooks_buf = hcmalloc (size_hooks);\n\n    device_param->hooks_buf = hooks_buf;\n\n    char *scratch_buf = (char *) hcmalloc (HCBUFSIZ_LARGE);\n\n    device_param->scratch_buf = scratch_buf;\n\n    #ifdef WITH_BRAIN\n    u8 *brain_link_in_buf = (u8 *) hcmalloc (size_brain_link_in);\n\n    device_param->brain_link_in_buf = brain_link_in_buf;\n\n    u32 *brain_link_out_buf = (u32 *) hcmalloc (size_brain_link_out);\n\n    device_param->brain_link_out_buf = brain_link_out_buf;\n    #endif\n\n    pw_pre_t *pws_pre_buf = (pw_pre_t *) hcmalloc (size_pws_pre);\n\n    device_param->pws_pre_buf = pws_pre_buf;\n\n    pw_pre_t *pws_base_buf = (pw_pre_t *) hcmalloc (size_pws_base);\n\n    device_param->pws_base_buf = pws_base_buf;\n\n    /**\n     * kernel args\n     */\n\n    device_param->kernel_params[ 0] = &device_param->d_pws_buf;\n    device_param->kernel_params[ 4] = &device_param->d_tmps;\n    device_param->kernel_params[ 5] = &device_param->d_hooks;\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      if (hashconfig->opti_type & OPTI_TYPE_OPTIMIZED_KERNEL)\n      {\n        // nothing to do\n      }\n      else\n      {\n        if (user_options->attack_mode == ATTACK_MODE_HYBRID2)\n        {\n          device_param->kernel_params_mp[0] = (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n                                            ? &device_param->d_pws_buf\n                                            : &device_param->d_pws_amp_buf;\n\n          CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp, 0, sizeof (cl_mem), device_param->kernel_params_mp[0]); if (CL_rc == -1) return -1;\n        }\n      }\n\n      if (user_options->attack_mode == ATTACK_MODE_BF)\n      {\n        device_param->kernel_params_mp_l[0] = (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n                                            ? &device_param->d_pws_buf\n                                            : &device_param->d_pws_amp_buf;\n\n        CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_l, 0, sizeof (cl_mem), device_param->kernel_params_mp_l[0]); if (CL_rc == -1) return -1;\n      }\n\n      if (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n      {\n        // nothing to do\n      }\n      else\n      {\n        device_param->kernel_params_amp[0] = &device_param->d_pws_buf;\n        device_param->kernel_params_amp[1] = &device_param->d_pws_amp_buf;\n\n        CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_amp, 0, sizeof (cl_mem), device_param->kernel_params_amp[0]); if (CL_rc == -1) return -1;\n        CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_amp, 1, sizeof (cl_mem), device_param->kernel_params_amp[1]); if (CL_rc == -1) return -1;\n      }\n    }\n\n    device_param->kernel_params_decompress[0] = &device_param->d_pws_idx;\n    device_param->kernel_params_decompress[1] = &device_param->d_pws_comp_buf;\n    device_param->kernel_params_decompress[2] = (hashconfig->attack_exec == ATTACK_EXEC_INSIDE_KERNEL)\n                                              ? &device_param->d_pws_buf\n                                              : &device_param->d_pws_amp_buf;\n\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_decompress, 0, sizeof (cl_mem), device_param->kernel_params_decompress[0]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_decompress, 1, sizeof (cl_mem), device_param->kernel_params_decompress[1]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_decompress, 2, sizeof (cl_mem), device_param->kernel_params_decompress[2]); if (CL_rc == -1) return -1;\n\n    hardware_power_all += device_param->hardware_power;\n  }\n\n  // Prevent exit from benchmark mode if all devices are skipped due to unstable hash-modes (macOS)\n\n  bool has_skipped_temp = false;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped_temp == true) has_skipped_temp = true;\n  }\n\n  if ((hardware_power_all == 0) && (has_skipped_temp == false)) return -1;\n\n  opencl_ctx->hardware_power_all = hardware_power_all;\n\n  return 0;\n}\n\nvoid opencl_session_destroy (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (opencl_ctx->enabled == false) return;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped_temp == true)\n    {\n      device_param->skipped_temp = false;\n\n      device_param->skipped = false;\n\n      continue;\n    }\n\n    if (device_param->skipped == true) continue;\n\n    hcfree (device_param->pws_comp);\n    hcfree (device_param->pws_idx);\n    hcfree (device_param->pws_pre_buf);\n    hcfree (device_param->pws_base_buf);\n    hcfree (device_param->combs_buf);\n    hcfree (device_param->hooks_buf);\n    hcfree (device_param->scratch_buf);\n    #ifdef WITH_BRAIN\n    hcfree (device_param->brain_link_in_buf);\n    hcfree (device_param->brain_link_out_buf);\n    #endif\n\n    if (device_param->d_pws_buf)        hc_clReleaseMemObject (hashcat_ctx, device_param->d_pws_buf);\n    if (device_param->d_pws_amp_buf)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_pws_amp_buf);\n    if (device_param->d_pws_comp_buf)   hc_clReleaseMemObject (hashcat_ctx, device_param->d_pws_comp_buf);\n    if (device_param->d_pws_idx)        hc_clReleaseMemObject (hashcat_ctx, device_param->d_pws_idx);\n    if (device_param->d_rules)          hc_clReleaseMemObject (hashcat_ctx, device_param->d_rules);\n    if (device_param->d_rules_c)        hc_clReleaseMemObject (hashcat_ctx, device_param->d_rules_c);\n    if (device_param->d_combs)          hc_clReleaseMemObject (hashcat_ctx, device_param->d_combs);\n    if (device_param->d_combs_c)        hc_clReleaseMemObject (hashcat_ctx, device_param->d_combs_c);\n    if (device_param->d_bfs)            hc_clReleaseMemObject (hashcat_ctx, device_param->d_bfs);\n    if (device_param->d_bfs_c)          hc_clReleaseMemObject (hashcat_ctx, device_param->d_bfs_c);\n    if (device_param->d_bitmap_s1_a)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_bitmap_s1_a);\n    if (device_param->d_bitmap_s1_b)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_bitmap_s1_b);\n    if (device_param->d_bitmap_s1_c)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_bitmap_s1_c);\n    if (device_param->d_bitmap_s1_d)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_bitmap_s1_d);\n    if (device_param->d_bitmap_s2_a)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_bitmap_s2_a);\n    if (device_param->d_bitmap_s2_b)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_bitmap_s2_b);\n    if (device_param->d_bitmap_s2_c)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_bitmap_s2_c);\n    if (device_param->d_bitmap_s2_d)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_bitmap_s2_d);\n    if (device_param->d_plain_bufs)     hc_clReleaseMemObject (hashcat_ctx, device_param->d_plain_bufs);\n    if (device_param->d_digests_buf)    hc_clReleaseMemObject (hashcat_ctx, device_param->d_digests_buf);\n    if (device_param->d_digests_shown)  hc_clReleaseMemObject (hashcat_ctx, device_param->d_digests_shown);\n    if (device_param->d_salt_bufs)      hc_clReleaseMemObject (hashcat_ctx, device_param->d_salt_bufs);\n    if (device_param->d_esalt_bufs)     hc_clReleaseMemObject (hashcat_ctx, device_param->d_esalt_bufs);\n    if (device_param->d_tmps)           hc_clReleaseMemObject (hashcat_ctx, device_param->d_tmps);\n    if (device_param->d_hooks)          hc_clReleaseMemObject (hashcat_ctx, device_param->d_hooks);\n    if (device_param->d_result)         hc_clReleaseMemObject (hashcat_ctx, device_param->d_result);\n    if (device_param->d_scryptV0_buf)   hc_clReleaseMemObject (hashcat_ctx, device_param->d_scryptV0_buf);\n    if (device_param->d_scryptV1_buf)   hc_clReleaseMemObject (hashcat_ctx, device_param->d_scryptV1_buf);\n    if (device_param->d_scryptV2_buf)   hc_clReleaseMemObject (hashcat_ctx, device_param->d_scryptV2_buf);\n    if (device_param->d_scryptV3_buf)   hc_clReleaseMemObject (hashcat_ctx, device_param->d_scryptV3_buf);\n    if (device_param->d_root_css_buf)   hc_clReleaseMemObject (hashcat_ctx, device_param->d_root_css_buf);\n    if (device_param->d_markov_css_buf) hc_clReleaseMemObject (hashcat_ctx, device_param->d_markov_css_buf);\n    if (device_param->d_tm_c)           hc_clReleaseMemObject (hashcat_ctx, device_param->d_tm_c);\n    if (device_param->d_st_digests_buf) hc_clReleaseMemObject (hashcat_ctx, device_param->d_st_digests_buf);\n    if (device_param->d_st_salts_buf)   hc_clReleaseMemObject (hashcat_ctx, device_param->d_st_salts_buf);\n    if (device_param->d_st_esalts_buf)  hc_clReleaseMemObject (hashcat_ctx, device_param->d_st_esalts_buf);\n\n    if (device_param->kernel1)          hc_clReleaseKernel (hashcat_ctx, device_param->kernel1);\n    if (device_param->kernel12)         hc_clReleaseKernel (hashcat_ctx, device_param->kernel12);\n    if (device_param->kernel2)          hc_clReleaseKernel (hashcat_ctx, device_param->kernel2);\n    if (device_param->kernel23)         hc_clReleaseKernel (hashcat_ctx, device_param->kernel23);\n    if (device_param->kernel3)          hc_clReleaseKernel (hashcat_ctx, device_param->kernel3);\n    if (device_param->kernel4)          hc_clReleaseKernel (hashcat_ctx, device_param->kernel4);\n    if (device_param->kernel_init2)     hc_clReleaseKernel (hashcat_ctx, device_param->kernel_init2);\n    if (device_param->kernel_loop2)     hc_clReleaseKernel (hashcat_ctx, device_param->kernel_loop2);\n    if (device_param->kernel_mp)        hc_clReleaseKernel (hashcat_ctx, device_param->kernel_mp);\n    if (device_param->kernel_mp_l)      hc_clReleaseKernel (hashcat_ctx, device_param->kernel_mp_l);\n    if (device_param->kernel_mp_r)      hc_clReleaseKernel (hashcat_ctx, device_param->kernel_mp_r);\n    if (device_param->kernel_tm)        hc_clReleaseKernel (hashcat_ctx, device_param->kernel_tm);\n    if (device_param->kernel_amp)       hc_clReleaseKernel (hashcat_ctx, device_param->kernel_amp);\n    if (device_param->kernel_memset)    hc_clReleaseKernel (hashcat_ctx, device_param->kernel_memset);\n    if (device_param->kernel_atinit)    hc_clReleaseKernel (hashcat_ctx, device_param->kernel_atinit);\n    if (device_param->kernel_decompress)hc_clReleaseKernel (hashcat_ctx, device_param->kernel_decompress);\n    if (device_param->kernel_aux1)      hc_clReleaseKernel (hashcat_ctx, device_param->kernel_aux1);\n    if (device_param->kernel_aux2)      hc_clReleaseKernel (hashcat_ctx, device_param->kernel_aux2);\n    if (device_param->kernel_aux3)      hc_clReleaseKernel (hashcat_ctx, device_param->kernel_aux3);\n    if (device_param->kernel_aux4)      hc_clReleaseKernel (hashcat_ctx, device_param->kernel_aux4);\n\n    if (device_param->program)          hc_clReleaseProgram (hashcat_ctx, device_param->program);\n    if (device_param->program_mp)       hc_clReleaseProgram (hashcat_ctx, device_param->program_mp);\n    if (device_param->program_amp)      hc_clReleaseProgram (hashcat_ctx, device_param->program_amp);\n\n    if (device_param->command_queue)    hc_clReleaseCommandQueue (hashcat_ctx, device_param->command_queue);\n\n    if (device_param->context)          hc_clReleaseContext (hashcat_ctx, device_param->context);\n\n    device_param->pws_comp          = NULL;\n    device_param->pws_idx           = NULL;\n    device_param->pws_pre_buf       = NULL;\n    device_param->pws_base_buf      = NULL;\n    device_param->combs_buf         = NULL;\n    device_param->hooks_buf         = NULL;\n\n    device_param->d_pws_buf         = NULL;\n    device_param->d_pws_amp_buf     = NULL;\n    device_param->d_pws_comp_buf    = NULL;\n    device_param->d_pws_idx         = NULL;\n    device_param->d_rules           = NULL;\n    device_param->d_rules_c         = NULL;\n    device_param->d_combs           = NULL;\n    device_param->d_combs_c         = NULL;\n    device_param->d_bfs             = NULL;\n    device_param->d_bfs_c           = NULL;\n    device_param->d_bitmap_s1_a     = NULL;\n    device_param->d_bitmap_s1_b     = NULL;\n    device_param->d_bitmap_s1_c     = NULL;\n    device_param->d_bitmap_s1_d     = NULL;\n    device_param->d_bitmap_s2_a     = NULL;\n    device_param->d_bitmap_s2_b     = NULL;\n    device_param->d_bitmap_s2_c     = NULL;\n    device_param->d_bitmap_s2_d     = NULL;\n    device_param->d_plain_bufs      = NULL;\n    device_param->d_digests_buf     = NULL;\n    device_param->d_digests_shown   = NULL;\n    device_param->d_salt_bufs       = NULL;\n    device_param->d_esalt_bufs      = NULL;\n    device_param->d_tmps            = NULL;\n    device_param->d_hooks           = NULL;\n    device_param->d_result          = NULL;\n    device_param->d_scryptV0_buf    = NULL;\n    device_param->d_scryptV1_buf    = NULL;\n    device_param->d_scryptV2_buf    = NULL;\n    device_param->d_scryptV3_buf    = NULL;\n    device_param->d_root_css_buf    = NULL;\n    device_param->d_markov_css_buf  = NULL;\n    device_param->d_tm_c            = NULL;\n    device_param->d_st_digests_buf  = NULL;\n    device_param->d_st_salts_buf    = NULL;\n    device_param->d_st_esalts_buf   = NULL;\n    device_param->kernel1           = NULL;\n    device_param->kernel12          = NULL;\n    device_param->kernel2           = NULL;\n    device_param->kernel23          = NULL;\n    device_param->kernel3           = NULL;\n    device_param->kernel4           = NULL;\n    device_param->kernel_init2      = NULL;\n    device_param->kernel_loop2      = NULL;\n    device_param->kernel_mp         = NULL;\n    device_param->kernel_mp_l       = NULL;\n    device_param->kernel_mp_r       = NULL;\n    device_param->kernel_tm         = NULL;\n    device_param->kernel_amp        = NULL;\n    device_param->kernel_memset     = NULL;\n    device_param->kernel_atinit     = NULL;\n    device_param->kernel_decompress = NULL;\n    device_param->kernel_aux1       = NULL;\n    device_param->kernel_aux2       = NULL;\n    device_param->kernel_aux3       = NULL;\n    device_param->kernel_aux4       = NULL;\n    device_param->program           = NULL;\n    device_param->program_mp        = NULL;\n    device_param->program_amp       = NULL;\n    device_param->command_queue     = NULL;\n    device_param->context           = NULL;\n  }\n}\n\nvoid opencl_session_reset (hashcat_ctx_t *hashcat_ctx)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (opencl_ctx->enabled == false) return;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    device_param->speed_pos = 0;\n\n    memset (device_param->speed_cnt,  0, SPEED_CACHE * sizeof (u64));\n    memset (device_param->speed_msec, 0, SPEED_CACHE * sizeof (double));\n\n    device_param->speed_only_finish = false;\n\n    device_param->exec_pos = 0;\n\n    memset (device_param->exec_msec, 0, EXEC_CACHE * sizeof (double));\n\n    device_param->outerloop_msec = 0;\n    device_param->outerloop_pos  = 0;\n    device_param->outerloop_left = 0;\n    device_param->innerloop_pos  = 0;\n    device_param->innerloop_left = 0;\n\n    // some more resets:\n\n    if (device_param->pws_comp) memset (device_param->pws_comp, 0, device_param->size_pws_comp);\n    if (device_param->pws_idx)  memset (device_param->pws_idx,  0, device_param->size_pws_idx);\n\n    device_param->pws_cnt = 0;\n\n    device_param->words_off  = 0;\n    device_param->words_done = 0;\n\n    #if defined (_WIN)\n    device_param->timer_speed.QuadPart = 0;\n    #else\n    device_param->timer_speed.tv_sec = 0;\n    #endif\n  }\n\n  opencl_ctx->kernel_power_all   = 0;\n  opencl_ctx->kernel_power_final = 0;\n}\n\nint opencl_session_update_combinator (hashcat_ctx_t *hashcat_ctx)\n{\n  combinator_ctx_t *combinator_ctx = hashcat_ctx->combinator_ctx;\n  hashconfig_t     *hashconfig     = hashcat_ctx->hashconfig;\n  opencl_ctx_t     *opencl_ctx     = hashcat_ctx->opencl_ctx;\n  user_options_t   *user_options   = hashcat_ctx->user_options;\n\n  if (opencl_ctx->enabled == false) return 0;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    // kernel_params\n\n    device_param->kernel_params_buf32[33] = combinator_ctx->combs_mode;\n\n    /*\n    int CL_rc;\n\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel1, 33, sizeof (cl_uint), device_param->kernel_params[33]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel2, 33, sizeof (cl_uint), device_param->kernel_params[33]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel3, 33, sizeof (cl_uint), device_param->kernel_params[33]); if (CL_rc == -1) return -1;\n    CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel4, 33, sizeof (cl_uint), device_param->kernel_params[33]); if (CL_rc == -1) return -1;\n\n    if (hashconfig->opts_type & OPTS_TYPE_HOOK12) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel12,     33, sizeof (cl_uint), device_param->kernel_params[33]); if (CL_rc == -1) return -1; }\n    if (hashconfig->opts_type & OPTS_TYPE_HOOK23) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel23,     33, sizeof (cl_uint), device_param->kernel_params[33]); if (CL_rc == -1) return -1; }\n    if (hashconfig->opts_type & OPTS_TYPE_INIT2)  { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_init2, 33, sizeof (cl_uint), device_param->kernel_params[33]); if (CL_rc == -1) return -1; }\n    if (hashconfig->opts_type & OPTS_TYPE_LOOP2)  { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_loop2, 33, sizeof (cl_uint), device_param->kernel_params[33]); if (CL_rc == -1) return -1; }\n    */\n\n    // kernel_params_amp\n\n    if (user_options->slow_candidates == true)\n    {\n    }\n    else\n    {\n      device_param->kernel_params_amp_buf32[5] = combinator_ctx->combs_mode;\n\n      if (hashconfig->attack_exec == ATTACK_EXEC_OUTSIDE_KERNEL)\n      {\n        int CL_rc;\n\n        CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_amp, 5, sizeof (cl_uint), device_param->kernel_params_amp[5]);\n\n        if (CL_rc == -1) return -1;\n      }\n    }\n  }\n\n  return 0;\n}\n\nint opencl_session_update_mp (hashcat_ctx_t *hashcat_ctx)\n{\n  mask_ctx_t     *mask_ctx     = hashcat_ctx->mask_ctx;\n  opencl_ctx_t   *opencl_ctx   = hashcat_ctx->opencl_ctx;\n  user_options_t *user_options = hashcat_ctx->user_options;\n\n  if (opencl_ctx->enabled == false) return 0;\n\n  if (user_options->slow_candidates == true) return 0;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    device_param->kernel_params_mp_buf64[3] = 0;\n    device_param->kernel_params_mp_buf32[4] = mask_ctx->css_cnt;\n\n    int CL_rc = CL_SUCCESS;\n\n    for (u32 i = 3; i < 4; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp, i, sizeof (cl_ulong), device_param->kernel_params_mp[i]); if (CL_rc == -1) return -1; }\n    for (u32 i = 4; i < 8; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp, i, sizeof (cl_uint), device_param->kernel_params_mp[i]); if (CL_rc == -1) return -1; }\n\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_root_css_buf,   CL_TRUE, 0, device_param->size_root_css,   mask_ctx->root_css_buf,   0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_markov_css_buf, CL_TRUE, 0, device_param->size_markov_css, mask_ctx->markov_css_buf, 0, NULL, NULL); if (CL_rc == -1) return -1;\n  }\n\n  return 0;\n}\n\nint opencl_session_update_mp_rl (hashcat_ctx_t *hashcat_ctx, const u32 css_cnt_l, const u32 css_cnt_r)\n{\n  mask_ctx_t     *mask_ctx     = hashcat_ctx->mask_ctx;\n  opencl_ctx_t   *opencl_ctx   = hashcat_ctx->opencl_ctx;\n  user_options_t *user_options = hashcat_ctx->user_options;\n\n  if (opencl_ctx->enabled == false) return 0;\n\n  if (user_options->slow_candidates == true) return 0;\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    device_param->kernel_params_mp_l_buf64[3] = 0;\n    device_param->kernel_params_mp_l_buf32[4] = css_cnt_l;\n    device_param->kernel_params_mp_l_buf32[5] = css_cnt_r;\n\n    device_param->kernel_params_mp_r_buf64[3] = 0;\n    device_param->kernel_params_mp_r_buf32[4] = css_cnt_r;\n\n    int CL_rc = CL_SUCCESS;\n\n    for (u32 i = 3; i < 4; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_l, i, sizeof (cl_ulong), device_param->kernel_params_mp_l[i]); if (CL_rc == -1) return -1; }\n    for (u32 i = 4; i < 8; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_l, i, sizeof (cl_uint),  device_param->kernel_params_mp_l[i]); if (CL_rc == -1) return -1; }\n    for (u32 i = 9; i < 9; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_l, i, sizeof (cl_ulong), device_param->kernel_params_mp_l[i]); if (CL_rc == -1) return -1; }\n\n    for (u32 i = 3; i < 4; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_r, i, sizeof (cl_ulong), device_param->kernel_params_mp_r[i]); if (CL_rc == -1) return -1; }\n    for (u32 i = 4; i < 7; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_r, i, sizeof (cl_uint),  device_param->kernel_params_mp_r[i]); if (CL_rc == -1) return -1; }\n    for (u32 i = 8; i < 8; i++) { CL_rc = hc_clSetKernelArg (hashcat_ctx, device_param->kernel_mp_r, i, sizeof (cl_ulong), device_param->kernel_params_mp_r[i]); if (CL_rc == -1) return -1; }\n\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_root_css_buf,   CL_TRUE, 0, device_param->size_root_css,   mask_ctx->root_css_buf,   0, NULL, NULL); if (CL_rc == -1) return -1;\n    CL_rc = hc_clEnqueueWriteBuffer (hashcat_ctx, device_param->command_queue, device_param->d_markov_css_buf, CL_TRUE, 0, device_param->size_markov_css, mask_ctx->markov_css_buf, 0, NULL, NULL); if (CL_rc == -1) return -1;\n  }\n\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/src/dynloader.c": "/**\n * Author......: See docs/credits.txt\n * License.....: MIT\n */\n\n#include \"common.h\"\n#include \"dynloader.h\"\n\n#ifdef _WIN\n\nHMODULE hc_dlopen (LPCSTR lpLibFileName)\n{\n  return LoadLibraryA (lpLibFileName);\n}\n\nBOOL hc_dlclose (HMODULE hLibModule)\n{\n  return FreeLibrary (hLibModule);\n}\n\nFARPROC hc_dlsym (HMODULE hModule, LPCSTR lpProcName)\n{\n  return GetProcAddress (hModule, lpProcName);\n}\n\n#else\n\nvoid *hc_dlopen (const char *fileName, int flag)\n{\n  return dlopen (fileName, flag);\n}\n\nint hc_dlclose (void * handle)\n{\n  return dlclose (handle);\n}\n\nvoid *hc_dlsym (void *module, const char *symbol)\n{\n  return dlsym (module, symbol);\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/src/hwmon.c": "/**\n * Author......: See docs/credits.txt\n * License.....: MIT\n */\n\n#include \"common.h\"\n#include \"types.h\"\n#include \"memory.h\"\n#include \"event.h\"\n#include \"dynloader.h\"\n#include \"shared.h\"\n#include \"folder.h\"\n#include \"hwmon.h\"\n\n// sysfs functions\n\nstatic bool sysfs_init (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  SYSFS_PTR *sysfs = hwmon_ctx->hm_sysfs;\n\n  memset (sysfs, 0, sizeof (SYSFS_PTR));\n\n  char *path;\n\n  hc_asprintf (&path, \"%s\", SYS_BUS_PCI_DEVICES);\n\n  const bool r = hc_path_read (path);\n\n  hcfree (path);\n\n  return r;\n}\n\nstatic void sysfs_close (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  SYSFS_PTR *sysfs = hwmon_ctx->hm_sysfs;\n\n  if (sysfs)\n  {\n    hcfree (sysfs);\n  }\n}\n\nstatic char *hm_SYSFS_get_syspath_device (hashcat_ctx_t *hashcat_ctx, const int device_id)\n{\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n  char *syspath;\n\n  hc_asprintf (&syspath, \"%s/0000:%02x:%02x.%01x\", SYS_BUS_PCI_DEVICES, device_param->pcie_bus, device_param->pcie_device, device_param->pcie_function);\n\n  return syspath;\n}\n\nstatic char *hm_SYSFS_get_syspath_hwmon (hashcat_ctx_t *hashcat_ctx, const int device_id)\n{\n  char *syspath = hm_SYSFS_get_syspath_device (hashcat_ctx, device_id);\n\n  if (syspath == NULL)\n  {\n    event_log_error (hashcat_ctx, \"hm_SYSFS_get_syspath_device() failed.\");\n\n    return NULL;\n  }\n\n  char *hwmon = hcmalloc (HCBUFSIZ_TINY);\n\n  snprintf (hwmon, HCBUFSIZ_TINY - 1, \"%s/hwmon\", syspath);\n\n  char *hwmonN = first_file_in_directory (hwmon);\n\n  if (hwmonN == NULL)\n  {\n    event_log_error (hashcat_ctx, \"First_file_in_directory() failed.\");\n\n    hcfree (syspath);\n\n    hcfree (hwmon);\n    hcfree (hwmonN);\n\n    return NULL;\n  }\n\n  snprintf (hwmon, HCBUFSIZ_TINY - 1, \"%s/hwmon/%s\", syspath, hwmonN);\n\n  hcfree (syspath);\n\n  hcfree (hwmonN);\n\n  return hwmon;\n}\n\nstatic int hm_SYSFS_get_fan_speed_current (hashcat_ctx_t *hashcat_ctx, const int device_id, int *val)\n{\n  char *syspath = hm_SYSFS_get_syspath_hwmon (hashcat_ctx, device_id);\n\n  if (syspath == NULL) return -1;\n\n  char *path_cur;\n  char *path_max;\n\n  hc_asprintf (&path_cur, \"%s/pwm1\",     syspath);\n  hc_asprintf (&path_max, \"%s/pwm1_max\", syspath);\n\n  hcfree (syspath);\n\n  FILE *fd_cur = fopen (path_cur, \"r\");\n\n  if (fd_cur == NULL)\n  {\n    event_log_error (hashcat_ctx, \"%s: %s\", path_cur, strerror (errno));\n\n    hcfree (path_cur);\n    hcfree (path_max);\n\n    return -1;\n  }\n\n  int pwm1_cur = 0;\n\n  if (fscanf (fd_cur, \"%d\", &pwm1_cur) != 1)\n  {\n    fclose (fd_cur);\n\n    event_log_error (hashcat_ctx, \"%s: unexpected data.\", path_cur);\n\n    hcfree (path_cur);\n    hcfree (path_max);\n\n    return -1;\n  }\n\n  fclose (fd_cur);\n\n  FILE *fd_max = fopen (path_max, \"r\");\n\n  if (fd_max == NULL)\n  {\n    event_log_error (hashcat_ctx, \"%s: %s\", path_max, strerror (errno));\n\n    hcfree (path_cur);\n    hcfree (path_max);\n\n    return -1;\n  }\n\n  int pwm1_max = 0;\n\n  if (fscanf (fd_max, \"%d\", &pwm1_max) != 1)\n  {\n    fclose (fd_max);\n\n    event_log_error (hashcat_ctx, \"%s: unexpected data.\", path_max);\n\n    hcfree (path_cur);\n    hcfree (path_max);\n\n    return -1;\n  }\n\n  fclose (fd_max);\n\n  if (pwm1_max == 0)\n  {\n    event_log_error (hashcat_ctx, \"%s: pwm1_max cannot be 0.\", path_max);\n\n    hcfree (path_cur);\n    hcfree (path_max);\n\n    return -1;\n  }\n\n  const float p1 = (float) pwm1_max / 100.0f;\n\n  const float pwm1_percent = (float) pwm1_cur / p1;\n\n  *val = (int) pwm1_percent;\n\n  hcfree (path_cur);\n  hcfree (path_max);\n\n  return 0;\n}\n\nstatic int hm_SYSFS_get_temperature_current (hashcat_ctx_t *hashcat_ctx, const int device_id, int *val)\n{\n  char *syspath = hm_SYSFS_get_syspath_hwmon (hashcat_ctx, device_id);\n\n  if (syspath == NULL) return -1;\n\n  char *path;\n\n  hc_asprintf (&path, \"%s/temp1_input\", syspath);\n\n  hcfree (syspath);\n\n  FILE *fd = fopen (path, \"r\");\n\n  if (fd == NULL)\n  {\n    event_log_error (hashcat_ctx, \"%s: %s\", path, strerror (errno));\n\n    hcfree (path);\n\n    return -1;\n  }\n\n  int temperature = 0;\n\n  if (fscanf (fd, \"%d\", &temperature) != 1)\n  {\n    fclose (fd);\n\n    event_log_error (hashcat_ctx, \"%s: unexpected data.\", path);\n\n    hcfree (path);\n\n    return -1;\n  }\n\n  fclose (fd);\n\n  *val = temperature / 1000;\n\n  hcfree (path);\n\n  return 0;\n}\n\nstatic int hm_SYSFS_get_pp_dpm_sclk (hashcat_ctx_t *hashcat_ctx, const int device_id, int *val)\n{\n  char *syspath = hm_SYSFS_get_syspath_device (hashcat_ctx, device_id);\n\n  if (syspath == NULL) return -1;\n\n  char *path;\n\n  hc_asprintf (&path, \"%s/pp_dpm_sclk\", syspath);\n\n  hcfree (syspath);\n\n  FILE *fd = fopen (path, \"r\");\n\n  if (fd == NULL)\n  {\n    event_log_error (hashcat_ctx, \"%s: %s\", path, strerror (errno));\n\n    hcfree (path);\n\n    return -1;\n  }\n\n  int clockfreq = 0;\n\n  while (!feof (fd))\n  {\n    char buf[HCBUFSIZ_TINY];\n\n    char *ptr = fgets (buf, sizeof (buf), fd);\n\n    if (ptr == NULL) continue;\n\n    size_t len = strlen (ptr);\n\n    if (len < 2) continue;\n\n    if (ptr[len - 2] != '*') continue;\n\n    int profile = 0;\n\n    int rc = sscanf (ptr, \"%d: %dMHz\", &profile, &clockfreq);\n\n    if (rc == 2) break;\n  }\n\n  fclose (fd);\n\n  *val = clockfreq;\n\n  hcfree (path);\n\n  return 0;\n}\n\nstatic int hm_SYSFS_get_pp_dpm_mclk (hashcat_ctx_t *hashcat_ctx, const int device_id, int *val)\n{\n  char *syspath = hm_SYSFS_get_syspath_device (hashcat_ctx, device_id);\n\n  if (syspath == NULL) return -1;\n\n  char *path;\n\n  hc_asprintf (&path, \"%s/pp_dpm_mclk\", syspath);\n\n  hcfree (syspath);\n\n  FILE *fd = fopen (path, \"r\");\n\n  if (fd == NULL)\n  {\n    event_log_error (hashcat_ctx, \"%s: %s\", path, strerror (errno));\n\n    hcfree (path);\n\n    return -1;\n  }\n\n  int clockfreq = 0;\n\n  while (!feof (fd))\n  {\n    char buf[HCBUFSIZ_TINY];\n\n    char *ptr = fgets (buf, sizeof (buf), fd);\n\n    if (ptr == NULL) continue;\n\n    size_t len = strlen (ptr);\n\n    if (len < 2) continue;\n\n    if (ptr[len - 2] != '*') continue;\n\n    int profile = 0;\n\n    int rc = sscanf (ptr, \"%d: %dMHz\", &profile, &clockfreq);\n\n    if (rc == 2) break;\n  }\n\n  fclose (fd);\n\n  *val = clockfreq;\n\n  hcfree (path);\n\n  return 0;\n}\n\nstatic int hm_SYSFS_get_pp_dpm_pcie (hashcat_ctx_t *hashcat_ctx, const int device_id, int *val)\n{\n  char *syspath = hm_SYSFS_get_syspath_device (hashcat_ctx, device_id);\n\n  if (syspath == NULL) return -1;\n\n  char *path;\n\n  hc_asprintf (&path, \"%s/pp_dpm_pcie\", syspath);\n\n  hcfree (syspath);\n\n  FILE *fd = fopen (path, \"r\");\n\n  if (fd == NULL)\n  {\n    event_log_error (hashcat_ctx, \"%s: %s\", path, strerror (errno));\n\n    hcfree (path);\n\n    return -1;\n  }\n\n  int lanes = 0;\n\n  while (!feof (fd))\n  {\n    char buf[HCBUFSIZ_TINY];\n\n    char *ptr = fgets (buf, sizeof (buf), fd);\n\n    if (ptr == NULL) continue;\n\n    size_t len = strlen (ptr);\n\n    if (len < 2) continue;\n\n    if (ptr[len - 2] != '*') continue;\n\n    int   profile = 0;\n    float speed = 0;\n\n    int rc = sscanf (ptr, \"%d: %fGB, x%d *\", &profile, &speed, &lanes);\n\n    if (rc == 3) break;\n  }\n\n  fclose (fd);\n\n  *val = lanes;\n\n  hcfree (path);\n\n  return 0;\n}\n\n// nvml functions\n\nstatic int nvml_init (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  memset (nvml, 0, sizeof (NVML_PTR));\n\n  #if defined (_WIN)\n\n  nvml->lib = hc_dlopen (\"nvml.dll\");\n\n  if (!nvml->lib)\n  {\n    DWORD BufferSize = 1024;\n\n    DWORD Type = REG_SZ;\n\n    char *Buffer = (char *) hcmalloc (BufferSize + 1);\n\n    HKEY hKey = 0;\n\n    if (RegOpenKeyExA (HKEY_LOCAL_MACHINE, \"SOFTWARE\\\\NVIDIA Corporation\\\\Global\\\\NVSMI\", 0, KEY_QUERY_VALUE, &hKey) == ERROR_SUCCESS)\n    {\n      if (RegQueryValueExA (hKey, \"NVSMIPATH\", NULL, &Type, (LPBYTE)Buffer, &BufferSize) == ERROR_SUCCESS)\n      {\n        Buffer[BufferSize] = 0;\n      }\n      else\n      {\n        //if (user_options->quiet == false)\n        //  event_log_error (hashcat_ctx, \"NVML library load failed. Proceeding without NVML HWMon enabled.\");\n\n        return -1;\n      }\n\n      RegCloseKey (hKey);\n    }\n    else\n    {\n      //if (user_options->quiet == false)\n      //  event_log_error (hashcat_ctx, \"NVML library load failed. Proceeding without NVML HWMon enabled.\");\n\n      return -1;\n    }\n\n    strcat (Buffer, \"\\\\nvml.dll\");\n\n    nvml->lib = hc_dlopen (Buffer);\n\n    hcfree (Buffer);\n  }\n\n  #elif defined (__CYGWIN__)\n\n  nvml->lib = hc_dlopen(\"nvml.dll\", RTLD_NOW);\n\n  if (!nvml->lib)\n  {\n    FILE *nvml_lib = fopen (\"/proc/registry/HKEY_LOCAL_MACHINE/SOFTWARE/NVIDIA Corporation/Global/NVSMI/NVSMIPATH\", \"rb\");\n\n    if (nvml_lib == NULL)\n    {\n      //if (user_options->quiet == false)\n      //  event_log_error (hashcat_ctx, \"NVML library load failed: %m. Proceeding without NVML HWMon enabled.\");\n\n      return -1;\n    }\n\n    char *nvml_winpath, *nvml_cygpath;\n\n    nvml_winpath = (char *) hcmalloc (100);\n\n    hc_fread (nvml_winpath, 100, 1, nvml_lib);\n\n    fclose (nvml_lib);\n\n    ssize_t size = cygwin_conv_path (CCP_WIN_A_TO_POSIX | CCP_PROC_CYGDRIVE, nvml_winpath, NULL, 0);\n\n    if (size > 0)\n    {\n      nvml_cygpath = (char *) hcmalloc (size + 9);\n\n      cygwin_conv_path (CCP_WIN_A_TO_POSIX | CCP_PROC_CYGDRIVE, nvml_winpath, nvml_cygpath, size);\n    }\n    else\n    {\n      //if (user_options->quiet == false)\n      //  event_log_error (hashcat_ctx, \"Could not find NVML on this system. Proceeding without NVML HWMon enabled.\");\n\n      return -1;\n    }\n\n    strcat (nvml_cygpath, \"/nvml.dll\");\n\n    nvml->lib = hc_dlopen (nvml_cygpath, RTLD_NOW);\n  }\n\n  #elif defined (_POSIX)\n\n  nvml->lib = hc_dlopen (\"libnvidia-ml.so\", RTLD_NOW);\n\n  if (!nvml->lib)\n  {\n    nvml->lib = hc_dlopen (\"libnvidia-ml.so.1\", RTLD_NOW);\n  }\n\n  #endif\n\n  if (!nvml->lib)\n  {\n    //if (user_options->quiet == false)\n    //  event_log_error (hashcat_ctx, \"NVML library load failed. Proceeding without NVML HWMon enabled.\");\n\n    return -1;\n  }\n\n  HC_LOAD_FUNC(nvml, nvmlErrorString, NVML_ERROR_STRING, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlInit, NVML_INIT, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlShutdown, NVML_SHUTDOWN, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetCount, NVML_DEVICE_GET_COUNT, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetName, NVML_DEVICE_GET_NAME, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetHandleByIndex, NVML_DEVICE_GET_HANDLE_BY_INDEX, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetTemperature, NVML_DEVICE_GET_TEMPERATURE, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetFanSpeed, NVML_DEVICE_GET_FAN_SPEED, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetUtilizationRates, NVML_DEVICE_GET_UTILIZATION_RATES, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetClockInfo, NVML_DEVICE_GET_CLOCKINFO, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetTemperatureThreshold, NVML_DEVICE_GET_THRESHOLD, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetCurrPcieLinkGeneration, NVML_DEVICE_GET_CURRPCIELINKGENERATION, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetCurrPcieLinkWidth, NVML_DEVICE_GET_CURRPCIELINKWIDTH, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetCurrentClocksThrottleReasons, NVML_DEVICE_GET_CURRENTCLOCKSTHROTTLEREASONS, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetSupportedClocksThrottleReasons, NVML_DEVICE_GET_SUPPORTEDCLOCKSTHROTTLEREASONS, NVML, 0)\n  HC_LOAD_FUNC(nvml, nvmlDeviceGetPciInfo, NVML_DEVICE_GET_PCIINFO, NVML, 0)\n\n  return 0;\n}\n\nstatic void nvml_close (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  if (nvml)\n  {\n    if (nvml->lib)\n      hc_dlclose (nvml->lib);\n\n    hcfree (nvml);\n  }\n}\n\nstatic const char *hm_NVML_nvmlErrorString (NVML_PTR *nvml, const nvmlReturn_t nvml_rc)\n{\n  return nvml->nvmlErrorString (nvml_rc);\n}\n\nstatic int hm_NVML_nvmlInit (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlInit ();\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlInit(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlShutdown (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlShutdown ();\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlShutdown(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetCount (hashcat_ctx_t *hashcat_ctx, unsigned int *deviceCount)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetCount (deviceCount);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetCount(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetHandleByIndex (hashcat_ctx_t *hashcat_ctx, unsigned int device_index, nvmlDevice_t *device)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetHandleByIndex (device_index, device);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetHandleByIndex(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetTemperature (hashcat_ctx_t *hashcat_ctx, nvmlDevice_t device, nvmlTemperatureSensors_t sensorType, unsigned int *temp)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetTemperature (device, sensorType, temp);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetTemperature(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetFanSpeed (hashcat_ctx_t *hashcat_ctx, nvmlDevice_t device, unsigned int *speed)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetFanSpeed (device, speed);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetFanSpeed(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetUtilizationRates (hashcat_ctx_t *hashcat_ctx, nvmlDevice_t device, nvmlUtilization_t *utilization)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetUtilizationRates (device, utilization);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetUtilizationRates(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetClockInfo (hashcat_ctx_t *hashcat_ctx, nvmlDevice_t device, nvmlClockType_t type, unsigned int *clockfreq)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetClockInfo (device, type, clockfreq);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetClockInfo(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetTemperatureThreshold (hashcat_ctx_t *hashcat_ctx, nvmlDevice_t device, nvmlTemperatureThresholds_t thresholdType, unsigned int *temp)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetTemperatureThreshold (device, thresholdType, temp);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetTemperatureThreshold(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetCurrPcieLinkWidth (hashcat_ctx_t *hashcat_ctx, nvmlDevice_t device, unsigned int *currLinkWidth)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetCurrPcieLinkWidth (device, currLinkWidth);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetCurrPcieLinkWidth(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NVML_nvmlDeviceGetPciInfo (hashcat_ctx_t *hashcat_ctx, nvmlDevice_t device, nvmlPciInfo_t *pci)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVML_PTR *nvml = hwmon_ctx->hm_nvml;\n\n  const nvmlReturn_t nvml_rc = nvml->nvmlDeviceGetPciInfo (device, pci);\n\n  if (nvml_rc != NVML_SUCCESS)\n  {\n    const char *string = hm_NVML_nvmlErrorString (nvml, nvml_rc);\n\n    event_log_error (hashcat_ctx, \"nvmlDeviceGetPciInfo(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\n// nvapi functions\n\nstatic int nvapi_init (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  memset (nvapi, 0, sizeof (NVAPI_PTR));\n\n  #if defined (_WIN)\n\n  #if defined (_WIN64)\n  nvapi->lib = hc_dlopen (\"nvapi64.dll\");\n  #else\n  nvapi->lib = hc_dlopen (\"nvapi.dll\");\n  #endif\n\n  #else\n\n  #if defined (__CYGWIN__)\n\n  #if defined (__x86_x64__)\n  nvapi->lib = hc_dlopen (\"nvapi64.dll\", RTLD_NOW);\n  #else\n  nvapi->lib = hc_dlopen (\"nvapi.dll\", RTLD_NOW);\n  #endif\n\n  #else\n  nvapi->lib = hc_dlopen (\"nvapi.so\", RTLD_NOW); // uhm yes, but .. yeah\n  #endif\n\n  #endif\n\n  if (!nvapi->lib)\n  {\n    //if (user_options->quiet == false)\n    //  event_log_error (hashcat_ctx, \"Load of NVAPI library failed. Proceeding without NVAPI HWMon enabled.\");\n\n    return -1;\n  }\n\n  HC_LOAD_FUNC(nvapi, nvapi_QueryInterface,             NVAPI_QUERYINTERFACE,             NVAPI,                0)\n  HC_LOAD_ADDR(nvapi, NvAPI_Initialize,                 NVAPI_INITIALIZE,                 nvapi_QueryInterface, 0x0150E828u, NVAPI, 0)\n  HC_LOAD_ADDR(nvapi, NvAPI_Unload,                     NVAPI_UNLOAD,                     nvapi_QueryInterface, 0xD22BDD7Eu, NVAPI, 0)\n  HC_LOAD_ADDR(nvapi, NvAPI_GetErrorMessage,            NVAPI_GETERRORMESSAGE,            nvapi_QueryInterface, 0x6C2D048Cu, NVAPI, 0)\n  HC_LOAD_ADDR(nvapi, NvAPI_EnumPhysicalGPUs,           NVAPI_ENUMPHYSICALGPUS,           nvapi_QueryInterface, 0xE5AC921Fu, NVAPI, 0)\n  HC_LOAD_ADDR(nvapi, NvAPI_GPU_GetPerfPoliciesInfo,    NVAPI_GPU_GETPERFPOLICIESINFO,    nvapi_QueryInterface, 0x409D9841u, NVAPI, 0)\n  HC_LOAD_ADDR(nvapi, NvAPI_GPU_GetPerfPoliciesStatus,  NVAPI_GPU_GETPERFPOLICIESSTATUS,  nvapi_QueryInterface, 0x3D358A0Cu, NVAPI, 0)\n  HC_LOAD_ADDR(nvapi, NvAPI_GPU_GetBusId,               NVAPI_GPU_GETBUSID,               nvapi_QueryInterface, 0x1BE0B8E5u, NVAPI, 0)\n  HC_LOAD_ADDR(nvapi, NvAPI_GPU_GetBusSlotId,           NVAPI_GPU_GETBUSSLOTID,           nvapi_QueryInterface, 0x2A0A350Fu, NVAPI, 0)\n\n  return 0;\n}\n\nstatic void nvapi_close (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  if (nvapi)\n  {\n    if (nvapi->lib)\n      hc_dlclose (nvapi->lib);\n\n    hcfree (nvapi);\n  }\n}\n\nstatic void hm_NvAPI_GetErrorMessage (NVAPI_PTR *nvapi, const NvAPI_Status NvAPI_rc, NvAPI_ShortString string)\n{\n  nvapi->NvAPI_GetErrorMessage (NvAPI_rc, string);\n}\n\nstatic int hm_NvAPI_Initialize (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  const NvAPI_Status NvAPI_rc = nvapi->NvAPI_Initialize ();\n\n  if (NvAPI_rc == NVAPI_LIBRARY_NOT_FOUND) return -1;\n\n  if (NvAPI_rc != NVAPI_OK)\n  {\n    NvAPI_ShortString string = { 0 };\n\n    hm_NvAPI_GetErrorMessage (nvapi, NvAPI_rc, string);\n\n    event_log_error (hashcat_ctx, \"NvAPI_Initialize(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NvAPI_Unload (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  const NvAPI_Status NvAPI_rc = nvapi->NvAPI_Unload ();\n\n  if (NvAPI_rc != NVAPI_OK)\n  {\n    NvAPI_ShortString string = { 0 };\n\n    hm_NvAPI_GetErrorMessage (nvapi, NvAPI_rc, string);\n\n    event_log_error (hashcat_ctx, \"NvAPI_Unload(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NvAPI_EnumPhysicalGPUs (hashcat_ctx_t *hashcat_ctx, NvPhysicalGpuHandle nvGPUHandle[NVAPI_MAX_PHYSICAL_GPUS], NvU32 *pGpuCount)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  const NvAPI_Status NvAPI_rc = nvapi->NvAPI_EnumPhysicalGPUs (nvGPUHandle, pGpuCount);\n\n  if (NvAPI_rc != NVAPI_OK)\n  {\n    NvAPI_ShortString string = { 0 };\n\n    hm_NvAPI_GetErrorMessage (nvapi, NvAPI_rc, string);\n\n    event_log_error (hashcat_ctx, \"NvAPI_EnumPhysicalGPUs(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NvAPI_GPU_GetPerfPoliciesInfo (hashcat_ctx_t *hashcat_ctx, NvPhysicalGpuHandle hPhysicalGpu, NV_GPU_PERF_POLICIES_INFO_PARAMS_V1 *perfPolicies_info)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  const NvAPI_Status NvAPI_rc = nvapi->NvAPI_GPU_GetPerfPoliciesInfo (hPhysicalGpu, perfPolicies_info);\n\n  if (NvAPI_rc != NVAPI_OK)\n  {\n    NvAPI_ShortString string = { 0 };\n\n    hm_NvAPI_GetErrorMessage (nvapi, NvAPI_rc, string);\n\n    event_log_error (hashcat_ctx, \"NvAPI_GPU_GetPerfPoliciesInfo(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NvAPI_GPU_GetPerfPoliciesStatus (hashcat_ctx_t *hashcat_ctx, NvPhysicalGpuHandle hPhysicalGpu, NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1 *perfPolicies_status)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  const NvAPI_Status NvAPI_rc = nvapi->NvAPI_GPU_GetPerfPoliciesStatus (hPhysicalGpu, perfPolicies_status);\n\n  if (NvAPI_rc != NVAPI_OK)\n  {\n    NvAPI_ShortString string = { 0 };\n\n    hm_NvAPI_GetErrorMessage (nvapi, NvAPI_rc, string);\n\n    event_log_error (hashcat_ctx, \"NvAPI_GPU_GetPerfPoliciesStatus(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NvAPI_GPU_GetBusId (hashcat_ctx_t *hashcat_ctx, NvPhysicalGpuHandle hPhysicalGpu, NvU32 *pBusId)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  const NvAPI_Status NvAPI_rc = nvapi->NvAPI_GPU_GetBusId (hPhysicalGpu, pBusId);\n\n  if (NvAPI_rc != NVAPI_OK)\n  {\n    NvAPI_ShortString string = { 0 };\n\n    hm_NvAPI_GetErrorMessage (nvapi, NvAPI_rc, string);\n\n    event_log_error (hashcat_ctx, \"NvAPI_GPU_GetBusId(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_NvAPI_GPU_GetBusSlotId (hashcat_ctx_t *hashcat_ctx, NvPhysicalGpuHandle hPhysicalGpu, NvU32 *pBusSlotId)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  NVAPI_PTR *nvapi = hwmon_ctx->hm_nvapi;\n\n  const NvAPI_Status NvAPI_rc = nvapi->NvAPI_GPU_GetBusSlotId (hPhysicalGpu, pBusSlotId);\n\n  if (NvAPI_rc != NVAPI_OK)\n  {\n    NvAPI_ShortString string = { 0 };\n\n    hm_NvAPI_GetErrorMessage (nvapi, NvAPI_rc, string);\n\n    event_log_error (hashcat_ctx, \"NvAPI_GPU_GetBusSlotId(): %s\", string);\n\n    return -1;\n  }\n\n  return 0;\n}\n\n// ADL functions\n\nstatic int adl_init (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  memset (adl, 0, sizeof (ADL_PTR));\n\n  #if defined (_WIN)\n  adl->lib = hc_dlopen (\"atiadlxx.dll\");\n\n  if (!adl->lib)\n  {\n    adl->lib = hc_dlopen (\"atiadlxy.dll\");\n  }\n  #elif defined (__CYGWIN__)\n  adl->lib = hc_dlopen (\"atiadlxx.dll\", RTLD_NOW);\n\n  if (!adl->lib)\n  {\n    adl->lib = hc_dlopen (\"atiadlxy.dll\", RTLD_NOW);\n  }\n  #elif defined (_POSIX)\n  adl->lib = hc_dlopen (\"libatiadlxx.so\", RTLD_NOW);\n  #endif\n\n  if (!adl->lib)\n  {\n    //if (user_options->quiet == false)\n    //  event_log_error (hashcat_ctx, \"Load of ADL library failed. Proceeding without ADL HWMon enabled.\");\n\n    return -1;\n  }\n\n  HC_LOAD_FUNC(adl, ADL_Main_Control_Destroy, ADL_MAIN_CONTROL_DESTROY, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Main_Control_Create, ADL_MAIN_CONTROL_CREATE, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Adapter_NumberOfAdapters_Get, ADL_ADAPTER_NUMBEROFADAPTERS_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Adapter_AdapterInfo_Get, ADL_ADAPTER_ADAPTERINFO_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Display_DisplayInfo_Get, ADL_DISPLAY_DISPLAYINFO_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Adapter_ID_Get, ADL_ADAPTER_ID_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Adapter_VideoBiosInfo_Get, ADL_ADAPTER_VIDEOBIOSINFO_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive5_ThermalDevices_Enum, ADL_OVERDRIVE5_THERMALDEVICES_ENUM, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive5_Temperature_Get, ADL_OVERDRIVE5_TEMPERATURE_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive6_Temperature_Get, ADL_OVERDRIVE6_TEMPERATURE_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive5_CurrentActivity_Get, ADL_OVERDRIVE5_CURRENTACTIVITY_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive5_FanSpeedInfo_Get, ADL_OVERDRIVE5_FANSPEEDINFO_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive5_FanSpeed_Get, ADL_OVERDRIVE5_FANSPEED_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive6_FanSpeed_Get, ADL_OVERDRIVE6_FANSPEED_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Adapter_Active_Get, ADL_ADAPTER_ACTIVE_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive_Caps, ADL_OVERDRIVE_CAPS, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive6_Capabilities_Get, ADL_OVERDRIVE6_CAPABILITIES_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive6_StateInfo_Get, ADL_OVERDRIVE6_STATEINFO_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive6_CurrentStatus_Get, ADL_OVERDRIVE6_CURRENTSTATUS_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive6_TargetTemperatureData_Get, ADL_OVERDRIVE6_TARGETTEMPERATUREDATA_GET, ADL, 0)\n  HC_LOAD_FUNC(adl, ADL_Overdrive6_TargetTemperatureRangeInfo_Get, ADL_OVERDRIVE6_TARGETTEMPERATURERANGEINFO_GET, ADL, 0)\n\n  return 0;\n}\n\nstatic void adl_close (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  if (adl)\n  {\n    if (adl->lib)\n      hc_dlclose (adl->lib);\n\n    hcfree (adl);\n  }\n}\n\nstatic int hm_ADL_Main_Control_Destroy (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Main_Control_Destroy ();\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Main_Control_Destroy(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Main_Control_Create (hashcat_ctx_t *hashcat_ctx, ADL_MAIN_MALLOC_CALLBACK callback, int iEnumConnectedAdapters)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Main_Control_Create (callback, iEnumConnectedAdapters);\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Main_Control_Create(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Adapter_NumberOfAdapters_Get (hashcat_ctx_t *hashcat_ctx, int *lpNumAdapters)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Adapter_NumberOfAdapters_Get (lpNumAdapters);\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Adapter_NumberOfAdapters_Get(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Adapter_AdapterInfo_Get (hashcat_ctx_t *hashcat_ctx, LPAdapterInfo lpInfo, int iInputSize)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Adapter_AdapterInfo_Get (lpInfo, iInputSize);\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Adapter_AdapterInfo_Get(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Overdrive5_Temperature_Get (hashcat_ctx_t *hashcat_ctx, int iAdapterIndex, int iThermalControllerIndex, ADLTemperature *lpTemperature)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Overdrive5_Temperature_Get (iAdapterIndex, iThermalControllerIndex, lpTemperature);\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Overdrive5_Temperature_Get(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Overdrive6_Temperature_Get (hashcat_ctx_t *hashcat_ctx, int iAdapterIndex, int *iTemperature)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Overdrive6_Temperature_Get (iAdapterIndex, iTemperature);\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Overdrive6_Temperature_Get(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Overdrive_CurrentActivity_Get (hashcat_ctx_t *hashcat_ctx, int iAdapterIndex, ADLPMActivity *lpActivity)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Overdrive5_CurrentActivity_Get (iAdapterIndex, lpActivity);\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Overdrive5_CurrentActivity_Get(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Overdrive5_FanSpeed_Get (hashcat_ctx_t *hashcat_ctx, int iAdapterIndex, int iThermalControllerIndex, ADLFanSpeedValue *lpFanSpeedValue)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Overdrive5_FanSpeed_Get (iAdapterIndex, iThermalControllerIndex, lpFanSpeedValue);\n\n  if ((ADL_rc != ADL_OK) && (ADL_rc != ADL_ERR_NOT_SUPPORTED)) // exception allowed only here\n  {\n    event_log_error (hashcat_ctx, \"ADL_Overdrive5_FanSpeed_Get(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Overdrive6_FanSpeed_Get (hashcat_ctx_t *hashcat_ctx, int iAdapterIndex, ADLOD6FanSpeedInfo *lpFanSpeedInfo)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Overdrive6_FanSpeed_Get (iAdapterIndex, lpFanSpeedInfo);\n\n  if ((ADL_rc != ADL_OK) && (ADL_rc != ADL_ERR_NOT_SUPPORTED)) // exception allowed only here\n  {\n    event_log_error (hashcat_ctx, \"ADL_Overdrive6_FanSpeed_Get(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Overdrive_Caps (hashcat_ctx_t *hashcat_ctx, int iAdapterIndex, int *od_supported, int *od_enabled, int *od_version)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Overdrive_Caps (iAdapterIndex, od_supported, od_enabled, od_version);\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Overdrive_Caps(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_ADL_Overdrive6_TargetTemperatureData_Get (hashcat_ctx_t *hashcat_ctx, int iAdapterIndex, int *cur_temp, int *default_temp)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  ADL_PTR *adl = hwmon_ctx->hm_adl;\n\n  const int ADL_rc = adl->ADL_Overdrive6_TargetTemperatureData_Get (iAdapterIndex, cur_temp, default_temp);\n\n  if (ADL_rc != ADL_OK)\n  {\n    event_log_error (hashcat_ctx, \"ADL_Overdrive6_TargetTemperatureData_Get(): %d\", ADL_rc);\n\n    return -1;\n  }\n\n  return 0;\n}\n\n// general functions\n\nstatic int get_adapters_num_adl (hashcat_ctx_t *hashcat_ctx, int *iNumberAdapters)\n{\n  const int hm_rc = hm_ADL_Adapter_NumberOfAdapters_Get (hashcat_ctx, iNumberAdapters);\n\n  if (hm_rc == -1) return -1;\n\n  if (iNumberAdapters == NULL)\n  {\n    event_log_error (hashcat_ctx, \"No ADL adapters found.\");\n\n    return -1;\n  }\n\n  return 0;\n}\n\nstatic int hm_get_adapter_index_nvapi (hashcat_ctx_t *hashcat_ctx, HM_ADAPTER_NVAPI *nvapiGPUHandle)\n{\n  NvU32 pGpuCount;\n\n  if (hm_NvAPI_EnumPhysicalGPUs (hashcat_ctx, nvapiGPUHandle, &pGpuCount) == -1) return 0;\n\n  if (pGpuCount == 0)\n  {\n    event_log_error (hashcat_ctx, \"No NvAPI adapters found.\");\n\n    return 0;\n  }\n\n  return (pGpuCount);\n}\n\nstatic int hm_get_adapter_index_nvml (hashcat_ctx_t *hashcat_ctx, HM_ADAPTER_NVML *nvmlGPUHandle)\n{\n  unsigned int deviceCount = 0;\n\n  hm_NVML_nvmlDeviceGetCount (hashcat_ctx, &deviceCount);\n\n  if (deviceCount == 0)\n  {\n    event_log_error (hashcat_ctx, \"No NVML adapters found.\");\n\n    return 0;\n  }\n\n  for (u32 i = 0; i < deviceCount; i++)\n  {\n    if (hm_NVML_nvmlDeviceGetHandleByIndex (hashcat_ctx, i, &nvmlGPUHandle[i]) == -1) break;\n\n    // can be used to determine if the device by index matches the cuda device by index\n    // char name[100]; memset (name, 0, sizeof (name));\n    // hm_NVML_nvmlDeviceGetName (hashcat_ctx, nvGPUHandle[i], name, sizeof (name) - 1);\n  }\n\n  return (deviceCount);\n}\n\nint hm_get_threshold_slowdown_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].threshold_slowdown_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      if (hwmon_ctx->hm_device[device_id].od_version == 5)\n      {\n\n      }\n      else if (hwmon_ctx->hm_device[device_id].od_version == 6)\n      {\n        int CurrentValue = 0;\n        int DefaultValue = 0;\n\n        if (hm_ADL_Overdrive6_TargetTemperatureData_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, &CurrentValue, &DefaultValue) == -1)\n        {\n          hwmon_ctx->hm_device[device_id].threshold_slowdown_get_supported = false;\n\n          return -1;\n        }\n\n        // the return value has never been tested since hm_ADL_Overdrive6_TargetTemperatureData_Get() never worked on any system. expect problems.\n\n        return DefaultValue;\n      }\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      int target = 0;\n\n      if (hm_NVML_nvmlDeviceGetTemperatureThreshold (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, NVML_TEMPERATURE_THRESHOLD_SLOWDOWN, (unsigned int *) &target) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].threshold_slowdown_get_supported = false;\n\n        return -1;\n      }\n\n      return target;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].threshold_slowdown_get_supported = false;\n\n  return -1;\n}\n\nint hm_get_threshold_shutdown_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].threshold_shutdown_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      if (hwmon_ctx->hm_device[device_id].od_version == 5)\n      {\n\n      }\n      else if (hwmon_ctx->hm_device[device_id].od_version == 6)\n      {\n\n      }\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      int target = 0;\n\n      if (hm_NVML_nvmlDeviceGetTemperatureThreshold (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, NVML_TEMPERATURE_THRESHOLD_SHUTDOWN, (unsigned int *) &target) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].threshold_shutdown_get_supported = false;\n\n        return -1;\n      }\n\n      return target;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].threshold_shutdown_get_supported = false;\n\n  return -1;\n}\n\nint hm_get_temperature_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].temperature_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      if (hwmon_ctx->hm_device[device_id].od_version == 5)\n      {\n        ADLTemperature Temperature;\n\n        Temperature.iSize = sizeof (ADLTemperature);\n\n        if (hm_ADL_Overdrive5_Temperature_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, 0, &Temperature) == -1)\n        {\n          hwmon_ctx->hm_device[device_id].temperature_get_supported = false;\n\n          return -1;\n        }\n\n        return Temperature.iTemperature / 1000;\n      }\n\n      if (hwmon_ctx->hm_device[device_id].od_version == 6)\n      {\n        int Temperature = 0;\n\n        if (hm_ADL_Overdrive6_Temperature_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, &Temperature) == -1)\n        {\n          hwmon_ctx->hm_device[device_id].temperature_get_supported = false;\n\n          return -1;\n        }\n\n        return Temperature / 1000;\n      }\n    }\n\n    if (hwmon_ctx->hm_sysfs)\n    {\n      int temperature = 0;\n\n      if (hm_SYSFS_get_temperature_current (hashcat_ctx, device_id, &temperature) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].temperature_get_supported = false;\n\n        return -1;\n      }\n\n      return temperature;\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      int temperature = 0;\n\n      if (hm_NVML_nvmlDeviceGetTemperature (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, NVML_TEMPERATURE_GPU, (u32 *) &temperature) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].temperature_get_supported = false;\n\n        return -1;\n      }\n\n      return temperature;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].temperature_get_supported = false;\n\n  return -1;\n}\n\nint hm_get_fanpolicy_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].fanpolicy_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      if (hwmon_ctx->hm_device[device_id].od_version == 5)\n      {\n        ADLFanSpeedValue lpFanSpeedValue;\n\n        memset (&lpFanSpeedValue, 0, sizeof (lpFanSpeedValue));\n\n        lpFanSpeedValue.iSize      = sizeof (lpFanSpeedValue);\n        lpFanSpeedValue.iSpeedType = ADL_DL_FANCTRL_SPEED_TYPE_PERCENT;\n\n        if (hm_ADL_Overdrive5_FanSpeed_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, 0, &lpFanSpeedValue) == -1)\n        {\n          hwmon_ctx->hm_device[device_id].fanpolicy_get_supported = false;\n          hwmon_ctx->hm_device[device_id].fanspeed_get_supported  = false;\n\n          return -1;\n        }\n\n        return (lpFanSpeedValue.iFanSpeed & ADL_DL_FANCTRL_FLAG_USER_DEFINED_SPEED) ? 0 : 1;\n      }\n\n      if (hwmon_ctx->hm_device[device_id].od_version == 6)\n      {\n        return 1;\n      }\n    }\n\n    if (hwmon_ctx->hm_sysfs)\n    {\n      return 1;\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    return 1;\n  }\n\n  hwmon_ctx->hm_device[device_id].fanpolicy_get_supported = false;\n  hwmon_ctx->hm_device[device_id].fanspeed_get_supported  = false;\n\n  return -1;\n}\n\nint hm_get_fanspeed_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].fanspeed_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      if (hwmon_ctx->hm_device[device_id].od_version == 5)\n      {\n        ADLFanSpeedValue lpFanSpeedValue;\n\n        memset (&lpFanSpeedValue, 0, sizeof (lpFanSpeedValue));\n\n        lpFanSpeedValue.iSize      = sizeof (lpFanSpeedValue);\n        lpFanSpeedValue.iSpeedType = ADL_DL_FANCTRL_SPEED_TYPE_PERCENT;\n        lpFanSpeedValue.iFlags     = ADL_DL_FANCTRL_FLAG_USER_DEFINED_SPEED;\n\n        if (hm_ADL_Overdrive5_FanSpeed_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, 0, &lpFanSpeedValue) == -1)\n        {\n          hwmon_ctx->hm_device[device_id].fanspeed_get_supported = false;\n\n          return -1;\n        }\n\n        return lpFanSpeedValue.iFanSpeed;\n      }\n\n      if (hwmon_ctx->hm_device[device_id].od_version == 6)\n      {\n        ADLOD6FanSpeedInfo faninfo;\n\n        memset (&faninfo, 0, sizeof (faninfo));\n\n        if (hm_ADL_Overdrive6_FanSpeed_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, &faninfo) == -1)\n        {\n          hwmon_ctx->hm_device[device_id].fanspeed_get_supported = false;\n\n          return -1;\n        }\n\n        return faninfo.iFanSpeedPercent;\n      }\n    }\n\n    if (hwmon_ctx->hm_sysfs)\n    {\n      int speed = 0;\n\n      if (hm_SYSFS_get_fan_speed_current (hashcat_ctx, device_id, &speed) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].fanspeed_get_supported = false;\n\n        return -1;\n      }\n\n      return speed;\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      int speed = 0;\n\n      if (hm_NVML_nvmlDeviceGetFanSpeed (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, (u32 *) &speed) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].fanspeed_get_supported = false;\n\n        return -1;\n      }\n\n      return speed;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].fanspeed_get_supported = false;\n\n  return -1;\n}\n\nint hm_get_buslanes_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].buslanes_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      ADLPMActivity PMActivity;\n\n      PMActivity.iSize = sizeof (ADLPMActivity);\n\n      if (hm_ADL_Overdrive_CurrentActivity_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, &PMActivity) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].buslanes_get_supported = false;\n\n        return -1;\n      }\n\n      return PMActivity.iCurrentBusLanes;\n    }\n\n    if (hwmon_ctx->hm_sysfs)\n    {\n      int lanes;\n\n      if (hm_SYSFS_get_pp_dpm_pcie (hashcat_ctx, device_id, &lanes) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].buslanes_get_supported = false;\n\n        return -1;\n      }\n\n      return lanes;\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      unsigned int currLinkWidth;\n\n      if (hm_NVML_nvmlDeviceGetCurrPcieLinkWidth (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, &currLinkWidth) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].buslanes_get_supported = false;\n\n        return -1;\n      }\n\n      return currLinkWidth;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].buslanes_get_supported = false;\n\n  return -1;\n}\n\nint hm_get_utilization_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].utilization_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      ADLPMActivity PMActivity;\n\n      PMActivity.iSize = sizeof (ADLPMActivity);\n\n      if (hm_ADL_Overdrive_CurrentActivity_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, &PMActivity) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].utilization_get_supported = false;\n\n        return -1;\n      }\n\n      return PMActivity.iActivityPercent;\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      nvmlUtilization_t utilization;\n\n      if (hm_NVML_nvmlDeviceGetUtilizationRates (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, &utilization) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].utilization_get_supported = false;\n\n        return -1;\n      }\n\n      return utilization.gpu;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].utilization_get_supported = false;\n\n  return -1;\n}\n\nint hm_get_memoryspeed_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].memoryspeed_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      ADLPMActivity PMActivity;\n\n      PMActivity.iSize = sizeof (ADLPMActivity);\n\n      if (hm_ADL_Overdrive_CurrentActivity_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, &PMActivity) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].memoryspeed_get_supported = false;\n\n        return -1;\n      }\n\n      return PMActivity.iMemoryClock / 100;\n    }\n\n    if (hwmon_ctx->hm_sysfs)\n    {\n      int clockfreq;\n\n      if (hm_SYSFS_get_pp_dpm_mclk (hashcat_ctx, device_id, &clockfreq) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].memoryspeed_get_supported = false;\n\n        return -1;\n      }\n\n      return clockfreq;\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      unsigned int clockfreq;\n\n      if (hm_NVML_nvmlDeviceGetClockInfo (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, NVML_CLOCK_MEM, &clockfreq) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].memoryspeed_get_supported = false;\n\n        return -1;\n      }\n\n      return clockfreq;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].memoryspeed_get_supported = false;\n\n  return -1;\n}\n\nint hm_get_corespeed_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].corespeed_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n    if (hwmon_ctx->hm_adl)\n    {\n      ADLPMActivity PMActivity;\n\n      PMActivity.iSize = sizeof (ADLPMActivity);\n\n      if (hm_ADL_Overdrive_CurrentActivity_Get (hashcat_ctx, hwmon_ctx->hm_device[device_id].adl, &PMActivity) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].corespeed_get_supported = false;\n\n        return -1;\n      }\n\n      return PMActivity.iEngineClock / 100;\n    }\n\n    if (hwmon_ctx->hm_sysfs)\n    {\n      int clockfreq;\n\n      if (hm_SYSFS_get_pp_dpm_sclk (hashcat_ctx, device_id, &clockfreq) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].corespeed_get_supported = false;\n\n        return -1;\n      }\n\n      return clockfreq;\n    }\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      unsigned int clockfreq;\n\n      if (hm_NVML_nvmlDeviceGetClockInfo (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, NVML_CLOCK_SM, &clockfreq) == -1)\n      {\n        hwmon_ctx->hm_device[device_id].corespeed_get_supported = false;\n\n        return -1;\n      }\n\n      return clockfreq;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].corespeed_get_supported = false;\n\n  return -1;\n}\n\nint hm_get_throttle_with_device_id (hashcat_ctx_t *hashcat_ctx, const u32 device_id)\n{\n  hwmon_ctx_t  *hwmon_ctx  = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t *opencl_ctx = hashcat_ctx->opencl_ctx;\n\n  if (hwmon_ctx->enabled == false) return -1;\n\n  if (hwmon_ctx->hm_device[device_id].throttle_get_supported == false) return -1;\n\n  if ((opencl_ctx->devices_param[device_id].device_type & CL_DEVICE_TYPE_GPU) == 0) return -1;\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_AMD)\n  {\n  }\n\n  if (opencl_ctx->devices_param[device_id].device_vendor_id == VENDOR_ID_NV)\n  {\n    if (hwmon_ctx->hm_nvml)\n    {\n      /* this is triggered by mask generator, too. therefore useless\n      unsigned long long clocksThrottleReasons = 0;\n      unsigned long long supportedThrottleReasons = 0;\n\n      if (hm_NVML_nvmlDeviceGetCurrentClocksThrottleReasons   (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, &clocksThrottleReasons)    == -1) return -1;\n      if (hm_NVML_nvmlDeviceGetSupportedClocksThrottleReasons (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvml, &supportedThrottleReasons) == -1) return -1;\n\n      clocksThrottleReasons &=  supportedThrottleReasons;\n      clocksThrottleReasons &= ~nvmlClocksThrottleReasonGpuIdle;\n      clocksThrottleReasons &= ~nvmlClocksThrottleReasonApplicationsClocksSetting;\n      clocksThrottleReasons &= ~nvmlClocksThrottleReasonUnknown;\n\n      if (opencl_ctx->kernel_power_final)\n      {\n        clocksThrottleReasons &= ~nvmlClocksThrottleReasonHwSlowdown;\n      }\n\n      return (clocksThrottleReasons != nvmlClocksThrottleReasonNone);\n      */\n    }\n\n    if (hwmon_ctx->hm_nvapi)\n    {\n      NV_GPU_PERF_POLICIES_INFO_PARAMS_V1   perfPolicies_info;\n      NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1 perfPolicies_status;\n\n      memset (&perfPolicies_info,   0, sizeof (NV_GPU_PERF_POLICIES_INFO_PARAMS_V1));\n      memset (&perfPolicies_status, 0, sizeof (NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1));\n\n      perfPolicies_info.version   = MAKE_NVAPI_VERSION (NV_GPU_PERF_POLICIES_INFO_PARAMS_V1, 1);\n      perfPolicies_status.version = MAKE_NVAPI_VERSION (NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1, 1);\n\n      hm_NvAPI_GPU_GetPerfPoliciesInfo (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvapi, &perfPolicies_info);\n\n      perfPolicies_status.info_value = perfPolicies_info.info_value;\n\n      hm_NvAPI_GPU_GetPerfPoliciesStatus (hashcat_ctx, hwmon_ctx->hm_device[device_id].nvapi, &perfPolicies_status);\n\n      return perfPolicies_status.throttle & 2;\n    }\n  }\n\n  hwmon_ctx->hm_device[device_id].throttle_get_supported = false;\n\n  return -1;\n}\n\nint hwmon_ctx_init (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t    *hwmon_ctx    = hashcat_ctx->hwmon_ctx;\n  opencl_ctx_t   *opencl_ctx   = hashcat_ctx->opencl_ctx;\n  user_options_t *user_options = hashcat_ctx->user_options;\n\n  hwmon_ctx->enabled = false;\n\n  #if !defined (WITH_HWMON)\n  return 0;\n  #endif // WITH_HWMON\n\n  if (user_options->example_hashes    == true) return 0;\n  if (user_options->keyspace          == true) return 0;\n  if (user_options->left              == true) return 0;\n  if (user_options->opencl_info       == true) return 0;\n  if (user_options->progress_only     == true) return 0;\n  if (user_options->show              == true) return 0;\n  if (user_options->speed_only        == true) return 0;\n  if (user_options->stdout_flag       == true) return 0;\n  if (user_options->usage             == true) return 0;\n  if (user_options->version           == true) return 0;\n\n  hwmon_ctx->hm_device = (hm_attrs_t *) hccalloc (DEVICES_MAX, sizeof (hm_attrs_t));\n\n  /**\n   * Initialize shared libraries\n   */\n\n  hm_attrs_t *hm_adapters_adl   = (hm_attrs_t *) hccalloc (DEVICES_MAX, sizeof (hm_attrs_t));\n  hm_attrs_t *hm_adapters_nvapi = (hm_attrs_t *) hccalloc (DEVICES_MAX, sizeof (hm_attrs_t));\n  hm_attrs_t *hm_adapters_nvml  = (hm_attrs_t *) hccalloc (DEVICES_MAX, sizeof (hm_attrs_t));\n  hm_attrs_t *hm_adapters_sysfs = (hm_attrs_t *) hccalloc (DEVICES_MAX, sizeof (hm_attrs_t));\n\n  #define FREE_ADAPTERS         \\\n  {                             \\\n    hcfree (hm_adapters_adl);   \\\n    hcfree (hm_adapters_nvapi); \\\n    hcfree (hm_adapters_nvml);  \\\n    hcfree (hm_adapters_sysfs); \\\n  }\n\n  if (opencl_ctx->need_nvml == true)\n  {\n    hwmon_ctx->hm_nvml = (NVML_PTR *) hcmalloc (sizeof (NVML_PTR));\n\n    if (nvml_init (hashcat_ctx) == -1)\n    {\n      hcfree (hwmon_ctx->hm_nvml);\n\n      hwmon_ctx->hm_nvml = NULL;\n    }\n  }\n\n  if ((opencl_ctx->need_nvapi == true) && (hwmon_ctx->hm_nvml)) // nvapi can't work alone, we need nvml, too\n  {\n    hwmon_ctx->hm_nvapi = (NVAPI_PTR *) hcmalloc (sizeof (NVAPI_PTR));\n\n    if (nvapi_init (hashcat_ctx) == -1)\n    {\n      hcfree (hwmon_ctx->hm_nvapi);\n\n      hwmon_ctx->hm_nvapi = NULL;\n    }\n  }\n\n  if (opencl_ctx->need_adl == true)\n  {\n    hwmon_ctx->hm_adl = (ADL_PTR *) hcmalloc (sizeof (ADL_PTR));\n\n    if (adl_init (hashcat_ctx) == -1)\n    {\n      hcfree (hwmon_ctx->hm_adl);\n\n      hwmon_ctx->hm_adl = NULL;\n    }\n  }\n\n  if (opencl_ctx->need_sysfs == true)\n  {\n    hwmon_ctx->hm_sysfs = (SYSFS_PTR *) hcmalloc (sizeof (SYSFS_PTR));\n\n    if (sysfs_init (hashcat_ctx) == false)\n    {\n      hcfree (hwmon_ctx->hm_sysfs);\n\n      hwmon_ctx->hm_sysfs = NULL;\n    }\n\n    // also if there's ADL, we don't need sysfs\n\n    if (hwmon_ctx->hm_adl)\n    {\n      hcfree (hwmon_ctx->hm_sysfs);\n\n      hwmon_ctx->hm_sysfs = NULL;\n    }\n  }\n\n  if (hwmon_ctx->hm_nvml)\n  {\n    if (hm_NVML_nvmlInit (hashcat_ctx) == 0)\n    {\n      HM_ADAPTER_NVML *nvmlGPUHandle = (HM_ADAPTER_NVML *) hccalloc (DEVICES_MAX, sizeof (HM_ADAPTER_NVML));\n\n      int tmp_in = hm_get_adapter_index_nvml (hashcat_ctx, nvmlGPUHandle);\n\n      for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n      {\n        hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n        if (device_param->skipped == true) continue;\n\n        if ((device_param->device_type & CL_DEVICE_TYPE_GPU) == 0) continue;\n\n        if (device_param->device_vendor_id != VENDOR_ID_NV) continue;\n\n        for (int i = 0; i < tmp_in; i++)\n        {\n          nvmlPciInfo_t pci;\n\n          int rc = hm_NVML_nvmlDeviceGetPciInfo (hashcat_ctx, nvmlGPUHandle[i], &pci);\n\n          if (rc == -1) continue;\n\n          if ((device_param->pcie_bus      == pci.bus)\n           && (device_param->pcie_device   == (pci.device >> 3))\n           && (device_param->pcie_function == (pci.device & 7)))\n          {\n            const u32 platform_devices_id = device_param->platform_devices_id;\n\n            hm_adapters_nvml[platform_devices_id].nvml = nvmlGPUHandle[i];\n\n            hm_adapters_nvml[platform_devices_id].buslanes_get_supported            = true;\n            hm_adapters_nvml[platform_devices_id].corespeed_get_supported           = true;\n            hm_adapters_nvml[platform_devices_id].fanspeed_get_supported            = true;\n            hm_adapters_nvml[platform_devices_id].memoryspeed_get_supported         = true;\n            hm_adapters_nvml[platform_devices_id].temperature_get_supported         = true;\n            hm_adapters_nvml[platform_devices_id].threshold_shutdown_get_supported  = true;\n            hm_adapters_nvml[platform_devices_id].threshold_slowdown_get_supported  = true;\n            hm_adapters_nvml[platform_devices_id].utilization_get_supported         = true;\n          }\n        }\n      }\n\n      hcfree (nvmlGPUHandle);\n    }\n  }\n\n  if (hwmon_ctx->hm_nvapi)\n  {\n    if (hm_NvAPI_Initialize (hashcat_ctx) == 0)\n    {\n      HM_ADAPTER_NVAPI *nvGPUHandle = (HM_ADAPTER_NVAPI *) hccalloc (NVAPI_MAX_PHYSICAL_GPUS, sizeof (HM_ADAPTER_NVAPI));\n\n      int tmp_in = hm_get_adapter_index_nvapi (hashcat_ctx, nvGPUHandle);\n\n      for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n      {\n        hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n        if (device_param->skipped == true) continue;\n\n        if ((device_param->device_type & CL_DEVICE_TYPE_GPU) == 0) continue;\n\n        if (device_param->device_vendor_id != VENDOR_ID_NV) continue;\n\n        for (int i = 0; i < tmp_in; i++)\n        {\n          NvU32 BusId     = 0;\n          NvU32 BusSlotId = 0;\n\n          int rc1 = hm_NvAPI_GPU_GetBusId (hashcat_ctx, nvGPUHandle[i], &BusId);\n\n          if (rc1 == -1) continue;\n\n          int rc2 = hm_NvAPI_GPU_GetBusSlotId (hashcat_ctx, nvGPUHandle[i], &BusSlotId);\n\n          if (rc2 == -1) continue;\n\n          if ((device_param->pcie_bus      == BusId)\n           && (device_param->pcie_device   == (BusSlotId >> 3))\n           && (device_param->pcie_function == (BusSlotId & 7)))\n          {\n            const u32 platform_devices_id = device_param->platform_devices_id;\n\n            hm_adapters_nvapi[platform_devices_id].nvapi = nvGPUHandle[i];\n\n            hm_adapters_nvapi[platform_devices_id].fanpolicy_get_supported  = true;\n            hm_adapters_nvapi[platform_devices_id].throttle_get_supported   = true;\n          }\n        }\n      }\n\n      hcfree (nvGPUHandle);\n    }\n  }\n\n  if (hwmon_ctx->hm_adl)\n  {\n    if (hm_ADL_Main_Control_Create (hashcat_ctx, ADL_Main_Memory_Alloc, 0) == 0)\n    {\n      // total number of adapters\n\n      int tmp_in;\n\n      if (get_adapters_num_adl (hashcat_ctx, &tmp_in) == -1)\n      {\n        FREE_ADAPTERS;\n\n        return -1;\n      }\n\n      // adapter info\n\n      LPAdapterInfo lpAdapterInfo = (LPAdapterInfo) hccalloc (tmp_in, sizeof (AdapterInfo));\n\n      const int rc_adapter_info_adl = hm_ADL_Adapter_AdapterInfo_Get (hashcat_ctx, lpAdapterInfo, tmp_in * sizeof (AdapterInfo));\n\n      if (rc_adapter_info_adl == -1)\n      {\n        FREE_ADAPTERS;\n\n        return -1;\n      }\n\n      for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n      {\n        hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n        if (device_param->skipped == true) continue;\n\n        if ((device_param->device_type & CL_DEVICE_TYPE_GPU) == 0) continue;\n\n        if (device_param->device_vendor_id != VENDOR_ID_AMD) continue;\n\n        for (int i = 0; i < tmp_in; i++)\n        {\n          if ((device_param->pcie_bus      == lpAdapterInfo[i].iBusNumber)\n           && (device_param->pcie_device   == (lpAdapterInfo[i].iDeviceNumber >> 3))\n           && (device_param->pcie_function == (lpAdapterInfo[i].iDeviceNumber & 7)))\n          {\n            const u32 platform_devices_id = device_param->platform_devices_id;\n\n            int od_supported = 0;\n            int od_enabled   = 0;\n            int od_version   = 0;\n\n            hm_ADL_Overdrive_Caps (hashcat_ctx, lpAdapterInfo[i].iAdapterIndex, &od_supported, &od_enabled, &od_version);\n\n            hm_adapters_adl[platform_devices_id].od_version = od_version;\n\n            hm_adapters_adl[platform_devices_id].adl = lpAdapterInfo[i].iAdapterIndex;\n\n            hm_adapters_adl[platform_devices_id].buslanes_get_supported            = true;\n            hm_adapters_adl[platform_devices_id].corespeed_get_supported           = true;\n            hm_adapters_adl[platform_devices_id].fanspeed_get_supported            = true;\n            hm_adapters_adl[platform_devices_id].fanpolicy_get_supported           = true;\n            hm_adapters_adl[platform_devices_id].memoryspeed_get_supported         = true;\n            hm_adapters_adl[platform_devices_id].temperature_get_supported         = true;\n            hm_adapters_adl[platform_devices_id].threshold_slowdown_get_supported  = true;\n            hm_adapters_adl[platform_devices_id].utilization_get_supported         = true;\n          }\n        }\n      }\n\n      hcfree (lpAdapterInfo);\n    }\n  }\n\n  if (hwmon_ctx->hm_sysfs)\n  {\n    if (1)\n    {\n      int hm_adapters_id = 0;\n\n      for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n      {\n        hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n        if ((device_param->device_type & CL_DEVICE_TYPE_GPU) == 0) continue;\n\n        hm_adapters_sysfs[hm_adapters_id].sysfs = device_id;\n\n        hm_adapters_sysfs[hm_adapters_id].buslanes_get_supported    = true;\n        hm_adapters_sysfs[hm_adapters_id].corespeed_get_supported   = true;\n        hm_adapters_sysfs[hm_adapters_id].fanspeed_get_supported    = true;\n        hm_adapters_sysfs[hm_adapters_id].fanpolicy_get_supported   = true;\n        hm_adapters_sysfs[hm_adapters_id].memoryspeed_get_supported = true;\n        hm_adapters_sysfs[hm_adapters_id].temperature_get_supported = true;\n\n        hm_adapters_id++;\n      }\n    }\n  }\n\n  if (hwmon_ctx->hm_adl == NULL && hwmon_ctx->hm_nvml == NULL && hwmon_ctx->hm_sysfs == NULL)\n  {\n    FREE_ADAPTERS;\n\n    return 0;\n  }\n\n  /**\n   * looks like we have some manageable device\n   */\n\n  hwmon_ctx->enabled = true;\n\n  /**\n   * save buffer required for later restores\n   */\n\n  hwmon_ctx->od_clock_mem_status = (ADLOD6MemClockState *) hccalloc (opencl_ctx->devices_cnt, sizeof (ADLOD6MemClockState));\n\n  /**\n   * HM devices: copy\n   */\n\n  for (u32 device_id = 0; device_id < opencl_ctx->devices_cnt; device_id++)\n  {\n    hc_device_param_t *device_param = &opencl_ctx->devices_param[device_id];\n\n    if (device_param->skipped == true) continue;\n\n    if ((device_param->device_type & CL_DEVICE_TYPE_GPU) == 0) continue;\n\n    const u32 platform_devices_id = device_param->platform_devices_id;\n\n    if (device_param->device_vendor_id == VENDOR_ID_AMD)\n    {\n      hwmon_ctx->hm_device[device_id].adl         = hm_adapters_adl[platform_devices_id].adl;\n      hwmon_ctx->hm_device[device_id].sysfs       = hm_adapters_sysfs[platform_devices_id].sysfs;\n      hwmon_ctx->hm_device[device_id].nvapi       = 0;\n      hwmon_ctx->hm_device[device_id].nvml        = 0;\n      hwmon_ctx->hm_device[device_id].od_version  = 0;\n\n      if (hwmon_ctx->hm_adl)\n      {\n        hwmon_ctx->hm_device[device_id].od_version = hm_adapters_adl[platform_devices_id].od_version;\n\n        hwmon_ctx->hm_device[device_id].buslanes_get_supported            |= hm_adapters_adl[platform_devices_id].buslanes_get_supported;\n        hwmon_ctx->hm_device[device_id].corespeed_get_supported           |= hm_adapters_adl[platform_devices_id].corespeed_get_supported;\n        hwmon_ctx->hm_device[device_id].fanspeed_get_supported            |= hm_adapters_adl[platform_devices_id].fanspeed_get_supported;\n        hwmon_ctx->hm_device[device_id].fanpolicy_get_supported           |= hm_adapters_adl[platform_devices_id].fanpolicy_get_supported;\n        hwmon_ctx->hm_device[device_id].memoryspeed_get_supported         |= hm_adapters_adl[platform_devices_id].memoryspeed_get_supported;\n        hwmon_ctx->hm_device[device_id].temperature_get_supported         |= hm_adapters_adl[platform_devices_id].temperature_get_supported;\n        hwmon_ctx->hm_device[device_id].threshold_shutdown_get_supported  |= hm_adapters_adl[platform_devices_id].threshold_shutdown_get_supported;\n        hwmon_ctx->hm_device[device_id].threshold_slowdown_get_supported  |= hm_adapters_adl[platform_devices_id].threshold_slowdown_get_supported;\n        hwmon_ctx->hm_device[device_id].throttle_get_supported            |= hm_adapters_adl[platform_devices_id].throttle_get_supported;\n        hwmon_ctx->hm_device[device_id].utilization_get_supported         |= hm_adapters_adl[platform_devices_id].utilization_get_supported;\n      }\n\n      if (hwmon_ctx->hm_sysfs)\n      {\n        hwmon_ctx->hm_device[device_id].buslanes_get_supported            |= hm_adapters_sysfs[platform_devices_id].buslanes_get_supported;\n        hwmon_ctx->hm_device[device_id].corespeed_get_supported           |= hm_adapters_sysfs[platform_devices_id].corespeed_get_supported;\n        hwmon_ctx->hm_device[device_id].fanspeed_get_supported            |= hm_adapters_sysfs[platform_devices_id].fanspeed_get_supported;\n        hwmon_ctx->hm_device[device_id].fanpolicy_get_supported           |= hm_adapters_sysfs[platform_devices_id].fanpolicy_get_supported;\n        hwmon_ctx->hm_device[device_id].memoryspeed_get_supported         |= hm_adapters_sysfs[platform_devices_id].memoryspeed_get_supported;\n        hwmon_ctx->hm_device[device_id].temperature_get_supported         |= hm_adapters_sysfs[platform_devices_id].temperature_get_supported;\n        hwmon_ctx->hm_device[device_id].threshold_shutdown_get_supported  |= hm_adapters_sysfs[platform_devices_id].threshold_shutdown_get_supported;\n        hwmon_ctx->hm_device[device_id].threshold_slowdown_get_supported  |= hm_adapters_sysfs[platform_devices_id].threshold_slowdown_get_supported;\n        hwmon_ctx->hm_device[device_id].throttle_get_supported            |= hm_adapters_sysfs[platform_devices_id].throttle_get_supported;\n        hwmon_ctx->hm_device[device_id].utilization_get_supported         |= hm_adapters_sysfs[platform_devices_id].utilization_get_supported;\n      }\n    }\n\n    if (device_param->device_vendor_id == VENDOR_ID_NV)\n    {\n      hwmon_ctx->hm_device[device_id].adl         = 0;\n      hwmon_ctx->hm_device[device_id].sysfs       = 0;\n      hwmon_ctx->hm_device[device_id].nvapi       = hm_adapters_nvapi[platform_devices_id].nvapi;\n      hwmon_ctx->hm_device[device_id].nvml        = hm_adapters_nvml[platform_devices_id].nvml;\n      hwmon_ctx->hm_device[device_id].od_version  = 0;\n\n      if (hwmon_ctx->hm_nvml)\n      {\n        hwmon_ctx->hm_device[device_id].buslanes_get_supported            |= hm_adapters_nvml[platform_devices_id].buslanes_get_supported;\n        hwmon_ctx->hm_device[device_id].corespeed_get_supported           |= hm_adapters_nvml[platform_devices_id].corespeed_get_supported;\n        hwmon_ctx->hm_device[device_id].fanspeed_get_supported            |= hm_adapters_nvml[platform_devices_id].fanspeed_get_supported;\n        hwmon_ctx->hm_device[device_id].fanpolicy_get_supported           |= hm_adapters_nvml[platform_devices_id].fanpolicy_get_supported;\n        hwmon_ctx->hm_device[device_id].memoryspeed_get_supported         |= hm_adapters_nvml[platform_devices_id].memoryspeed_get_supported;\n        hwmon_ctx->hm_device[device_id].temperature_get_supported         |= hm_adapters_nvml[platform_devices_id].temperature_get_supported;\n        hwmon_ctx->hm_device[device_id].threshold_shutdown_get_supported  |= hm_adapters_nvml[platform_devices_id].threshold_shutdown_get_supported;\n        hwmon_ctx->hm_device[device_id].threshold_slowdown_get_supported  |= hm_adapters_nvml[platform_devices_id].threshold_slowdown_get_supported;\n        hwmon_ctx->hm_device[device_id].throttle_get_supported            |= hm_adapters_nvml[platform_devices_id].throttle_get_supported;\n        hwmon_ctx->hm_device[device_id].utilization_get_supported         |= hm_adapters_nvml[platform_devices_id].utilization_get_supported;\n      }\n\n      if (hwmon_ctx->hm_nvapi)\n      {\n        hwmon_ctx->hm_device[device_id].buslanes_get_supported            |= hm_adapters_nvapi[platform_devices_id].buslanes_get_supported;\n        hwmon_ctx->hm_device[device_id].corespeed_get_supported           |= hm_adapters_nvapi[platform_devices_id].corespeed_get_supported;\n        hwmon_ctx->hm_device[device_id].fanspeed_get_supported            |= hm_adapters_nvapi[platform_devices_id].fanspeed_get_supported;\n        hwmon_ctx->hm_device[device_id].fanpolicy_get_supported           |= hm_adapters_nvapi[platform_devices_id].fanpolicy_get_supported;\n        hwmon_ctx->hm_device[device_id].memoryspeed_get_supported         |= hm_adapters_nvapi[platform_devices_id].memoryspeed_get_supported;\n        hwmon_ctx->hm_device[device_id].temperature_get_supported         |= hm_adapters_nvapi[platform_devices_id].temperature_get_supported;\n        hwmon_ctx->hm_device[device_id].threshold_shutdown_get_supported  |= hm_adapters_nvapi[platform_devices_id].threshold_shutdown_get_supported;\n        hwmon_ctx->hm_device[device_id].threshold_slowdown_get_supported  |= hm_adapters_nvapi[platform_devices_id].threshold_slowdown_get_supported;\n        hwmon_ctx->hm_device[device_id].throttle_get_supported            |= hm_adapters_nvapi[platform_devices_id].throttle_get_supported;\n        hwmon_ctx->hm_device[device_id].utilization_get_supported         |= hm_adapters_nvapi[platform_devices_id].utilization_get_supported;\n      }\n    }\n\n    // by calling the different functions here this will disable them in case they will error out\n    // this will also reduce the error itself printed to the user to a single print on startup\n\n    hm_get_buslanes_with_device_id            (hashcat_ctx, device_id);\n    hm_get_corespeed_with_device_id           (hashcat_ctx, device_id);\n    hm_get_fanpolicy_with_device_id           (hashcat_ctx, device_id);\n    hm_get_fanspeed_with_device_id            (hashcat_ctx, device_id);\n    hm_get_memoryspeed_with_device_id         (hashcat_ctx, device_id);\n    hm_get_temperature_with_device_id         (hashcat_ctx, device_id);\n    hm_get_threshold_shutdown_with_device_id  (hashcat_ctx, device_id);\n    hm_get_threshold_slowdown_with_device_id  (hashcat_ctx, device_id);\n    hm_get_throttle_with_device_id            (hashcat_ctx, device_id);\n    hm_get_utilization_with_device_id         (hashcat_ctx, device_id);\n  }\n\n  FREE_ADAPTERS;\n\n  return 0;\n}\n\nvoid hwmon_ctx_destroy (hashcat_ctx_t *hashcat_ctx)\n{\n  hwmon_ctx_t *hwmon_ctx = hashcat_ctx->hwmon_ctx;\n\n  if (hwmon_ctx->enabled == false) return;\n\n  // unload shared libraries\n\n  if (hwmon_ctx->hm_nvml)\n  {\n    hm_NVML_nvmlShutdown (hashcat_ctx);\n\n    nvml_close (hashcat_ctx);\n  }\n\n  if (hwmon_ctx->hm_nvapi)\n  {\n    hm_NvAPI_Unload (hashcat_ctx);\n\n    nvapi_close (hashcat_ctx);\n  }\n\n  if (hwmon_ctx->hm_adl)\n  {\n    hm_ADL_Main_Control_Destroy (hashcat_ctx);\n\n    adl_close (hashcat_ctx);\n  }\n\n  if (hwmon_ctx->hm_sysfs)\n  {\n\n    sysfs_close (hashcat_ctx);\n  }\n\n  // free memory\n\n  hcfree (hwmon_ctx->od_clock_mem_status);\n\n  hcfree (hwmon_ctx->hm_device);\n\n  memset (hwmon_ctx, 0, sizeof (hwmon_ctx_t));\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/include/dynloader.h": "/**\n * Author......: See docs/credits.txt\n * License.....: MIT\n */\n\n#ifndef _DYNLOADER_H\n#define _DYNLOADER_H\n\n#include <stdlib.h>\n\n#ifdef _WIN\n#include <windows.h>\n#else\n#include <dlfcn.h>\n#if defined (__APPLE__)\n#include <mach-o/dyld.h>\n#endif // __APPLE__\n#endif // _WIN\n\n#ifdef _WIN\nHMODULE hc_dlopen  (LPCSTR lpLibFileName);\nBOOL    hc_dlclose (HMODULE hLibModule);\nFARPROC hc_dlsym   (HMODULE hModule, LPCSTR lpProcName);\n#else\nvoid *hc_dlopen  (const char *fileName, int flag);\nint   hc_dlclose (void *handle);\nvoid *hc_dlsym   (void *module, const char *symbol);\n#endif\n\n#define HC_LOAD_FUNC2(ptr,name,type,var,libname,noerr) \\\n  ptr->name = (type) hc_dlsym (ptr->var, #name); \\\n  if (noerr != -1) { \\\n    if (!ptr->name) { \\\n      if (noerr == 1) { \\\n        event_log_error (hashcat_ctx, \"%s is missing from %s shared library.\", #name, #libname); \\\n        return -1; \\\n      } \\\n      if (noerr != 1) { \\\n        event_log_warning (hashcat_ctx, \"%s is missing from %s shared library.\", #name, #libname); \\\n        return 0; \\\n      } \\\n    } \\\n  }\n\n#define HC_LOAD_FUNC(ptr,name,type,libname,noerr) \\\n  ptr->name = (type) hc_dlsym (ptr->lib, #name); \\\n  if (noerr != -1) { \\\n    if (!ptr->name) { \\\n      if (noerr == 1) { \\\n        event_log_error (hashcat_ctx, \"%s is missing from %s shared library.\", #name, #libname); \\\n        return -1; \\\n      } \\\n      if (noerr != 1) { \\\n        event_log_warning (hashcat_ctx, \"%s is missing from %s shared library.\", #name, #libname); \\\n        return 0; \\\n      } \\\n    } \\\n  }\n\n#define HC_LOAD_ADDR(ptr,name,type,func,addr,libname,noerr) \\\n  ptr->name = (type) (*ptr->func) (addr); \\\n  if (!ptr->name) { \\\n    if (noerr == 1) { \\\n      event_log_error (hashcat_ctx, \"%s at address %08x is missing from %s shared library.\", #name, addr, #libname); \\\n      return -1; \\\n    } \\\n    if (noerr != 1) { \\\n      event_log_warning (hashcat_ctx, \"%s at address %08x is missing from %s shared library.\", #name, addr, #libname); \\\n      return 0; \\\n    } \\\n  }\n\n#endif // _DYNALOADER_H\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/hashcat.hcstat2",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Italian/it_ISO-8859-1-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Italian/it_cp1252-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Italian/it_ISO-8859-15-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Spanish/es_cp1252-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Spanish/es_ISO-8859-15-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Spanish/es_ISO-8859-1-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Slovak/sk_ISO-8859-2-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Slovak/sk_cp1250-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Russian/ru_cp1251-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Russian/ru_ISO-8859-5-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Polish/pl_cp1250-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Catalan/ca_ISO-8859-1-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Catalan/ca_cp1252-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Catalan/ca_ISO-8859-15-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Portuguese/pt_ISO-8859-15-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Portuguese/pt_ISO-8859-1-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Portuguese/pt_cp1252-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Greek/el_ISO-8859-7-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Greek/el_cp1253-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Castilian/es-ES_ISO-8859-1-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Castilian/es-ES_cp1252-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/Castilian/es-ES_ISO-8859-15-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/French/fr_ISO-8859-1-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/French/fr_ISO-8859-16-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/French/fr_ISO-8859-15-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/French/fr_cp1252-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/German/de_ISO-8859-1-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/German/de_cp1252-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/special/German/de_ISO-8859-15-special.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/GreekPolytonic.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/French.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/English.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Castilian.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Slovak.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Greek.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Polish.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Italian.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/German.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Bulgarian.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Portuguese.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Lithuanian.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Russian.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Catalan.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/combined/Spanish.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Italian/it_ISO-8859-1.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Italian/it_ISO-8859-15.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Italian/it_cp1252.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Spanish/es_ISO-8859-1.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Spanish/es_ISO-8859-15.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Spanish/es_cp1252.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Slovak/sk_cp1250.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Slovak/sk_ISO-8859-2.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Russian/ru_KOI8-R.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Russian/ru_ISO-8859-5.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Russian/ru_cp1251.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Lithuanian/lt_ISO-8859-4.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Lithuanian/lt_ISO-8859-13.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Lithuanian/lt_cp1257.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Polish/pl_ISO-8859-2.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Polish/pl_cp1250.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/GreekPolytonic/el_polytonic_ISO-8859-7.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/GreekPolytonic/el_polytonic_cp1253.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Hungarian/hu_cp1250.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Catalan/ca_cp1252.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Catalan/ca_ISO-8859-15.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Catalan/ca_ISO-8859-1.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Bulgarian/bg_cp1251.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Bulgarian/bg_ISO-8859-5.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Bulgarian/bg_KOI8-R.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Portuguese/pt_cp1252.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Portuguese/pt_ISO-8859-15.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Portuguese/pt_ISO-8859-1.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Greek/el_ISO-8859-7.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Greek/el_cp1253.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Castilian/es-ES_cp1252.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Castilian/es-ES_ISO-8859-15.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/Castilian/es-ES_ISO-8859-1.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/French/fr_ISO-8859-16.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/French/fr_cp1252.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/French/fr_ISO-8859-15.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/French/fr_ISO-8859-1.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/English/en_ISO-8859-15.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/English/en_cp1252.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/English/en_ISO-8859-1.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/German/de_ISO-8859-1.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/German/de_cp1252.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/charsets/standard/German/de_ISO-8859-15.hcchr",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_aes-twofish-serpent.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_serpent-twofish-aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_serpent-aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_sha512_serpent-twofish-aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_whirlpool_serpent-aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_whirlpool_aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_twofish-serpent.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_aes_boot.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_sha512_serpent-aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_aes-twofish_boot.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_aes-twofish.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_twofish.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_whirlpool_aes-twofish-serpent.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_aes-twofish-serpent_boot.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_serpent-twofish-aes_boot.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_serpent_boot.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_twofish_boot.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_sha512_twofish.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_sha512_aes-twofish.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_whirlpool_serpent.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_serpent-aes_boot.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_whirlpool_twofish.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_serpent.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_whirlpool_serpent-twofish-aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_ripemd160_twofish-serpent_boot.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_sha512_aes.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_whirlpool_aes-twofish.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_sha512_serpent.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_sha512_twofish-serpent.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_whirlpool_twofish-serpent.tc",
        "/tmp/vanessa/spack-stage/spack-stage-hashcat-5.0.0-wzu4iazbuexox33uoodgibmw3xp6cj2e/spack-src/tools/tc_tests/hashcat_sha512_aes-twofish-serpent.tc"
    ],
    "total_files": 1181
}