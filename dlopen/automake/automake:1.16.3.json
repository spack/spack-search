{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/bin/automake.in": "#!@PERL@\n# automake - create Makefile.in from Makefile.am            -*- perl -*-\n# @configure_input@\n# Copyright (C) 1994-2020 Free Software Foundation, Inc.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# Originally written by David Mackenzie <djm@gnu.ai.mit.edu>.\n# Perl reimplementation by Tom Tromey <tromey@redhat.com>, and\n# Alexandre Duret-Lutz <adl@gnu.org>.\n\npackage Automake;\n\nuse 5.006;\nuse strict;\nuse warnings FATAL => 'all';\n\nBEGIN\n{\n  unshift (@INC, '@datadir@/@PACKAGE@-@APIVERSION@')\n    unless $ENV{AUTOMAKE_UNINSTALLED};\n\n  # Override SHELL.  This is required on DJGPP so that system() uses\n  # bash, not COMMAND.COM which doesn't quote arguments properly.\n  # Other systems aren't expected to use $SHELL when Automake\n  # runs, but it should be safe to drop the \"if DJGPP\" guard if\n  # it turns up other systems need the same thing.  After all,\n  # if SHELL is used, ./configure's SHELL is always better than\n  # the user's SHELL (which may be something like tcsh).\n  $ENV{'SHELL'} = '@SHELL@' if exists $ENV{'DJDIR'};\n}\n\nuse Carp;\nuse File::Basename;\nuse File::Spec;\n\nuse Automake::Config;\nBEGIN\n{\n  if ($perl_threads)\n    {\n      require threads;\n      import threads;\n      require Thread::Queue;\n      import Thread::Queue;\n    }\n}\nuse Automake::General;\nuse Automake::XFile;\nuse Automake::Channels;\nuse Automake::ChannelDefs;\nuse Automake::Configure_ac;\nuse Automake::FileUtils;\nuse Automake::Location;\nuse Automake::Condition qw/TRUE FALSE/;\nuse Automake::DisjConditions;\nuse Automake::Options;\nuse Automake::Variable;\nuse Automake::VarDef;\nuse Automake::Rule;\nuse Automake::RuleDef;\nuse Automake::Wrap 'makefile_wrap';\nuse Automake::Language;\n\n## ----------------------- ##\n## Subroutine prototypes.  ##\n## ----------------------- ##\n\nsub append_exeext (&$);\nsub check_gnits_standards ();\nsub check_gnu_standards ();\nsub check_trailing_slash ($\\$);\nsub check_typos ();\nsub define_files_variable ($\\@$$);\nsub define_standard_variables ();\nsub define_verbose_libtool ();\nsub define_verbose_texinfo ();\nsub do_check_merge_target ();\nsub get_number_of_threads ();\nsub handle_compile ();\nsub handle_data ();\nsub handle_dist ();\nsub handle_emacs_lisp ();\nsub handle_factored_dependencies ();\nsub handle_footer ();\nsub handle_gettext ();\nsub handle_headers ();\nsub handle_install ();\nsub handle_java ();\nsub handle_languages ();\nsub handle_libraries ();\nsub handle_libtool ();\nsub handle_ltlibraries ();\nsub handle_makefiles_serial ();\nsub handle_man_pages ();\nsub handle_minor_options ();\nsub handle_options ();\nsub handle_programs ();\nsub handle_python ();\nsub handle_scripts ();\nsub handle_silent ();\nsub handle_subdirs ();\nsub handle_tags ();\nsub handle_targets ();\nsub handle_tests ();\nsub handle_tests_dejagnu ();\nsub handle_texinfo ();\nsub handle_user_recursion ();\nsub initialize_per_input ();\nsub lang_lex_finish ();\nsub lang_sub_obj ();\nsub lang_vala_finish ();\nsub lang_yacc_finish ();\nsub locate_aux_dir ();\nsub parse_arguments ();\nsub scan_aclocal_m4 ();\nsub scan_autoconf_files ();\nsub silent_flag ();\nsub transform ($\\%);\nsub transform_token ($\\%$);\nsub usage ();\nsub version ();\nsub yacc_lex_finish_helper ();\n\n## ----------- ##\n## Constants.  ##\n## ----------- ##\n\n# Some regular expressions.  One reason to put them here is that it\n# makes indentation work better in Emacs.\n\n# Writing singled-quoted-$-terminated regexes is a pain because\n# perl-mode thinks of $' as the ${'} variable (instead of a $ followed\n# by a closing quote.  Letting perl-mode think the quote is not closed\n# leads to all sort of misindentations.  On the other hand, defining\n# regexes as double-quoted strings is far less readable.  So usually\n# we will write:\n#\n#  $REGEX = '^regex_value' . \"\\$\";\n\nmy $IGNORE_PATTERN = '^\\s*##([^#\\n].*)?\\n';\nmy $WHITE_PATTERN = '^\\s*' . \"\\$\";\nmy $COMMENT_PATTERN = '^#';\nmy $TARGET_PATTERN='[$a-zA-Z0-9_.@%][-.a-zA-Z0-9_(){}/$+@%]*';\n# A rule has three parts: a list of targets, a list of dependencies,\n# and optionally actions.\nmy $RULE_PATTERN =\n  \"^($TARGET_PATTERN(?:(?:\\\\\\\\\\n|\\\\s)+$TARGET_PATTERN)*) *:([^=].*|)\\$\";\n\n# Only recognize leading spaces, not leading tabs.  If we recognize\n# leading tabs here then we need to make the reader smarter, because\n# otherwise it will think rules like 'foo=bar; \\' are errors.\nmy $ASSIGNMENT_PATTERN = '^ *([^ \\t=:+]*)\\s*([:+]?)=\\s*(.*)' . \"\\$\";\n# This pattern recognizes a Gnits version id and sets $1 if the\n# release is an alpha release.  We also allow a suffix which can be\n# used to extend the version number with a \"fork\" identifier.\nmy $GNITS_VERSION_PATTERN = '\\d+\\.\\d+([a-z]|\\.\\d+)?(-[A-Za-z0-9]+)?';\n\nmy $IF_PATTERN = '^if\\s+(!?)\\s*([A-Za-z][A-Za-z0-9_]*)\\s*(?:#.*)?' . \"\\$\";\nmy $ELSE_PATTERN =\n  '^else(?:\\s+(!?)\\s*([A-Za-z][A-Za-z0-9_]*))?\\s*(?:#.*)?' . \"\\$\";\nmy $ENDIF_PATTERN =\n  '^endif(?:\\s+(!?)\\s*([A-Za-z][A-Za-z0-9_]*))?\\s*(?:#.*)?' . \"\\$\";\nmy $PATH_PATTERN = '(\\w|[+/.-])+';\n# This will pass through anything not of the prescribed form.\nmy $INCLUDE_PATTERN = ('^include\\s+'\n\t\t       . '((\\$\\(top_srcdir\\)/' . $PATH_PATTERN . ')'\n\t\t       . '|(\\$\\(srcdir\\)/' . $PATH_PATTERN . ')'\n\t\t       . '|([^/\\$]' . $PATH_PATTERN . '))\\s*(#.*)?' . \"\\$\");\n\n# Directories installed during 'install-exec' phase.\nmy $EXEC_DIR_PATTERN =\n  '^(?:bin|sbin|libexec|sysconf|localstate|lib|pkglib|.*exec.*)' . \"\\$\";\n\n# Values for AC_CANONICAL_*\nuse constant AC_CANONICAL_BUILD  => 1;\nuse constant AC_CANONICAL_HOST   => 2;\nuse constant AC_CANONICAL_TARGET => 3;\n\n# Values indicating when something should be cleaned.\nuse constant MOSTLY_CLEAN     => 0;\nuse constant CLEAN            => 1;\nuse constant DIST_CLEAN       => 2;\nuse constant MAINTAINER_CLEAN => 3;\n\n# Libtool files.\nmy @libtool_files = qw(ltmain.sh config.guess config.sub);\n# ltconfig appears here for compatibility with old versions of libtool.\nmy @libtool_sometimes = qw(ltconfig ltcf-c.sh ltcf-cxx.sh ltcf-gcj.sh);\n\n# Commonly found files we look for and automatically include in\n# DISTFILES.\nmy @common_files =\n    (qw(ABOUT-GNU ABOUT-NLS AUTHORS BACKLOG COPYING COPYING.DOC COPYING.LIB\n\tCOPYING.LESSER ChangeLog INSTALL NEWS README THANKS TODO\n\tar-lib compile config.guess config.rpath\n\tconfig.sub depcomp install-sh libversion.in mdate-sh\n\tmissing mkinstalldirs py-compile texinfo.tex ylwrap),\n     @libtool_files, @libtool_sometimes);\n\n# Commonly used files we auto-include, but only sometimes.  This list\n# is used for the --help output only.\nmy @common_sometimes =\n  qw(aclocal.m4 acconfig.h config.h.top config.h.bot configure\n     configure.ac configure.in stamp-vti);\n\n# Standard directories from the GNU Coding Standards, and additional\n# pkg* directories from Automake.  Stored in a hash for fast member check.\nmy %standard_prefix =\n    map { $_ => 1 } (qw(bin data dataroot doc dvi exec html include info\n\t\t\tlib libexec lisp locale localstate man man1 man2\n\t\t\tman3 man4 man5 man6 man7 man8 man9 oldinclude pdf\n\t\t\tpkgdata pkginclude pkglib pkglibexec ps sbin\n\t\t\tsharedstate sysconf));\n\n# Copyright on generated Makefile.ins.\nmy $gen_copyright = \"\\\n# Copyright (C) 1994-$RELEASE_YEAR Free Software Foundation, Inc.\n\n# This Makefile.in is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.\n\";\n\n# These constants are returned by the lang_*_rewrite functions.\n# LANG_SUBDIR means that the resulting object file should be in a\n# subdir if the source file is.  In this case the file name cannot\n# have '..' components.\nuse constant LANG_IGNORE  => 0;\nuse constant LANG_PROCESS => 1;\nuse constant LANG_SUBDIR  => 2;\n\n# These are used when keeping track of whether an object can be built\n# by two different paths.\nuse constant COMPILE_LIBTOOL  => 1;\nuse constant COMPILE_ORDINARY => 2;\n\n# We can't always associate a location to a variable or a rule,\n# when it's defined by Automake.  We use INTERNAL in this case.\nuse constant INTERNAL => new Automake::Location;\n\n# Serialization keys for message queues.\nuse constant QUEUE_MESSAGE   => \"msg\";\nuse constant QUEUE_CONF_FILE => \"conf file\";\nuse constant QUEUE_LOCATION  => \"location\";\nuse constant QUEUE_STRING    => \"string\";\n\n## ---------------------------------- ##\n## Variables related to the options.  ##\n## ---------------------------------- ##\n\n# TRUE if we should always generate Makefile.in.\nmy $force_generation = 1;\n\n# From the Perl manual.\nmy $symlink_exists = (eval 'symlink (\"\", \"\");', $@ eq '');\n\n# TRUE if missing standard files should be installed.\nmy $add_missing = 0;\n\n# TRUE if we should copy missing files; otherwise symlink if possible.\nmy $copy_missing = 0;\n\n# TRUE if we should always update files that we know about.\nmy $force_missing = 0;\n\n\n## ---------------------------------------- ##\n## Variables filled during files scanning.  ##\n## ---------------------------------------- ##\n\n# Name of the configure.ac file.\nmy $configure_ac;\n\n# Files found by scanning configure.ac for LIBOBJS.\nmy %libsources = ();\n\n# Names used in AC_CONFIG_HEADERS call.\nmy @config_headers = ();\n\n# Names used in AC_CONFIG_LINKS call.\nmy @config_links = ();\n\n# List of Makefile.am's to process, and their corresponding outputs.\nmy @input_files = ();\nmy %output_files = ();\n\n# Complete list of Makefile.am's that exist.\nmy @configure_input_files = ();\n\n# List of files in AC_CONFIG_FILES/AC_OUTPUT without Makefile.am's,\n# and their outputs.\nmy @other_input_files = ();\n# Where each AC_CONFIG_FILES/AC_OUTPUT/AC_CONFIG_LINK/AC_CONFIG_HEADERS\n# appears.  The keys are the files created by these macros.\nmy %ac_config_files_location = ();\n# The condition under which AC_CONFIG_FOOS appears.\nmy %ac_config_files_condition = ();\n\n# Directory to search for configure-required files.  This\n# will be computed by locate_aux_dir() and can be set using\n# AC_CONFIG_AUX_DIR in configure.ac.\n# $CONFIG_AUX_DIR is the 'raw' directory, valid only in the source-tree.\nmy $config_aux_dir = '';\nmy $config_aux_dir_set_in_configure_ac = 0;\n# $AM_CONFIG_AUX_DIR is prefixed with $(top_srcdir), so it can be used\n# in Makefiles.\nmy $am_config_aux_dir = '';\n\n# Directory to search for AC_LIBSOURCE files, as set by AC_CONFIG_LIBOBJ_DIR\n# in configure.ac.\nmy $config_libobj_dir = '';\n\n# Whether AM_GNU_GETTEXT has been seen in configure.ac.\nmy $seen_gettext = 0;\n# Whether AM_GNU_GETTEXT([external]) is used.\nmy $seen_gettext_external = 0;\n# Where AM_GNU_GETTEXT appears.\nmy $ac_gettext_location;\n# Whether AM_GNU_GETTEXT_INTL_SUBDIR has been seen.\nmy $seen_gettext_intl = 0;\n\n# The arguments of the AM_EXTRA_RECURSIVE_TARGETS call (if any).\nmy @extra_recursive_targets = ();\n\n# Lists of tags supported by Libtool.\nmy %libtool_tags = ();\n# 1 if Libtool uses LT_SUPPORTED_TAG.  If it does, then it also\n# uses AC_REQUIRE_AUX_FILE.\nmy $libtool_new_api = 0;\n\n# Most important AC_CANONICAL_* macro seen so far.\nmy $seen_canonical = 0;\n\n# Where AM_MAINTAINER_MODE appears.\nmy $seen_maint_mode;\n\n# Actual version we've seen.\nmy $package_version = '';\n\n# Where version is defined.\nmy $package_version_location;\n\n# TRUE if we've seen AM_PROG_AR\nmy $seen_ar = 0;\n\n# Location of AC_REQUIRE_AUX_FILE calls, indexed by their argument.\nmy %required_aux_file = ();\n\n# Where AM_INIT_AUTOMAKE is called.\nmy $seen_init_automake = 0;\n\n# TRUE if we've seen AM_AUTOMAKE_VERSION.\nmy $seen_automake_version = 0;\n\n# Hash table of discovered configure substitutions.  Keys are names,\n# values are 'FILE:LINE' strings which are used by error message\n# generation.\nmy %configure_vars = ();\n\n# Ignored configure substitutions (i.e., variables not to be output in\n# Makefile.in)\nmy %ignored_configure_vars = ();\n\n# Files included by $configure_ac.\nmy @configure_deps = ();\n\n# Greatest timestamp of configure's dependencies.\nmy $configure_deps_greatest_timestamp = 0;\n\n# Hash table of AM_CONDITIONAL variables seen in configure.\nmy %configure_cond = ();\n\n# This maps extensions onto language names.\nmy %extension_map = ();\n\n# List of the DIST_COMMON files we discovered while reading\n# configure.ac.\nmy @configure_dist_common = ();\n\n# This maps languages names onto objects.\nmy %languages = ();\n# Maps each linker variable onto a language object.\nmy %link_languages = ();\n\n# maps extensions to needed source flags.\nmy %sourceflags = ();\n\n# List of targets we must always output.\n# FIXME: Complete, and remove falsely required targets.\nmy %required_targets =\n  (\n   'all'          => 1,\n   'dvi'\t  => 1,\n   'pdf'\t  => 1,\n   'ps'\t\t  => 1,\n   'info'\t  => 1,\n   'install-info' => 1,\n   'install'      => 1,\n   'install-data' => 1,\n   'install-exec' => 1,\n   'uninstall'    => 1,\n\n   # FIXME: Not required, temporary hacks.\n   # Well, actually they are sort of required: the -recursive\n   # targets will run them anyway...\n   'html-am'         => 1,\n   'dvi-am'          => 1,\n   'pdf-am'          => 1,\n   'ps-am'           => 1,\n   'info-am'         => 1,\n   'install-data-am' => 1,\n   'install-exec-am' => 1,\n   'install-html-am' => 1,\n   'install-dvi-am'  => 1,\n   'install-pdf-am'  => 1,\n   'install-ps-am'   => 1,\n   'install-info-am' => 1,\n   'installcheck-am' => 1,\n   'uninstall-am'    => 1,\n   'tags-am'         => 1,\n   'ctags-am'        => 1,\n   'cscopelist-am'   => 1,\n   'install-man'     => 1,\n  );\n\n# Queue to push require_conf_file requirements to.\nmy $required_conf_file_queue;\n\n# The name of the Makefile currently being processed.\nmy $am_file = 'BUG';\n\n################################################################\n\n## ------------------------------------------ ##\n## Variables reset by &initialize_per_input.  ##\n## ------------------------------------------ ##\n\n# Relative dir of the output makefile.\nmy $relative_dir;\n\n# Greatest timestamp of the output's dependencies (excluding\n# configure's dependencies).\nmy $output_deps_greatest_timestamp;\n\n# These variables are used when generating each Makefile.in.\n# They hold the Makefile.in until it is ready to be printed.\nmy $output_vars;\nmy $output_all;\nmy $output_header;\nmy $output_rules;\nmy $output_trailer;\n\n# This is the conditional stack, updated on if/else/endif, and\n# used to build Condition objects.\nmy @cond_stack;\n\n# This holds the set of included files.\nmy @include_stack;\n\n# List of dependencies for the obvious targets.\nmy @all;\nmy @check;\nmy @check_tests;\n\n# Keys in this hash table are files to delete.  The associated\n# value tells when this should happen (MOSTLY_CLEAN, DIST_CLEAN, etc.)\nmy %clean_files;\n\n# Keys in this hash table are object files or other files in\n# subdirectories which need to be removed.  This only holds files\n# which are created by compilations.  The value in the hash indicates\n# when the file should be removed.\nmy %compile_clean_files;\n\n# Keys in this hash table are directories where we expect to build a\n# libtool object.  We use this information to decide what directories\n# to delete.\nmy %libtool_clean_directories;\n\n# Value of $(SOURCES), used by tags.am.\nmy @sources;\n# Sources which go in the distribution.\nmy @dist_sources;\n\n# This hash maps object file names onto their corresponding source\n# file names.  This is used to ensure that each object is created\n# by a single source file.\nmy %object_map;\n\n# This hash maps object file names onto an integer value representing\n# whether this object has been built via ordinary compilation or\n# libtool compilation (the COMPILE_* constants).\nmy %object_compilation_map;\n\n\n# This keeps track of the directories for which we've already\n# created dirstamp code.  Keys are directories, values are stamp files.\n# Several keys can share the same stamp files if they are equivalent\n# (as are './/foo' and 'foo').\nmy %directory_map;\n\n# All .P files.\nmy %dep_files;\n\n# This is a list of all targets to run during \"make dist\".\nmy @dist_targets;\n\n# List of all programs, libraries and ltlibraries as returned\n# by am_install_var\nmy @proglist;\nmy @liblist;\nmy @ltliblist;\n# Blacklist of targets (as canonical base name) for which object file names\n# may not be automatically shortened\nmy @dup_shortnames;\n\n# Keep track of all programs declared in this Makefile, without\n# $(EXEEXT).  @substitutions@ are not listed.\nmy %known_programs;\nmy %known_libraries;\n\n# This keeps track of which extensions we've seen (that we care\n# about).\nmy %extension_seen;\n\n# This is random scratch space for the language finish functions.\n# Don't randomly overwrite it; examine other uses of keys first.\nmy %language_scratch;\n\n# We keep track of which objects need special (per-executable)\n# handling on a per-language basis.\nmy %lang_specific_files;\n\n# List of distributed files to be put in DIST_COMMON.\nmy @dist_common;\n\n# This is set when 'handle_dist' has finished.  Once this happens,\n# we should no longer push on dist_common.\nmy $handle_dist_run;\n\n# Used to store a set of linkers needed to generate the sources currently\n# under consideration.\nmy %linkers_used;\n\n# True if we need 'LINK' defined.  This is a hack.\nmy $need_link;\n\n# Does the generated Makefile have to build some compiled object\n# (for binary programs, or plain or libtool libraries)?\nmy $must_handle_compiled_objects;\n\n# Record each file processed by make_paragraphs.\nmy %transformed_files;\n\n################################################################\n\n## ---------------------------------------------- ##\n## Variables not reset by &initialize_per_input.  ##\n## ---------------------------------------------- ##\n\n# Cache each file processed by make_paragraphs.\n# (This is different from %transformed_files because\n# %transformed_files is reset for each file while %am_file_cache\n# it global to the run.)\nmy %am_file_cache;\n\n################################################################\n\n# var_SUFFIXES_trigger ($TYPE, $VALUE)\n# ------------------------------------\n# This is called by Automake::Variable::define() when SUFFIXES\n# is defined ($TYPE eq '') or appended ($TYPE eq '+').\n# The work here needs to be performed as a side-effect of the\n# macro_define() call because SUFFIXES definitions impact\n# on $KNOWN_EXTENSIONS_PATTERN which is used used when parsing\n# the input am file.\nsub var_SUFFIXES_trigger\n{\n    my ($type, $value) = @_;\n    accept_extensions (split (' ', $value));\n}\nAutomake::Variable::hook ('SUFFIXES', \\&var_SUFFIXES_trigger);\n\n################################################################\n\n\n# initialize_per_input ()\n# -----------------------\n# (Re)-Initialize per-Makefile.am variables.\nsub initialize_per_input ()\n{\n    reset_local_duplicates ();\n\n    $relative_dir = undef;\n\n    $output_deps_greatest_timestamp = 0;\n\n    $output_vars = '';\n    $output_all = '';\n    $output_header = '';\n    $output_rules = '';\n    $output_trailer = '';\n\n    Automake::Options::reset;\n    Automake::Variable::reset;\n    Automake::Rule::reset;\n\n    @cond_stack = ();\n\n    @include_stack = ();\n\n    @all = ();\n    @check = ();\n    @check_tests = ();\n\n    %clean_files = ();\n    %compile_clean_files = ();\n\n    # We always include '.'.  This isn't strictly correct.\n    %libtool_clean_directories = ('.' => 1);\n\n    @sources = ();\n    @dist_sources = ();\n\n    %object_map = ();\n    %object_compilation_map = ();\n\n    %directory_map = ();\n\n    %dep_files = ();\n\n    @dist_targets = ();\n\n    @dist_common = ();\n    $handle_dist_run = 0;\n\n    @proglist = ();\n    @liblist = ();\n    @ltliblist = ();\n    @dup_shortnames = ();\n\n    %known_programs = ();\n    %known_libraries = ();\n\n    %extension_seen = ();\n\n    %language_scratch = ();\n\n    %lang_specific_files = ();\n\n    $need_link = 0;\n\n    $must_handle_compiled_objects = 0;\n\n    %transformed_files = ();\n}\n\n\n################################################################\n\n# Initialize our list of languages that are internally supported.\n\nmy @cpplike_flags =\n  qw{\n    $(DEFS)\n    $(DEFAULT_INCLUDES)\n    $(INCLUDES)\n    $(AM_CPPFLAGS)\n    $(CPPFLAGS)\n  };\n\n# C.\nregister_language ('name' => 'c',\n\t\t   'Name' => 'C',\n\t\t   'config_vars' => ['CC'],\n\t\t   'autodep' => '',\n\t\t   'flags' => ['CFLAGS', 'CPPFLAGS'],\n\t\t   'ccer' => 'CC',\n\t\t   'compiler' => 'COMPILE',\n\t\t   'compile' => \"\\$(CC) @cpplike_flags \\$(AM_CFLAGS) \\$(CFLAGS)\",\n\t\t   'lder' => 'CCLD',\n\t\t   'ld' => '$(CC)',\n\t\t   'linker' => 'LINK',\n\t\t   'link' => '$(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'libtool_tag' => 'CC',\n\t\t   'extensions' => ['.c']);\n\n# C++.\nregister_language ('name' => 'cxx',\n\t\t   'Name' => 'C++',\n\t\t   'config_vars' => ['CXX'],\n\t\t   'linker' => 'CXXLINK',\n\t\t   'link' => '$(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'autodep' => 'CXX',\n\t\t   'flags' => ['CXXFLAGS', 'CPPFLAGS'],\n\t\t   'compile' => \"\\$(CXX) @cpplike_flags \\$(AM_CXXFLAGS) \\$(CXXFLAGS)\",\n\t\t   'ccer' => 'CXX',\n\t\t   'compiler' => 'CXXCOMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'libtool_tag' => 'CXX',\n\t\t   'lder' => 'CXXLD',\n\t\t   'ld' => '$(CXX)',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.c++', '.cc', '.cpp', '.cxx', '.C']);\n\n# Objective C.\nregister_language ('name' => 'objc',\n\t\t   'Name' => 'Objective C',\n\t\t   'config_vars' => ['OBJC'],\n\t\t   'linker' => 'OBJCLINK',\n\t\t   'link' => '$(OBJCLD) $(AM_OBJCFLAGS) $(OBJCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'autodep' => 'OBJC',\n\t\t   'flags' => ['OBJCFLAGS', 'CPPFLAGS'],\n\t\t   'compile' => \"\\$(OBJC) @cpplike_flags \\$(AM_OBJCFLAGS) \\$(OBJCFLAGS)\",\n\t\t   'ccer' => 'OBJC',\n\t\t   'compiler' => 'OBJCCOMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'lder' => 'OBJCLD',\n\t\t   'ld' => '$(OBJC)',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.m']);\n\n# Objective C++.\nregister_language ('name' => 'objcxx',\n\t\t   'Name' => 'Objective C++',\n\t\t   'config_vars' => ['OBJCXX'],\n\t\t   'linker' => 'OBJCXXLINK',\n\t\t   'link' => '$(OBJCXXLD) $(AM_OBJCXXFLAGS) $(OBJCXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'autodep' => 'OBJCXX',\n\t\t   'flags' => ['OBJCXXFLAGS', 'CPPFLAGS'],\n\t\t   'compile' => \"\\$(OBJCXX) @cpplike_flags \\$(AM_OBJCXXFLAGS) \\$(OBJCXXFLAGS)\",\n\t\t   'ccer' => 'OBJCXX',\n\t\t   'compiler' => 'OBJCXXCOMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'lder' => 'OBJCXXLD',\n\t\t   'ld' => '$(OBJCXX)',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.mm']);\n\n# Unified Parallel C.\nregister_language ('name' => 'upc',\n\t\t   'Name' => 'Unified Parallel C',\n\t\t   'config_vars' => ['UPC'],\n\t\t   'linker' => 'UPCLINK',\n\t\t   'link' => '$(UPCLD) $(AM_UPCFLAGS) $(UPCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'autodep' => 'UPC',\n\t\t   'flags' => ['UPCFLAGS', 'CPPFLAGS'],\n\t\t   'compile' => \"\\$(UPC) @cpplike_flags \\$(AM_UPCFLAGS) \\$(UPCFLAGS)\",\n\t\t   'ccer' => 'UPC',\n\t\t   'compiler' => 'UPCCOMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'lder' => 'UPCLD',\n\t\t   'ld' => '$(UPC)',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.upc']);\n\n# Headers.\nregister_language ('name' => 'header',\n\t\t   'Name' => 'Header',\n\t\t   'extensions' => ['.h', '.H', '.hxx', '.h++', '.hh',\n\t\t\t\t    '.hpp', '.inc'],\n\t\t   # No output.\n\t\t   'output_extensions' => sub { return () },\n\t\t   # Nothing to do.\n\t\t   '_finish' => sub { });\n\n# Vala\nregister_language ('name' => 'vala',\n\t\t   'Name' => 'Vala',\n\t\t   'config_vars' => ['VALAC'],\n\t\t   'flags' => [],\n\t\t   'compile' => '$(VALAC) $(AM_VALAFLAGS) $(VALAFLAGS)',\n\t\t   'ccer' => 'VALAC',\n\t\t   'compiler' => 'VALACOMPILE',\n\t\t   'extensions' => ['.vala'],\n\t\t   'output_extensions' => sub { (my $ext = $_[0]) =~ s/vala$/c/;\n\t\t\t\t\t\treturn ($ext,) },\n\t\t   'rule_file' => 'vala',\n\t\t   '_finish' => \\&lang_vala_finish,\n\t\t   '_target_hook' => \\&lang_vala_target_hook,\n\t\t   'nodist_specific' => 1);\n\n# Yacc (C & C++).\nregister_language ('name' => 'yacc',\n\t\t   'Name' => 'Yacc',\n\t\t   'config_vars' => ['YACC'],\n\t\t   'flags' => ['YFLAGS'],\n\t\t   'compile' => '$(YACC) $(AM_YFLAGS) $(YFLAGS)',\n\t\t   'ccer' => 'YACC',\n\t\t   'compiler' => 'YACCCOMPILE',\n\t\t   'extensions' => ['.y'],\n\t\t   'output_extensions' => sub { (my $ext = $_[0]) =~ tr/y/c/;\n\t\t\t\t\t\treturn ($ext,) },\n\t\t   'rule_file' => 'yacc',\n\t\t   '_finish' => \\&lang_yacc_finish,\n\t\t   '_target_hook' => \\&lang_yacc_target_hook,\n\t\t   'nodist_specific' => 1);\nregister_language ('name' => 'yaccxx',\n\t\t   'Name' => 'Yacc (C++)',\n\t\t   'config_vars' => ['YACC'],\n\t\t   'rule_file' => 'yacc',\n\t\t   'flags' => ['YFLAGS'],\n\t\t   'ccer' => 'YACC',\n\t\t   'compiler' => 'YACCCOMPILE',\n\t\t   'compile' => '$(YACC) $(AM_YFLAGS) $(YFLAGS)',\n\t\t   'extensions' => ['.y++', '.yy', '.yxx', '.ypp'],\n\t\t   'output_extensions' => sub { (my $ext = $_[0]) =~ tr/y/c/;\n\t\t\t\t\t\treturn ($ext,) },\n\t\t   '_finish' => \\&lang_yacc_finish,\n\t\t   '_target_hook' => \\&lang_yacc_target_hook,\n\t\t   'nodist_specific' => 1);\n\n# Lex (C & C++).\nregister_language ('name' => 'lex',\n\t\t   'Name' => 'Lex',\n\t\t   'config_vars' => ['LEX'],\n\t\t   'rule_file' => 'lex',\n\t\t   'flags' => ['LFLAGS'],\n\t\t   'compile' => '$(LEX) $(AM_LFLAGS) $(LFLAGS)',\n\t\t   'ccer' => 'LEX',\n\t\t   'compiler' => 'LEXCOMPILE',\n\t\t   'extensions' => ['.l'],\n\t\t   'output_extensions' => sub { (my $ext = $_[0]) =~ tr/l/c/;\n\t\t\t\t\t\treturn ($ext,) },\n\t\t   '_finish' => \\&lang_lex_finish,\n\t\t   '_target_hook' => \\&lang_lex_target_hook,\n\t\t   'nodist_specific' => 1);\nregister_language ('name' => 'lexxx',\n\t\t   'Name' => 'Lex (C++)',\n\t\t   'config_vars' => ['LEX'],\n\t\t   'rule_file' => 'lex',\n\t\t   'flags' => ['LFLAGS'],\n\t\t   'compile' => '$(LEX) $(AM_LFLAGS) $(LFLAGS)',\n\t\t   'ccer' => 'LEX',\n\t\t   'compiler' => 'LEXCOMPILE',\n\t\t   'extensions' => ['.l++', '.ll', '.lxx', '.lpp'],\n\t\t   'output_extensions' => sub { (my $ext = $_[0]) =~ tr/l/c/;\n\t\t\t\t\t\treturn ($ext,) },\n\t\t   '_finish' => \\&lang_lex_finish,\n\t\t   '_target_hook' => \\&lang_lex_target_hook,\n\t\t   'nodist_specific' => 1);\n\n# Assembler.\nregister_language ('name' => 'asm',\n\t\t   'Name' => 'Assembler',\n\t\t   'config_vars' => ['CCAS', 'CCASFLAGS'],\n\n\t\t   'flags' => ['CCASFLAGS'],\n\t\t   # Users can set AM_CCASFLAGS to include DEFS, INCLUDES,\n\t\t   # or anything else required.  They can also set CCAS.\n\t\t   # Or simply use Preprocessed Assembler.\n\t\t   'compile' => '$(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)',\n\t\t   'ccer' => 'CCAS',\n\t\t   'compiler' => 'CCASCOMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'extensions' => ['.s']);\n\n# Preprocessed Assembler.\nregister_language ('name' => 'cppasm',\n\t\t   'Name' => 'Preprocessed Assembler',\n\t\t   'config_vars' => ['CCAS', 'CCASFLAGS'],\n\n\t\t   'autodep' => 'CCAS',\n\t\t   'flags' => ['CCASFLAGS', 'CPPFLAGS'],\n\t\t   'compile' => \"\\$(CCAS) @cpplike_flags \\$(AM_CCASFLAGS) \\$(CCASFLAGS)\",\n\t\t   'ccer' => 'CPPAS',\n\t\t   'compiler' => 'CPPASCOMPILE',\n                   'libtool_tag' => 'CC',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'extensions' => ['.S', '.sx']);\n\n# Fortran 77\nregister_language ('name' => 'f77',\n\t\t   'Name' => 'Fortran 77',\n\t\t   'config_vars' => ['F77'],\n\t\t   'linker' => 'F77LINK',\n\t\t   'link' => '$(F77LD) $(AM_FFLAGS) $(FFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'flags' => ['FFLAGS'],\n\t\t   'compile' => '$(F77) $(AM_FFLAGS) $(FFLAGS)',\n\t\t   'ccer' => 'F77',\n\t\t   'compiler' => 'F77COMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'libtool_tag' => 'F77',\n\t\t   'lder' => 'F77LD',\n\t\t   'ld' => '$(F77)',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.f', '.for']);\n\n# Fortran\nregister_language ('name' => 'fc',\n\t\t   'Name' => 'Fortran',\n\t\t   'config_vars' => ['FC'],\n\t\t   'linker' => 'FCLINK',\n\t\t   'link' => '$(FCLD) $(AM_FCFLAGS) $(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'flags' => ['FCFLAGS'],\n\t\t   'compile' => '$(FC) $(AM_FCFLAGS) $(FCFLAGS)',\n\t\t   'ccer' => 'FC',\n\t\t   'compiler' => 'FCCOMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'libtool_tag' => 'FC',\n\t\t   'lder' => 'FCLD',\n\t\t   'ld' => '$(FC)',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.f90', '.f95', '.f03', '.f08']);\n\n# Preprocessed Fortran\nregister_language ('name' => 'ppfc',\n\t\t   'Name' => 'Preprocessed Fortran',\n\t\t   'config_vars' => ['FC'],\n\t\t   'linker' => 'FCLINK',\n\t\t   'link' => '$(FCLD) $(AM_FCFLAGS) $(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'lder' => 'FCLD',\n\t\t   'ld' => '$(FC)',\n\t\t   'flags' => ['FCFLAGS', 'CPPFLAGS'],\n\t\t   'ccer' => 'PPFC',\n\t\t   'compiler' => 'PPFCCOMPILE',\n\t\t   'compile' => \"\\$(FC) @cpplike_flags \\$(AM_FCFLAGS) \\$(FCFLAGS)\",\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'libtool_tag' => 'FC',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.F90','.F95', '.F03', '.F08']);\n\n# Preprocessed Fortran 77\n#\n# The current support for preprocessing Fortran 77 just involves\n# passing \"$(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS)\n# $(CPPFLAGS)\" as additional flags to the Fortran 77 compiler, since\n# this is how GNU Make does it; see the \"GNU Make Manual, Edition 0.51\n# for 'make' Version 3.76 Beta\" (specifically, from info file\n# '(make)Catalogue of Rules').\n#\n# A better approach would be to write an Autoconf test\n# (i.e. AC_PROG_FPP) for a Fortran 77 preprocessor, because not all\n# Fortran 77 compilers know how to do preprocessing.  The Autoconf\n# macro AC_PROG_FPP should test the Fortran 77 compiler first for\n# preprocessing capabilities, and then fall back on cpp (if cpp were\n# available).\nregister_language ('name' => 'ppf77',\n\t\t   'Name' => 'Preprocessed Fortran 77',\n\t\t   'config_vars' => ['F77'],\n\t\t   'linker' => 'F77LINK',\n\t\t   'link' => '$(F77LD) $(AM_FFLAGS) $(FFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'lder' => 'F77LD',\n\t\t   'ld' => '$(F77)',\n\t\t   'flags' => ['FFLAGS', 'CPPFLAGS'],\n\t\t   'ccer' => 'PPF77',\n\t\t   'compiler' => 'PPF77COMPILE',\n\t\t   'compile' => \"\\$(F77) @cpplike_flags \\$(AM_FFLAGS) \\$(FFLAGS)\",\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'libtool_tag' => 'F77',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.F']);\n\n# Ratfor.\nregister_language ('name' => 'ratfor',\n\t\t   'Name' => 'Ratfor',\n\t\t   'config_vars' => ['F77'],\n\t\t   'linker' => 'F77LINK',\n\t\t   'link' => '$(F77LD) $(AM_FFLAGS) $(FFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'lder' => 'F77LD',\n\t\t   'ld' => '$(F77)',\n\t\t   'flags' => ['RFLAGS', 'FFLAGS'],\n\t\t   # FIXME also FFLAGS.\n\t\t   'compile' => '$(F77) $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)',\n\t\t   'ccer' => 'F77',\n\t\t   'compiler' => 'RCOMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'libtool_tag' => 'F77',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.r']);\n\n# Java via gcj.\nregister_language ('name' => 'java',\n\t\t   'Name' => 'Java',\n\t\t   'config_vars' => ['GCJ'],\n\t\t   'linker' => 'GCJLINK',\n\t\t   'link' => '$(GCJLD) $(AM_GCJFLAGS) $(GCJFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@',\n\t\t   'autodep' => 'GCJ',\n\t\t   'flags' => ['GCJFLAGS'],\n\t\t   'compile' => '$(GCJ) $(AM_GCJFLAGS) $(GCJFLAGS)',\n\t\t   'ccer' => 'GCJ',\n\t\t   'compiler' => 'GCJCOMPILE',\n\t\t   'compile_flag' => '-c',\n\t\t   'output_flag' => '-o',\n\t\t   'libtool_tag' => 'GCJ',\n\t\t   'lder' => 'GCJLD',\n\t\t   'ld' => '$(GCJ)',\n\t\t   'pure' => 1,\n\t\t   'extensions' => ['.java', '.class', '.zip', '.jar']);\n\n################################################################\n\n# Error reporting functions.\n\n# err_am ($MESSAGE, [%OPTIONS])\n# -----------------------------\n# Uncategorized errors about the current Makefile.am.\nsub err_am\n{\n  msg_am ('error', @_);\n}\n\n# err_ac ($MESSAGE, [%OPTIONS])\n# -----------------------------\n# Uncategorized errors about configure.ac.\nsub err_ac\n{\n  msg_ac ('error', @_);\n}\n\n# msg_am ($CHANNEL, $MESSAGE, [%OPTIONS])\n# ---------------------------------------\n# Messages about about the current Makefile.am.\nsub msg_am\n{\n  my ($channel, $msg, %opts) = @_;\n  msg $channel, \"${am_file}.am\", $msg, %opts;\n}\n\n# msg_ac ($CHANNEL, $MESSAGE, [%OPTIONS])\n# ---------------------------------------\n# Messages about about configure.ac.\nsub msg_ac\n{\n  my ($channel, $msg, %opts) = @_;\n  msg $channel, $configure_ac, $msg, %opts;\n}\n\n################################################################\n\n# subst ($TEXT)\n# -------------\n# Return a configure-style substitution using the indicated text.\n# We do this to avoid having the substitutions directly in automake.in;\n# when we do that they are sometimes removed and this causes confusion\n# and bugs.\nsub subst\n{\n    my ($text) = @_;\n    return '@' . $text . '@';\n}\n\n################################################################\n\n\n# $BACKPATH\n# backname ($RELDIR)\n# -------------------\n# If I \"cd $RELDIR\", then to come back, I should \"cd $BACKPATH\".\n# For instance 'src/foo' => '../..'.\n# Works with non strictly increasing paths, i.e., 'src/../lib' => '..'.\nsub backname\n{\n    my ($file) = @_;\n    my @res;\n    foreach (split (/\\//, $file))\n    {\n\tnext if $_ eq '.' || $_ eq '';\n\tif ($_ eq '..')\n\t{\n\t    pop @res\n\t      or prog_error (\"trying to reverse path '$file' pointing outside tree\");\n\t}\n\telse\n\t{\n\t    push (@res, '..');\n\t}\n    }\n    return join ('/', @res) || '.';\n}\n\n################################################################\n\n# Silent rules handling functions.\n\n# verbose_var (NAME)\n# ------------------\n# The public variable stem used to implement silent rules.\nsub verbose_var\n{\n    my ($name) = @_;\n    return 'AM_V_' . $name;\n}\n\n# verbose_private_var (NAME)\n# --------------------------\n# The naming policy for the private variables for silent rules.\nsub verbose_private_var\n{\n    my ($name) = @_;\n    return 'am__v_' . $name;\n}\n\n# define_verbose_var (NAME, VAL-IF-SILENT, [VAL-IF-VERBOSE])\n# ----------------------------------------------------------\n# For  silent rules, setup VAR and dispatcher, to expand to\n# VAL-IF-SILENT if silent, to VAL-IF-VERBOSE (defaulting to\n# empty) if not.\nsub define_verbose_var\n{\n    my ($name, $silent_val, $verbose_val) = @_;\n    $verbose_val = '' unless defined $verbose_val;\n    my $var = verbose_var ($name);\n    my $pvar = verbose_private_var ($name);\n    my $silent_var = $pvar . '_0';\n    my $verbose_var = $pvar . '_1';\n    # For typical 'make's, 'configure' replaces AM_V (inside @@) with $(V)\n    # and AM_DEFAULT_V (inside @@) with $(AM_DEFAULT_VERBOSITY).\n    # For strict POSIX 2008 'make's, it replaces them with 0 or 1 instead.\n    # See AM_SILENT_RULES in m4/silent.m4.\n    define_variable ($var, '$(' . $pvar . '_@'.'AM_V'.'@)', INTERNAL);\n    define_variable ($pvar . '_', '$(' . $pvar . '_@'.'AM_DEFAULT_V'.'@)',\n                     INTERNAL);\n    Automake::Variable::define ($silent_var, VAR_AUTOMAKE, '', TRUE,\n                                $silent_val, '', INTERNAL, VAR_ASIS)\n      if (! vardef ($silent_var, TRUE));\n    Automake::Variable::define ($verbose_var, VAR_AUTOMAKE, '', TRUE,\n                                $verbose_val, '', INTERNAL, VAR_ASIS)\n      if (! vardef ($verbose_var, TRUE));\n}\n\n# verbose_flag (NAME)\n# -------------------\n# Contents of '%VERBOSE%' variable to expand before rule command.\nsub verbose_flag\n{\n    my ($name) = @_;\n    return '$(' . verbose_var ($name) . ')';\n}\n\nsub verbose_nodep_flag\n{\n    my ($name) = @_;\n    return '$(' . verbose_var ($name) . subst ('am__nodep') . ')';\n}\n\n# silent_flag\n# -----------\n# Contents of %SILENT%: variable to expand to '@' when silent.\nsub silent_flag ()\n{\n    return verbose_flag ('at');\n}\n\n# define_verbose_tagvar (NAME)\n# ----------------------------\n# Engage the needed silent rules machinery for tag NAME.\nsub define_verbose_tagvar\n{\n    my ($name) = @_;\n    define_verbose_var ($name, '@echo \"  '. $name . ' ' x (8 - length ($name)) . '\" $@;');\n}\n\n# Engage the needed silent rules machinery for assorted texinfo commands.\nsub define_verbose_texinfo ()\n{\n  my @tagvars = ('DVIPS', 'MAKEINFO', 'INFOHTML', 'TEXI2DVI', 'TEXI2PDF');\n  foreach my $tag (@tagvars)\n    {\n      define_verbose_tagvar($tag);\n    }\n  define_verbose_var('texinfo', '-q');\n  define_verbose_var('texidevnull', '> /dev/null');\n}\n\n# Engage the needed silent rules machinery for 'libtool --silent'.\nsub define_verbose_libtool ()\n{\n    define_verbose_var ('lt', '--silent');\n    return verbose_flag ('lt');\n}\n\nsub handle_silent ()\n{\n    # Define \"$(AM_V_P)\", expanding to a shell conditional that can be\n    # used in make recipes to determine whether we are being run in\n    # silent mode or not.  The choice of the name derives from the LISP\n    # convention of appending the letter 'P' to denote a predicate (see\n    # also \"the '-P' convention\" in the Jargon File); we do so for lack\n    # of a better convention.\n    define_verbose_var ('P', 'false', ':');\n    # *Always* provide the user with '$(AM_V_GEN)', unconditionally.\n    define_verbose_tagvar ('GEN');\n    define_verbose_var ('at', '@');\n}\n\n\n################################################################\n\n\n# Handle AUTOMAKE_OPTIONS variable.  Return 0 on error, 1 otherwise.\nsub handle_options ()\n{\n  my $var = var ('AUTOMAKE_OPTIONS');\n  if ($var)\n    {\n      if ($var->has_conditional_contents)\n\t{\n\t  msg_var ('unsupported', $var,\n\t\t   \"'AUTOMAKE_OPTIONS' cannot have conditional contents\");\n\t}\n      my @options = map { { option => $_->[1], where => $_->[0] } }\n\t\t\t$var->value_as_list_recursive (cond_filter => TRUE,\n\t\t\t\t\t\t       location => 1);\n      return 0 unless process_option_list (@options);\n    }\n\n  if ($strictness == GNITS)\n    {\n      set_option ('readme-alpha', INTERNAL);\n      set_option ('std-options', INTERNAL);\n      set_option ('check-news', INTERNAL);\n    }\n\n  return 1;\n}\n\n# shadow_unconditionally ($varname, $where)\n# -----------------------------------------\n# Return a $(variable) that contains all possible values\n# $varname can take.\n# If the VAR wasn't defined conditionally, return $(VAR).\n# Otherwise we create an am__VAR_DIST variable which contains\n# all possible values, and return $(am__VAR_DIST).\nsub shadow_unconditionally\n{\n  my ($varname, $where) = @_;\n  my $var = var $varname;\n  if ($var->has_conditional_contents)\n    {\n      $varname = \"am__${varname}_DIST\";\n      my @files = uniq ($var->value_as_list_recursive);\n      define_pretty_variable ($varname, TRUE, $where, @files);\n    }\n  return \"\\$($varname)\"\n}\n\n# check_user_variables (@LIST)\n# ----------------------------\n# Make sure each variable VAR in @LIST does not exist, suggest using AM_VAR\n# otherwise.\nsub check_user_variables\n{\n  my @dont_override = @_;\n  foreach my $flag (@dont_override)\n    {\n      my $var = var $flag;\n      if ($var)\n\t{\n\t  for my $cond ($var->conditions->conds)\n\t    {\n\t      if ($var->rdef ($cond)->owner == VAR_MAKEFILE)\n\t\t{\n\t\t  msg_cond_var ('gnu', $cond, $flag,\n\t\t\t\t\"'$flag' is a user variable, \"\n\t\t\t\t. \"you should not override it;\\n\"\n\t\t\t\t. \"use 'AM_$flag' instead\");\n\t\t}\n\t    }\n\t}\n    }\n}\n\n# Call finish function for each language that was used.\nsub handle_languages ()\n{\n    if (! option 'no-dependencies')\n      {\n        # Include auto-dep code.  Don't include it if DEP_FILES would\n        # be empty.\n        if (keys %extension_seen && keys %dep_files)\n          {\n            my @dep_files = sort keys %dep_files;\n            # Set location of depcomp.\n            define_variable ('depcomp',\n                             \"\\$(SHELL) $am_config_aux_dir/depcomp\",\n                             INTERNAL);\n            define_variable ('am__maybe_remake_depfiles', 'depfiles', INTERNAL);\n            define_variable ('am__depfiles_remade', \"@dep_files\", INTERNAL);\n            $output_rules .= \"\\n\";\n            my @dist_rms;\n            foreach my $depfile (@dep_files)\n              {\n                push @dist_rms, \"\\t-rm -f $depfile\";\n                # Generate each 'include' directive individually.  Several\n                # make implementations (IRIX 6, Solaris 10, FreeBSD 8) will\n                # fail to properly include several files resulting from a\n                # variable expansion. Just Generating many separate includes\n                # seems thus safest.\n                $output_rules .= subst ('AMDEP_TRUE') .\n                                 subst ('am__include') .\n                                 \" \" .\n                                 subst('am__quote') .\n                                 $depfile .\n                                 subst('am__quote') .\n                                 \" \" .\n                                 \"# am--include-marker\\n\";\n              }\n\n            require_conf_file (\"$am_file.am\", FOREIGN, 'depcomp');\n\n            $output_rules .= file_contents (\n                'depend', new Automake::Location,\n                'DISTRMS' => join (\"\\n\", @dist_rms));\n          }\n      }\n    else\n      {\n        define_variable ('depcomp', '', INTERNAL);\n        define_variable ('am__maybe_remake_depfiles', '', INTERNAL);\n      }\n\n    my %done;\n\n    # Is the C linker needed?\n    my $needs_c = 0;\n    foreach my $ext (sort keys %extension_seen)\n    {\n\tnext unless $extension_map{$ext};\n\n\tmy $lang = $languages{$extension_map{$ext}};\n\n\tmy $rule_file = $lang->rule_file || 'depend2';\n\n\t# Get information on $LANG.\n\tmy $pfx = $lang->autodep;\n\tmy $fpfx = ($pfx eq '') ? 'CC' : $pfx;\n\n\tmy ($AMDEP, $FASTDEP) =\n\t  (option 'no-dependencies' || $lang->autodep eq 'no')\n\t  ? ('FALSE', 'FALSE') : ('AMDEP', \"am__fastdep$fpfx\");\n\n\tmy $verbose = verbose_flag ($lang->ccer || 'GEN');\n\tmy $verbose_nodep = ($AMDEP eq 'FALSE')\n\t  ? $verbose : verbose_nodep_flag ($lang->ccer || 'GEN');\n\tmy $silent = silent_flag ();\n\n\tmy %transform = ('EXT'     => $ext,\n\t\t\t 'PFX'     => $pfx,\n\t\t\t 'FPFX'    => $fpfx,\n\t\t\t 'AMDEP'   => $AMDEP,\n\t\t\t 'FASTDEP' => $FASTDEP,\n\t\t\t '-c'      => $lang->compile_flag || '',\n\t\t\t # These are not used, but they need to be defined\n\t\t\t # so transform() do not complain.\n\t\t\t SUBDIROBJ     => 0,\n\t\t\t 'DERIVED-EXT' => 'BUG',\n\t\t\t DIST_SOURCE   => 1,\n\t\t\t VERBOSE   => $verbose,\n\t\t\t 'VERBOSE-NODEP' => $verbose_nodep,\n\t\t\t SILENT    => $silent,\n\t\t\t);\n\n\t# Generate the appropriate rules for this extension.\n\tif (((! option 'no-dependencies') && $lang->autodep ne 'no')\n\t    || defined $lang->compile)\n\t{\n\t    # Compute a possible derived extension.\n\t    # This is not used by depend2.am.\n\t    my $der_ext = ($lang->output_extensions->($ext))[0];\n\n\t    # When we output an inference rule like '.c.o:' we\n\t    # have two cases to consider: either subdir-objects\n\t    # is used, or it is not.\n\t    #\n\t    # In the latter case the rule is used to build objects\n\t    # in the current directory, and dependencies always\n\t    # go into './$(DEPDIR)/'.  We can hard-code this value.\n\t    #\n\t    # In the former case the rule can be used to build\n\t    # objects in sub-directories too.  Dependencies should\n\t    # go into the appropriate sub-directories, e.g.,\n\t    # 'sub/$(DEPDIR)/'.  The value of this directory\n\t    # needs to be computed on-the-fly.\n\t    #\n\t    # DEPBASE holds the name of this directory, plus the\n\t    # basename part of the object file (extensions Po, TPo,\n\t    # Plo, TPlo will be added later as appropriate).  It is\n\t    # either hardcoded, or a shell variable ('$depbase') that\n\t    # will be computed by the rule.\n\t    my $depbase =\n\t      option ('subdir-objects') ? '$$depbase' : '$(DEPDIR)/$*';\n\t    $output_rules .=\n\t      file_contents ($rule_file,\n\t\t\t     new Automake::Location,\n\t\t\t     %transform,\n\t\t\t     GENERIC   => 1,\n\n\t\t\t     'DERIVED-EXT' => $der_ext,\n\n\t\t\t     DEPBASE   => $depbase,\n\t\t\t     BASE      => '$*',\n\t\t\t     SOURCE    => '$<',\n\t\t\t     SOURCEFLAG => $sourceflags{$ext} || '',\n\t\t\t     OBJ       => '$@',\n\t\t\t     OBJOBJ    => '$@',\n\t\t\t     LTOBJ     => '$@',\n\n\t\t\t     COMPILE   => '$(' . $lang->compiler . ')',\n\t\t\t     LTCOMPILE => '$(LT' . $lang->compiler . ')',\n\t\t\t     -o        => $lang->output_flag,\n\t\t\t     SUBDIROBJ => !! option 'subdir-objects');\n\t}\n\n\t# Now include code for each specially handled object with this\n\t# language.\n\tmy %seen_files = ();\n\tforeach my $file (@{$lang_specific_files{$lang->name}})\n\t{\n\t    my ($derived, $source, $obj, $myext, $srcext, %file_transform) = @$file;\n\n\t    # We might see a given object twice, for instance if it is\n\t    # used under different conditions.\n\t    next if defined $seen_files{$obj};\n\t    $seen_files{$obj} = 1;\n\n\t    prog_error (\"found \" . $lang->name .\n\t\t\t\" in handle_languages, but compiler not defined\")\n\t      unless defined $lang->compile;\n\n\t    my $obj_compile = $lang->compile;\n\n\t    # Rewrite each occurrence of 'AM_$flag' in the compile\n\t    # rule into '${derived}_$flag' if it exists.\n\t    for my $flag (@{$lang->flags})\n\t      {\n\t\tmy $val = \"${derived}_$flag\";\n\t\t$obj_compile =~ s/\\(AM_$flag\\)/\\($val\\)/\n\t\t  if set_seen ($val);\n\t      }\n\n\t    my $libtool_tag = '';\n\t    if ($lang->libtool_tag && exists $libtool_tags{$lang->libtool_tag})\n\t      {\n\t\t$libtool_tag = '--tag=' . $lang->libtool_tag . ' '\n\t      }\n\n\t    my $ptltflags = \"${derived}_LIBTOOLFLAGS\";\n\t    $ptltflags = 'AM_LIBTOOLFLAGS' unless set_seen $ptltflags;\n\n\t    my $ltverbose = define_verbose_libtool ();\n\t    my $obj_ltcompile =\n\t      \"\\$(LIBTOOL) $ltverbose $libtool_tag\\$($ptltflags) \\$(LIBTOOLFLAGS) \"\n\t      . \"--mode=compile $obj_compile\";\n\n\t    # We _need_ '-o' for per object rules.\n\t    my $output_flag = $lang->output_flag || '-o';\n\n\t    my $depbase = dirname ($obj);\n\t    $depbase = ''\n\t\tif $depbase eq '.';\n\t    $depbase .= '/'\n\t\tunless $depbase eq '';\n\t    $depbase .= '$(DEPDIR)/' . basename ($obj);\n\n\t    $output_rules .=\n\t      file_contents ($rule_file,\n\t\t\t     new Automake::Location,\n\t\t\t     %transform,\n\t\t\t     GENERIC   => 0,\n\n\t\t\t     DEPBASE   => $depbase,\n\t\t\t     BASE      => $obj,\n\t\t\t     SOURCE    => $source,\n\t\t\t     SOURCEFLAG => $sourceflags{$srcext} || '',\n\t\t\t     # Use $myext and not '.o' here, in case\n\t\t\t     # we are actually building a new source\n\t\t\t     # file -- e.g. via yacc.\n\t\t\t     OBJ       => \"$obj$myext\",\n\t\t\t     OBJOBJ    => \"$obj.obj\",\n\t\t\t     LTOBJ     => \"$obj.lo\",\n\n\t\t\t     VERBOSE   => $verbose,\n\t\t\t     'VERBOSE-NODEP'  => $verbose_nodep,\n\t\t\t     SILENT    => $silent,\n\t\t\t     COMPILE   => $obj_compile,\n\t\t\t     LTCOMPILE => $obj_ltcompile,\n\t\t\t     -o        => $output_flag,\n\t\t\t     %file_transform);\n\t}\n\n\t# The rest of the loop is done once per language.\n\tnext if defined $done{$lang};\n\t$done{$lang} = 1;\n\n\t# Load the language dependent Makefile chunks.\n\tmy %lang = map { uc ($_) => 0 } keys %languages;\n\t$lang{uc ($lang->name)} = 1;\n\t$output_rules .= file_contents ('lang-compile',\n\t\t\t\t\tnew Automake::Location,\n\t\t\t\t\t%transform, %lang);\n\n\t# If the source to a program consists entirely of code from a\n\t# 'pure' language, for instance C++ or Fortran 77, then we\n\t# don't need the C compiler code.  However if we run into\n\t# something unusual then we do generate the C code.  There are\n\t# probably corner cases here that do not work properly.\n\t# People linking Java code to Fortran code deserve pain.\n\t$needs_c ||= ! $lang->pure;\n\n\tdefine_compiler_variable ($lang)\n\t  if ($lang->compile);\n\n\tdefine_linker_variable ($lang)\n\t  if ($lang->link);\n\n\trequire_variables (\"$am_file.am\", $lang->Name . \" source seen\",\n\t\t\t   TRUE, @{$lang->config_vars});\n\n\t# Call the finisher.\n\t$lang->finish;\n\n\t# Flags listed in '->flags' are user variables (per GNU Standards),\n\t# they should not be overridden in the Makefile...\n\tmy @dont_override = @{$lang->flags};\n\t# ... and so is LDFLAGS.\n\tpush @dont_override, 'LDFLAGS' if $lang->link;\n\n\tcheck_user_variables @dont_override;\n    }\n\n    # If the project is entirely C++ or entirely Fortran 77 (i.e., 1\n    # suffix rule was learned), don't bother with the C stuff.  But if\n    # anything else creeps in, then use it.\n    my @languages_seen = map { $languages{$extension_map{$_}}->name }\n                             (keys %extension_seen);\n    @languages_seen = uniq (@languages_seen);\n    $needs_c = 1 if @languages_seen > 1;\n    if ($need_link || $needs_c)\n      {\n\tdefine_compiler_variable ($languages{'c'})\n\t  unless defined $done{$languages{'c'}};\n\tdefine_linker_variable ($languages{'c'});\n      }\n}\n\n\n# append_exeext { PREDICATE } $MACRO\n# ----------------------------------\n# Append $(EXEEXT) to each filename in $F appearing in the Makefile\n# variable $MACRO if &PREDICATE($F) is true.  @substitutions@ are\n# ignored.\n#\n# This is typically used on all filenames of *_PROGRAMS, and filenames\n# of TESTS that are programs.\nsub append_exeext (&$)\n{\n  my ($pred, $macro) = @_;\n\n  transform_variable_recursively\n    ($macro, $macro, 'am__EXEEXT', 0, INTERNAL,\n     sub {\n       my ($subvar, $val, $cond, $full_cond) = @_;\n       # Append $(EXEEXT) unless the user did it already, or it's a\n       # @substitution@.\n       $val .= '$(EXEEXT)'\n\t if $val !~ /(?:\\$\\(EXEEXT\\)$|^[@]\\w+[@]$)/ && &$pred ($val);\n       return $val;\n     });\n}\n\n\n# Check to make sure a source defined in LIBOBJS is not explicitly\n# mentioned.  This is a separate function (as opposed to being inlined\n# in handle_source_transform) because it isn't always appropriate to\n# do this check.\nsub check_libobjs_sources\n{\n  my ($one_file, $unxformed) = @_;\n\n  foreach my $prefix ('', 'EXTRA_', 'dist_', 'nodist_',\n\t\t      'dist_EXTRA_', 'nodist_EXTRA_')\n    {\n      my @files;\n      my $varname = $prefix . $one_file . '_SOURCES';\n      my $var = var ($varname);\n      if ($var)\n\t{\n\t  @files = $var->value_as_list_recursive;\n\t}\n      elsif ($prefix eq '')\n\t{\n\t  @files = ($unxformed . '.c');\n\t}\n      else\n\t{\n\t  next;\n\t}\n\n      foreach my $file (@files)\n\t{\n\t  err_var ($prefix . $one_file . '_SOURCES',\n\t\t   \"automatically discovered file '$file' should not\" .\n\t\t   \" be explicitly mentioned\")\n\t    if defined $libsources{$file};\n\t}\n    }\n}\n\n\n# @OBJECTS\n# handle_single_transform ($VAR, $TOPPARENT, $DERIVED, $OBJ, $FILE, %TRANSFORM)\n# -----------------------------------------------------------------------------\n# Does much of the actual work for handle_source_transform.\n# Arguments are:\n#   $VAR is the name of the variable that the source filenames come from\n#   $TOPPARENT is the name of the _SOURCES variable which is being processed\n#   $DERIVED is the name of resulting executable or library\n#   $OBJ is the object extension (e.g., '.lo')\n#   $FILE the source file to transform\n#   %TRANSFORM contains extras arguments to pass to file_contents\n#     when producing explicit rules\n# Result is a list of the names of objects\n# %linkers_used will be updated with any linkers needed\nsub handle_single_transform\n{\n    my ($var, $topparent, $derived, $obj, $_file, %transform) = @_;\n    my @files = ($_file);\n    my @result = ();\n\n    # Turn sources into objects.  We use a while loop like this\n    # because we might add to @files in the loop.\n    while (scalar @files > 0)\n    {\n\t$_ = shift @files;\n\n\t# Configure substitutions in _SOURCES variables are errors.\n\tif (/^\\@.*\\@$/)\n\t{\n\t  my $parent_msg = '';\n\t  $parent_msg = \"\\nand is referred to from '$topparent'\"\n\t    if $topparent ne $var->name;\n\t  err_var ($var,\n\t\t   \"'\" . $var->name . \"' includes configure substitution '$_'\"\n\t\t   . $parent_msg . \";\\nconfigure \" .\n\t\t   \"substitutions are not allowed in _SOURCES variables\");\n\t  next;\n\t}\n\n\t# If the source file is in a subdirectory then the '.o' is put\n\t# into the current directory, unless the subdir-objects option\n\t# is in effect.\n\n\t# Split file name into base and extension.\n\tnext if ! /^(?:(.*)\\/)?([^\\/]*)($KNOWN_EXTENSIONS_PATTERN)$/;\n\tmy $full = $_;\n\tmy $directory = $1 || '';\n\tmy $base = $2;\n\tmy $extension = $3;\n\n\t# We must generate a rule for the object if it requires its own flags.\n\tmy $renamed = 0;\n\tmy ($linker, $object);\n\n        # This records whether we've seen a derived source file (e.g., yacc\n        # or lex output).\n        my $derived_source;\n\n\t# This holds the 'aggregate context' of the file we are\n\t# currently examining.  If the file is compiled with\n\t# per-object flags, then it will be the name of the object.\n\t# Otherwise it will be 'AM'.  This is used by the target hook\n\t# language function.\n\tmy $aggregate = 'AM';\n\n\t$extension = derive_suffix ($extension, $obj);\n\tmy $lang;\n\tif ($extension_map{$extension} &&\n\t    ($lang = $languages{$extension_map{$extension}}))\n\t{\n\t    # Found the language, so see what it says.\n\t    saw_extension ($extension);\n\n\t    # Do we have per-executable flags for this executable?\n\t    my $have_per_exec_flags = 0;\n\t    my @peflags = @{$lang->flags};\n\t    push @peflags, 'LIBTOOLFLAGS' if $obj eq '.lo';\n\t    foreach my $flag (@peflags)\n\t      {\n\t\tif (set_seen (\"${derived}_$flag\"))\n\t\t  {\n\t\t    $have_per_exec_flags = 1;\n\t\t    last;\n\t\t  }\n\t      }\n\n\t    # Note: computed subr call.  The language rewrite function\n\t    # should return one of the LANG_* constants.  It could\n\t    # also return a list whose first value is such a constant\n\t    # and whose second value is a new source extension which\n\t    # should be applied.  This means this particular language\n\t    # generates another source file which we must then process\n\t    # further.\n\t    my $subr = \\&{'lang_' . $lang->name . '_rewrite'};\n\t    defined &$subr or $subr = \\&lang_sub_obj;\n\t    my ($r, $source_extension)\n\t\t= &$subr ($directory, $base, $extension,\n\t\t\t  $obj, $have_per_exec_flags, $var);\n\t    # Skip this entry if we were asked not to process it.\n\t    next if $r == LANG_IGNORE;\n\n\t    # Now extract linker and other info.\n\t    $linker = $lang->linker;\n\n            my $this_obj_ext;\n            if (defined $source_extension)\n              {\n                $this_obj_ext = $source_extension;\n                $derived_source = 1;\n              }\n            else\n              {\n                $this_obj_ext = $obj;\n                $derived_source = 0;\n                # Don't ever place built object files in $(srcdir),\n                # even when sources are specified explicitly as (say)\n                # '$(srcdir)/foo.c' or '$(top_srcdir)/foo.c'.\n                # See automake bug#13928.\n                my @d = split '/', $directory;\n                if (@d > 0 && option 'subdir-objects')\n                  {\n                    my $d = $d[0];\n                    if ($d eq '$(srcdir)' or $d eq '${srcdir}')\n                      {\n                        shift @d;\n                      }\n                    elsif ($d eq '$(top_srcdir)' or $d eq '${top_srcdir}')\n                      {\n                        $d[0] = '$(top_builddir)';\n                      }\n                    $directory = join '/', @d;\n                  }\n              }\n            $object = $base . $this_obj_ext;\n\n\t    if ($have_per_exec_flags)\n\t    {\n\t\t# We have a per-executable flag in effect for this\n\t\t# object.  In this case we rewrite the object's\n\t\t# name to ensure it is unique.\n\n                # We choose the name 'DERIVED_OBJECT' to ensure (1) uniqueness,\n                # and (2) continuity between invocations.  However, this will\n                # result in a name that is too long for losing systems, in some\n                # situations.  So we attempt to shorten automatically under\n                # subdir-objects, and provide _SHORTNAME to override as a last\n                # resort.  If subdir-object is in effect, it's usually\n                # unnecessary to use the complete 'DERIVED_OBJECT' (that is\n                # often the result from %canon_reldir%/%C% usage) since objects\n                # are placed next to their source file.  Generally, this means\n                # it is already unique within that directory (see below for an\n                # exception).  Thus, we try to avoid unnecessarily long file\n                # names by stripping the directory components of\n                # 'DERIVED_OBJECT'.  This allows avoiding explicit _SHORTNAME\n                # usage in many cases.  EXCEPTION: If two (or more) targets in\n                # different directories but with the same base name (after\n                # canonicalization), using target-specific FLAGS, link the same\n                # object, then this logic clashes.  Thus, we don't strip if\n                # this is detected.\n                my $dname = $derived;\n                if ($directory ne ''\n                    && option 'subdir-objects'\n                    && none { $dname =~ /$_[0]$/ } @dup_shortnames)\n                  {\n                    # At this point, we don't clear information about what\n                    # parts of $derived are truly file name components.  We can\n                    # determine that by comparing against the canonicalization\n                    # of $directory.\n                    my $dir = $directory . \"/\";\n                    my $cdir = canonicalize ($dir);\n                    my $dir_len = length ($dir);\n                    # Make sure we only strip full file name components.  This\n                    # is done by repeatedly trying to find cdir at the\n                    # beginning.  Each iteration removes one file name\n                    # component from the end of cdir.\n                    while ($dir_len > 0 && index ($derived, $cdir) != 0)\n                      {\n                        # Eventually $dir_len becomes 0.\n                        $dir_len = rindex ($dir, \"/\", $dir_len - 2) + 1;\n                        $cdir = substr ($cdir, 0, $dir_len);\n                      }\n                    $dname = substr ($derived, $dir_len);\n                  }\n\t\tmy $var = var ($derived . '_SHORTNAME');\n\t\tif ($var)\n\t\t{\n\t\t    # FIXME: should use the same Condition as\n\t\t    # the _SOURCES variable.  But this is really\n\t\t    # silly overkill -- nobody should have\n\t\t    # conditional shortnames.\n\t\t    $dname = $var->variable_value;\n\t\t}\n\t\t$object = $dname . '-' . $object;\n\n\t\tprog_error ($lang->name . \" flags defined without compiler\")\n\t\t  if ! defined $lang->compile;\n\n\t\t$renamed = 1;\n\t    }\n\n\t    # If rewrite said it was ok, put the object into a subdir.\n\t    if ($directory ne '')\n\t    {\n              if ($r == LANG_SUBDIR)\n                {\n                  $object = $directory . '/' . $object;\n                }\n              else\n                {\n                  # Since the next major version of automake (2.0) will\n                  # make the behaviour so far only activated with the\n                  # 'subdir-object' option mandatory, it's better if we\n                  # start warning users not using that option.\n                  # As suggested by Peter Johansson, we strive to avoid\n                  # the warning when it would be irrelevant, i.e., if\n                  # all source files sit in \"current\" directory.\n                  msg_var 'unsupported', $var,\n                          \"source file '$full' is in a subdirectory,\"\n                          . \"\\nbut option 'subdir-objects' is disabled\";\n                  msg 'unsupported', INTERNAL, <<'EOF', uniq_scope => US_GLOBAL;\npossible forward-incompatibility.\nAt least a source file is in a subdirectory, but the 'subdir-objects'\nautomake option hasn't been enabled.  For now, the corresponding output\nobject file(s) will be placed in the top-level directory.  However,\nthis behaviour will change in future Automake versions: they will\nunconditionally cause object files to be placed in the same subdirectory\nof the corresponding sources.\nYou are advised to start using 'subdir-objects' option throughout your\nproject, to avoid future incompatibilities.\nEOF\n                }\n\t    }\n\n\t    # If the object file has been renamed (because per-target\n\t    # flags are used) we cannot compile the file with an\n\t    # inference rule: we need an explicit rule.\n\t    #\n\t    # If the source is in a subdirectory and the object is in\n\t    # the current directory, we also need an explicit rule.\n\t    #\n\t    # If both source and object files are in a subdirectory\n\t    # (this happens when the subdir-objects option is used),\n\t    # then the inference will work.\n\t    #\n\t    # The latter case deserves a historical note.  When the\n\t    # subdir-objects option was added on 1999-04-11 it was\n\t    # thought that inferences rules would work for\n\t    # subdirectory objects too.  Later, on 1999-11-22,\n\t    # automake was changed to output explicit rules even for\n\t    # subdir-objects.  Nobody remembers why, but this occurred\n\t    # soon after the merge of the user-dep-gen-branch so it\n\t    # might be related.  In late 2003 people complained about\n\t    # the size of the generated Makefile.ins (libgcj, with\n\t    # 2200+ subdir objects was reported to have a 9MB\n\t    # Makefile), so we now rely on inference rules again.\n\t    # Maybe we'll run across the same issue as in the past,\n\t    # but at least this time we can document it.  However since\n\t    # dependency tracking has evolved it is possible that\n\t    # our old problem no longer exists.\n\t    # Using inference rules for subdir-objects has been tested\n\t    # with GNU make, Solaris make, Ultrix make, BSD make,\n\t    # HP-UX make, and OSF1 make successfully.\n\t    if ($renamed\n\t\t|| ($directory ne '' && ! option 'subdir-objects')\n\t\t# We must also use specific rules for a nodist_ source\n\t\t# if its language requests it.\n\t\t|| ($lang->nodist_specific && ! $transform{'DIST_SOURCE'}))\n\t    {\n\t\tmy $obj_sans_ext = substr ($object, 0,\n\t\t\t\t\t   - length ($this_obj_ext));\n\t\tmy $full_ansi;\n\t\tif ($directory ne '')\n\t          {\n\t\t\t$full_ansi = $directory . '/' . $base . $extension;\n\t          }\n\t\telse\n\t          {\n\t\t\t$full_ansi = $base . $extension;\n\t          }\n\n\t\tmy @specifics = ($full_ansi, $obj_sans_ext,\n\t\t\t\t # Only use $this_obj_ext in the derived\n\t\t\t\t # source case because in the other case we\n\t\t\t\t # *don't* want $(OBJEXT) to appear here.\n\t\t\t\t ($derived_source ? $this_obj_ext : '.o'),\n\t\t\t\t $extension);\n\n\t\t# If we renamed the object then we want to use the\n\t\t# per-executable flag name.  But if this is simply a\n\t\t# subdir build then we still want to use the AM_ flag\n\t\t# name.\n\t\tif ($renamed)\n\t\t  {\n\t\t    unshift @specifics, $derived;\n\t\t    $aggregate = $derived;\n\t\t  }\n\t\telse\n\t\t  {\n\t\t    unshift @specifics, 'AM';\n\t\t  }\n\n\t\t# Each item on this list is a reference to a list consisting\n\t\t# of four values followed by additional transform flags for\n\t\t# file_contents.  The four values are the derived flag prefix\n\t\t# (e.g. for 'foo_CFLAGS', it is 'foo'), the name of the\n\t\t# source file, the base name of the output file, and\n\t\t# the extension for the object file.\n\t\tpush (@{$lang_specific_files{$lang->name}},\n\t\t      [@specifics, %transform]);\n\t    }\n\t}\n\telsif ($extension eq $obj)\n\t{\n\t    # This is probably the result of a direct suffix rule.\n\t    # In this case we just accept the rewrite.\n\t    $object = \"$base$extension\";\n\t    $object = \"$directory/$object\" if $directory ne '';\n\t    $linker = '';\n\t}\n\telse\n\t{\n\t    # No error message here.  Used to have one, but it was\n\t    # very unpopular.\n\t    # FIXME: we could potentially do more processing here,\n\t    # perhaps treating the new extension as though it were a\n\t    # new source extension (as above).  This would require\n\t    # more restructuring than is appropriate right now.\n\t    next;\n\t}\n\n\terr_am \"object '$object' created by '$full' and '$object_map{$object}'\"\n\t  if (defined $object_map{$object}\n\t      && $object_map{$object} ne $full);\n\n\tmy $comp_val = (($object =~ /\\.lo$/)\n\t\t\t? COMPILE_LIBTOOL : COMPILE_ORDINARY);\n\t(my $comp_obj = $object) =~ s/\\.lo$/.\\$(OBJEXT)/;\n\tif (defined $object_compilation_map{$comp_obj}\n\t    && $object_compilation_map{$comp_obj} != 0\n\t    # Only see the error once.\n\t    && ($object_compilation_map{$comp_obj}\n\t\t!= (COMPILE_LIBTOOL | COMPILE_ORDINARY))\n\t    && $object_compilation_map{$comp_obj} != $comp_val)\n\t  {\n\t    err_am \"object '$comp_obj' created both with libtool and without\";\n\t  }\n\t$object_compilation_map{$comp_obj} |= $comp_val;\n\n\tif (defined $lang)\n\t{\n\t    # Let the language do some special magic if required.\n\t    $lang->target_hook ($aggregate, $object, $full, %transform);\n\t}\n\n\tif ($derived_source)\n\t  {\n\t    prog_error ($lang->name . \" has automatic dependency tracking\")\n\t      if $lang->autodep ne 'no';\n\t    # Make sure this new source file is handled next.  That will\n\t    # make it appear to be at the right place in the list.\n\t    unshift (@files, $object);\n\t    # Distribute derived sources unless the source they are\n\t    # derived from is not.\n\t    push_dist_common ($object)\n\t      unless ($topparent =~ /^(?:nobase_)?nodist_/);\n\t    next;\n\t  }\n\n\t$linkers_used{$linker} = 1;\n\n\tpush (@result, $object);\n\n\tif (! defined $object_map{$object})\n\t{\n\t    my @dep_list = ();\n\t    $object_map{$object} = $full;\n\n\t    # If resulting object is in subdir, we need to make\n\t    # sure the subdir exists at build time.\n\t    if ($object =~ /\\//)\n\t    {\n\t\t# FIXME: check that $DIRECTORY is somewhere in the\n\t\t# project\n\n\t\t# For Java, the way we're handling it right now, a\n\t\t# '..' component doesn't make sense.\n\t\tif ($lang && $lang->name eq 'java' && $object =~ /(\\/|^)\\.\\.\\//)\n\t\t  {\n\t\t    err_am \"'$full' should not contain a '..' component\";\n\t\t  }\n\n                # Make sure *all* objects files in the subdirectory are\n                # removed by \"make mostlyclean\".  Not only this is more\n                # efficient than listing the object files to be removed\n                # individually (which would cause an 'rm' invocation for\n                # each of them -- very inefficient, see bug#10697), it\n                # would also leave stale object files in the subdirectory\n                # whenever a source file there is removed or renamed.\n                $compile_clean_files{\"$directory/*.\\$(OBJEXT)\"} = MOSTLY_CLEAN;\n                if ($object =~ /\\.lo$/)\n                  {\n                    # If we have a libtool object, then we also must remove\n                    # any '.lo' objects in its same subdirectory.\n                    $compile_clean_files{\"$directory/*.lo\"} = MOSTLY_CLEAN;\n                    # Remember to cleanup .libs/ in this directory.\n                    $libtool_clean_directories{$directory} = 1;\n                  }\n\n\t\tpush (@dep_list, require_build_directory ($directory));\n\n\t\t# If we're generating dependencies, we also want\n\t\t# to make sure that the appropriate subdir of the\n\t\t# .deps directory is created.\n\t\tpush (@dep_list,\n\t\t      require_build_directory ($directory . '/$(DEPDIR)'))\n\t\t  unless option 'no-dependencies';\n\t    }\n\n\t    pretty_print_rule ($object . ':', \"\\t\", @dep_list)\n\t\tif scalar @dep_list > 0;\n\t}\n\n\t# Transform .o or $o file into .P file (for automatic\n\t# dependency code).\n        # Properly flatten multiple adjacent slashes, as Solaris 10 make\n        # might fail over them in an include statement.\n        # Leading double slashes may be special, as per Posix, so deal\n        # with them carefully.\n        if ($lang && $lang->autodep ne 'no')\n        {\n            my $depfile = $object;\n            $depfile =~ s/\\.([^.]*)$/.P$1/;\n            $depfile =~ s/\\$\\(OBJEXT\\)$/o/;\n            my $maybe_extra_leading_slash = '';\n            $maybe_extra_leading_slash = '/' if $depfile =~ m,^//[^/],;\n            $depfile =~ s,/+,/,g;\n            my $basename = basename ($depfile);\n            # This might make $dirname empty, but we account for that below.\n            (my $dirname = dirname ($depfile)) =~ s/\\/*$//;\n            $dirname = $maybe_extra_leading_slash . $dirname;\n            $dep_files{$dirname . '/$(DEPDIR)/' . $basename} = 1;\n        }\n    }\n\n    return @result;\n}\n\n\n# $LINKER\n# define_objects_from_sources ($VAR, $OBJVAR, $NODEFINE, $ONE_FILE,\n#                              $OBJ, $PARENT, $TOPPARENT, $WHERE, %TRANSFORM)\n# ---------------------------------------------------------------------------\n# Define an _OBJECTS variable for a _SOURCES variable (or subvariable)\n#\n# Arguments are:\n#   $VAR is the name of the _SOURCES variable\n#   $OBJVAR is the name of the _OBJECTS variable if known (otherwise\n#     it will be generated and returned).\n#   $NODEFINE is a boolean: if true, $OBJVAR will not be defined (but\n#     work done to determine the linker will be).\n#   $ONE_FILE is the canonical (transformed) name of object to build\n#   $OBJ is the object extension (i.e. either '.o' or '.lo').\n#   $TOPPARENT is the _SOURCES variable being processed.\n#   $WHERE context into which this definition is done\n#   %TRANSFORM extra arguments to pass to file_contents when producing\n#     rules\n#\n# Result is a pair ($LINKER, $OBJVAR):\n#    $LINKER is a boolean, true if a linker is needed to deal with the objects\nsub define_objects_from_sources\n{\n  my ($var, $objvar, $nodefine, $one_file,\n      $obj, $topparent, $where, %transform) = @_;\n\n  my $needlinker = \"\";\n\n  transform_variable_recursively\n    ($var, $objvar, 'am__objects', $nodefine, $where,\n     # The transform code to run on each filename.\n     sub {\n       my ($subvar, $val, $cond, $full_cond) = @_;\n       my @trans = handle_single_transform ($subvar, $topparent,\n\t\t\t\t\t    $one_file, $obj, $val,\n\t\t\t\t\t    %transform);\n       $needlinker = \"true\" if @trans;\n       return @trans;\n     });\n\n  return $needlinker;\n}\n\n\n# handle_source_transform ($CANON_TARGET, $TARGET, $OBJEXT, $WHERE, %TRANSFORM)\n# -----------------------------------------------------------------------------\n# Handle SOURCE->OBJECT transform for one program or library.\n# Arguments are:\n#   canonical (transformed) name of target to build\n#   actual target of object to build\n#   object extension (i.e., either '.o' or '$o')\n#   location of the source variable\n#   extra arguments to pass to file_contents when producing rules\n# Return the name of the linker variable that must be used.\n# Empty return means just use 'LINK'.\nsub handle_source_transform\n{\n    # one_file is canonical name.  unxformed is given name.  obj is\n    # object extension.\n    my ($one_file, $unxformed, $obj, $where, %transform) = @_;\n\n    my $linker = '';\n\n    # No point in continuing if _OBJECTS is defined.\n    return if reject_var ($one_file . '_OBJECTS',\n\t\t\t  $one_file . '_OBJECTS should not be defined');\n\n    my %used_pfx = ();\n    my $needlinker;\n    %linkers_used = ();\n    foreach my $prefix ('', 'EXTRA_', 'dist_', 'nodist_',\n\t\t\t'dist_EXTRA_', 'nodist_EXTRA_')\n    {\n\tmy $varname = $prefix . $one_file . \"_SOURCES\";\n\tmy $var = var $varname;\n\tnext unless $var;\n\n\t# We are going to define _OBJECTS variables using the prefix.\n\t# Then we glom them all together.  So we can't use the null\n\t# prefix here as we need it later.\n\tmy $xpfx = ($prefix eq '') ? 'am_' : $prefix;\n\n\t# Keep track of which prefixes we saw.\n\t$used_pfx{$xpfx} = 1\n\t  unless $prefix =~ /EXTRA_/;\n\n\tpush @sources, \"\\$($varname)\";\n\tpush @dist_sources, shadow_unconditionally ($varname, $where)\n\t  unless (option ('no-dist') || $prefix =~ /^nodist_/);\n\n\t$needlinker |=\n\t    define_objects_from_sources ($varname,\n\t\t\t\t\t $xpfx . $one_file . '_OBJECTS',\n\t\t\t\t\t !!($prefix =~ /EXTRA_/),\n\t\t\t\t\t $one_file, $obj, $varname, $where,\n\t\t\t\t\t DIST_SOURCE => ($prefix !~ /^nodist_/),\n\t\t\t\t\t %transform);\n    }\n    if ($needlinker)\n    {\n\t$linker ||= resolve_linker (%linkers_used);\n    }\n\n    my @keys = sort keys %used_pfx;\n    if (scalar @keys == 0)\n    {\n\t# The default source for libfoo.la is libfoo.c, but for\n\t# backward compatibility we first look at libfoo_la.c,\n\t# if no default source suffix is given.\n\tmy $old_default_source = \"$one_file.c\";\n\tmy $ext_var = var ('AM_DEFAULT_SOURCE_EXT');\n\tmy $default_source_ext = $ext_var ? variable_value ($ext_var) : '.c';\n\tmsg_var ('unsupported', $ext_var, $ext_var->name . \" can assume at most one value\")\n\t  if $default_source_ext =~ /[\\t ]/;\n\t(my $default_source = $unxformed) =~ s,(\\.[^./\\\\]*)?$,$default_source_ext,;\n\t# TODO: Remove this backward-compatibility hack in Automake 2.0.\n\tif ($old_default_source ne $default_source\n\t    && !$ext_var\n\t    && (rule $old_default_source\n\t\t|| rule '$(srcdir)/' . $old_default_source\n\t\t|| rule '${srcdir}/' . $old_default_source\n\t\t|| -f $old_default_source))\n\t  {\n\t    my $loc = $where->clone;\n\t    $loc->pop_context;\n\t    msg ('obsolete', $loc,\n\t\t \"the default source for '$unxformed' has been changed \"\n\t\t . \"to '$default_source'.\\n(Using '$old_default_source' for \"\n\t\t . \"backward compatibility.)\");\n\t    $default_source = $old_default_source;\n\t  }\n\t# If a rule exists to build this source with a $(srcdir)\n\t# prefix, use that prefix in our variables too.  This is for\n\t# the sake of BSD Make.\n\tif (rule '$(srcdir)/' . $default_source\n\t    || rule '${srcdir}/' . $default_source)\n\t  {\n\t    $default_source = '$(srcdir)/' . $default_source;\n\t  }\n\n\tdefine_variable ($one_file . \"_SOURCES\", $default_source, $where);\n\tpush (@sources, $default_source);\n\tpush (@dist_sources, $default_source);\n\n\t%linkers_used = ();\n\tmy (@result) =\n\t  handle_single_transform ($one_file . '_SOURCES',\n\t\t\t\t   $one_file . '_SOURCES',\n\t\t\t\t   $one_file, $obj,\n\t\t\t\t   $default_source, %transform);\n\t$linker ||= resolve_linker (%linkers_used);\n\tdefine_pretty_variable ($one_file . '_OBJECTS', TRUE, $where, @result);\n    }\n    else\n    {\n\t@keys = map { '$(' . $_ . $one_file . '_OBJECTS)' } @keys;\n\tdefine_pretty_variable ($one_file . '_OBJECTS', TRUE, $where, @keys);\n    }\n\n    # If we want to use 'LINK' we must make sure it is defined.\n    if ($linker eq '')\n    {\n\t$need_link = 1;\n    }\n\n    return $linker;\n}\n\n\n# handle_lib_objects ($XNAME, $VAR)\n# ---------------------------------\n# Special-case ALLOCA and LIBOBJS substitutions in _LDADD or _LIBADD variables.\n# Also, generate _DEPENDENCIES variable if appropriate.\n# Arguments are:\n#   transformed name of object being built, or empty string if no object\n#   name of _LDADD/_LIBADD-type variable to examine\n# Returns 1 if LIBOBJS seen, 0 otherwise.\nsub handle_lib_objects\n{\n  my ($xname, $varname) = @_;\n\n  my $var = var ($varname);\n  prog_error \"'$varname' undefined\"\n    unless $var;\n  prog_error \"unexpected variable name '$varname'\"\n    unless $varname =~ /^(.*)(?:LIB|LD)ADD$/;\n  my $prefix = $1 || 'AM_';\n\n  my $seen_libobjs = 0;\n  my $flagvar = 0;\n\n  transform_variable_recursively\n    ($varname, $xname . '_DEPENDENCIES', 'am__DEPENDENCIES',\n     ! $xname, INTERNAL,\n     # Transformation function, run on each filename.\n     sub {\n       my ($subvar, $val, $cond, $full_cond) = @_;\n\n       if ($val =~ /^-/)\n\t {\n\t   # Skip -lfoo and -Ldir silently; these are explicitly allowed.\n\t   if ($val !~ /^-[lL]/ &&\n\t       # Skip -dlopen and -dlpreopen; these are explicitly allowed\n\t       # for Libtool libraries or programs.  (Actually we are a bit\n\t       # lax here since this code also applies to non-libtool\n\t       # libraries or programs, for which -dlopen and -dlopreopen\n\t       # are pure nonsense.  Diagnosing this doesn't seem very\n\t       # important: the developer will quickly get complaints from\n\t       # the linker.)\n\t       $val !~ /^-dl(?:pre)?open$/ &&\n\t       # Only get this error once.\n\t       ! $flagvar)\n\t     {\n\t       $flagvar = 1;\n\t       # FIXME: should display a stack of nested variables\n\t       # as context when $var != $subvar.\n\t       err_var ($var, \"linker flags such as '$val' belong in \"\n\t\t\t. \"'${prefix}LDFLAGS'\");\n\t     }\n\t   return ();\n\t }\n       elsif ($val !~ /^\\@.*\\@$/)\n\t {\n\t   # Assume we have a file of some sort, and output it into the\n\t   # dependency variable.  Autoconf substitutions are not output;\n\t   # rarely is a new dependency substituted into e.g. foo_LDADD\n\t   # -- but bad things (e.g. -lX11) are routinely substituted.\n\t   # Note that LIBOBJS and ALLOCA are exceptions to this rule,\n\t   # and handled specially below.\n\t   return $val;\n\t }\n       elsif ($val =~ /^\\@(LT)?LIBOBJS\\@$/)\n\t {\n\t   handle_LIBOBJS ($subvar, $cond, $1);\n\t   $seen_libobjs = 1;\n\t   return $val;\n\t }\n       elsif ($val =~ /^\\@(LT)?ALLOCA\\@$/)\n\t {\n\t   handle_ALLOCA ($subvar, $cond, $1);\n\t   return $val;\n\t }\n       else\n\t {\n\t   return ();\n\t }\n     });\n\n  return $seen_libobjs;\n}\n\n# handle_LIBOBJS_or_ALLOCA ($VAR, $BASE)\n# --------------------------------------\n# Definitions common to LIBOBJS and ALLOCA.\n# VAR should be one of LIBOBJS, LTLIBOBJS, ALLOCA, or LTALLOCA.\n# BASE should be one base file name from AC_LIBSOURCE, or alloca.\nsub handle_LIBOBJS_or_ALLOCA\n{\n  my ($var, $base) = @_;\n\n  my $dir = '';\n\n  # If LIBOBJS files must be built in another directory we have\n  # to define LIBOBJDIR and ensure the files get cleaned.\n  # Otherwise LIBOBJDIR can be left undefined, and the cleaning\n  # is achieved by 'rm -f *.$(OBJEXT)' in compile.am.\n  if ($config_libobj_dir\n      && $relative_dir ne $config_libobj_dir)\n    {\n      if (option 'subdir-objects')\n\t{\n\t  # In the top-level Makefile we do not use $(top_builddir), because\n\t  # we are already there, and since the targets are built without\n\t  # a $(top_builddir), it helps BSD Make to match them with\n\t  # dependencies.\n\t  $dir = \"$config_libobj_dir/\"\n\t    if $config_libobj_dir ne '.';\n\t  $dir = backname ($relative_dir) . \"/$dir\"\n\t    if $relative_dir ne '.';\n\t  define_variable ('LIBOBJDIR', \"$dir\", INTERNAL);\n\t  if ($dir && !defined $clean_files{\"$dir$base.\\$(OBJEXT)\"})\n\t    {\n\t      my $dirstamp = require_build_directory ($dir);\n\t      $output_rules .= \"$dir$base.\\$(OBJEXT): $dirstamp\\n\";\n\t      $output_rules .= \"$dir$base.lo: $dirstamp\\n\"\n\t\tif ($var =~ /^LT/);\n\t    }\n\t  # libtool might create .$(OBJEXT) as a side-effect of using\n\t  # LTLIBOBJS or LTALLOCA.\n\t  $clean_files{\"$dir$base.\\$(OBJEXT)\"} = MOSTLY_CLEAN;\n\t  $clean_files{\"$dir$base.lo\"} = MOSTLY_CLEAN\n\t    if ($var =~ /^LT/);\n\t}\n      else\n\t{\n\t  error (\"'\\$($var)' cannot be used outside '$config_libobj_dir' if\"\n\t\t . \" 'subdir-objects' is not set\");\n\t}\n    }\n\n  return $dir;\n}\n\nsub handle_LIBOBJS\n{\n  my ($var, $cond, $lt) = @_;\n  my $myobjext = $lt ? 'lo' : 'o';\n  $lt ||= '';\n\n  $var->requires_variables (\"\\@${lt}LIBOBJS\\@ used\", $lt . 'LIBOBJS')\n    if ! keys %libsources;\n\n  foreach my $iter (keys %libsources)\n    {\n      my $dir = '';\n      if ($iter =~ /^(.*)(\\.[cly])$/)\n\t{\n\t  saw_extension ($2);\n\t  saw_extension ('.c');\n\t  $dir = handle_LIBOBJS_or_ALLOCA (\"${lt}LIBOBJS\", $1);\n\t}\n\n      if ($iter =~ /\\.h$/)\n\t{\n\t  require_libsource_with_macro ($cond, $var, FOREIGN, $iter);\n\t}\n      elsif ($iter ne 'alloca.c')\n\t{\n\t  my $rewrite = $iter;\n\t  $rewrite =~ s/\\.c$/.P$myobjext/;\n\t  $dep_files{$dir . '$(DEPDIR)/' . $rewrite} = 1;\n\t  $rewrite = \"^\" . quotemeta ($iter) . \"\\$\";\n\t  # Only require the file if it is not a built source.\n\t  my $bs = var ('BUILT_SOURCES');\n\t  if (! $bs || ! grep (/$rewrite/, $bs->value_as_list_recursive))\n\t    {\n\t      require_libsource_with_macro ($cond, $var, FOREIGN, $iter);\n\t    }\n\t}\n    }\n}\n\nsub handle_ALLOCA\n{\n  my ($var, $cond, $lt) = @_;\n  my $myobjext = $lt ? 'lo' : 'o';\n  $lt ||= '';\n  my $dir = handle_LIBOBJS_or_ALLOCA (\"${lt}ALLOCA\", \"alloca\");\n\n  $dir eq '' and $dir = './';\n  $var->requires_variables (\"\\@${lt}ALLOCA\\@ used\", $lt . 'ALLOCA');\n  $dep_files{$dir . '$(DEPDIR)/alloca.P' . $myobjext} = 1;\n  require_libsource_with_macro ($cond, $var, FOREIGN, 'alloca.c');\n  saw_extension ('.c');\n}\n\n# Canonicalize the input parameter.\nsub canonicalize\n{\n    my ($string) = @_;\n    $string =~ tr/A-Za-z0-9_\\@/_/c;\n    return $string;\n}\n\n# Canonicalize a name, and check to make sure the non-canonical name\n# is never used.  Returns canonical name.  Arguments are name and a\n# list of suffixes to check for.\nsub check_canonical_spelling\n{\n  my ($name, @suffixes) = @_;\n\n  my $xname = canonicalize ($name);\n  if ($xname ne $name)\n    {\n      foreach my $xt (@suffixes)\n\t{\n\t  reject_var (\"$name$xt\", \"use '$xname$xt', not '$name$xt'\");\n\t}\n    }\n\n  return $xname;\n}\n\n# Set up the compile suite.\nsub handle_compile ()\n{\n   return if ! $must_handle_compiled_objects;\n\n    # Boilerplate.\n    my $default_includes = '';\n    if (! option 'nostdinc')\n      {\n\tmy @incs = ('-I.', subst ('am__isrc'));\n\n\tmy $var = var 'CONFIG_HEADER';\n\tif ($var)\n\t  {\n\t    foreach my $hdr (split (' ', $var->variable_value))\n\t      {\n\t\tpush @incs, '-I' . dirname ($hdr);\n\t      }\n\t  }\n\t# We want '-I. -I$(srcdir)', but the latter -I is redundant\n\t# and unaesthetic in non-VPATH builds.  We use `-I.@am__isrc@`\n\t# instead.  It will be replaced by '-I.' or '-I. -I$(srcdir)'.\n\t# Items in CONFIG_HEADER are never in $(srcdir) so it is safe\n\t# to just put @am__isrc@ right after '-I.', without a space.\n\t($default_includes = ' ' . uniq (@incs)) =~ s/ @/@/;\n      }\n\n    my (@mostly_rms, @dist_rms);\n    foreach my $item (sort keys %compile_clean_files)\n    {\n\tif ($compile_clean_files{$item} == MOSTLY_CLEAN)\n\t{\n\t    push (@mostly_rms, \"\\t-rm -f $item\");\n\t}\n\telsif ($compile_clean_files{$item} == DIST_CLEAN)\n\t{\n\t    push (@dist_rms, \"\\t-rm -f $item\");\n\t}\n\telse\n\t{\n\t  prog_error 'invalid entry in %compile_clean_files';\n\t}\n    }\n\n    my ($coms, $vars, $rules) =\n      file_contents_internal (1, \"$libdir/am/compile.am\",\n\t\t\t      new Automake::Location,\n\t\t\t      'DEFAULT_INCLUDES' => $default_includes,\n\t\t\t      'MOSTLYRMS' => join (\"\\n\", @mostly_rms),\n\t\t\t      'DISTRMS' => join (\"\\n\", @dist_rms));\n    $output_vars .= $vars;\n    $output_rules .= \"$coms$rules\";\n}\n\n# Handle libtool rules.\nsub handle_libtool ()\n{\n  return unless var ('LIBTOOL');\n\n  # Libtool requires some files, but only at top level.\n  # (Starting with Libtool 2.0 we do not have to bother.  These\n  # requirements are done with AC_REQUIRE_AUX_FILE.)\n  require_conf_file_with_macro (TRUE, 'LIBTOOL', FOREIGN, @libtool_files)\n    if $relative_dir eq '.' && ! $libtool_new_api;\n\n  my @libtool_rms;\n  foreach my $item (sort keys %libtool_clean_directories)\n    {\n      my $dir = ($item eq '.') ? '' : \"$item/\";\n      # .libs is for Unix, _libs for DOS.\n      push (@libtool_rms, \"\\t-rm -rf ${dir}.libs ${dir}_libs\");\n    }\n\n  check_user_variables 'LIBTOOLFLAGS';\n\n  # Output the libtool compilation rules.\n  $output_rules .= file_contents ('libtool',\n\t\t\t\t  new Automake::Location,\n\t\t\t\t   LTRMS => join (\"\\n\", @libtool_rms));\n}\n\n# Check for duplicate targets\nsub handle_targets ()\n{\n  my %seen = ();\n  my @dups = ();\n  @proglist = am_install_var ('progs', 'PROGRAMS',\n                              'bin', 'sbin', 'libexec', 'pkglibexec',\n                              'noinst', 'check');\n  @liblist = am_install_var ('libs', 'LIBRARIES',\n                             'lib', 'pkglib', 'noinst', 'check');\n  @ltliblist = am_install_var ('ltlib', 'LTLIBRARIES',\n\t\t\t       'noinst', 'lib', 'pkglib', 'check');\n\n  # Record duplications that may arise after canonicalization of the\n  # base names, in order to prevent object file clashes in the presence\n  # of target-specific *FLAGS\n  my @targetlist = (@proglist, @liblist, @ltliblist);\n  foreach my $pair (@targetlist)\n    {\n      my $base = canonicalize (basename (@$pair[1]));\n      push (@dup_shortnames, $base) if ($seen{$base});\n      $seen{$base} = $base;\n    }\n}\n\nsub handle_programs ()\n{\n  return if ! @proglist;\n  $must_handle_compiled_objects = 1;\n\n  my $seen_global_libobjs =\n    var ('LDADD') && handle_lib_objects ('', 'LDADD');\n\n  foreach my $pair (@proglist)\n    {\n      my ($where, $one_file) = @$pair;\n\n      my $seen_libobjs = 0;\n      my $obj = '.$(OBJEXT)';\n\n      $known_programs{$one_file} = $where;\n\n      # Canonicalize names and check for misspellings.\n      my $xname = check_canonical_spelling ($one_file, '_LDADD', '_LDFLAGS',\n                                            '_SOURCES', '_OBJECTS',\n                                            '_DEPENDENCIES');\n\n      $where->push_context (\"while processing program '$one_file'\");\n      $where->set (INTERNAL->get);\n\n      my $linker = handle_source_transform ($xname, $one_file, $obj, $where,\n                                            NONLIBTOOL => 1, LIBTOOL => 0);\n\n      if (var ($xname . \"_LDADD\"))\n\t{\n\t  $seen_libobjs = handle_lib_objects ($xname, $xname . '_LDADD');\n\t}\n      else\n\t{\n\t  # User didn't define prog_LDADD override.  So do it.\n\t  define_variable ($xname . '_LDADD', '$(LDADD)', $where);\n\n\t  # This does a bit too much work.  But we need it to\n\t  # generate _DEPENDENCIES when appropriate.\n\t  if (var ('LDADD'))\n\t    {\n\t      $seen_libobjs = handle_lib_objects ($xname, 'LDADD');\n\t    }\n\t}\n\n      reject_var ($xname . '_LIBADD',\n\t\t  \"use '${xname}_LDADD', not '${xname}_LIBADD'\");\n\n      set_seen ($xname . '_DEPENDENCIES');\n      set_seen ('EXTRA_' . $xname . '_DEPENDENCIES');\n      set_seen ($xname . '_LDFLAGS');\n\n      # Determine program to use for link.\n      my($xlink, $vlink) = define_per_target_linker_variable ($linker, $xname);\n      $vlink = verbose_flag ($vlink || 'GEN');\n\n      # If the resulting program lies in a subdirectory,\n      # ensure that the directory exists before we need it.\n      my $dirstamp = require_build_directory_maybe ($one_file);\n\n      $libtool_clean_directories{dirname ($one_file)} = 1;\n\n      $output_rules .= file_contents ('program',\n                                      $where,\n                                      PROGRAM  => $one_file,\n                                      XPROGRAM => $xname,\n                                      XLINK    => $xlink,\n                                      VERBOSE  => $vlink,\n                                      DIRSTAMP => $dirstamp,\n                                      EXEEXT   => '$(EXEEXT)');\n\n      if ($seen_libobjs || $seen_global_libobjs)\n\t{\n\t  if (var ($xname . '_LDADD'))\n\t    {\n\t      check_libobjs_sources ($xname, $xname . '_LDADD');\n\t    }\n\t  elsif (var ('LDADD'))\n\t    {\n\t      check_libobjs_sources ($xname, 'LDADD');\n\t    }\n\t}\n    }\n}\n\n\nsub handle_libraries ()\n{\n  return if ! @liblist;\n  $must_handle_compiled_objects = 1;\n\n  my @prefix = am_primary_prefixes ('LIBRARIES', 0, 'lib', 'pkglib',\n\t\t\t\t    'noinst', 'check');\n\n  if (@prefix)\n    {\n      my $var = rvar ($prefix[0] . '_LIBRARIES');\n      $var->requires_variables ('library used', 'RANLIB');\n    }\n\n  define_variable ('AR', 'ar', INTERNAL);\n  define_variable ('ARFLAGS', 'cru', INTERNAL);\n  define_verbose_tagvar ('AR');\n\n  foreach my $pair (@liblist)\n    {\n      my ($where, $onelib) = @$pair;\n\n      my $seen_libobjs = 0;\n      # Check that the library fits the standard naming convention.\n      my $bn = basename ($onelib);\n      if ($bn !~ /^lib.*\\.a$/)\n\t{\n\t  $bn =~ s/^(?:lib)?(.*?)(?:\\.[^.]*)?$/lib$1.a/;\n\t  my $suggestion = dirname ($onelib) . \"/$bn\";\n\t  $suggestion =~ s|^\\./||g;\n\t  msg ('error-gnu/warn', $where,\n\t       \"'$onelib' is not a standard library name\\n\"\n\t       . \"did you mean '$suggestion'?\")\n\t}\n\n      ($known_libraries{$onelib} = $bn) =~ s/\\.a$//;\n\n      $where->push_context (\"while processing library '$onelib'\");\n      $where->set (INTERNAL->get);\n\n      my $obj = '.$(OBJEXT)';\n\n      # Canonicalize names and check for misspellings.\n      my $xlib = check_canonical_spelling ($onelib, '_LIBADD', '_SOURCES',\n                                           '_OBJECTS', '_DEPENDENCIES',\n                                           '_AR');\n\n      if (! var ($xlib . '_AR'))\n\t{\n\t  define_variable ($xlib . '_AR', '$(AR) $(ARFLAGS)', $where);\n\t}\n\n      # Generate support for conditional object inclusion in\n      # libraries.\n      if (var ($xlib . '_LIBADD'))\n\t{\n\t  if (handle_lib_objects ($xlib, $xlib . '_LIBADD'))\n\t    {\n\t      $seen_libobjs = 1;\n\t    }\n\t}\n      else\n\t{\n\t  define_variable ($xlib . \"_LIBADD\", '', $where);\n\t}\n\n      reject_var ($xlib . '_LDADD',\n\t\t  \"use '${xlib}_LIBADD', not '${xlib}_LDADD'\");\n\n      # Make sure we at look at this.\n      set_seen ($xlib . '_DEPENDENCIES');\n      set_seen ('EXTRA_' . $xlib . '_DEPENDENCIES');\n\n      handle_source_transform ($xlib, $onelib, $obj, $where,\n                               NONLIBTOOL => 1, LIBTOOL => 0);\n\n      # If the resulting library lies in a subdirectory,\n      # make sure this directory will exist.\n      my $dirstamp = require_build_directory_maybe ($onelib);\n      my $verbose = verbose_flag ('AR');\n      my $silent = silent_flag ();\n\n      $output_rules .= file_contents ('library',\n                                       $where,\n                                       VERBOSE  => $verbose,\n                                       SILENT   => $silent,\n                                       LIBRARY  => $onelib,\n                                       XLIBRARY => $xlib,\n                                       DIRSTAMP => $dirstamp);\n\n      if ($seen_libobjs)\n\t{\n\t  if (var ($xlib . '_LIBADD'))\n\t    {\n\t      check_libobjs_sources ($xlib, $xlib . '_LIBADD');\n\t    }\n\t}\n\n      if (! $seen_ar)\n\t{\n\t  msg ('extra-portability', $where,\n\t       \"'$onelib': linking libraries using a non-POSIX\\n\"\n\t       . \"archiver requires 'AM_PROG_AR' in '$configure_ac'\")\n\t}\n    }\n}\n\n\nsub handle_ltlibraries ()\n{\n  return if ! @ltliblist;\n  $must_handle_compiled_objects = 1;\n\n  my @prefix = am_primary_prefixes ('LTLIBRARIES', 0, 'lib', 'pkglib',\n\t\t\t\t    'noinst', 'check');\n\n  if (@prefix)\n    {\n      my $var = rvar ($prefix[0] . '_LTLIBRARIES');\n      $var->requires_variables ('Libtool library used', 'LIBTOOL');\n    }\n\n  my %instdirs = ();\n  my %instsubdirs = ();\n  my %instconds = ();\n  my %liblocations = ();\t# Location (in Makefile.am) of each library.\n\n  foreach my $key (@prefix)\n    {\n      # Get the installation directory of each library.\n      my $dir = $key;\n      my $strip_subdir = 1;\n      if ($dir =~ /^nobase_/)\n        {\n\t  $dir =~ s/^nobase_//;\n\t  $strip_subdir = 0;\n\t}\n      my $var = rvar ($key . '_LTLIBRARIES');\n\n      # We reject libraries which are installed in several places\n      # in the same condition, because we can only specify one\n      # '-rpath' option.\n      $var->traverse_recursively\n\t(sub\n\t {\n\t   my ($var, $val, $cond, $full_cond) = @_;\n\t   my $hcond = $full_cond->human;\n\t   my $where = $var->rdef ($cond)->location;\n\t   my $ldir = '';\n\t   $ldir = '/' . dirname ($val)\n\t     if (!$strip_subdir);\n\t   # A library cannot be installed in different directories\n\t   # in overlapping conditions.\n\t   if (exists $instconds{$val})\n\t     {\n\t       my ($msg, $acond) =\n\t\t $instconds{$val}->ambiguous_p ($val, $full_cond);\n\n\t       if ($msg)\n\t\t {\n\t\t   error ($where, $msg, partial => 1);\n\t\t   my $dirtxt = \"installed \" . ($strip_subdir ? \"in\" : \"below\") . \" '$dir'\";\n\t\t   $dirtxt = \"built for '$dir'\"\n\t\t     if $dir eq 'EXTRA' || $dir eq 'noinst' || $dir eq 'check';\n\t\t   my $dircond =\n\t\t     $full_cond->true ? \"\" : \" in condition $hcond\";\n\n\t\t   error ($where, \"'$val' should be $dirtxt$dircond ...\",\n\t\t\t  partial => 1);\n\n\t\t   my $hacond = $acond->human;\n\t\t   my $adir = $instdirs{$val}{$acond};\n\t\t   my $adirtxt = \"installed in '$adir'\";\n\t\t   $adirtxt = \"built for '$adir'\"\n\t\t     if ($adir eq 'EXTRA' || $adir eq 'noinst'\n\t\t\t || $adir eq 'check');\n\t\t   my $adircond = $acond->true ? \"\" : \" in condition $hacond\";\n\n\t\t   my $onlyone = ($dir ne $adir) ?\n\t\t     (\"\\nLibtool libraries can be built for only one \"\n\t\t      . \"destination\") : \"\";\n\n\t\t   error ($liblocations{$val}{$acond},\n\t\t\t  \"... and should also be $adirtxt$adircond.$onlyone\");\n\t\t   return;\n\t\t }\n\t     }\n\t   else\n\t     {\n\t       $instconds{$val} = new Automake::DisjConditions;\n\t     }\n\t   $instdirs{$val}{$full_cond} = $dir;\n\t   $instsubdirs{$val}{$full_cond} = $ldir;\n\t   $liblocations{$val}{$full_cond} = $where;\n\t   $instconds{$val} = $instconds{$val}->merge ($full_cond);\n\t },\n\t sub\n\t {\n\t   return ();\n\t },\n\t skip_ac_subst => 1);\n    }\n\n  foreach my $pair (@ltliblist)\n    {\n      my ($where, $onelib) = @$pair;\n\n      my $seen_libobjs = 0;\n      my $obj = '.lo';\n\n      # Canonicalize names and check for misspellings.\n      my $xlib = check_canonical_spelling ($onelib, '_LIBADD', '_LDFLAGS',\n                                           '_SOURCES', '_OBJECTS',\n                                           '_DEPENDENCIES');\n\n      # Check that the library fits the standard naming convention.\n      my $libname_rx = '^lib.*\\.la';\n      my $ldvar = var (\"${xlib}_LDFLAGS\") || var ('AM_LDFLAGS');\n      my $ldvar2 = var ('LDFLAGS');\n      if (($ldvar && grep (/-module/, $ldvar->value_as_list_recursive))\n\t  || ($ldvar2 && grep (/-module/, $ldvar2->value_as_list_recursive)))\n\t{\n\t  # Relax name checking for libtool modules.\n\t  $libname_rx = '\\.la';\n\t}\n\n      my $bn = basename ($onelib);\n      if ($bn !~ /$libname_rx$/)\n\t{\n\t  my $type = 'library';\n\t  if ($libname_rx eq '\\.la')\n\t    {\n\t      $bn =~ s/^(lib|)(.*?)(?:\\.[^.]*)?$/$1$2.la/;\n\t      $type = 'module';\n\t    }\n\t  else\n\t    {\n\t      $bn =~ s/^(?:lib)?(.*?)(?:\\.[^.]*)?$/lib$1.la/;\n\t    }\n\t  my $suggestion = dirname ($onelib) . \"/$bn\";\n\t  $suggestion =~ s|^\\./||g;\n\t  msg ('error-gnu/warn', $where,\n\t       \"'$onelib' is not a standard libtool $type name\\n\"\n\t       . \"did you mean '$suggestion'?\")\n\t}\n\n      ($known_libraries{$onelib} = $bn) =~ s/\\.la$//;\n\n      $where->push_context (\"while processing Libtool library '$onelib'\");\n      $where->set (INTERNAL->get);\n\n      # Make sure we look at these.\n      set_seen ($xlib . '_LDFLAGS');\n      set_seen ($xlib . '_DEPENDENCIES');\n      set_seen ('EXTRA_' . $xlib . '_DEPENDENCIES');\n\n      # Generate support for conditional object inclusion in\n      # libraries.\n      if (var ($xlib . '_LIBADD'))\n\t{\n\t  if (handle_lib_objects ($xlib, $xlib . '_LIBADD'))\n\t    {\n\t      $seen_libobjs = 1;\n\t    }\n\t}\n      else\n\t{\n\t  define_variable ($xlib . \"_LIBADD\", '', $where);\n\t}\n\n      reject_var (\"${xlib}_LDADD\",\n\t\t  \"use '${xlib}_LIBADD', not '${xlib}_LDADD'\");\n\n\n      my $linker = handle_source_transform ($xlib, $onelib, $obj, $where,\n                                            NONLIBTOOL => 0, LIBTOOL => 1);\n\n      # Determine program to use for link.\n      my($xlink, $vlink) = define_per_target_linker_variable ($linker, $xlib);\n      $vlink = verbose_flag ($vlink || 'GEN');\n\n      my $rpathvar = \"am_${xlib}_rpath\";\n      my $rpath = \"\\$($rpathvar)\";\n      foreach my $rcond ($instconds{$onelib}->conds)\n\t{\n\t  my $val;\n\t  if ($instdirs{$onelib}{$rcond} eq 'EXTRA'\n\t      || $instdirs{$onelib}{$rcond} eq 'noinst'\n\t      || $instdirs{$onelib}{$rcond} eq 'check')\n\t    {\n\t      # It's an EXTRA_ library, so we can't specify -rpath,\n\t      # because we don't know where the library will end up.\n\t      # The user probably knows, but generally speaking automake\n\t      # doesn't -- and in fact configure could decide\n\t      # dynamically between two different locations.\n\t      $val = '';\n\t    }\n\t  else\n\t    {\n\t      $val = ('-rpath $(' . $instdirs{$onelib}{$rcond} . 'dir)');\n\t      $val .= $instsubdirs{$onelib}{$rcond}\n\t        if defined $instsubdirs{$onelib}{$rcond};\n\t    }\n\t  if ($rcond->true)\n\t    {\n\t      # If $rcond is true there is only one condition and\n\t      # there is no point defining an helper variable.\n\t      $rpath = $val;\n\t    }\n\t  else\n\t    {\n\t      define_pretty_variable ($rpathvar, $rcond, INTERNAL, $val);\n\t    }\n\t}\n\n      # If the resulting library lies in a subdirectory,\n      # make sure this directory will exist.\n      my $dirstamp = require_build_directory_maybe ($onelib);\n\n      # Remember to cleanup .libs/ in this directory.\n      my $dirname = dirname $onelib;\n      $libtool_clean_directories{$dirname} = 1;\n\n      $output_rules .= file_contents ('ltlibrary',\n                                      $where,\n                                      LTLIBRARY  => $onelib,\n                                      XLTLIBRARY => $xlib,\n                                      RPATH      => $rpath,\n                                      XLINK      => $xlink,\n                                      VERBOSE    => $vlink,\n                                      DIRSTAMP   => $dirstamp);\n      if ($seen_libobjs)\n\t{\n\t  if (var ($xlib . '_LIBADD'))\n\t    {\n\t      check_libobjs_sources ($xlib, $xlib . '_LIBADD');\n\t    }\n\t}\n\n      if (! $seen_ar)\n\t{\n\t  msg ('extra-portability', $where,\n\t       \"'$onelib': linking libtool libraries using a non-POSIX\\n\"\n\t       . \"archiver requires 'AM_PROG_AR' in '$configure_ac'\")\n\t}\n    }\n}\n\n# See if any _SOURCES variable were misspelled.\nsub check_typos ()\n{\n  # It is ok if the user sets this particular variable.\n  set_seen 'AM_LDFLAGS';\n\n  foreach my $primary ('SOURCES', 'LIBADD', 'LDADD', 'LDFLAGS', 'DEPENDENCIES')\n    {\n      foreach my $var (variables $primary)\n\t{\n\t  my $varname = $var->name;\n\t  # A configure variable is always legitimate.\n\t  next if exists $configure_vars{$varname};\n\n\t  for my $cond ($var->conditions->conds)\n\t    {\n\t      $varname =~ /^(?:EXTRA_)?(?:nobase_)?(?:dist_|nodist_)?(.*)_[[:alnum:]]+$/;\n\t      msg_var ('syntax', $var, \"variable '$varname' is defined but no\"\n\t\t       . \" program or\\nlibrary has '$1' as canonical name\"\n\t\t       . \" (possible typo)\")\n\t\tunless $var->rdef ($cond)->seen;\n\t    }\n\t}\n    }\n}\n\n\nsub handle_scripts ()\n{\n    # NOTE we no longer automatically clean SCRIPTS, because it is\n    # useful to sometimes distribute scripts verbatim.  This happens\n    # e.g. in Automake itself.\n    am_install_var ('-candist', 'scripts', 'SCRIPTS',\n                    'bin', 'sbin', 'libexec', 'pkglibexec', 'pkgdata',\n                    'noinst', 'check');\n}\n\n\n## ------------------------ ##\n## Handling Texinfo files.  ##\n## ------------------------ ##\n\n# ($OUTFILE, $VFILE)\n# scan_texinfo_file ($FILENAME)\n# -----------------------------\n# $OUTFILE     - name of the info file produced by $FILENAME.\n# $VFILE       - name of the version.texi file used (undef if none).\nsub scan_texinfo_file\n{\n  my ($filename) = @_;\n\n  my $texi = new Automake::XFile \"< $filename\";\n  verb \"reading $filename\";\n\n  my ($outfile, $vfile);\n  while ($_ = $texi->getline)\n    {\n      if (/^\\@setfilename +(\\S+)/)\n\t{\n\t  # Honor only the first @setfilename.  (It's possible to have\n\t  # more occurrences later if the manual shows examples of how\n\t  # to use @setfilename...)\n\t  next if $outfile;\n\n\t  $outfile = $1;\n\t  if (index ($outfile, '.') < 0)\n\t    {\n\t      msg 'obsolete', \"$filename:$.\",\n\t          \"use of suffix-less info files is discouraged\"\n\t    }\n\t  elsif ($outfile !~ /\\.info$/)\n\t    {\n\t      error (\"$filename:$.\",\n\t\t     \"output '$outfile' has unrecognized extension\");\n\t      return;\n\t    }\n\t}\n      # A \"version.texi\" file is actually any file whose name matches\n      # \"vers*.texi\".\n      elsif (/^\\@include\\s+(vers[^.]*\\.texi)\\s*$/)\n\t{\n\t  $vfile = $1;\n\t}\n    }\n\n  if (! $outfile)\n    {\n      # Replace a .texi extension with .info\n      $outfile = basename($filename);\n      $outfile =~ s/\\.[^.]+$//;\n      $outfile .= '.info';\n    }\n\n  return ($outfile, $vfile);\n}\n\n\n# ($DIRSTAMP, @CLEAN_FILES)\n# output_texinfo_build_rules ($SOURCE, $DEST, $INSRC, @DEPENDENCIES)\n# ------------------------------------------------------------------\n# SOURCE - the source Texinfo file\n# DEST - the destination Info file\n# INSRC - whether DEST should be built in the source tree\n# DEPENDENCIES - known dependencies\nsub output_texinfo_build_rules\n{\n  my ($source, $dest, $insrc, @deps) = @_;\n\n  # Split 'a.texi' into 'a' and '.texi'.\n  my ($spfx, $ssfx) = ($source =~ /^(.*?)(\\.[^.]*)?$/);\n  my ($dpfx, $dsfx) = ($dest =~ /^(.*?)(\\.[^.]*)?$/);\n\n  $ssfx ||= \"\";\n  $dsfx ||= \"\";\n\n  # We can output two kinds of rules: the \"generic\" rules use Make\n  # suffix rules and are appropriate when $source and $dest do not lie\n  # in a sub-directory; the \"specific\" rules are needed in the other\n  # case.\n  #\n  # The former are output only once (this is not really apparent here,\n  # but just remember that some logic deeper in Automake will not\n  # output the same rule twice); while the later need to be output for\n  # each Texinfo source.\n  my $generic;\n  my $makeinfoflags;\n  my $sdir = dirname $source;\n  if ($sdir eq '.' && dirname ($dest) eq '.')\n    {\n      $generic = 1;\n      $makeinfoflags = '-I $(srcdir)';\n    }\n  else\n    {\n      $generic = 0;\n      $makeinfoflags = \"-I $sdir -I \\$(srcdir)/$sdir\";\n    }\n\n  # A directory can contain two kinds of info files: some built in the\n  # source tree, and some built in the build tree.  The rules are\n  # different in each case.  However we cannot output two different\n  # set of generic rules.  Because in-source builds are more usual, we\n  # use generic rules in this case and fall back to \"specific\" rules\n  # for build-dir builds.  (It should not be a problem to invert this\n  # if needed.)\n  $generic = 0 unless $insrc;\n\n  # We cannot use a suffix rule to build info files with an empty\n  # extension.  Otherwise we would output a single suffix inference\n  # rule, with separate dependencies, as in\n  #\n  #    .texi:\n  #             $(MAKEINFO) ...\n  #    foo.info: foo.texi\n  #\n  # which confuse Solaris make.  (See the Autoconf manual for\n  # details.)  Therefore we use a specific rule in this case.  This\n  # applies to info files only (dvi and pdf files always have an\n  # extension).\n  my $generic_info = ($generic && $dsfx) ? 1 : 0;\n\n  # If the resulting file lies in a subdirectory,\n  # make sure this directory will exist.\n  my $dirstamp = require_build_directory_maybe ($dest);\n\n  my $dipfx = ($insrc ? '$(srcdir)/' : '') . $dpfx;\n\n  $output_rules .= file_contents ('texibuild',\n\t\t\t\t  new Automake::Location,\n                                  AM_V_MAKEINFO    => verbose_flag('MAKEINFO'),\n                                  AM_V_TEXI2DVI    => verbose_flag('TEXI2DVI'),\n                                  AM_V_TEXI2PDF    => verbose_flag('TEXI2PDF'),\n\t\t\t\t  DEPS             => \"@deps\",\n\t\t\t\t  DEST_PREFIX      => $dpfx,\n\t\t\t\t  DEST_INFO_PREFIX => $dipfx,\n\t\t\t\t  DEST_SUFFIX      => $dsfx,\n\t\t\t\t  DIRSTAMP         => $dirstamp,\n\t\t\t\t  GENERIC          => $generic,\n\t\t\t\t  GENERIC_INFO     => $generic_info,\n\t\t\t\t  INSRC\t\t   => $insrc,\n\t\t\t\t  MAKEINFOFLAGS    => $makeinfoflags,\n                                  SILENT           => silent_flag(),\n\t\t\t\t  SOURCE           => ($generic\n\t\t\t\t\t\t       ? '$<' : $source),\n\t\t\t\t  SOURCE_INFO      => ($generic_info\n\t\t\t\t\t\t       ? '$<' : $source),\n\t\t\t\t  SOURCE_REAL      => $source,\n\t\t\t\t  SOURCE_SUFFIX    => $ssfx,\n                                  TEXIQUIET        => verbose_flag('texinfo'),\n                                  TEXIDEVNULL      => verbose_flag('texidevnull'),\n\t\t\t\t  );\n  return ($dirstamp, \"$dpfx.dvi\", \"$dpfx.pdf\", \"$dpfx.ps\", \"$dpfx.html\");\n}\n\n\n# ($MOSTLYCLEAN, $TEXICLEAN, $MAINTCLEAN)\n# handle_texinfo_helper ($info_texinfos)\n# --------------------------------------\n# Handle all Texinfo source; helper for 'handle_texinfo'.\nsub handle_texinfo_helper\n{\n  my ($info_texinfos) = @_;\n  my (@infobase, @info_deps_list, @texi_deps);\n  my %versions;\n  my $done = 0;\n  my (@mostly_cleans, @texi_cleans, @maint_cleans) = ('', '', '');\n\n  # Build a regex matching user-cleaned files.\n  my $d = var 'DISTCLEANFILES';\n  my $c = var 'CLEANFILES';\n  my @f = ();\n  push @f, $d->value_as_list_recursive (inner_expand => 1) if $d;\n  push @f, $c->value_as_list_recursive (inner_expand => 1) if $c;\n  @f = map { s|[^A-Za-z_0-9*\\[\\]\\-]|\\\\$&|g; s|\\*|[^/]*|g; $_; } @f;\n  my $user_cleaned_files = '^(?:' . join ('|', @f) . ')$';\n\n  foreach my $texi\n      ($info_texinfos->value_as_list_recursive (inner_expand => 1))\n    {\n      my $infobase = $texi;\n      if ($infobase =~ s/\\.texi$//)\n        {\n          1; # Nothing more to do.\n        }\n      elsif ($infobase =~ s/\\.(txi|texinfo)$//)\n        {\n\t  msg_var 'obsolete', $info_texinfos,\n\t          \"suffix '.$1' for Texinfo files is discouraged;\" .\n                  \" use '.texi' instead\";\n        }\n      else\n\t{\n\t  # FIXME: report line number.\n\t  err_am \"texinfo file '$texi' has unrecognized extension\";\n\t  next;\n\t}\n\n      push @infobase, $infobase;\n\n      # If 'version.texi' is referenced by input file, then include\n      # automatic versioning capability.\n      my ($out_file, $vtexi) =\n\tscan_texinfo_file (\"$relative_dir/$texi\")\n\tor next;\n      # Directory of auxiliary files and build by-products used by texi2dvi\n      # and texi2pdf.\n      push @mostly_cleans, \"$infobase.t2d\";\n      push @mostly_cleans, \"$infobase.t2p\";\n\n      # If the Texinfo source is in a subdirectory, create the\n      # resulting info in this subdirectory.  If it is in the current\n      # directory, try hard to not prefix \"./\" because it breaks the\n      # generic rules.\n      my $outdir = dirname ($texi) . '/';\n      $outdir = \"\" if $outdir eq './';\n      $out_file =  $outdir . $out_file;\n\n      # Until Automake 1.6.3, .info files were built in the\n      # source tree.  This was an obstacle to the support of\n      # non-distributed .info files, and non-distributed .texi\n      # files.\n      #\n      # * Non-distributed .texi files is important in some packages\n      #   where .texi files are built at make time, probably using\n      #   other binaries built in the package itself, maybe using\n      #   tools or information found on the build host.  Because\n      #   these files are not distributed they are always rebuilt\n      #   at make time; they should therefore not lie in the source\n      #   directory.  One plan was to support this using\n      #   nodist_info_TEXINFOS or something similar.  (Doing this\n      #   requires some sanity checks.  For instance Automake should\n      #   not allow:\n      #      dist_info_TEXINFOS = foo.texi\n      #      nodist_foo_TEXINFOS = included.texi\n      #   because a distributed file should never depend on a\n      #   non-distributed file.)\n      #\n      # * If .texi files are not distributed, then .info files should\n      #   not be distributed either.  There are also cases where one\n      #   wants to distribute .texi files, but does not want to\n      #   distribute the .info files.  For instance the Texinfo package\n      #   distributes the tool used to build these files; it would\n      #   be a waste of space to distribute them.  It's not clear\n      #   which syntax we should use to indicate that .info files should\n      #   not be distributed.  Akim Demaille suggested that eventually\n      #   we switch to a new syntax:\n      #   |  Maybe we should take some inspiration from what's already\n      #   |  done in the rest of Automake.  Maybe there is too much\n      #   |  syntactic sugar here, and you want\n      #   |     nodist_INFO = bar.info\n      #   |     dist_bar_info_SOURCES = bar.texi\n      #   |     bar_texi_DEPENDENCIES = foo.texi\n      #   |  with a bit of magic to have bar.info represent the whole\n      #   |  bar*info set.  That's a lot more verbose that the current\n      #   |  situation, but it is # not new, hence the user has less\n      #   |  to learn.\n      #\t  |\n      #   |  But there is still too much room for meaningless specs:\n      #   |     nodist_INFO = bar.info\n      #   |     dist_bar_info_SOURCES = bar.texi\n      #   |     dist_PS = bar.ps something-written-by-hand.ps\n      #   |     nodist_bar_ps_SOURCES = bar.texi\n      #   |     bar_texi_DEPENDENCIES = foo.texi\n      #   |  here bar.texi is dist_ in line 2, and nodist_ in 4.\n      #\n      # Back to the point, it should be clear that in order to support\n      # non-distributed .info files, we need to build them in the\n      # build tree, not in the source tree (non-distributed .texi\n      # files are less of a problem, because we do not output build\n      # rules for them).  In Automake 1.7 .info build rules have been\n      # largely cleaned up so that .info files get always build in the\n      # build tree, even when distributed.  The idea was that\n      #   (1) if during a VPATH build the .info file was found to be\n      #       absent or out-of-date (in the source tree or in the\n      #       build tree), Make would rebuild it in the build tree.\n      #       If an up-to-date source-tree of the .info file existed,\n      #       make would not rebuild it in the build tree.\n      #   (2) having two copies of .info files, one in the source tree\n      #       and one (newer) in the build tree is not a problem\n      #       because 'make dist' always pick files in the build tree\n      #       first.\n      # However it turned out the be a bad idea for several reasons:\n      #   * Tru64, OpenBSD, and FreeBSD (not NetBSD) Make do not behave\n      #     like GNU Make on point (1) above.  These implementations\n      #     of Make would always rebuild .info files in the build\n      #     tree, even if such files were up to date in the source\n      #     tree.  Consequently, it was impossible to perform a VPATH\n      #     build of a package containing Texinfo files using these\n      #     Make implementations.\n      #     (Refer to the Autoconf Manual, section \"Limitation of\n      #     Make\", paragraph \"VPATH\", item \"target lookup\", for\n      #     an account of the differences between these\n      #     implementations.)\n      #   * The GNU Coding Standards require these files to be built\n      #     in the source-tree (when they are distributed, that is).\n      #   * Keeping a fresher copy of distributed files in the\n      #     build tree can be annoying during development because\n      #     - if the files is kept under CVS, you really want it\n      #       to be updated in the source tree\n      #     - it is confusing that 'make distclean' does not erase\n      #       all files in the build tree.\n      #\n      # Consequently, starting with Automake 1.8, .info files are\n      # built in the source tree again.  Because we still plan to\n      # support non-distributed .info files at some point, we\n      # have a single variable ($INSRC) that controls whether\n      # the current .info file must be built in the source tree\n      # or in the build tree.  Actually this variable is switched\n      # off in two cases:\n      #  (1) For '.info' files that appear to be cleaned; this is for\n      #      backward compatibility with package such as Texinfo,\n      #      which do things like\n      #        info_TEXINFOS = texinfo.txi info-stnd.texi info.texi\n      #        DISTCLEANFILES = texinfo texinfo-* info*.info*\n      #        # Do not create info files for distribution.\n      #        dist-info:\n      #      in order not to distribute .info files.\n      #  (2) When the undocumented option 'info-in-builddir' is given.\n      #      This is done to allow the developers of GCC, GDB, GNU\n      #      binutils and the GNU bfd library to force the '.info' files\n      #      to be generated in the builddir rather than the srcdir, as\n      #      was once done when the (now removed) 'cygnus' option was\n      #      given.  See automake bug#11034 for more discussion.\n      my $insrc = 1;\n      my $soutdir = '$(srcdir)/' . $outdir;\n\n      if (option 'info-in-builddir')\n        {\n          $insrc = 0;\n        }\n      elsif ($out_file =~ $user_cleaned_files)\n        {\n          $insrc = 0;\n          msg 'obsolete', \"$am_file.am\", <<EOF;\nOops!\n    It appears this file (or files included by it) are triggering\n    an undocumented, soon-to-be-removed automake hack.\n    Future automake versions will no longer place in the builddir\n    (rather than in the srcdir) the generated '.info' files that\n    appear to be cleaned, by e.g. being listed in CLEANFILES or\n    DISTCLEANFILES.\n    If you want your '.info' files to be placed in the builddir\n    rather than in the srcdir, you have to use the shiny new\n    'info-in-builddir' automake option.\nEOF\n        }\n\n      $outdir = $soutdir if $insrc;\n\n      # If user specified file_TEXINFOS, then use that as explicit\n      # dependency list.\n      @texi_deps = ();\n      push (@texi_deps, \"${soutdir}${vtexi}\") if $vtexi;\n\n      my $canonical = canonicalize ($infobase);\n      if (var ($canonical . \"_TEXINFOS\"))\n\t{\n\t  push (@texi_deps, '$(' . $canonical . '_TEXINFOS)');\n\t  push_dist_common ('$(' . $canonical . '_TEXINFOS)');\n\t}\n\n      my ($dirstamp, @cfiles) =\n\toutput_texinfo_build_rules ($texi, $out_file, $insrc, @texi_deps);\n      push (@texi_cleans, @cfiles);\n\n      push (@info_deps_list, $out_file);\n\n      # If a vers*.texi file is needed, emit the rule.\n      if ($vtexi)\n\t{\n\t  err_am (\"'$vtexi', included in '$texi', \"\n\t\t  . \"also included in '$versions{$vtexi}'\")\n\t    if defined $versions{$vtexi};\n\t  $versions{$vtexi} = $texi;\n\n\t  # We number the stamp-vti files.  This is doable since the\n\t  # actual names don't matter much.  We only number starting\n\t  # with the second one, so that the common case looks nice.\n\t  my $vti = ($done ? $done : 'vti');\n\t  ++$done;\n\n\t  # This is ugly, but it is our historical practice.\n\t  if ($config_aux_dir_set_in_configure_ac)\n\t    {\n\t      require_conf_file_with_macro (TRUE, 'info_TEXINFOS', FOREIGN,\n\t\t\t\t\t    'mdate-sh');\n\t    }\n\t  else\n\t    {\n\t      require_file_with_macro (TRUE, 'info_TEXINFOS',\n\t\t\t\t       FOREIGN, 'mdate-sh');\n\t    }\n\n\t  my $conf_dir;\n\t  if ($config_aux_dir_set_in_configure_ac)\n\t    {\n\t      $conf_dir = \"$am_config_aux_dir/\";\n\t    }\n\t  else\n\t    {\n\t      $conf_dir = '$(srcdir)/';\n\t    }\n\t  $output_rules .= file_contents ('texi-vers',\n\t\t\t\t\t  new Automake::Location,\n\t\t\t\t\t  TEXI     => $texi,\n\t\t\t\t\t  VTI      => $vti,\n\t\t\t\t\t  STAMPVTI => \"${soutdir}stamp-$vti\",\n\t\t\t\t\t  VTEXI    => \"$soutdir$vtexi\",\n\t\t\t\t\t  MDDIR    => $conf_dir,\n\t\t\t\t\t  DIRSTAMP => $dirstamp);\n\t}\n    }\n\n  # Handle location of texinfo.tex.\n  my $need_texi_file = 0;\n  my $texinfodir;\n  if (var ('TEXINFO_TEX'))\n    {\n      # The user defined TEXINFO_TEX so assume he knows what he is\n      # doing.\n      $texinfodir = ('$(srcdir)/'\n\t\t     . dirname (variable_value ('TEXINFO_TEX')));\n    }\n  elsif ($config_aux_dir_set_in_configure_ac)\n    {\n      $texinfodir = $am_config_aux_dir;\n      define_variable ('TEXINFO_TEX', \"$texinfodir/texinfo.tex\", INTERNAL);\n      $need_texi_file = 2; # so that we require_conf_file later\n    }\n  else\n    {\n      $texinfodir = '$(srcdir)';\n      $need_texi_file = 1;\n    }\n  define_variable ('am__TEXINFO_TEX_DIR', $texinfodir, INTERNAL);\n\n  push (@dist_targets, 'dist-info');\n\n  if (! option 'no-installinfo')\n    {\n      # Make sure documentation is made and installed first.  Use\n      # $(INFO_DEPS), not 'info', because otherwise recursive makes\n      # get run twice during \"make all\".\n      unshift (@all, '$(INFO_DEPS)');\n    }\n\n  define_files_variable (\"DVIS\", @infobase, 'dvi', INTERNAL);\n  define_files_variable (\"PDFS\", @infobase, 'pdf', INTERNAL);\n  define_files_variable (\"PSS\", @infobase, 'ps', INTERNAL);\n  define_files_variable (\"HTMLS\", @infobase, 'html', INTERNAL);\n\n  # This next isn't strictly needed now -- the places that look here\n  # could easily be changed to look in info_TEXINFOS.  But this is\n  # probably better, in case noinst_TEXINFOS is ever supported.\n  define_variable (\"TEXINFOS\", variable_value ('info_TEXINFOS'), INTERNAL);\n\n  # Do some error checking.  Note that this file is not required\n  # when in Cygnus mode; instead we defined TEXINFO_TEX explicitly\n  # up above.\n  if ($need_texi_file && ! option 'no-texinfo.tex')\n    {\n      if ($need_texi_file > 1)\n\t{\n\t  require_conf_file_with_macro (TRUE, 'info_TEXINFOS', FOREIGN,\n\t\t\t\t\t'texinfo.tex');\n\t}\n      else\n\t{\n\t  require_file_with_macro (TRUE, 'info_TEXINFOS', FOREIGN,\n\t\t\t\t   'texinfo.tex');\n\t}\n    }\n\n  return (makefile_wrap (\"\", \"\\t  \", @mostly_cleans),\n\t  makefile_wrap (\"\", \"\\t  \", @texi_cleans),\n\t  makefile_wrap (\"\", \"\\t  \", @maint_cleans));\n}\n\n\nsub handle_texinfo ()\n{\n  reject_var 'TEXINFOS', \"'TEXINFOS' is an anachronism; use 'info_TEXINFOS'\";\n  # FIXME: I think this is an obsolete future feature name.\n  reject_var 'html_TEXINFOS', \"HTML generation not yet supported\";\n\n  my $info_texinfos = var ('info_TEXINFOS');\n  my ($mostlyclean, $clean, $maintclean) = ('', '', '');\n  if ($info_texinfos)\n    {\n      define_verbose_texinfo;\n      ($mostlyclean, $clean, $maintclean) = handle_texinfo_helper ($info_texinfos);\n      chomp $mostlyclean;\n      chomp $clean;\n      chomp $maintclean;\n    }\n\n  $output_rules .=  file_contents ('texinfos',\n\t\t\t\t   new Automake::Location,\n                                   AM_V_DVIPS    => verbose_flag('DVIPS'),\n\t\t\t\t   MOSTLYCLEAN   => $mostlyclean,\n\t\t\t\t   TEXICLEAN     => $clean,\n\t\t\t\t   MAINTCLEAN    => $maintclean,\n\t\t\t\t   'LOCAL-TEXIS' => !!$info_texinfos,\n                                   TEXIQUIET     => verbose_flag('texinfo'));\n}\n\n\nsub handle_man_pages ()\n{\n  reject_var 'MANS', \"'MANS' is an anachronism; use 'man_MANS'\";\n\n  # Find all the sections in use.  We do this by first looking for\n  # \"standard\" sections, and then looking for any additional\n  # sections used in man_MANS.\n  my (%sections, %notrans_sections, %trans_sections,\n      %notrans_vars, %trans_vars, %notrans_sect_vars, %trans_sect_vars);\n  # We handle nodist_ for uniformity.  man pages aren't distributed\n  # by default so it isn't actually very important.\n  foreach my $npfx ('', 'notrans_')\n    {\n      foreach my $pfx ('', 'dist_', 'nodist_')\n\t{\n\t  # Add more sections as needed.\n\t  foreach my $section ('0'..'9', 'n', 'l')\n\t    {\n\t      my $varname = $npfx . $pfx . 'man' . $section . '_MANS';\n\t      if (var ($varname))\n\t\t{\n\t\t  $sections{$section} = 1;\n\t\t  $varname = '$(' . $varname . ')';\n\t\t  if ($npfx eq 'notrans_')\n\t\t    {\n\t\t      $notrans_sections{$section} = 1;\n\t\t      $notrans_sect_vars{$varname} = 1;\n\t\t    }\n\t\t  else\n\t\t    {\n\t\t      $trans_sections{$section} = 1;\n\t\t      $trans_sect_vars{$varname} = 1;\n\t\t    }\n\n\t\t  push_dist_common ($varname)\n\t\t    if $pfx eq 'dist_';\n\t\t}\n\t    }\n\n\t  my $varname = $npfx . $pfx . 'man_MANS';\n\t  my $var = var ($varname);\n\t  if ($var)\n\t    {\n\t      foreach ($var->value_as_list_recursive)\n\t\t{\n\t\t  # A page like 'foo.1c' goes into man1dir.\n\t\t  if (/\\.([0-9a-z])([a-z]*)$/)\n\t\t    {\n\t\t      $sections{$1} = 1;\n\t\t      if ($npfx eq 'notrans_')\n\t\t\t{\n\t\t\t  $notrans_sections{$1} = 1;\n\t\t\t}\n\t\t      else\n\t\t\t{\n\t\t\t  $trans_sections{$1} = 1;\n\t\t\t}\n\t\t    }\n\t\t}\n\n\t      $varname = '$(' . $varname . ')';\n\t      if ($npfx eq 'notrans_')\n\t\t{\n\t\t  $notrans_vars{$varname} = 1;\n\t\t}\n\t      else\n\t\t{\n\t\t  $trans_vars{$varname} = 1;\n\t\t}\n\t      push_dist_common ($varname)\n\t\tif $pfx eq 'dist_';\n\t    }\n\t}\n    }\n\n  return unless %sections;\n\n  my @unsorted_deps;\n\n  # Build section independent variables.\n  my $have_notrans = %notrans_vars;\n  my @notrans_list = sort keys %notrans_vars;\n  my $have_trans = %trans_vars;\n  my @trans_list = sort keys %trans_vars;\n\n  # Now for each section, generate an install and uninstall rule.\n  # Sort sections so output is deterministic.\n  foreach my $section (sort keys %sections)\n    {\n      # Build section dependent variables.\n      my $notrans_mans = $have_notrans || exists $notrans_sections{$section};\n      my $trans_mans = $have_trans || exists $trans_sections{$section};\n      my (%notrans_this_sect, %trans_this_sect);\n      my $expr = 'man' . $section . '_MANS';\n      foreach my $varname (keys %notrans_sect_vars)\n\t{\n\t  if ($varname =~ /$expr/)\n\t    {\n\t      $notrans_this_sect{$varname} = 1;\n\t    }\n\t}\n      foreach my $varname (keys %trans_sect_vars)\n\t{\n\t  if ($varname =~ /$expr/)\n\t    {\n\t      $trans_this_sect{$varname} = 1;\n\t    }\n\t}\n      my @notrans_sect_list = sort keys %notrans_this_sect;\n      my @trans_sect_list = sort keys %trans_this_sect;\n      @unsorted_deps = (keys %notrans_vars, keys %trans_vars,\n                        keys %notrans_this_sect, keys %trans_this_sect);\n      my @deps = sort @unsorted_deps;\n      $output_rules .= file_contents ('mans',\n                                      new Automake::Location,\n                                      SECTION           => $section,\n                                      DEPS              => \"@deps\",\n                                      NOTRANS_MANS      => $notrans_mans,\n                                      NOTRANS_SECT_LIST => \"@notrans_sect_list\",\n                                      HAVE_NOTRANS      => $have_notrans,\n                                      NOTRANS_LIST      => \"@notrans_list\",\n                                      TRANS_MANS        => $trans_mans,\n                                      TRANS_SECT_LIST   => \"@trans_sect_list\",\n                                      HAVE_TRANS        => $have_trans,\n                                      TRANS_LIST        => \"@trans_list\");\n    }\n\n  @unsorted_deps  = (keys %notrans_vars, keys %trans_vars,\n                     keys %notrans_sect_vars, keys %trans_sect_vars);\n  my @mans = sort @unsorted_deps;\n  $output_vars .= file_contents ('mans-vars',\n\t\t\t\t new Automake::Location,\n\t\t\t\t MANS => \"@mans\");\n\n  push (@all, '$(MANS)')\n    unless option 'no-installman';\n}\n\n\nsub handle_data ()\n{\n    am_install_var ('-noextra', '-candist', 'data', 'DATA',\n                    'data', 'dataroot', 'doc', 'dvi', 'html', 'pdf',\n                    'ps', 'sysconf', 'sharedstate', 'localstate',\n                    'pkgdata', 'lisp', 'noinst', 'check');\n}\n\n\nsub handle_tags ()\n{\n    my @config;\n    foreach my $spec (@config_headers)\n      {\n        my ($out, @ins) = split_config_file_spec ($spec);\n\tforeach my $in (@ins)\n\t  {\n            # If the config header source is in this directory,\n\t    # require it.\n\t    push @config, basename ($in)\n              if $relative_dir eq dirname ($in);\n\t   }\n      }\n\n    define_variable ('am__tagged_files',\n                     '$(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)'\n                     . \" @config\", INTERNAL);\n\n    if (rvar('am__tagged_files')->value_as_list_recursive\n          || var ('ETAGS_ARGS') || var ('SUBDIRS'))\n      {\n\t$output_rules .= file_contents ('tags', new Automake::Location);\n\tset_seen 'TAGS_DEPENDENCIES';\n      }\n    else\n      {\n        reject_var ('TAGS_DEPENDENCIES',\n\t\t    \"it doesn't make sense to define 'TAGS_DEPENDENCIES'\"\n\t\t    . \" without\\nsources or 'ETAGS_ARGS'\");\n\t# Every Makefile must define some sort of TAGS rule.\n\t# Otherwise, it would be possible for a top-level \"make TAGS\"\n\t# to fail because some subdirectory failed.  Ditto ctags and\n        # cscope.\n        $output_rules .=\n          \"tags TAGS:\\n\\n\" .\n          \"ctags CTAGS:\\n\\n\" .\n          \"cscope cscopelist:\\n\\n\";\n      }\n}\n\n\n# user_phony_rule ($NAME)\n# -----------------------\n# Return false if rule $NAME does not exist.  Otherwise,\n# declare it as phony, complete its definition (in case it is\n# conditional), and return its Automake::Rule instance.\nsub user_phony_rule\n{\n  my ($name) = @_;\n  my $rule = rule $name;\n  if ($rule)\n    {\n      depend ('.PHONY', $name);\n      # Define $NAME in all condition where it is not already defined,\n      # so that it is always OK to depend on $NAME.\n      for my $c ($rule->not_always_defined_in_cond (TRUE)->conds)\n\t{\n\t  Automake::Rule::define ($name, 'internal', RULE_AUTOMAKE,\n\t\t\t\t  $c, INTERNAL);\n\t  $output_rules .= $c->subst_string . \"$name:\\n\";\n\t}\n    }\n  return $rule;\n}\n\n\n# Handle 'dist' target.\nsub handle_dist ()\n{\n  # Substitutions for distdir.am\n  my %transform;\n\n  # Define DIST_SUBDIRS.  This must always be done, regardless of the\n  # no-dist setting: target like 'distclean' or 'maintainer-clean' use it.\n  my $subdirs = var ('SUBDIRS');\n  if ($subdirs)\n    {\n      # If SUBDIRS is conditionally defined, then set DIST_SUBDIRS\n      # to all possible directories, and use it.  If DIST_SUBDIRS is\n      # defined, just use it.\n\n      # Note that we check DIST_SUBDIRS first on purpose, so that\n      # we don't call has_conditional_contents for now reason.\n      # (In the past one project used so many conditional subdirectories\n      # that calling has_conditional_contents on SUBDIRS caused\n      # automake to grow to 150Mb -- this should not happen with\n      # the current implementation of has_conditional_contents,\n      # but it's more efficient to avoid the call anyway.)\n      if (var ('DIST_SUBDIRS'))\n\t{\n\t}\n      elsif ($subdirs->has_conditional_contents)\n\t{\n\t  define_pretty_variable\n\t    ('DIST_SUBDIRS', TRUE, INTERNAL,\n\t     uniq ($subdirs->value_as_list_recursive));\n\t}\n      else\n\t{\n\t  # We always define this because that is what 'distclean'\n\t  # wants.\n\t  define_pretty_variable ('DIST_SUBDIRS', TRUE, INTERNAL,\n\t\t\t\t  '$(SUBDIRS)');\n\t}\n    }\n\n  # The remaining definitions are only required when a dist target is used.\n  return if option 'no-dist';\n\n  # At least one of the archive formats must be enabled.\n  if ($relative_dir eq '.')\n    {\n      my $archive_defined = option 'no-dist-gzip' ? 0 : 1;\n      $archive_defined ||=\n\tgrep { option \"dist-$_\" } qw(shar zip tarZ bzip2 lzip xz zstd);\n      error (option 'no-dist-gzip',\n\t     \"no-dist-gzip specified but no dist-* specified,\\n\"\n\t     . \"at least one archive format must be enabled\")\n\tunless $archive_defined;\n    }\n\n  # Look for common files that should be included in distribution.\n  # If the aux dir is set, and it does not have a Makefile.am, then\n  # we check for these files there as well.\n  my $check_aux = 0;\n  if ($relative_dir eq '.'\n      && $config_aux_dir_set_in_configure_ac)\n    {\n      if (! is_make_dir ($config_aux_dir))\n\t{\n\t  $check_aux = 1;\n\t}\n    }\n  foreach my $cfile (@common_files)\n    {\n      if (dir_has_case_matching_file ($relative_dir, $cfile)\n\t  # The file might be absent, but if it can be built it's ok.\n\t  || rule $cfile)\n\t{\n\t  push_dist_common ($cfile);\n\t}\n\n      # Don't use 'elsif' here because a file might meaningfully\n      # appear in both directories.\n      if ($check_aux && dir_has_case_matching_file ($config_aux_dir, $cfile))\n\t{\n\t  push_dist_common (\"$config_aux_dir/$cfile\")\n\t}\n    }\n\n  # We might copy elements from @configure_dist_common to\n  # @dist_common if we think we need to.  If the file appears in our\n  # directory, we would have discovered it already, so we don't\n  # check that.  But if the file is in a subdir without a Makefile,\n  # we want to distribute it here if we are doing '.'.  Ugly!\n  # Also, in some corner cases, it's possible that the following code\n  # will cause the same file to appear in the $(DIST_COMMON) variables\n  # of two distinct Makefiles; but this is not a problem, since the\n  # 'distdir' target in 'lib/am/distdir.am' can deal with the same\n  # file being distributed multiple times.\n  # See also automake bug#9651.\n  if ($relative_dir eq '.')\n    {\n      foreach my $file (@configure_dist_common)\n\t{\n\t  my $dir = dirname ($file);\n\t  push_dist_common ($file)\n\t    if ($dir eq '.' || ! is_make_dir ($dir));\n\t}\n      @configure_dist_common = ();\n    }\n\n  # $(am__DIST_COMMON): files to be distributed automatically.  Will be\n  # appended to $(DIST_COMMON) in the generated Makefile.\n  # Use 'sort' so that the expansion of $(DIST_COMMON) in the generated\n  # Makefile is deterministic, in face of m4 and/or perl randomizations\n  # (see automake bug#17908).\n  define_pretty_variable ('am__DIST_COMMON', TRUE, INTERNAL,\n                          uniq (sort @dist_common));\n\n  # Now that we've processed @dist_common, disallow further attempts\n  # to modify it.\n  $handle_dist_run = 1;\n\n  $transform{'DISTCHECK-HOOK'} = !! rule 'distcheck-hook';\n  $transform{'GETTEXT'} = $seen_gettext && !$seen_gettext_external;\n\n  # If the target 'dist-hook' exists, make sure it is run.  This\n  # allows users to do random weird things to the distribution\n  # before it is packaged up.\n  push (@dist_targets, 'dist-hook')\n    if user_phony_rule 'dist-hook';\n  $transform{'DIST-TARGETS'} = join (' ', @dist_targets);\n\n  my $flm = option ('filename-length-max');\n  my $filename_filter = $flm ? '.' x $flm->[1] : '';\n\n  $output_rules .= file_contents ('distdir',\n\t\t\t\t  new Automake::Location,\n\t\t\t\t  %transform,\n\t\t\t\t  FILENAME_FILTER => $filename_filter);\n}\n\n\n# check_directory ($NAME, $WHERE [, $RELATIVE_DIR = \".\"])\n# -------------------------------------------------------\n# Ensure $NAME is a directory (in $RELATIVE_DIR), and that it uses a sane\n# name.  Use $WHERE as a location in the diagnostic, if any.\nsub check_directory\n{\n  my ($dir, $where, $reldir) = @_;\n  $reldir = '.' unless defined $reldir;\n\n  error $where, \"required directory $reldir/$dir does not exist\"\n    unless -d \"$reldir/$dir\";\n\n  # If an 'obj/' directory exists, BSD make will enter it before\n  # reading 'Makefile'.  Hence the 'Makefile' in the current directory\n  # will not be read.\n  #\n  #  % cat Makefile\n  #  all:\n  #          echo Hello\n  #  % cat obj/Makefile\n  #  all:\n  #          echo World\n  #  % make      # GNU make\n  #  echo Hello\n  #  Hello\n  #  % pmake     # BSD make\n  #  echo World\n  #  World\n  msg ('portability', $where,\n       \"naming a subdirectory 'obj' causes troubles with BSD make\")\n    if $dir eq 'obj';\n\n  # 'aux' is probably the most important of the following forbidden name,\n  # since it's tempting to use it as an AC_CONFIG_AUX_DIR.\n  msg ('portability', $where,\n       \"name '$dir' is reserved on W32 and DOS platforms\")\n    if grep (/^\\Q$dir\\E$/i, qw/aux lpt1 lpt2 lpt3 com1 com2 com3 com4 con prn/);\n}\n\n# check_directories_in_var ($VARIABLE)\n# ------------------------------------\n# Recursively check all items in variables $VARIABLE as directories\nsub check_directories_in_var\n{\n  my ($var) = @_;\n  $var->traverse_recursively\n    (sub\n     {\n       my ($var, $val, $cond, $full_cond) = @_;\n       check_directory ($val, $var->rdef ($cond)->location, $relative_dir);\n       return ();\n     },\n     undef,\n     skip_ac_subst => 1);\n}\n\n\nsub handle_subdirs ()\n{\n  my $subdirs = var ('SUBDIRS');\n  return\n    unless $subdirs;\n\n  check_directories_in_var $subdirs;\n\n  my $dsubdirs = var ('DIST_SUBDIRS');\n  check_directories_in_var $dsubdirs\n    if $dsubdirs;\n\n  $output_rules .= file_contents ('subdirs', new Automake::Location);\n  rvar ('RECURSIVE_TARGETS')->rdef (TRUE)->{'pretty'} = VAR_SORTED; # Gross!\n}\n\n\n# ($REGEN, @DEPENDENCIES)\n# scan_aclocal_m4\n# ---------------\n# If aclocal.m4 creation is automated, return the list of its dependencies.\nsub scan_aclocal_m4 ()\n{\n  my $regen_aclocal = 0;\n\n  set_seen 'CONFIG_STATUS_DEPENDENCIES';\n  set_seen 'CONFIGURE_DEPENDENCIES';\n\n  if (-f 'aclocal.m4')\n    {\n      define_variable (\"ACLOCAL_M4\", '$(top_srcdir)/aclocal.m4', INTERNAL);\n\n      my $aclocal = new Automake::XFile \"< aclocal.m4\";\n      my $line = $aclocal->getline;\n      $regen_aclocal = $line =~ 'generated automatically by aclocal';\n    }\n\n  my @ac_deps = ();\n\n  if (set_seen ('ACLOCAL_M4_SOURCES'))\n    {\n      push (@ac_deps, '$(ACLOCAL_M4_SOURCES)');\n      msg_var ('obsolete', 'ACLOCAL_M4_SOURCES',\n\t       \"'ACLOCAL_M4_SOURCES' is obsolete.\\n\"\n\t       . \"It should be safe to simply remove it\");\n    }\n\n  # Note that it might be possible that aclocal.m4 doesn't exist but\n  # should be auto-generated.  This case probably isn't very\n  # important.\n\n  return ($regen_aclocal, @ac_deps);\n}\n\n\n# Helper function for 'substitute_ac_subst_variables'.\nsub substitute_ac_subst_variables_worker\n{\n  my ($token) = @_;\n  return \"\\@$token\\@\" if var $token;\n  return \"\\${$token\\}\";\n}\n\n# substitute_ac_subst_variables ($TEXT)\n# -------------------------------------\n# Replace any occurrence of ${FOO} in $TEXT by @FOO@ if FOO is an AC_SUBST\n# variable.\nsub substitute_ac_subst_variables\n{\n  my ($text) = @_;\n  $text =~ s/\\$[{]([^ \\t=:+{}]+)}/substitute_ac_subst_variables_worker ($1)/ge;\n  return $text;\n}\n\n# @DEPENDENCIES\n# prepend_srcdir (@INPUTS)\n# ------------------------\n# Prepend $(srcdir) or $(top_srcdir) to all @INPUTS.  The idea is that\n# if an input file has a directory part the same as the current\n# directory, then the directory part is simply replaced by $(srcdir).\n# But if the directory part is different, then $(top_srcdir) is\n# prepended.\nsub prepend_srcdir\n{\n  my (@inputs) = @_;\n  my @newinputs;\n\n  foreach my $single (@inputs)\n    {\n      if (dirname ($single) eq $relative_dir)\n\t{\n\t  push (@newinputs, '$(srcdir)/' . basename ($single));\n\t}\n      else\n\t{\n\t  push (@newinputs, '$(top_srcdir)/' . $single);\n\t}\n    }\n  return @newinputs;\n}\n\n# @DEPENDENCIES\n# rewrite_inputs_into_dependencies ($OUTPUT, @INPUTS)\n# ---------------------------------------------------\n# Compute a list of dependencies appropriate for the rebuild\n# rule of\n#   AC_CONFIG_FILES($OUTPUT:$INPUT[0]:$INPUTS[1]:...)\n# Also distribute $INPUTs which are not built by another AC_CONFIG_FOOs.\nsub rewrite_inputs_into_dependencies\n{\n  my ($file, @inputs) = @_;\n  my @res = ();\n\n  for my $i (@inputs)\n    {\n      # We cannot create dependencies on shell variables.\n      next if (substitute_ac_subst_variables $i) =~ /\\$/;\n\n      if (exists $ac_config_files_location{$i} && $i ne $file)\n\t{\n\t  my $di = dirname $i;\n\t  if ($di eq $relative_dir)\n\t    {\n\t      $i = basename $i;\n\t    }\n\t  # In the top-level Makefile we do not use $(top_builddir), because\n\t  # we are already there, and since the targets are built without\n\t  # a $(top_builddir), it helps BSD Make to match them with\n\t  # dependencies.\n\t  elsif ($relative_dir ne '.')\n\t    {\n\t      $i = '$(top_builddir)/' . $i;\n\t    }\n\t}\n      else\n\t{\n\t  msg ('error', $ac_config_files_location{$file},\n\t       \"required file '$i' not found\")\n\t    unless $i =~ /\\$/ || exists $output_files{$i} || -f $i;\n\t  ($i) = prepend_srcdir ($i);\n\t  push_dist_common ($i);\n\t}\n      push @res, $i;\n    }\n  return @res;\n}\n\n\n\n# handle_configure ($MAKEFILE_AM, $MAKEFILE_IN, $MAKEFILE, @INPUTS)\n# -----------------------------------------------------------------\n# Handle remaking and configure stuff.\n# We need the name of the input file, to do proper remaking rules.\nsub handle_configure\n{\n  my ($makefile_am, $makefile_in, $makefile, @inputs) = @_;\n\n  prog_error 'empty @inputs'\n    unless @inputs;\n\n  my ($rel_makefile_am, $rel_makefile_in) = prepend_srcdir ($makefile_am,\n\t\t\t\t\t\t\t    $makefile_in);\n  my $rel_makefile = basename $makefile;\n\n  my $colon_infile = ':' . join (':', @inputs);\n  $colon_infile = '' if $colon_infile eq \":$makefile.in\";\n  my @rewritten = rewrite_inputs_into_dependencies ($makefile, @inputs);\n  my ($regen_aclocal_m4, @aclocal_m4_deps) = scan_aclocal_m4;\n  define_pretty_variable ('am__aclocal_m4_deps', TRUE, INTERNAL,\n\t\t\t  @configure_deps, @aclocal_m4_deps,\n\t\t\t  '$(top_srcdir)/' . $configure_ac);\n  my @configuredeps = ('$(am__aclocal_m4_deps)', '$(CONFIGURE_DEPENDENCIES)');\n  push @configuredeps, '$(ACLOCAL_M4)' if -f 'aclocal.m4';\n  define_pretty_variable ('am__configure_deps', TRUE, INTERNAL,\n\t\t\t  @configuredeps);\n\n  my $automake_options = '--' . $strictness_name .\n\t\t\t (global_option 'no-dependencies' ? ' --ignore-deps' : '');\n\n  $output_rules .= file_contents\n    ('configure',\n     new Automake::Location,\n     MAKEFILE              => $rel_makefile,\n     'MAKEFILE-DEPS'       => \"@rewritten\",\n     'CONFIG-MAKEFILE'     => ($relative_dir eq '.') ? '$@' : '$(subdir)/$@',\n     'MAKEFILE-IN'         => $rel_makefile_in,\n     'HAVE-MAKEFILE-IN-DEPS' => (@include_stack > 0),\n     'MAKEFILE-IN-DEPS'    => \"@include_stack\",\n     'MAKEFILE-AM'         => $rel_makefile_am,\n     'AUTOMAKE-OPTIONS'    => $automake_options,\n     'MAKEFILE-AM-SOURCES' => \"$makefile$colon_infile\",\n     'REGEN-ACLOCAL-M4'    => $regen_aclocal_m4,\n     VERBOSE               => verbose_flag ('GEN'));\n\n  if ($relative_dir eq '.')\n    {\n      push_dist_common ('acconfig.h')\n\tif -f 'acconfig.h';\n    }\n\n  # If we have a configure header, require it.\n  my $hdr_index = 0;\n  my @distclean_config;\n  foreach my $spec (@config_headers)\n    {\n      $hdr_index += 1;\n      # $CONFIG_H_PATH: config.h from top level.\n      my ($config_h_path, @ins) = split_config_file_spec ($spec);\n      my $config_h_dir = dirname ($config_h_path);\n\n      # If the header is in the current directory we want to build\n      # the header here.  Otherwise, if we're at the topmost\n      # directory and the header's directory doesn't have a\n      # Makefile, then we also want to build the header.\n      if ($relative_dir eq $config_h_dir\n\t  || ($relative_dir eq '.' && ! is_make_dir ($config_h_dir)))\n\t{\n\t  my ($cn_sans_dir, $stamp_dir);\n\t  if ($relative_dir eq $config_h_dir)\n\t    {\n\t      $cn_sans_dir = basename ($config_h_path);\n\t      $stamp_dir = '';\n\t    }\n\t  else\n\t    {\n\t      $cn_sans_dir = $config_h_path;\n\t      if ($config_h_dir eq '.')\n\t\t{\n\t\t  $stamp_dir = '';\n\t\t}\n\t      else\n\t\t{\n\t\t  $stamp_dir = $config_h_dir . '/';\n\t\t}\n\t    }\n\n\t  # This will also distribute all inputs.\n\t  @ins = rewrite_inputs_into_dependencies ($config_h_path, @ins);\n\n\t  # Cannot define rebuild rules for filenames with shell variables.\n\t  next if (substitute_ac_subst_variables $config_h_path) =~ /\\$/;\n\n\t  # Header defined in this directory.\n\t  my @files;\n\t  if (-f $config_h_path . '.top')\n\t    {\n\t      push (@files, \"$cn_sans_dir.top\");\n\t    }\n\t  if (-f $config_h_path . '.bot')\n\t    {\n\t      push (@files, \"$cn_sans_dir.bot\");\n\t    }\n\n\t  push_dist_common (@files);\n\n\t  # For now, acconfig.h can only appear in the top srcdir.\n\t  if (-f 'acconfig.h')\n\t    {\n\t      push (@files, '$(top_srcdir)/acconfig.h');\n\t    }\n\n\t  my $stamp = \"${stamp_dir}stamp-h${hdr_index}\";\n\t  $output_rules .=\n\t    file_contents ('remake-hdr',\n\t\t\t   new Automake::Location,\n\t\t\t   FILES            => \"@files\",\n\t\t\t   'FIRST-HDR'      => ($hdr_index == 1),\n\t\t\t   CONFIG_H         => $cn_sans_dir,\n\t\t\t   CONFIG_HIN       => $ins[0],\n\t\t\t   CONFIG_H_DEPS    => \"@ins\",\n\t\t\t   CONFIG_H_PATH    => $config_h_path,\n\t\t\t   STAMP            => \"$stamp\");\n\n\t  push @distclean_config, $cn_sans_dir, $stamp;\n\t}\n    }\n\n  $output_rules .= file_contents ('clean-hdr',\n\t\t\t\t  new Automake::Location,\n\t\t\t\t  FILES => \"@distclean_config\")\n    if @distclean_config;\n\n  # Distribute and define mkinstalldirs only if it is already present\n  # in the package, for backward compatibility (some people may still\n  # use $(mkinstalldirs)).\n  # TODO: start warning about this in Automake 1.14, and have\n  # TODO: Automake 2.0 drop it (and the mkinstalldirs script\n  # TODO: as well).\n  my $mkidpath = \"$config_aux_dir/mkinstalldirs\";\n  if (-f $mkidpath)\n    {\n      # Use require_file so that any existing script gets updated\n      # by --force-missing.\n      require_conf_file ($mkidpath, FOREIGN, 'mkinstalldirs');\n      define_variable ('mkinstalldirs',\n\t\t       \"\\$(SHELL) $am_config_aux_dir/mkinstalldirs\", INTERNAL);\n    }\n  else\n    {\n      # Use $(install_sh), not $(MKDIR_P) because the latter requires\n      # at least one argument, and $(mkinstalldirs) used to work\n      # even without arguments (e.g. $(mkinstalldirs) $(conditional_dir)).\n      # Also, $(MKDIR_P) uses the umask for any intermediate directories\n      # created, whereas we want them to be created with umask 022\n      # so that they are mode 755.\n      define_variable ('mkinstalldirs', '$(install_sh) -d', INTERNAL);\n    }\n\n  reject_var ('CONFIG_HEADER',\n\t      \"'CONFIG_HEADER' is an anachronism; now determined \"\n\t      . \"automatically\\nfrom '$configure_ac'\");\n\n  my @config_h;\n  foreach my $spec (@config_headers)\n    {\n      my ($out, @ins) = split_config_file_spec ($spec);\n      # Generate CONFIG_HEADER define.\n      if ($relative_dir eq dirname ($out))\n\t{\n\t  push @config_h, basename ($out);\n\t}\n      else\n\t{\n\t  push @config_h, \"\\$(top_builddir)/$out\";\n\t}\n    }\n  define_variable (\"CONFIG_HEADER\", \"@config_h\", INTERNAL)\n    if @config_h;\n\n  # Now look for other files in this directory which must be remade\n  # by config.status, and generate rules for them.\n  my @actual_other_files = ();\n  # These get cleaned only in a VPATH build.\n  my @actual_other_vpath_files = ();\n  foreach my $lfile (@other_input_files)\n    {\n      my $file;\n      my @inputs;\n      if ($lfile =~ /^([^:]*):(.*)$/)\n\t{\n\t  # This is the \":\" syntax of AC_OUTPUT.\n\t  $file = $1;\n\t  @inputs = split (':', $2);\n\t}\n      else\n\t{\n\t  # Normal usage.\n\t  $file = $lfile;\n\t  @inputs = $file . '.in';\n\t}\n\n      # Automake files should not be stored in here, but in %MAKE_LIST.\n      prog_error (\"$lfile in \\@other_input_files\\n\"\n\t\t  . \"\\@other_input_files = (@other_input_files)\")\n\tif -f $file . '.am';\n\n      my $local = basename ($file);\n\n      # We skip files that aren't in this directory.  However, if\n      # the file's directory does not have a Makefile, and we are\n      # currently doing '.', then we create a rule to rebuild the\n      # file in the subdir.\n      my $fd = dirname ($file);\n      if ($fd ne $relative_dir)\n\t{\n\t  if ($relative_dir eq '.' && ! is_make_dir ($fd))\n\t    {\n\t      $local = $file;\n\t    }\n\t  else\n\t    {\n\t      next;\n\t    }\n\t}\n\n      my @rewritten_inputs = rewrite_inputs_into_dependencies ($file, @inputs);\n\n      # Cannot output rules for shell variables.\n      next if (substitute_ac_subst_variables $local) =~ /\\$/;\n\n      my $condstr = '';\n      my $cond = $ac_config_files_condition{$lfile};\n      if (defined $cond)\n        {\n\t  $condstr = $cond->subst_string;\n\t  Automake::Rule::define ($local, $configure_ac, RULE_AUTOMAKE, $cond,\n\t\t\t\t  $ac_config_files_location{$file});\n        }\n      $output_rules .= ($condstr . $local . ': '\n\t\t\t. '$(top_builddir)/config.status '\n\t\t\t. \"@rewritten_inputs\\n\"\n\t\t\t. $condstr . \"\\t\"\n\t\t\t. 'cd $(top_builddir) && '\n\t\t\t. '$(SHELL) ./config.status '\n\t\t\t. ($relative_dir eq '.' ? '' : '$(subdir)/')\n\t\t\t. '$@'\n\t\t\t. \"\\n\");\n      push (@actual_other_files, $local);\n    }\n\n  # For links we should clean destinations and distribute sources.\n  foreach my $spec (@config_links)\n    {\n      my ($link, $file) = split /:/, $spec;\n      # Some people do AC_CONFIG_LINKS($computed).  We only handle\n      # the DEST:SRC form.\n      next unless $file;\n      my $where = $ac_config_files_location{$link};\n\n      # Skip destinations that contain shell variables.\n      if ((substitute_ac_subst_variables $link) !~ /\\$/)\n\t{\n\t  # We skip links that aren't in this directory.  However, if\n\t  # the link's directory does not have a Makefile, and we are\n\t  # currently doing '.', then we add the link to CONFIG_CLEAN_FILES\n\t  # in '.'s Makefile.in.\n\t  my $local = basename ($link);\n\t  my $fd = dirname ($link);\n\t  if ($fd ne $relative_dir)\n\t    {\n\t      if ($relative_dir eq '.' && ! is_make_dir ($fd))\n\t\t{\n\t\t  $local = $link;\n\t\t}\n\t      else\n\t\t{\n\t\t  $local = undef;\n\t\t}\n\t    }\n\t  if ($file ne $link)\n\t    {\n\t      push @actual_other_files, $local if $local;\n\t    }\n\t  else\n\t    {\n\t      push @actual_other_vpath_files, $local if $local;\n\t    }\n\t}\n\n      # Do not process sources that contain shell variables.\n      if ((substitute_ac_subst_variables $file) !~ /\\$/)\n\t{\n\t  my $fd = dirname ($file);\n\n\t  # We distribute files that are in this directory.\n\t  # At the top-level ('.') we also distribute files whose\n\t  # directory does not have a Makefile.\n\t  if (($fd eq $relative_dir)\n\t      || ($relative_dir eq '.' && ! is_make_dir ($fd)))\n\t    {\n\t      # The following will distribute $file as a side-effect when\n\t      # it is appropriate (i.e., when $file is not already an output).\n\t      # We do not need the result, just the side-effect.\n\t      rewrite_inputs_into_dependencies ($link, $file);\n\t    }\n\t}\n    }\n\n  # These files get removed by \"make distclean\".\n  define_pretty_variable ('CONFIG_CLEAN_FILES', TRUE, INTERNAL,\n\t\t\t  @actual_other_files);\n  define_pretty_variable ('CONFIG_CLEAN_VPATH_FILES', TRUE, INTERNAL,\n\t\t\t  @actual_other_vpath_files);\n}\n\nsub handle_headers ()\n{\n    my @r = am_install_var ('-defaultdist', 'header', 'HEADERS', 'include',\n\t\t\t    'oldinclude', 'pkginclude',\n\t\t\t    'noinst', 'check');\n    foreach (@r)\n    {\n      next unless $_->[1] =~ /\\..*$/;\n      saw_extension ($&);\n    }\n}\n\nsub handle_gettext ()\n{\n  return if ! $seen_gettext || $relative_dir ne '.';\n\n  my $subdirs = var 'SUBDIRS';\n\n  if (! $subdirs)\n    {\n      err_ac \"AM_GNU_GETTEXT used but SUBDIRS not defined\";\n      return;\n    }\n\n  # Perform some sanity checks to help users get the right setup.\n  # We disable these tests when po/ doesn't exist in order not to disallow\n  # unusual gettext setups.\n  #\n  # Bruno Haible:\n  # | The idea is:\n  # |\n  # |  1) If a package doesn't have a directory po/ at top level, it\n  # |     will likely have multiple po/ directories in subpackages.\n  # |\n  # |  2) It is useful to warn for the absence of intl/ if AM_GNU_GETTEXT\n  # |     is used without 'external'. It is also useful to warn for the\n  # |     presence of intl/ if AM_GNU_GETTEXT([external]) is used. Both\n  # |     warnings apply only to the usual layout of packages, therefore\n  # |     they should both be disabled if no po/ directory is found at\n  # |     top level.\n\n  if (-d 'po')\n    {\n      my @subdirs = $subdirs->value_as_list_recursive;\n\n      msg_var ('syntax', $subdirs,\n\t       \"AM_GNU_GETTEXT used but 'po' not in SUBDIRS\")\n\tif ! grep ($_ eq 'po', @subdirs);\n\n      # intl/ is not required when AM_GNU_GETTEXT is called with the\n      # 'external' option and AM_GNU_GETTEXT_INTL_SUBDIR is not called.\n      msg_var ('syntax', $subdirs,\n\t       \"AM_GNU_GETTEXT used but 'intl' not in SUBDIRS\")\n\tif (! ($seen_gettext_external && ! $seen_gettext_intl)\n\t    && ! grep ($_ eq 'intl', @subdirs));\n\n      # intl/ should not be used with AM_GNU_GETTEXT([external]), except\n      # if AM_GNU_GETTEXT_INTL_SUBDIR is called.\n      msg_var ('syntax', $subdirs,\n\t       \"'intl' should not be in SUBDIRS when \"\n\t       . \"AM_GNU_GETTEXT([external]) is used\")\n\tif ($seen_gettext_external && ! $seen_gettext_intl\n\t    && grep ($_ eq 'intl', @subdirs));\n    }\n\n  require_file ($ac_gettext_location, GNU, 'ABOUT-NLS');\n}\n\n# Emit makefile footer.\nsub handle_footer ()\n{\n    reject_rule ('.SUFFIXES',\n\t\t \"use variable 'SUFFIXES', not target '.SUFFIXES'\");\n\n    # Note: AIX 4.1 /bin/make will fail if any suffix rule appears\n    # before .SUFFIXES.  So we make sure that .SUFFIXES appears before\n    # anything else, by sticking it right after the default: target.\n    $output_header .= \".SUFFIXES:\\n\";\n    my $suffixes = var 'SUFFIXES';\n    my @suffixes = Automake::Rule::suffixes;\n    if (@suffixes || $suffixes)\n    {\n\t# Make sure SUFFIXES has unique elements.  Sort them to ensure\n\t# the output remains consistent.  However, $(SUFFIXES) is\n\t# always at the start of the list, unsorted.  This is done\n\t# because make will choose rules depending on the ordering of\n\t# suffixes, and this lets the user have some control.  Push\n\t# actual suffixes, and not $(SUFFIXES).  Some versions of make\n\t# do not like variable substitutions on the .SUFFIXES line.\n\tmy @user_suffixes = ($suffixes\n\t\t\t     ? $suffixes->value_as_list_recursive : ());\n\n\tmy %suffixes = map { $_ => 1 } @suffixes;\n\tdelete @suffixes{@user_suffixes};\n\n\t$output_header .= (\".SUFFIXES: \"\n\t\t\t   . join (' ', @user_suffixes, sort keys %suffixes)\n\t\t\t   . \"\\n\");\n    }\n\n    $output_trailer .= file_contents ('footer', new Automake::Location);\n}\n\n\n# Generate 'make install' rules.\nsub handle_install ()\n{\n  $output_rules .= file_contents\n    ('install',\n     new Automake::Location,\n     maybe_BUILT_SOURCES => (set_seen ('BUILT_SOURCES')\n\t\t\t     ? (\" \\$(BUILT_SOURCES)\\n\"\n\t\t\t\t. \"\\t\\$(MAKE) \\$(AM_MAKEFLAGS)\")\n\t\t\t     : ''),\n     'installdirs-local' => (user_phony_rule ('installdirs-local')\n\t\t\t     ? ' installdirs-local' : ''),\n     am__installdirs => variable_value ('am__installdirs') || '');\n}\n\n\n# handle_all ($MAKEFILE)\n#-----------------------\n# Deal with 'all' and 'all-am'.\nsub handle_all\n{\n    my ($makefile) = @_;\n\n    # Output 'all-am'.\n\n    # Put this at the beginning for the sake of non-GNU makes.  This\n    # is still wrong if these makes can run parallel jobs.  But it is\n    # right enough.\n    unshift (@all, basename ($makefile));\n\n    foreach my $spec (@config_headers)\n      {\n\tmy ($out, @ins) = split_config_file_spec ($spec);\n\tpush (@all, basename ($out))\n\t  if dirname ($out) eq $relative_dir;\n      }\n\n    # Install 'all' hooks.\n    push (@all, \"all-local\")\n      if user_phony_rule \"all-local\";\n\n    pretty_print_rule (\"all-am:\", \"\\t\\t\", @all);\n    depend ('.PHONY', 'all-am', 'all');\n\n\n    # Output 'all'.\n\n    my @local_headers = ();\n    push @local_headers, '$(BUILT_SOURCES)'\n      if var ('BUILT_SOURCES');\n    foreach my $spec (@config_headers)\n      {\n\tmy ($out, @ins) = split_config_file_spec ($spec);\n\tpush @local_headers, basename ($out)\n\t  if dirname ($out) eq $relative_dir;\n      }\n\n    if (@local_headers)\n      {\n\t# We need to make sure config.h is built before we recurse.\n\t# We also want to make sure that built sources are built\n\t# before any ordinary 'all' targets are run.  We can't do this\n\t# by changing the order of dependencies to the \"all\" because\n\t# that breaks when using parallel makes.  Instead we handle\n\t# things explicitly.\n\t$output_all .= (\"all: @local_headers\"\n\t\t\t. \"\\n\\t\"\n\t\t\t. '$(MAKE) $(AM_MAKEFLAGS) '\n\t\t\t. (var ('SUBDIRS') ? 'all-recursive' : 'all-am')\n\t\t\t. \"\\n\\n\");\n        depend ('.MAKE', 'all');\n      }\n    else\n      {\n\t$output_all .= \"all: \" . (var ('SUBDIRS')\n\t\t\t\t  ? 'all-recursive' : 'all-am') . \"\\n\\n\";\n      }\n}\n\n# Generate helper targets for user-defined recursive targets, where needed.\nsub handle_user_recursion ()\n{\n  return unless @extra_recursive_targets;\n\n  define_pretty_variable ('am__extra_recursive_targets', TRUE, INTERNAL,\n                          map { \"$_-recursive\" } @extra_recursive_targets);\n  my $aux = var ('SUBDIRS') ? 'recursive' : 'am';\n  foreach my $target (@extra_recursive_targets)\n    {\n      # This allows the default target's rules to be overridden in\n      # Makefile.am.\n      user_phony_rule ($target);\n      depend (\"$target\", \"$target-$aux\");\n      depend (\"$target-am\", \"$target-local\");\n      # Every user-defined recursive target 'foo' *must* have a valid\n      # associated 'foo-local' rule; we define it as an empty rule by\n      # default, so that the user can transparently extend it in his\n      # own Makefile.am.\n      pretty_print_rule (\"$target-local:\", '', '');\n      # $target-recursive might as well be undefined, so do not add\n      # it here; it's taken care of in subdirs.am anyway.\n      depend (\".PHONY\", \"$target-am\", \"$target-local\");\n    }\n}\n\n\n# Handle check merge target specially.\nsub do_check_merge_target ()\n{\n  # Include user-defined local form of target.\n  push @check_tests, 'check-local'\n    if user_phony_rule 'check-local';\n\n  # The check target must depend on the local equivalent of\n  # 'all', to ensure all the primary targets are built.  Then it\n  # must build the local check rules.\n  $output_rules .= \"check-am: all-am\\n\";\n  if (@check)\n    {\n      pretty_print_rule (\"\\t\\$(MAKE) \\$(AM_MAKEFLAGS)\", \"\\t  \", @check);\n      depend ('.MAKE', 'check-am');\n    }\n\n  if (@check_tests)\n    {\n      pretty_print_rule (\"\\t\\$(MAKE) \\$(AM_MAKEFLAGS)\", \"\\t  \",\n\t\t\t @check_tests);\n      depend ('.MAKE', 'check-am');\n    }\n\n  depend '.PHONY', 'check', 'check-am';\n  # Handle recursion.  We have to honor BUILT_SOURCES like for 'all:'.\n  $output_rules .= (\"check: \"\n\t\t    . (var ('BUILT_SOURCES')\n\t\t       ? \"\\$(BUILT_SOURCES)\\n\\t\\$(MAKE) \\$(AM_MAKEFLAGS) \"\n\t\t       : '')\n\t\t    . (var ('SUBDIRS') ? 'check-recursive' : 'check-am')\n\t\t    . \"\\n\");\n  depend ('.MAKE', 'check')\n    if var ('BUILT_SOURCES');\n}\n\n# Handle all 'clean' targets.\nsub handle_clean\n{\n  my ($makefile) = @_;\n\n  # Clean the files listed in user variables if they exist.\n  $clean_files{'$(MOSTLYCLEANFILES)'} = MOSTLY_CLEAN\n    if var ('MOSTLYCLEANFILES');\n  $clean_files{'$(CLEANFILES)'} = CLEAN\n    if var ('CLEANFILES');\n  $clean_files{'$(DISTCLEANFILES)'} = DIST_CLEAN\n    if var ('DISTCLEANFILES');\n  $clean_files{'$(MAINTAINERCLEANFILES)'} = MAINTAINER_CLEAN\n    if var ('MAINTAINERCLEANFILES');\n\n  # Built sources are automatically removed by maintainer-clean.\n  $clean_files{'$(BUILT_SOURCES)'} = MAINTAINER_CLEAN\n    if var ('BUILT_SOURCES');\n\n  # Compute a list of \"rm\"s to run for each target.\n  my %rms = (MOSTLY_CLEAN, [],\n\t     CLEAN, [],\n\t     DIST_CLEAN, [],\n\t     MAINTAINER_CLEAN, []);\n\n  foreach my $file (keys %clean_files)\n    {\n      my $when = $clean_files{$file};\n      prog_error 'invalid entry in %clean_files'\n\tunless exists $rms{$when};\n\n      my $rm = \"rm -f $file\";\n      # If file is a variable, make sure when don't call 'rm -f' without args.\n      $rm =\"test -z \\\"$file\\\" || $rm\"\n\tif ($file =~ /^\\s*\\$(\\(.*\\)|\\{.*\\})\\s*$/);\n\n      push @{$rms{$when}}, \"\\t-$rm\\n\";\n    }\n\n  $output_rules .= file_contents\n    ('clean',\n     new Automake::Location,\n     MOSTLYCLEAN_RMS      => join ('', sort @{$rms{&MOSTLY_CLEAN}}),\n     CLEAN_RMS            => join ('', sort @{$rms{&CLEAN}}),\n     DISTCLEAN_RMS        => join ('', sort @{$rms{&DIST_CLEAN}}),\n     MAINTAINER_CLEAN_RMS => join ('', sort @{$rms{&MAINTAINER_CLEAN}}),\n     MAKEFILE             => basename $makefile,\n     );\n}\n\n\n# Subroutine for handle_factored_dependencies() to let '.PHONY' and\n# other '.TARGETS' be last.  This is meant to be used as a comparison\n# subroutine passed to the sort built-int.\nsub target_cmp\n{\n  return 0 if $a eq $b;\n\n  my $a1 = substr ($a, 0, 1);\n  my $b1 = substr ($b, 0, 1);\n  if ($a1 ne $b1)\n    {\n      return -1 if $b1 eq '.';\n      return 1 if $a1 eq '.';\n    }\n  return $a cmp $b;\n}\n\n\n# Handle everything related to gathered targets.\nsub handle_factored_dependencies ()\n{\n  # Reject bad hooks.\n  foreach my $utarg ('uninstall-data-local', 'uninstall-data-hook',\n\t\t     'uninstall-exec-local', 'uninstall-exec-hook',\n\t\t     'uninstall-dvi-local',\n\t\t     'uninstall-html-local',\n\t\t     'uninstall-info-local',\n\t\t     'uninstall-pdf-local',\n\t\t     'uninstall-ps-local')\n    {\n      my $x = $utarg;\n      $x =~ s/-.*-/-/;\n      reject_rule ($utarg, \"use '$x', not '$utarg'\");\n    }\n\n  reject_rule ('install-local',\n\t       \"use 'install-data-local' or 'install-exec-local', \"\n\t       . \"not 'install-local'\");\n\n  reject_rule ('install-hook',\n\t       \"use 'install-data-hook' or 'install-exec-hook', \"\n\t       . \"not 'install-hook'\");\n\n  # Install the -local hooks.\n  foreach (keys %dependencies)\n    {\n      # Hooks are installed on the -am targets.\n      s/-am$// or next;\n      depend (\"$_-am\", \"$_-local\")\n\tif user_phony_rule \"$_-local\";\n    }\n\n  # Install the -hook hooks.\n  # FIXME: Why not be as liberal as we are with -local hooks?\n  foreach ('install-exec', 'install-data', 'uninstall')\n    {\n      if (user_phony_rule \"$_-hook\")\n\t{\n\t  depend ('.MAKE', \"$_-am\");\n\t  register_action(\"$_-am\",\n\t\t\t  (\"\\t\\@\\$(NORMAL_INSTALL)\\n\"\n\t\t\t   . \"\\t\\$(MAKE) \\$(AM_MAKEFLAGS) $_-hook\"));\n\t}\n    }\n\n  # All the required targets are phony.\n  depend ('.PHONY', keys %required_targets);\n\n  # Actually output gathered targets.\n  foreach (sort target_cmp keys %dependencies)\n    {\n      # If there is nothing about this guy, skip it.\n      next\n\tunless (@{$dependencies{$_}}\n\t\t|| $actions{$_}\n\t\t|| $required_targets{$_});\n\n      # Define gathered targets in undefined conditions.\n      # FIXME: Right now we must handle .PHONY as an exception,\n      # because people write things like\n      #    .PHONY: myphonytarget\n      # to append dependencies.  This would not work if Automake\n      # refrained from defining its own .PHONY target as it does\n      # with other overridden targets.\n      # Likewise for '.MAKE' and '.PRECIOUS'.\n      my @undefined_conds = (TRUE,);\n      if ($_ ne '.PHONY' && $_ ne '.MAKE' && $_ ne '.PRECIOUS')\n\t{\n\t  @undefined_conds =\n\t    Automake::Rule::define ($_, 'internal',\n\t\t\t\t    RULE_AUTOMAKE, TRUE, INTERNAL);\n\t}\n      my @uniq_deps = uniq (sort @{$dependencies{$_}});\n      foreach my $cond (@undefined_conds)\n\t{\n\t  my $condstr = $cond->subst_string;\n\t  pretty_print_rule (\"$condstr$_:\", \"$condstr\\t\", @uniq_deps);\n\t  $output_rules .= $actions{$_} if defined $actions{$_};\n\t  $output_rules .= \"\\n\";\n\t}\n    }\n}\n\n\nsub handle_tests_dejagnu ()\n{\n    push (@check_tests, 'check-DEJAGNU');\n    $output_rules .= file_contents ('dejagnu', new Automake::Location);\n}\n\n# handle_per_suffix_test ($TEST_SUFFIX, [%TRANSFORM])\n#----------------------------------------------------\nsub handle_per_suffix_test\n{\n  my ($test_suffix, %transform) = @_;\n  my ($pfx, $generic, $am_exeext);\n  if ($test_suffix eq '')\n    {\n      $pfx = '';\n      $generic = 0;\n      $am_exeext = 'FALSE';\n    }\n  else\n    {\n      prog_error (\"test suffix '$test_suffix' lacks leading dot\")\n        unless $test_suffix =~ m/^\\.(.*)/;\n      $pfx = uc ($1) . '_';\n      $generic = 1;\n      $am_exeext = exists $configure_vars{'EXEEXT'} ? 'am__EXEEXT'\n                                                    : 'FALSE';\n    }\n  # The \"test driver\" program, deputed to handle tests protocol used by\n  # test scripts.  By default, it's assumed that no protocol is used, so\n  # we fall back to the old behaviour, implemented by the 'test-driver'\n  # auxiliary script.\n  if (! var \"${pfx}LOG_DRIVER\")\n    {\n      require_conf_file (\"parallel-tests\", FOREIGN, 'test-driver');\n      define_variable (\"${pfx}LOG_DRIVER\",\n                       \"\\$(SHELL) $am_config_aux_dir/test-driver\",\n                       INTERNAL);\n    }\n  my $driver = '$(' . $pfx . 'LOG_DRIVER)';\n  my $driver_flags = '$(AM_' . $pfx . 'LOG_DRIVER_FLAGS)'\n                       . ' $(' . $pfx . 'LOG_DRIVER_FLAGS)';\n  my $compile = \"${pfx}LOG_COMPILE\";\n  define_variable ($compile,\n                   '$(' . $pfx . 'LOG_COMPILER)'\n                      . ' $(AM_' .  $pfx . 'LOG_FLAGS)'\n                      . ' $(' . $pfx . 'LOG_FLAGS)',\n                     INTERNAL);\n  $output_rules .= file_contents ('check2', new Automake::Location,\n                                   GENERIC => $generic,\n                                   DRIVER => $driver,\n                                   DRIVER_FLAGS => $driver_flags,\n                                   COMPILE => '$(' . $compile . ')',\n                                   EXT => $test_suffix,\n                                   am__EXEEXT => $am_exeext,\n                                   %transform);\n}\n\n# is_valid_test_extension ($EXT)\n# ------------------------------\n# Return true if $EXT can appear in $(TEST_EXTENSIONS), return false\n# otherwise.\nsub is_valid_test_extension\n{\n  my $ext = shift;\n  return 1\n    if ($ext =~ /^\\.[a-zA-Z_][a-zA-Z0-9_]*$/);\n  return 1\n    if (exists $configure_vars{'EXEEXT'} && $ext eq subst ('EXEEXT'));\n  return 0;\n}\n\n\nsub handle_tests ()\n{\n  if (option 'dejagnu')\n    {\n      handle_tests_dejagnu;\n    }\n  else\n    {\n      foreach my $c ('DEJATOOL', 'RUNTEST', 'RUNTESTFLAGS')\n\t{\n\t  reject_var ($c, \"'$c' defined but 'dejagnu' not in \"\n\t\t      . \"'AUTOMAKE_OPTIONS'\");\n\t}\n    }\n\n  if (var ('TESTS'))\n    {\n      push (@check_tests, 'check-TESTS');\n      my $check_deps = \"@check\";\n      $output_rules .= file_contents ('check', new Automake::Location,\n                                      SERIAL_TESTS => !! option 'serial-tests',\n                                      CHECK_DEPS => $check_deps);\n\n      # Tests that are known programs should have $(EXEEXT) appended.\n      # For matching purposes, we need to adjust XFAIL_TESTS as well.\n      append_exeext { exists $known_programs{$_[0]} } 'TESTS';\n      append_exeext { exists $known_programs{$_[0]} } 'XFAIL_TESTS'\n\tif (var ('XFAIL_TESTS'));\n\n      if (! option 'serial-tests')\n        {\n\t  define_variable ('TEST_SUITE_LOG', 'test-suite.log', INTERNAL);\n\t  my $suff = '.test';\n\t  my $at_exeext = '';\n\t  my $handle_exeext = exists $configure_vars{'EXEEXT'};\n\t  if ($handle_exeext)\n\t    {\n\t      $at_exeext = subst ('EXEEXT');\n\t      $suff = $at_exeext  . ' ' . $suff;\n\t    }\n          if (! var 'TEST_EXTENSIONS')\n            {\n\t      define_variable ('TEST_EXTENSIONS', $suff, INTERNAL);\n            }\n          my $var = var 'TEST_EXTENSIONS';\n          # Currently, we are not able to deal with conditional contents\n          # in TEST_EXTENSIONS.\n          if ($var->has_conditional_contents)\n           {\n\t     msg_var 'unsupported', $var,\n                     \"'TEST_EXTENSIONS' cannot have conditional contents\";\n           }\n\t  my @test_suffixes = $var->value_as_list_recursive;\n          if ((my @invalid_test_suffixes =\n                  grep { !is_valid_test_extension $_ } @test_suffixes) > 0)\n            {\n              error $var->rdef (TRUE)->location,\n                    \"invalid test extensions: @invalid_test_suffixes\";\n            }\n          @test_suffixes = grep { is_valid_test_extension $_ } @test_suffixes;\n\t  if ($handle_exeext)\n\t    {\n\t      unshift (@test_suffixes, $at_exeext)\n\t        unless @test_suffixes && $test_suffixes[0] eq $at_exeext;\n\t    }\n\t  unshift (@test_suffixes, '');\n\n\t  transform_variable_recursively\n\t    ('TESTS', 'TEST_LOGS', 'am__testlogs', 1, INTERNAL,\n\t      sub {\n\t        my ($subvar, $val, $cond, $full_cond) = @_;\n\t\tmy $obj = $val;\n\t\treturn $obj\n\t\t  if $val =~ /^\\@.*\\@$/;\n\t\t$obj =~ s/\\$\\(EXEEXT\\)$//o;\n\n\t\tif ($val =~ /(\\$\\((top_)?srcdir\\))\\//o)\n\t\t  {\n\t\t    msg ('error', $subvar->rdef ($cond)->location,\n\t\t\t \"using '$1' in TESTS is currently broken: '$val'\");\n\t\t  }\n\n\t\tforeach my $test_suffix (@test_suffixes)\n\t\t  {\n\t\t    next\n\t\t      if $test_suffix eq $at_exeext || $test_suffix eq '';\n\t\t    return substr ($obj, 0, length ($obj) - length ($test_suffix)) . '.log'\n\t\t      if substr ($obj, - length ($test_suffix)) eq $test_suffix;\n\t\t  }\n\t\tmy $base = $obj;\n\t\t$obj .= '.log';\n                handle_per_suffix_test ('',\n                                        OBJ => $obj,\n                                        BASE => $base,\n                                        SOURCE => $val);\n\t        return $obj;\n\t      });\n\n\t  my $nhelper=1;\n\t  my $prev = 'TESTS';\n\t  my $post = '';\n\t  my $last_suffix = $test_suffixes[$#test_suffixes];\n\t  my $cur = '';\n\t  foreach my $test_suffix (@test_suffixes)\n\t    {\n\t      if ($test_suffix eq $last_suffix)\n\t        {\n\t\t  $cur = 'TEST_LOGS';\n\t\t}\n\t      else\n\t        {\n\t\t  $cur = 'am__test_logs' . $nhelper;\n\t\t}\n\t      define_variable ($cur,\n\t\t'$(' . $prev . ':' . $test_suffix . $post . '=.log)', INTERNAL);\n\t      $post = '.log';\n\t      $prev = $cur;\n\t      $nhelper++;\n\t      if ($test_suffix ne $at_exeext && $test_suffix ne '')\n\t        {\n                  handle_per_suffix_test ($test_suffix,\n                                          OBJ => '',\n                                          BASE => '$*',\n                                          SOURCE => '$<');\n\t        }\n\t    }\n\t  $clean_files{'$(TEST_LOGS)'} = MOSTLY_CLEAN;\n\t  $clean_files{'$(TEST_LOGS:.log=.trs)'} = MOSTLY_CLEAN;\n\t  $clean_files{'$(TEST_SUITE_LOG)'} = MOSTLY_CLEAN;\n\t}\n    }\n}\n\nsub handle_emacs_lisp ()\n{\n  my @elfiles = am_install_var ('-candist', 'lisp', 'LISP',\n                                'lisp', 'noinst');\n\n  return if ! @elfiles;\n\n  define_pretty_variable ('am__ELFILES', TRUE, INTERNAL,\n\t\t\t  map { $_->[1] } @elfiles);\n  define_pretty_variable ('am__ELCFILES', TRUE, INTERNAL,\n\t\t\t  '$(am__ELFILES:.el=.elc)');\n  # This one can be overridden by users.\n  define_pretty_variable ('ELCFILES', TRUE, INTERNAL, '$(LISP:.el=.elc)');\n\n  push @all, '$(ELCFILES)';\n\n  require_variables ($elfiles[0][0], \"Emacs Lisp sources seen\", TRUE,\n\t\t     'EMACS', 'lispdir');\n}\n\nsub handle_python ()\n{\n  my @pyfiles = am_install_var ('-defaultdist', 'python', 'PYTHON',\n                                'noinst');\n  return if ! @pyfiles;\n\n  require_variables ($pyfiles[0][0], \"Python sources seen\", TRUE, 'PYTHON');\n  require_conf_file ($pyfiles[0][0], FOREIGN, 'py-compile');\n  define_variable ('py_compile', \"$am_config_aux_dir/py-compile\", INTERNAL);\n}\n\nsub handle_java ()\n{\n    my @sourcelist = am_install_var ('-candist',\n                                     'java', 'JAVA',\n                                     'noinst', 'check');\n    return if ! @sourcelist;\n\n    my @prefixes = am_primary_prefixes ('JAVA', 1,\n\t\t\t\t        'noinst', 'check');\n\n    my $dir;\n    my @java_sources = ();\n    foreach my $prefix (@prefixes)\n      {\n        (my $curs = $prefix) =~ s/^(?:nobase_)?(?:dist_|nodist_)?//;\n\n\tnext\n\t  if $curs eq 'EXTRA';\n\n        push @java_sources, '$(' . $prefix . '_JAVA' . ')';\n\n\tif (defined $dir)\n\t  {\n\t    err_var \"${curs}_JAVA\", \"multiple _JAVA primaries in use\"\n\t     unless $curs eq $dir;\n\t  }\n\n\t$dir = $curs;\n      }\n\n    define_pretty_variable ('am__java_sources', TRUE, INTERNAL,\n                            \"@java_sources\");\n\n    if ($dir eq 'check')\n      {\n        push (@check, \"class$dir.stamp\");\n      }\n    else\n      {\n        push (@all, \"class$dir.stamp\");\n      }\n}\n\n\nsub handle_minor_options ()\n{\n  if (option 'readme-alpha')\n    {\n      if ($relative_dir eq '.')\n\t{\n\t  if ($package_version !~ /^$GNITS_VERSION_PATTERN$/)\n\t    {\n\t      msg ('error-gnits', $package_version_location,\n\t\t   \"version '$package_version' doesn't follow \" .\n\t\t   \"Gnits standards\");\n\t    }\n\t  if (defined $1 && -f 'README-alpha')\n\t    {\n\t      # This means we have an alpha release.  See\n\t      # GNITS_VERSION_PATTERN for details.\n\t      push_dist_common ('README-alpha');\n\t    }\n\t}\n    }\n}\n\n################################################################\n\n# ($OUTPUT, @INPUTS)\n# split_config_file_spec ($SPEC)\n# ------------------------------\n# Decode the Autoconf syntax for config files (files, headers, links\n# etc.).\nsub split_config_file_spec\n{\n  my ($spec) = @_;\n  my ($output, @inputs) = split (/:/, $spec);\n\n  push @inputs, \"$output.in\"\n    unless @inputs;\n\n  return ($output, @inputs);\n}\n\n# $input\n# locate_am (@POSSIBLE_SOURCES)\n# -----------------------------\n# AC_CONFIG_FILES allow specifications such as Makefile:top.in:mid.in:bot.in\n# This functions returns the first *.in file for which a *.am exists.\n# It returns undef otherwise.\nsub locate_am\n{\n  my (@rest) = @_;\n  my $input;\n  foreach my $file (@rest)\n    {\n      if (($file =~ /^(.*)\\.in$/) && -f \"$1.am\")\n\t{\n\t  $input = $file;\n\t  last;\n\t}\n    }\n  return $input;\n}\n\nmy %make_list;\n\n# scan_autoconf_config_files ($WHERE, $CONFIG-FILES)\n# --------------------------------------------------\n# Study $CONFIG-FILES which is the first argument to AC_CONFIG_FILES\n# (or AC_OUTPUT).\nsub scan_autoconf_config_files\n{\n  my ($where, $config_files) = @_;\n\n  # Look at potential Makefile.am's.\n  foreach (split ' ', $config_files)\n    {\n      # Must skip empty string for Perl 4.\n      next if $_ eq \"\\\\\" || $_ eq '';\n\n      # Handle $local:$input syntax.\n      my ($local, @rest) = split (/:/);\n      @rest = (\"$local.in\",) unless @rest;\n      # Keep in sync with test 'conffile-leading-dot.sh'.\n      msg ('unsupported', $where,\n           \"omit leading './' from config file names such as '$local';\"\n           . \"\\nremake rules might be subtly broken otherwise\")\n        if ($local =~ /^\\.\\//);\n      my $input = locate_am @rest;\n      if ($input)\n\t{\n\t  # We have a file that automake should generate.\n\t  $make_list{$input} = join (':', ($local, @rest));\n\t}\n      else\n\t{\n\t  # We have a file that automake should cause to be\n\t  # rebuilt, but shouldn't generate itself.\n\t  push (@other_input_files, $_);\n\t}\n      $ac_config_files_location{$local} = $where;\n      $ac_config_files_condition{$local} =\n        new Automake::Condition (@cond_stack)\n          if (@cond_stack);\n    }\n}\n\n\nsub scan_autoconf_traces\n{\n  my ($filename) = @_;\n\n  # Macros to trace, with their minimal number of arguments.\n  #\n  # IMPORTANT: If you add a macro here, you should also add this macro\n  # =========  to Automake-preselection in autoconf/lib/autom4te.in.\n  my %traced = (\n\t\tAC_CANONICAL_BUILD => 0,\n\t\tAC_CANONICAL_HOST => 0,\n\t\tAC_CANONICAL_TARGET => 0,\n\t\tAC_CONFIG_AUX_DIR => 1,\n\t\tAC_CONFIG_FILES => 1,\n\t\tAC_CONFIG_HEADERS => 1,\n\t\tAC_CONFIG_LIBOBJ_DIR => 1,\n\t\tAC_CONFIG_LINKS => 1,\n\t\tAC_FC_SRCEXT => 1,\n\t\tAC_INIT => 0,\n\t\tAC_LIBSOURCE => 1,\n\t\tAC_REQUIRE_AUX_FILE => 1,\n\t\tAC_SUBST_TRACE => 1,\n\t\tAM_AUTOMAKE_VERSION => 1,\n                AM_PROG_MKDIR_P => 0,\n\t\tAM_CONDITIONAL => 2,\n\t\tAM_EXTRA_RECURSIVE_TARGETS => 1,\n\t\tAM_GNU_GETTEXT => 0,\n\t\tAM_GNU_GETTEXT_INTL_SUBDIR => 0,\n\t\tAM_INIT_AUTOMAKE => 0,\n\t\tAM_MAINTAINER_MODE => 0,\n\t\tAM_PROG_AR => 0,\n\t\t_AM_SUBST_NOTMAKE => 1,\n\t\t_AM_COND_IF => 1,\n\t\t_AM_COND_ELSE => 1,\n\t\t_AM_COND_ENDIF => 1,\n\t\tLT_SUPPORTED_TAG => 1,\n\t\t_LT_AC_TAGCONFIG => 0,\n\t\tm4_include => 1,\n\t\tm4_sinclude => 1,\n\t\tsinclude => 1,\n\t      );\n\n  # Suppress all warnings from this invocation of autoconf.\n  # The user is presumably about to run autoconf themselves\n  # and will see its warnings then.\n  local $ENV{WARNINGS} = 'none';\n\n  my $traces = ($ENV{AUTOCONF} || '@am_AUTOCONF@') . \" \";\n\n  # Use a separator unlikely to be used, not ':', the default, which\n  # has a precise meaning for AC_CONFIG_FILES and so on.\n  $traces .= join (' ',\n\t\t   map { \"--trace=$_\" . ':\\$f:\\$l::\\$d::\\$n::\\${::}%' }\n\t\t   (keys %traced));\n\n  verb \"running WARNINGS=$ENV{WARNINGS} $traces\";\n  my $tracefh = new Automake::XFile (\"$traces $filename |\");\n\n  @cond_stack = ();\n  my $where;\n\n  while ($_ = $tracefh->getline)\n    {\n      chomp;\n      my ($here, $depth, @args) = split (/::/);\n      $where = new Automake::Location $here;\n      my $macro = $args[0];\n\n      prog_error (\"unrequested trace '$macro'\")\n\tunless exists $traced{$macro};\n\n      # Skip and diagnose malformed calls.\n      if ($#args < $traced{$macro})\n\t{\n\t  msg ('syntax', $where, \"not enough arguments for $macro\");\n\t  next;\n\t}\n\n      # Alphabetical ordering please.\n      if ($macro eq 'AC_CANONICAL_BUILD')\n\t{\n\t  if ($seen_canonical <= AC_CANONICAL_BUILD)\n\t    {\n\t      $seen_canonical = AC_CANONICAL_BUILD;\n\t    }\n\t}\n      elsif ($macro eq 'AC_CANONICAL_HOST')\n\t{\n\t  if ($seen_canonical <= AC_CANONICAL_HOST)\n\t    {\n\t      $seen_canonical = AC_CANONICAL_HOST;\n\t    }\n\t}\n      elsif ($macro eq 'AC_CANONICAL_TARGET')\n\t{\n\t  $seen_canonical = AC_CANONICAL_TARGET;\n\t}\n      elsif ($macro eq 'AC_CONFIG_AUX_DIR')\n\t{\n\t  if ($seen_init_automake)\n\t    {\n\t      error ($where, \"AC_CONFIG_AUX_DIR must be called before \"\n\t\t     . \"AM_INIT_AUTOMAKE ...\", partial => 1);\n\t      error ($seen_init_automake, \"... AM_INIT_AUTOMAKE called here\");\n\t    }\n\t  $config_aux_dir = $args[1];\n\t  $config_aux_dir_set_in_configure_ac = 1;\n\t  check_directory ($config_aux_dir, $where);\n\t}\n      elsif ($macro eq 'AC_CONFIG_FILES')\n\t{\n\t  # Look at potential Makefile.am's.\n\t  scan_autoconf_config_files ($where, $args[1]);\n\t}\n      elsif ($macro eq 'AC_CONFIG_HEADERS')\n\t{\n\t  foreach my $spec (split (' ', $args[1]))\n\t    {\n\t      my ($dest, @src) = split (':', $spec);\n\t      $ac_config_files_location{$dest} = $where;\n\t      push @config_headers, $spec;\n\t    }\n\t}\n      elsif ($macro eq 'AC_CONFIG_LIBOBJ_DIR')\n\t{\n\t  $config_libobj_dir = $args[1];\n\t  check_directory ($config_libobj_dir, $where);\n\t}\n      elsif ($macro eq 'AC_CONFIG_LINKS')\n\t{\n\t  foreach my $spec (split (' ', $args[1]))\n\t    {\n\t      my ($dest, $src) = split (':', $spec);\n\t      $ac_config_files_location{$dest} = $where;\n\t      push @config_links, $spec;\n\t    }\n\t}\n      elsif ($macro eq 'AC_FC_SRCEXT')\n\t{\n\t  my $suffix = $args[1];\n\t  # These flags are used as %SOURCEFLAG% in depend2.am,\n\t  # where the trailing space is important.\n\t  $sourceflags{'.' . $suffix} = '$(FCFLAGS_' . $suffix . ') '\n\t    if ($suffix eq 'f90' || $suffix eq 'f95' || $suffix eq 'f03' || $suffix eq 'f08');\n\t}\n      elsif ($macro eq 'AC_INIT')\n\t{\n\t  if (defined $args[2])\n\t    {\n\t      $package_version = $args[2];\n\t      $package_version_location = $where;\n\t    }\n\t}\n      elsif ($macro eq 'AC_LIBSOURCE')\n\t{\n\t  $libsources{$args[1]} = $here;\n\t}\n      elsif ($macro eq 'AC_REQUIRE_AUX_FILE')\n\t{\n\t  # Only remember the first time a file is required.\n\t  $required_aux_file{$args[1]} = $where\n\t    unless exists $required_aux_file{$args[1]};\n\t}\n      elsif ($macro eq 'AC_SUBST_TRACE')\n\t{\n\t  # Just check for alphanumeric in AC_SUBST_TRACE.  If you do\n\t  # AC_SUBST(5), then too bad.\n\t  $configure_vars{$args[1]} = $where\n\t    if $args[1] =~ /^\\w+$/;\n\t}\n      elsif ($macro eq 'AM_AUTOMAKE_VERSION')\n\t{\n\t  error ($where,\n\t\t \"version mismatch.  This is Automake $VERSION,\\n\" .\n\t\t \"but the definition used by this AM_INIT_AUTOMAKE\\n\" .\n\t\t \"comes from Automake $args[1].  You should recreate\\n\" .\n\t\t \"aclocal.m4 with aclocal and run automake again.\\n\",\n\t\t # $? = 63 is used to indicate version mismatch to missing.\n\t\t exit_code => 63)\n\t    if $VERSION ne $args[1];\n\n\t  $seen_automake_version = 1;\n\t}\n      elsif ($macro eq 'AM_PROG_MKDIR_P')\n\t{\n\t  msg 'obsolete', $where, <<'EOF';\nThe 'AM_PROG_MKDIR_P' macro is deprecated, and its use is discouraged.\nYou should use the Autoconf-provided 'AC_PROG_MKDIR_P' macro instead,\nand use '$(MKDIR_P)' instead of '$(mkdir_p)'in your Makefile.am files.\nEOF\n\t}\n      elsif ($macro eq 'AM_CONDITIONAL')\n\t{\n\t  $configure_cond{$args[1]} = $where;\n\t}\n      elsif ($macro eq 'AM_EXTRA_RECURSIVE_TARGETS')\n\t{\n          # Empty leading/trailing fields might be produced by split,\n          # hence the grep is really needed.\n          push @extra_recursive_targets,\n               grep (/./, (split /\\s+/, $args[1]));\n\t}\n      elsif ($macro eq 'AM_GNU_GETTEXT')\n\t{\n\t  $seen_gettext = $where;\n\t  $ac_gettext_location = $where;\n\t  $seen_gettext_external = grep ($_ eq 'external', @args);\n\t}\n      elsif ($macro eq 'AM_GNU_GETTEXT_INTL_SUBDIR')\n\t{\n\t  $seen_gettext_intl = $where;\n\t}\n      elsif ($macro eq 'AM_INIT_AUTOMAKE')\n\t{\n\t  $seen_init_automake = $where;\n\t  if (defined $args[2])\n\t    {\n              msg 'obsolete', $where, <<'EOF';\nAM_INIT_AUTOMAKE: two- and three-arguments forms are deprecated.  For more info, see:\nhttps://www.gnu.org/software/automake/manual/automake.html#Modernize-AM_005fINIT_005fAUTOMAKE-invocation\nEOF\n\t      $package_version = $args[2];\n\t      $package_version_location = $where;\n\t    }\n\t  elsif (defined $args[1])\n\t    {\n\t      my @opts = split (' ', $args[1]);\n\t      @opts = map { { option => $_, where => $where } } @opts;\n\t      exit $exit_code unless process_global_option_list (@opts);\n\t    }\n\t}\n      elsif ($macro eq 'AM_MAINTAINER_MODE')\n\t{\n\t  $seen_maint_mode = $where;\n\t}\n      elsif ($macro eq 'AM_PROG_AR')\n\t{\n\t  $seen_ar = $where;\n\t}\n      elsif ($macro eq '_AM_COND_IF')\n        {\n\t  cond_stack_if ('', $args[1], $where);\n\t  error ($where, \"missing m4 quoting, macro depth $depth\")\n\t    if ($depth != 1);\n\t}\n      elsif ($macro eq '_AM_COND_ELSE')\n        {\n\t  cond_stack_else ('!', $args[1], $where);\n\t  error ($where, \"missing m4 quoting, macro depth $depth\")\n\t    if ($depth != 1);\n\t}\n      elsif ($macro eq '_AM_COND_ENDIF')\n        {\n\t  cond_stack_endif (undef, undef, $where);\n\t  error ($where, \"missing m4 quoting, macro depth $depth\")\n\t    if ($depth != 1);\n\t}\n      elsif ($macro eq '_AM_SUBST_NOTMAKE')\n\t{\n\t  $ignored_configure_vars{$args[1]} = $where;\n\t}\n      elsif ($macro eq 'm4_include'\n\t     || $macro eq 'm4_sinclude'\n\t     || $macro eq 'sinclude')\n\t{\n\t  # Skip missing 'sinclude'd files.\n\t  next if $macro ne 'm4_include' && ! -f $args[1];\n\n\t  # Some modified versions of Autoconf don't use\n\t  # frozen files.  Consequently it's possible that we see all\n\t  # m4_include's performed during Autoconf's startup.\n\t  # Obviously we don't want to distribute Autoconf's files\n\t  # so we skip absolute filenames here.\n\t  push @configure_deps, '$(top_srcdir)/' . $args[1]\n\t    unless $here =~ m,^(?:\\w:)?[\\\\/],;\n\t  # Keep track of the greatest timestamp.\n\t  if (-e $args[1])\n\t    {\n\t      my $mtime = mtime $args[1];\n\t      $configure_deps_greatest_timestamp = $mtime\n\t\tif $mtime > $configure_deps_greatest_timestamp;\n\t    }\n\t}\n      elsif ($macro eq 'LT_SUPPORTED_TAG')\n\t{\n\t  $libtool_tags{$args[1]} = 1;\n\t  $libtool_new_api = 1;\n\t}\n      elsif ($macro eq '_LT_AC_TAGCONFIG')\n\t{\n\t  # _LT_AC_TAGCONFIG is an old macro present in Libtool 1.5.\n\t  # We use it to detect whether tags are supported.  Our\n\t  # preferred interface is LT_SUPPORTED_TAG, but it was\n\t  # introduced in Libtool 1.6.\n\t  if (0 == keys %libtool_tags)\n\t    {\n\t      # Hardcode the tags supported by Libtool 1.5.\n\t      %libtool_tags = (CC => 1, CXX => 1, GCJ => 1, F77 => 1);\n\t    }\n\t}\n    }\n\n  error ($where, \"condition stack not properly closed\")\n    if (@cond_stack);\n\n  $tracefh->close;\n}\n\n\n# Check whether we use 'configure.ac' or 'configure.in'.\n# Scan it (and possibly 'aclocal.m4') for interesting things.\n# We must scan aclocal.m4 because there might be AC_SUBSTs and such there.\nsub scan_autoconf_files ()\n{\n  # Reinitialize libsources here.  This isn't really necessary,\n  # since we currently assume there is only one configure.ac.  But\n  # that won't always be the case.\n  %libsources = ();\n\n  # Keep track of the youngest configure dependency.\n  $configure_deps_greatest_timestamp = mtime $configure_ac;\n  if (-e 'aclocal.m4')\n    {\n      my $mtime = mtime 'aclocal.m4';\n      $configure_deps_greatest_timestamp = $mtime\n\tif $mtime > $configure_deps_greatest_timestamp;\n    }\n\n  scan_autoconf_traces ($configure_ac);\n\n  @configure_input_files = sort keys %make_list;\n  # Set input and output files if not specified by user.\n  if (! @input_files)\n    {\n      @input_files = @configure_input_files;\n      %output_files = %make_list;\n    }\n\n\n  if (! $seen_init_automake)\n    {\n      err_ac (\"no proper invocation of AM_INIT_AUTOMAKE was found.\\nYou \"\n\t      . \"should verify that $configure_ac invokes AM_INIT_AUTOMAKE,\"\n\t      . \"\\nthat aclocal.m4 is present in the top-level directory,\\n\"\n\t      . \"and that aclocal.m4 was recently regenerated \"\n\t      . \"(using aclocal)\");\n    }\n  else\n    {\n      if (! $seen_automake_version)\n\t{\n\t  if (-f 'aclocal.m4')\n\t    {\n\t      error ($seen_init_automake,\n\t\t     \"your implementation of AM_INIT_AUTOMAKE comes from \" .\n\t\t     \"an\\nold Automake version.  You should recreate \" .\n\t\t     \"aclocal.m4\\nwith aclocal and run automake again\",\n\t\t     # $? = 63 is used to indicate version mismatch to missing.\n\t\t     exit_code => 63);\n\t    }\n\t  else\n\t    {\n\t      error ($seen_init_automake,\n\t\t     \"no proper implementation of AM_INIT_AUTOMAKE was \" .\n\t\t     \"found,\\nprobably because aclocal.m4 is missing.\\n\" .\n\t\t     \"You should run aclocal to create this file, then\\n\" .\n\t\t     \"run automake again\");\n\t    }\n\t}\n    }\n\n  locate_aux_dir ();\n\n  # Look for some files we need.  Always check for these.  This\n  # check must be done for every run, even those where we are only\n  # looking at a subdir Makefile.  We must set relative_dir for\n  # push_required_file to work.\n  # Sort the files for stable verbose output.\n  $relative_dir = '.';\n  foreach my $file (sort keys %required_aux_file)\n    {\n      require_conf_file ($required_aux_file{$file}->get, FOREIGN, $file)\n    }\n  err_am \"'install.sh' is an anachronism; use 'install-sh' instead\"\n    if -f $config_aux_dir . '/install.sh';\n\n  # Preserve dist_common for later.\n  @configure_dist_common = @dist_common;\n}\n\n################################################################\n\n# Do any extra checking for GNU standards.\nsub check_gnu_standards ()\n{\n  if ($relative_dir eq '.')\n    {\n      # In top level (or only) directory.\n      require_file (\"$am_file.am\", GNU,\n\t\t    qw/INSTALL NEWS README AUTHORS ChangeLog/);\n\n      # Accept one of these three licenses; default to COPYING.\n      # Make sure we do not overwrite an existing license.\n      my $license;\n      foreach (qw /COPYING COPYING.LIB COPYING.LESSER/)\n\t{\n\t  if (-f $_)\n\t    {\n\t      $license = $_;\n\t      last;\n\t    }\n\t}\n      require_file (\"$am_file.am\", GNU, 'COPYING')\n\tunless $license;\n    }\n\n  for my $opt ('no-installman', 'no-installinfo')\n    {\n      msg ('error-gnu', option $opt,\n\t   \"option '$opt' disallowed by GNU standards\")\n\tif option $opt;\n    }\n}\n\n# Do any extra checking for GNITS standards.\nsub check_gnits_standards ()\n{\n  if ($relative_dir eq '.')\n    {\n      # In top level (or only) directory.\n      require_file (\"$am_file.am\", GNITS, 'THANKS');\n    }\n}\n\n################################################################\n#\n# Functions to handle files of each language.\n\n# Each 'lang_X_rewrite($DIRECTORY, $BASE, $EXT)' function follows a\n# simple formula: Return value is LANG_SUBDIR if the resulting object\n# file should be in a subdir if the source file is, LANG_PROCESS if\n# file is to be dealt with, LANG_IGNORE otherwise.\n\n# Much of the actual processing is handled in\n# handle_single_transform.  These functions exist so that\n# auxiliary information can be recorded for a later cleanup pass.\n# Note that the calls to these functions are computed, so don't bother\n# searching for their precise names in the source.\n\n# This is just a convenience function that can be used to determine\n# when a subdir object should be used.\nsub lang_sub_obj ()\n{\n    return option 'subdir-objects' ? LANG_SUBDIR : LANG_PROCESS;\n}\n\n# Rewrite a single header file.\nsub lang_header_rewrite\n{\n    # Header files are simply ignored.\n    return LANG_IGNORE;\n}\n\n# Rewrite a single Vala source file.\nsub lang_vala_rewrite\n{\n    my ($directory, $base, $ext) = @_;\n\n    (my $newext = $ext) =~ s/vala$/c/;\n    return (LANG_SUBDIR, $newext);\n}\n\n# Rewrite a single yacc/yacc++ file.\nsub lang_yacc_rewrite\n{\n    my ($directory, $base, $ext) = @_;\n\n    my $r = lang_sub_obj;\n    (my $newext = $ext) =~ tr/y/c/;\n    return ($r, $newext);\n}\nsub lang_yaccxx_rewrite { lang_yacc_rewrite (@_); };\n\n# Rewrite a single lex/lex++ file.\nsub lang_lex_rewrite\n{\n    my ($directory, $base, $ext) = @_;\n\n    my $r = lang_sub_obj;\n    (my $newext = $ext) =~ tr/l/c/;\n    return ($r, $newext);\n}\nsub lang_lexxx_rewrite { lang_lex_rewrite (@_); };\n\n# Rewrite a single Java file.\nsub lang_java_rewrite\n{\n    return LANG_SUBDIR;\n}\n\n# The lang_X_finish functions are called after all source file\n# processing is done.  Each should handle defining rules for the\n# language, etc.  A finish function is only called if a source file of\n# the appropriate type has been seen.\n\nsub lang_vala_finish_target\n{\n  my ($self, $name) = @_;\n\n  my $derived = canonicalize ($name);\n  my $var = var \"${derived}_SOURCES\";\n  return unless $var;\n\n  my @vala_sources = grep { /\\.(vala|vapi)$/ } ($var->value_as_list_recursive);\n\n  # For automake bug#11229.\n  return unless @vala_sources;\n\n  foreach my $vala_file (@vala_sources)\n    {\n      my $c_file = $vala_file;\n      if ($c_file =~ s/(.*)\\.vala$/$1.c/)\n        {\n          my $built_c_file = \"\\$(builddir)/$c_file\";\n          my $built_dir = dirname $built_c_file;\n          my $base_c_file = basename $c_file;\n          $output_rules .= \"$built_c_file: \\$(builddir)/${derived}_vala.stamp\\n\"\n            . \"\\t\\@if test ! -f \\$@ && test \\$(srcdir) != \\$(builddir) && test -n \\\"\\$\\$(find -L \\$(srcdir)/$c_file -prune -newer \\$(srcdir)/$vala_file)\\\"; then cp -p \\$(srcdir)/$c_file $built_c_file; fi\\n\"\n            . \"\\t\\@if test -f \\$@; then :; else rm -f \\$(builddir)/${derived}_vala.stamp; fi\\n\"\n            . \"\\t\\@if test -f \\$@; then :; else \\\\\\n\"\n            . \"\\t  \\$(MAKE) \\$(AM_MAKEFLAGS) \\$(builddir)/${derived}_vala.stamp; \\\\\\n\"\n            . \"\\t  if test $built_dir != .; then mv $base_c_file $built_dir/; fi \\\\\\n\"\n            . \"\\tfi\\n\";\n\t  $clean_files{$built_c_file} = DIST_CLEAN;\n\t  $clean_files{\"\\$(srcdir)/$c_file\"} = MAINTAINER_CLEAN;\n        }\n    }\n\n  # Add rebuild rules for generated header and vapi files\n  my $flags = var ($derived . '_VALAFLAGS');\n  if ($flags)\n    {\n      my $lastflag = '';\n      foreach my $flag ($flags->value_as_list_recursive)\n\t{\n\t  if (grep (/^$lastflag$/, ('-H', '-h', '--header', '--internal-header',\n\t                            '--vapi', '--internal-vapi', '--gir')))\n\t    {\n\t      my $headerfile = \"\\$(builddir)/$flag\";\n\t      $output_rules .= \"$headerfile: \\$(builddir)/${derived}_vala.stamp\\n\"\n\t\t. \"\\t\\@if test -f \\$@; then :; else rm -f \\$(builddir)/${derived}_vala.stamp; fi\\n\"\n\t\t. \"\\t\\@if test -f \\$@; then :; else \\\\\\n\"\n\t\t. \"\\t  \\$(MAKE) \\$(AM_MAKEFLAGS) \\$(builddir)/${derived}_vala.stamp; \\\\\\n\"\n\t\t. \"\\tfi\\n\";\n\n\t      # valac is not used when building from dist tarballs\n\t      # distribute the generated files\n\t      push_dist_common ($headerfile);\n\t      $clean_files{$headerfile} = MAINTAINER_CLEAN;\n\t    }\n\t  if (grep (/$lastflag/, ('--library')))\n\t    {\n\t      my $headerfile = \"\\$(builddir)/$flag\";\n\t      $output_rules .= \"$headerfile.vapi: \\$(builddir)/${derived}_vala.stamp\\n\"\n\t\t. \"\\t\\@if test -f \\$@; then :; else rm -f \\$(builddir)/${derived}_vala.stamp; fi\\n\"\n\t\t. \"\\t\\@if test -f \\$@; then :; else \\\\\\n\"\n\t\t. \"\\t  \\$(MAKE) \\$(AM_MAKEFLAGS) \\$(builddir)/${derived}_vala.stamp; \\\\\\n\"\n\t\t. \"\\tfi\\n\";\n\n\t      # valac is not used when building from dist tarballs\n\t      # distribute the generated files\n\t      my $vapi = \"$headerfile.vapi\";\n\t      push_dist_common ($vapi);\n\t      $clean_files{$headerfile.'.vapi'} = MAINTAINER_CLEAN;\n\t    }\n\t  $lastflag = $flag;\n\t}\n    }\n\n  my $compile = $self->compile;\n\n  # Rewrite each occurrence of 'AM_VALAFLAGS' in the compile\n  # rule into '${derived}_VALAFLAGS' if it exists.\n  my $val = \"${derived}_VALAFLAGS\";\n  $compile =~ s/\\(AM_VALAFLAGS\\)/\\($val\\)/\n    if set_seen ($val);\n\n  # VALAFLAGS is a user variable (per GNU Standards),\n  # it should not be overridden in the Makefile...\n  check_user_variables 'VALAFLAGS';\n\n  my $dirname = dirname ($name);\n\n  # Only generate C code, do not run C compiler\n  $compile .= \" -C\";\n\n  my $verbose = verbose_flag ('VALAC');\n  my $silent = silent_flag ();\n  my $stampfile = \"\\$(builddir)/${derived}_vala.stamp\";\n\n  $output_rules .=\n    \"\\$(builddir)/${derived}_vala.stamp: @vala_sources\\n\".\n# Since the C files generated from the vala sources depend on the\n# ${derived}_vala.stamp file, we must ensure its timestamp is older than\n# those of the C files generated by the valac invocation below (this is\n# especially important on systems with sub-second timestamp resolution).\n# Thus we need to create the stamp file *before* invoking valac, and to\n# move it to its final location only after valac has been invoked.\n    \"\\t${silent}rm -f \\$\\@ && echo stamp > \\$\\@-t\\n\".\n    \"\\t${verbose}$compile \\$^\\n\".\n    \"\\t${silent}mv -f \\$\\@-t \\$\\@\\n\";\n\n  push_dist_common ($stampfile);\n\n  $clean_files{$stampfile} = MAINTAINER_CLEAN;\n}\n\n# Add output rules to invoke valac and create stamp file as a witness\n# to handle multiple outputs. This function is called after all source\n# file processing is done.\nsub lang_vala_finish ()\n{\n  my ($self) = @_;\n\n  foreach my $prog (keys %known_programs)\n    {\n      lang_vala_finish_target ($self, $prog);\n    }\n\n  while (my ($name) = each %known_libraries)\n    {\n      lang_vala_finish_target ($self, $name);\n    }\n}\n\n# The built .c files should be cleaned only on maintainer-clean\n# as the .c files are distributed. This function is called for each\n# .vala source file.\nsub lang_vala_target_hook\n{\n  my ($self, $aggregate, $output, $input, %transform) = @_;\n\n  $clean_files{$output} = MAINTAINER_CLEAN;\n}\n\n# This is a yacc helper which is called whenever we have decided to\n# compile a yacc file.\nsub lang_yacc_target_hook\n{\n    my ($self, $aggregate, $output, $input, %transform) = @_;\n\n    # If some relevant *YFLAGS variable contains the '-d' flag, we'll\n    # have to to generate special code.\n    my $yflags_contains_minus_d = 0;\n\n    foreach my $pfx (\"\", \"${aggregate}_\")\n      {\n\tmy $yflagsvar = var (\"${pfx}YFLAGS\");\n\tnext unless $yflagsvar;\n\t# We cannot work reliably with conditionally-defined YFLAGS.\n\tif ($yflagsvar->has_conditional_contents)\n\t  {\n\t    msg_var ('unsupported', $yflagsvar,\n\t             \"'${pfx}YFLAGS' cannot have conditional contents\");\n\t  }\n\telse\n\t  {\n\t    $yflags_contains_minus_d = 1\n\t      if grep (/^-d$/, $yflagsvar->value_as_list_recursive);\n\t  }\n      }\n\n    if ($yflags_contains_minus_d)\n      {\n\t# Found a '-d' that applies to the compilation of this file.\n\t# Add a dependency for the generated header file, and arrange\n\t# for that file to be included in the distribution.\n\n\t# The extension of the output file (e.g., '.c' or '.cxx').\n\t# We'll need it to compute the name of the generated header file.\n\t(my $output_ext = basename ($output)) =~ s/.*(\\.[^.]+)$/$1/;\n\n\t# We know that a yacc input should be turned into either a C or\n\t# C++ output file.  We depend on this fact (here and in yacc.am),\n\t# so check that it really holds.\n\tmy $lang = $languages{$extension_map{$output_ext}};\n\tprog_error \"invalid output name '$output' for yacc file '$input'\"\n\t  if (!$lang || ($lang->name ne 'c' && $lang->name ne 'cxx'));\n\n\t(my $header_ext = $output_ext) =~ s/c/h/g;\n        # Quote $output_ext in the regexp, so that dots in it are taken\n        # as literal dots, not as metacharacters.\n\t(my $header = $output) =~ s/\\Q$output_ext\\E$/$header_ext/;\n\n\tforeach my $cond (Automake::Rule::define (${header}, 'internal',\n\t\t\t\t\t\t  RULE_AUTOMAKE, TRUE,\n\t\t\t\t\t\t  INTERNAL))\n\t  {\n\t    my $condstr = $cond->subst_string;\n\t    $output_rules .=\n\t      \"$condstr${header}: $output\\n\"\n\t      # Recover from removal of $header\n\t      . \"$condstr\\t\\@if test ! -f \\$@; then rm -f $output; else :; fi\\n\"\n\t      . \"$condstr\\t\\@if test ! -f \\$@; then \\$(MAKE) \\$(AM_MAKEFLAGS) $output; else :; fi\\n\";\n\t  }\n\t# Distribute the generated file, unless its .y source was\n\t# listed in a nodist_ variable.  (handle_source_transform()\n\t# will set DIST_SOURCE.)\n\tpush_dist_common ($header)\n\t  if $transform{'DIST_SOURCE'};\n\n\t# The GNU rules say that yacc/lex output files should be removed\n\t# by maintainer-clean.  However, if the files are not distributed,\n\t# then we want to remove them with \"make clean\"; otherwise,\n\t# \"make distcheck\" will fail.\n\t$clean_files{$header} = $transform{'DIST_SOURCE'} ? MAINTAINER_CLEAN : CLEAN;\n      }\n    # See the comment above for $HEADER.\n    $clean_files{$output} = $transform{'DIST_SOURCE'} ? MAINTAINER_CLEAN : CLEAN;\n}\n\n# This is a lex helper which is called whenever we have decided to\n# compile a lex file.\nsub lang_lex_target_hook\n{\n    my ($self, $aggregate, $output, $input, %transform) = @_;\n    # The GNU rules say that yacc/lex output files should be removed\n    # by maintainer-clean.  However, if the files are not distributed,\n    # then we want to remove them with \"make clean\"; otherwise,\n    # \"make distcheck\" will fail.\n    $clean_files{$output} = $transform{'DIST_SOURCE'} ? MAINTAINER_CLEAN : CLEAN;\n}\n\n# This is a helper for both lex and yacc.\nsub yacc_lex_finish_helper ()\n{\n  return if defined $language_scratch{'lex-yacc-done'};\n  $language_scratch{'lex-yacc-done'} = 1;\n\n  # FIXME: for now, no line number.\n  require_conf_file ($configure_ac, FOREIGN, 'ylwrap');\n  define_variable ('YLWRAP', \"$am_config_aux_dir/ylwrap\", INTERNAL);\n}\n\nsub lang_yacc_finish ()\n{\n  return if defined $language_scratch{'yacc-done'};\n  $language_scratch{'yacc-done'} = 1;\n\n  reject_var 'YACCFLAGS', \"'YACCFLAGS' obsolete; use 'YFLAGS' instead\";\n\n  yacc_lex_finish_helper;\n}\n\n\nsub lang_lex_finish ()\n{\n  return if defined $language_scratch{'lex-done'};\n  $language_scratch{'lex-done'} = 1;\n\n  yacc_lex_finish_helper;\n}\n\n\n# Given a hash table of linker names, pick the name that has the most\n# precedence.  This is lame, but something has to have global\n# knowledge in order to eliminate the conflict.  Add more linkers as\n# required.\nsub resolve_linker\n{\n    my (%linkers) = @_;\n\n    foreach my $l (qw(GCJLINK OBJCXXLINK CXXLINK F77LINK FCLINK OBJCLINK UPCLINK))\n    {\n\treturn $l if defined $linkers{$l};\n    }\n    return 'LINK';\n}\n\n# Called to indicate that an extension was used.\nsub saw_extension\n{\n    my ($ext) = @_;\n    $extension_seen{$ext} = 1;\n}\n\n# register_language (%ATTRIBUTE)\n# ------------------------------\n# Register a single language.\n# Each %ATTRIBUTE is of the form ATTRIBUTE => VALUE.\nsub register_language\n{\n  my (%option) = @_;\n\n  # Set the defaults.\n  $option{'autodep'} = 'no'\n    unless defined $option{'autodep'};\n  $option{'linker'} = ''\n    unless defined $option{'linker'};\n  $option{'flags'} = []\n    unless defined $option{'flags'};\n  $option{'output_extensions'} = sub { return ( '.$(OBJEXT)', '.lo' ) }\n    unless defined $option{'output_extensions'};\n  $option{'nodist_specific'} = 0\n    unless defined $option{'nodist_specific'};\n\n  my $lang = new Automake::Language (%option);\n\n  # Fill indexes.\n  $extension_map{$_} = $lang->name foreach @{$lang->extensions};\n  $languages{$lang->name} = $lang;\n  my $link = $lang->linker;\n  if ($link)\n    {\n      if (exists $link_languages{$link})\n\t{\n\t  prog_error (\"'$link' has different definitions in \"\n\t\t      . $lang->name . \" and \" . $link_languages{$link}->name)\n\t    if $lang->link ne $link_languages{$link}->link;\n\t}\n      else\n\t{\n\t  $link_languages{$link} = $lang;\n\t}\n    }\n\n  # Update the pattern of known extensions.\n  accept_extensions (@{$lang->extensions});\n\n  # Update the suffix rules map.\n  foreach my $suffix (@{$lang->extensions})\n    {\n      foreach my $dest ($lang->output_extensions->($suffix))\n\t{\n\t  register_suffix_rule (INTERNAL, $suffix, $dest);\n\t}\n    }\n}\n\n# derive_suffix ($EXT, $OBJ)\n# --------------------------\n# This function is used to find a path from a user-specified suffix $EXT\n# to $OBJ or to some other suffix we recognize internally, e.g. 'cc'.\nsub derive_suffix\n{\n  my ($source_ext, $obj) = @_;\n\n  while (!$extension_map{$source_ext} && $source_ext ne $obj)\n    {\n      my $new_source_ext = next_in_suffix_chain ($source_ext, $obj);\n      last if not defined $new_source_ext;\n      $source_ext = $new_source_ext;\n    }\n\n  return $source_ext;\n}\n\n\n# Pretty-print something and append to '$output_rules'.\nsub pretty_print_rule\n{\n    $output_rules .= makefile_wrap (shift, shift, @_);\n}\n\n\n################################################################\n\n\n## -------------------------------- ##\n## Handling the conditional stack.  ##\n## -------------------------------- ##\n\n\n# $STRING\n# make_conditional_string ($NEGATE, $COND)\n# ----------------------------------------\nsub make_conditional_string\n{\n  my ($negate, $cond) = @_;\n  $cond = \"${cond}_TRUE\"\n    unless $cond =~ /^TRUE|FALSE$/;\n  $cond = Automake::Condition::conditional_negate ($cond)\n    if $negate;\n  return $cond;\n}\n\n\nmy %_am_macro_for_cond =\n  (\n  AMDEP => \"one of the compiler tests\\n\"\n\t   . \"    AC_PROG_CC, AC_PROG_CXX, AC_PROG_OBJC, AC_PROG_OBJCXX,\\n\"\n\t   . \"    AM_PROG_AS, AM_PROG_GCJ, AM_PROG_UPC\",\n  am__fastdepCC => 'AC_PROG_CC',\n  am__fastdepCCAS => 'AM_PROG_AS',\n  am__fastdepCXX => 'AC_PROG_CXX',\n  am__fastdepGCJ => 'AM_PROG_GCJ',\n  am__fastdepOBJC => 'AC_PROG_OBJC',\n  am__fastdepOBJCXX => 'AC_PROG_OBJCXX',\n  am__fastdepUPC => 'AM_PROG_UPC'\n  );\n\n# $COND\n# cond_stack_if ($NEGATE, $COND, $WHERE)\n# --------------------------------------\nsub cond_stack_if\n{\n  my ($negate, $cond, $where) = @_;\n\n  if (! $configure_cond{$cond} && $cond !~ /^TRUE|FALSE$/)\n    {\n      my $text = \"$cond does not appear in AM_CONDITIONAL\";\n      my $scope = US_LOCAL;\n      if (exists $_am_macro_for_cond{$cond})\n\t{\n\t  my $mac = $_am_macro_for_cond{$cond};\n\t  $text .= \"\\n  The usual way to define '$cond' is to add \";\n\t  $text .= ($mac =~ / /) ? $mac : \"'$mac'\";\n\t  $text .= \"\\n  to '$configure_ac' and run 'aclocal' and 'autoconf' again\";\n\t  # These warnings appear in Automake files (depend2.am),\n\t  # so there is no need to display them more than once:\n\t  $scope = US_GLOBAL;\n\t}\n      error $where, $text, uniq_scope => $scope;\n    }\n\n  push (@cond_stack, make_conditional_string ($negate, $cond));\n\n  return new Automake::Condition (@cond_stack);\n}\n\n\n# $COND\n# cond_stack_else ($NEGATE, $COND, $WHERE)\n# ----------------------------------------\nsub cond_stack_else\n{\n  my ($negate, $cond, $where) = @_;\n\n  if (! @cond_stack)\n    {\n      error $where, \"else without if\";\n      return FALSE;\n    }\n\n  $cond_stack[$#cond_stack] =\n    Automake::Condition::conditional_negate ($cond_stack[$#cond_stack]);\n\n  # If $COND is given, check against it.\n  if (defined $cond)\n    {\n      $cond = make_conditional_string ($negate, $cond);\n\n      error ($where, \"else reminder ($negate$cond) incompatible with \"\n\t     . \"current conditional: $cond_stack[$#cond_stack]\")\n\tif $cond_stack[$#cond_stack] ne $cond;\n    }\n\n  return new Automake::Condition (@cond_stack);\n}\n\n\n# $COND\n# cond_stack_endif ($NEGATE, $COND, $WHERE)\n# -----------------------------------------\nsub cond_stack_endif\n{\n  my ($negate, $cond, $where) = @_;\n  my $old_cond;\n\n  if (! @cond_stack)\n    {\n      error $where, \"endif without if\";\n      return TRUE;\n    }\n\n  # If $COND is given, check against it.\n  if (defined $cond)\n    {\n      $cond = make_conditional_string ($negate, $cond);\n\n      error ($where, \"endif reminder ($negate$cond) incompatible with \"\n\t     . \"current conditional: $cond_stack[$#cond_stack]\")\n\tif $cond_stack[$#cond_stack] ne $cond;\n    }\n\n  pop @cond_stack;\n\n  return new Automake::Condition (@cond_stack);\n}\n\n\n\n\n\n## ------------------------ ##\n## Handling the variables.  ##\n## ------------------------ ##\n\n\n# define_pretty_variable ($VAR, $COND, $WHERE, @VALUE)\n# ----------------------------------------------------\n# Like define_variable, but the value is a list, and the variable may\n# be defined conditionally.  The second argument is the condition\n# under which the value should be defined; this should be the empty\n# string to define the variable unconditionally.  The third argument\n# is a list holding the values to use for the variable.  The value is\n# pretty printed in the output file.\nsub define_pretty_variable\n{\n    my ($var, $cond, $where, @value) = @_;\n\n    if (! vardef ($var, $cond))\n    {\n\tAutomake::Variable::define ($var, VAR_AUTOMAKE, '', $cond, \"@value\",\n\t\t\t\t    '', $where, VAR_PRETTY);\n\trvar ($var)->rdef ($cond)->set_seen;\n    }\n}\n\n\n# define_variable ($VAR, $VALUE, $WHERE)\n# --------------------------------------\n# Define a new Automake Makefile variable VAR to VALUE, but only if\n# not already defined.\nsub define_variable\n{\n    my ($var, $value, $where) = @_;\n    define_pretty_variable ($var, TRUE, $where, $value);\n}\n\n\n# define_files_variable ($VAR, \\@BASENAME, $EXTENSION, $WHERE)\n# ------------------------------------------------------------\n# Define the $VAR which content is the list of file names composed of\n# a @BASENAME and the $EXTENSION.\nsub define_files_variable ($\\@$$)\n{\n  my ($var, $basename, $extension, $where) = @_;\n  define_variable ($var,\n\t\t   join (' ', map { \"$_.$extension\" } @$basename),\n\t\t   $where);\n}\n\n\n# Like define_variable, but define a variable to be the configure\n# substitution by the same name.\nsub define_configure_variable\n{\n  my ($var) = @_;\n  # Some variables we do not want to output.  For instance it\n  # would be a bad idea to output `U = @U@` when `@U@` can be\n  # substituted as `\\`.\n  my $pretty = exists $ignored_configure_vars{$var} ? VAR_SILENT : VAR_ASIS;\n  Automake::Variable::define ($var, VAR_CONFIGURE, '', TRUE, subst ($var),\n\t\t\t      '', $configure_vars{$var}, $pretty);\n}\n\n\n# define_compiler_variable ($LANG)\n# --------------------------------\n# Define a compiler variable.  We also handle defining the 'LT'\n# version of the command when using libtool.\nsub define_compiler_variable\n{\n    my ($lang) = @_;\n\n    my ($var, $value) = ($lang->compiler, $lang->compile);\n    my $libtool_tag = '';\n    $libtool_tag = '--tag=' . $lang->libtool_tag . ' '\n      if $lang->libtool_tag && exists $libtool_tags{$lang->libtool_tag};\n    define_variable ($var, $value, INTERNAL);\n    if (var ('LIBTOOL'))\n      {\n\tmy $verbose = define_verbose_libtool ();\n\tdefine_variable (\"LT$var\",\n                         \"\\$(LIBTOOL) $verbose $libtool_tag\\$(AM_LIBTOOLFLAGS)\"\n                         . \" \\$(LIBTOOLFLAGS) --mode=compile $value\",\n                         INTERNAL);\n      }\n    define_verbose_tagvar ($lang->ccer || 'GEN');\n}\n\n\nsub define_linker_variable\n{\n    my ($lang) = @_;\n\n    my $libtool_tag = '';\n    $libtool_tag = '--tag=' . $lang->libtool_tag . ' '\n      if $lang->libtool_tag && exists $libtool_tags{$lang->libtool_tag};\n    # CCLD = $(CC).\n    define_variable ($lang->lder, $lang->ld, INTERNAL);\n    # CCLINK = $(CCLD) blah blah...\n    my $link = '';\n    if (var ('LIBTOOL'))\n      {\n\tmy $verbose = define_verbose_libtool ();\n\t$link = \"\\$(LIBTOOL) $verbose $libtool_tag\\$(AM_LIBTOOLFLAGS) \"\n\t\t. \"\\$(LIBTOOLFLAGS) --mode=link \";\n      }\n    define_variable ($lang->linker, $link . $lang->link, INTERNAL);\n    define_variable ($lang->compiler, $lang, INTERNAL);\n    define_verbose_tagvar ($lang->lder || 'GEN');\n}\n\nsub define_per_target_linker_variable\n{\n  my ($linker, $target) = @_;\n\n  # If the user wrote a custom link command, we don't define ours.\n  return \"${target}_LINK\"\n    if set_seen \"${target}_LINK\";\n\n  my $xlink = $linker ? $linker : 'LINK';\n\n  my $lang = $link_languages{$xlink};\n  prog_error \"Unknown language for linker variable '$xlink'\"\n    unless $lang;\n\n  my $link_command = $lang->link;\n  if (var 'LIBTOOL')\n    {\n      my $libtool_tag = '';\n      $libtool_tag = '--tag=' . $lang->libtool_tag . ' '\n\tif $lang->libtool_tag && exists $libtool_tags{$lang->libtool_tag};\n\n      my $verbose = define_verbose_libtool ();\n      $link_command =\n\t\"\\$(LIBTOOL) $verbose $libtool_tag\\$(AM_LIBTOOLFLAGS) \\$(LIBTOOLFLAGS) \"\n\t. \"--mode=link \" . $link_command;\n    }\n\n  # Rewrite each occurrence of 'AM_$flag' in the link\n  # command into '${derived}_$flag' if it exists.\n  my $orig_command = $link_command;\n  my @flags = (@{$lang->flags}, 'LDFLAGS');\n  push @flags, 'LIBTOOLFLAGS' if var 'LIBTOOL';\n  for my $flag (@flags)\n    {\n      my $val = \"${target}_$flag\";\n      $link_command =~ s/\\(AM_$flag\\)/\\($val\\)/\n\tif set_seen ($val);\n    }\n\n  # If the computed command is the same as the generic command, use\n  # the command linker variable.\n  return ($lang->linker, $lang->lder)\n    if $link_command eq $orig_command;\n\n  define_variable (\"${target}_LINK\", $link_command, INTERNAL);\n  return (\"${target}_LINK\", $lang->lder);\n}\n\n################################################################\n\n# check_trailing_slash ($WHERE, $LINE)\n# ------------------------------------\n# Return 1 iff $LINE ends with a slash.\n# Might modify $LINE.\nsub check_trailing_slash ($\\$)\n{\n  my ($where, $line) = @_;\n\n  # Ignore '##' lines.\n  return 0 if $$line =~ /$IGNORE_PATTERN/o;\n\n  # Catch and fix a common error.\n  msg \"syntax\", $where, \"whitespace following trailing backslash\"\n    if $$line =~ s/\\\\\\s+\\n$/\\\\\\n/;\n\n  return $$line =~ /\\\\$/;\n}\n\n\n# read_am_file ($AMFILE, $WHERE, $RELDIR)\n# ---------------------------------------\n# Read $AMFILE file name which is located in $RELDIR, and set up\n# global variables resetted by '&generate_makefile'.  Simultaneously\n# copy lines from $AMFILE into '$output_trailer', or define variables\n# as appropriate.\n#\n# NOTE: We put rules in the trailer section.  We want user rules to\n# come after our generated stuff.\nsub read_am_file\n{\n    my ($amfile, $where, $reldir) = @_;\n    my $canon_reldir = &canonicalize ($reldir);\n\n    my $am_file = new Automake::XFile (\"< $amfile\");\n    verb \"reading $amfile\";\n\n    # Keep track of the youngest output dependency.\n    my $mtime = mtime $amfile;\n    $output_deps_greatest_timestamp = $mtime\n      if $mtime > $output_deps_greatest_timestamp;\n\n    my $spacing = '';\n    my $comment = '';\n    my $blank = 0;\n    my $saw_bk = 0;\n    my $var_look = VAR_ASIS;\n\n    use constant IN_VAR_DEF => 0;\n    use constant IN_RULE_DEF => 1;\n    use constant IN_COMMENT => 2;\n    my $prev_state = IN_RULE_DEF;\n\n    while ($_ = $am_file->getline)\n    {\n\t$where->set (\"$amfile:$.\");\n\tif (/$IGNORE_PATTERN/o)\n\t{\n\t    # Merely delete comments beginning with two hashes.\n\t}\n\telsif (/$WHITE_PATTERN/o)\n\t{\n\t    error $where, \"blank line following trailing backslash\"\n\t      if $saw_bk;\n\t    # Stick a single white line before the incoming macro or rule.\n\t    $spacing = \"\\n\";\n\t    $blank = 1;\n\t    # Flush all comments seen so far.\n\t    if ($comment ne '')\n\t    {\n\t\t$output_vars .= $comment;\n\t\t$comment = '';\n\t    }\n\t}\n\telsif (/$COMMENT_PATTERN/o)\n\t{\n\t    # Stick comments before the incoming macro or rule.  Make\n\t    # sure a blank line precedes the first block of comments.\n\t    $spacing = \"\\n\" unless $blank;\n\t    $blank = 1;\n\t    $comment .= $spacing . $_;\n\t    $spacing = '';\n\t    $prev_state = IN_COMMENT;\n\t}\n\telse\n\t{\n\t    last;\n\t}\n\t$saw_bk = check_trailing_slash ($where, $_);\n    }\n\n    # We save the conditional stack on entry, and then check to make\n    # sure it is the same on exit.  This lets us conditionally include\n    # other files.\n    my @saved_cond_stack = @cond_stack;\n    my $cond = new Automake::Condition (@cond_stack);\n\n    my $last_var_name = '';\n    my $last_var_type = '';\n    my $last_var_value = '';\n    my $last_where;\n    # FIXME: shouldn't use $_ in this loop; it is too big.\n    while ($_)\n    {\n\t$where->set (\"$amfile:$.\");\n\n\t# Make sure the line is \\n-terminated.\n\tchomp;\n\t$_ .= \"\\n\";\n\n\t# Don't look at MAINTAINER_MODE_TRUE here.  That shouldn't be\n\t# used by users.  @MAINT@ is an anachronism now.\n\t$_ =~ s/\\@MAINT\\@//g\n\t    unless $seen_maint_mode;\n\n\tmy $new_saw_bk = check_trailing_slash ($where, $_);\n\n\tif ($reldir eq '.')\n\t  {\n\t    # If present, eat the following '_' or '/', converting\n\t    # \"%reldir%/foo\" and \"%canon_reldir%_foo\" into plain \"foo\"\n\t    # when $reldir is '.'.\n\t    $_ =~ s,%(D|reldir)%/,,g;\n\t    $_ =~ s,%(C|canon_reldir)%_,,g;\n\t  }\n\t$_ =~ s/%(D|reldir)%/${reldir}/g;\n\t$_ =~ s/%(C|canon_reldir)%/${canon_reldir}/g;\n\n\tif (/$IGNORE_PATTERN/o)\n\t{\n\t    # Merely delete comments beginning with two hashes.\n\n\t    # Keep any backslash from the previous line.\n\t    $new_saw_bk = $saw_bk;\n\t}\n\telsif (/$WHITE_PATTERN/o)\n\t{\n\t    # Stick a single white line before the incoming macro or rule.\n\t    $spacing = \"\\n\";\n\t    error $where, \"blank line following trailing backslash\"\n\t      if $saw_bk;\n\t}\n\telsif (/$COMMENT_PATTERN/o)\n\t{\n\t    error $where, \"comment following trailing backslash\"\n\t      if $saw_bk && $prev_state != IN_COMMENT;\n\n\t    # Stick comments before the incoming macro or rule.\n\t    $comment .= $spacing . $_;\n\t    $spacing = '';\n\t    $prev_state = IN_COMMENT;\n\t}\n\telsif ($saw_bk)\n\t{\n\t    if ($prev_state == IN_RULE_DEF)\n\t    {\n\t      my $cond = new Automake::Condition @cond_stack;\n\t      $output_trailer .= $cond->subst_string;\n\t      $output_trailer .= $_;\n\t    }\n\t    elsif ($prev_state == IN_COMMENT)\n\t    {\n\t\t# If the line doesn't start with a '#', add it.\n\t\t# We do this because a continued comment like\n\t\t#   # A = foo \\\n\t\t#         bar \\\n\t\t#         baz\n\t\t# is not portable.  BSD make doesn't honor\n\t\t# escaped newlines in comments.\n\t\ts/^#?/#/;\n\t\t$comment .= $spacing . $_;\n\t    }\n\t    else # $prev_state == IN_VAR_DEF\n\t    {\n\t      $last_var_value .= ' '\n\t\tunless $last_var_value =~ /\\s$/;\n\t      $last_var_value .= $_;\n\n\t      if (!/\\\\$/)\n\t\t{\n\t\t  Automake::Variable::define ($last_var_name, VAR_MAKEFILE,\n\t\t\t\t\t      $last_var_type, $cond,\n\t\t\t\t\t      $last_var_value, $comment,\n\t\t\t\t\t      $last_where, VAR_ASIS)\n\t\t    if $cond != FALSE;\n\t\t  $comment = $spacing = '';\n\t\t}\n\t    }\n\t}\n\n\telsif (/$IF_PATTERN/o)\n\t  {\n\t    $cond = cond_stack_if ($1, $2, $where);\n\t  }\n\telsif (/$ELSE_PATTERN/o)\n\t  {\n\t    $cond = cond_stack_else ($1, $2, $where);\n\t  }\n\telsif (/$ENDIF_PATTERN/o)\n\t  {\n\t    $cond = cond_stack_endif ($1, $2, $where);\n\t  }\n\n\telsif (/$RULE_PATTERN/o)\n\t{\n\t    # Found a rule.\n\t    $prev_state = IN_RULE_DEF;\n\n\t    # For now we have to output all definitions of user rules\n\t    # and can't diagnose duplicates (see the comment in\n\t    # Automake::Rule::define). So we go on and ignore the return value.\n\t    Automake::Rule::define ($1, $amfile, RULE_USER, $cond, $where);\n\n\t    check_variable_expansions ($_, $where);\n\n\t    $output_trailer .= $comment . $spacing;\n\t    my $cond = new Automake::Condition @cond_stack;\n\t    $output_trailer .= $cond->subst_string;\n\t    $output_trailer .= $_;\n\t    $comment = $spacing = '';\n\t}\n\telsif (/$ASSIGNMENT_PATTERN/o)\n\t{\n\t    # Found a macro definition.\n\t    $prev_state = IN_VAR_DEF;\n\t    $last_var_name = $1;\n\t    $last_var_type = $2;\n\t    $last_var_value = $3;\n\t    $last_where = $where->clone;\n\t    if ($3 ne '' && substr ($3, -1) eq \"\\\\\")\n\t      {\n\t\t# We preserve the '\\' because otherwise the long lines\n\t\t# that are generated will be truncated by broken\n\t\t# 'sed's.\n\t\t$last_var_value = $3 . \"\\n\";\n\t      }\n\t    # Normally we try to output variable definitions in the\n\t    # same format they were input.  However, POSIX compliant\n\t    # systems are not required to support lines longer than\n\t    # 2048 bytes (most notably, some sed implementation are\n\t    # limited to 4000 bytes, and sed is used by config.status\n\t    # to rewrite Makefile.in into Makefile).  Moreover nobody\n\t    # would really write such long lines by hand since it is\n\t    # hardly maintainable.  So if a line is longer that 1000\n\t    # bytes (an arbitrary limit), assume it has been\n\t    # automatically generated by some tools, and flatten the\n\t    # variable definition.  Otherwise, keep the variable as it\n\t    # as been input.\n\t    $var_look = VAR_PRETTY if length ($last_var_value) >= 1000;\n\n\t    if (!/\\\\$/)\n\t      {\n\t\tAutomake::Variable::define ($last_var_name, VAR_MAKEFILE,\n\t\t\t\t\t    $last_var_type, $cond,\n\t\t\t\t\t    $last_var_value, $comment,\n\t\t\t\t\t    $last_where, $var_look)\n\t\t  if $cond != FALSE;\n\t\t$comment = $spacing = '';\n\t\t$var_look = VAR_ASIS;\n\t      }\n\t}\n\telsif (/$INCLUDE_PATTERN/o)\n\t{\n\t    my $path = $1;\n\n\t    if ($path =~ s/^\\$\\(top_srcdir\\)\\///)\n\t      {\n\t\tpush (@include_stack, \"\\$\\(top_srcdir\\)/$path\");\n\t\t# Distribute any included file.\n\n\t\t# Always use the $(top_srcdir) prefix in DIST_COMMON,\n\t\t# otherwise OSF make will implicitly copy the included\n\t\t# file in the build tree during \"make distdir\" to satisfy\n\t\t# the dependency.\n\t\t# (subdir-am-cond.sh and subdir-ac-cond.sh will fail)\n\t\tpush_dist_common (\"\\$\\(top_srcdir\\)/$path\");\n\t      }\n\t    else\n\t      {\n\t\t$path =~ s/\\$\\(srcdir\\)\\///;\n\t\tpush (@include_stack, \"\\$\\(srcdir\\)/$path\");\n\t\t# Always use the $(srcdir) prefix in DIST_COMMON,\n\t\t# otherwise OSF make will implicitly copy the included\n\t\t# file in the build tree during \"make distdir\" to satisfy\n\t\t# the dependency.\n\t\t# (subdir-am-cond.sh and subdir-ac-cond.sh will fail)\n\t\tpush_dist_common (\"\\$\\(srcdir\\)/$path\");\n\t\t$path = $relative_dir . \"/\" . $path if $relative_dir ne '.';\n\t      }\n\t    my $new_reldir = File::Spec->abs2rel ($path, $relative_dir);\n\t    $new_reldir = '.' if $new_reldir !~ s,/[^/]*$,,;\n\t    $where->push_context (\"'$path' included from here\");\n\t    read_am_file ($path, $where, $new_reldir);\n\t    $where->pop_context;\n\t}\n\telse\n\t{\n\t    # This isn't an error; it is probably a continued rule.\n\t    # In fact, this is what we assume.\n\t    $prev_state = IN_RULE_DEF;\n\t    check_variable_expansions ($_, $where);\n\t    $output_trailer .= $comment . $spacing;\n\t    my $cond = new Automake::Condition @cond_stack;\n\t    $output_trailer .= $cond->subst_string;\n\t    $output_trailer .= $_;\n\t    $comment = $spacing = '';\n\t    error $where, \"'#' comment at start of rule is unportable\"\n\t      if $_ =~ /^\\t\\s*\\#/;\n\t}\n\n\t$saw_bk = $new_saw_bk;\n\t$_ = $am_file->getline;\n    }\n\n    $output_trailer .= $comment;\n\n    error ($where, \"trailing backslash on last line\")\n      if $saw_bk;\n\n    error ($where, (@cond_stack ? \"unterminated conditionals: @cond_stack\"\n\t\t    : \"too many conditionals closed in include file\"))\n      if \"@saved_cond_stack\" ne \"@cond_stack\";\n}\n\n\n# A helper for read_main_am_file which initializes configure variables\n# and variables from header-vars.am.\nsub define_standard_variables ()\n{\n  my $saved_output_vars = $output_vars;\n  my ($comments, undef, $rules) =\n    file_contents_internal (1, \"$libdir/am/header-vars.am\",\n\t\t\t    new Automake::Location);\n\n  foreach my $var (sort keys %configure_vars)\n    {\n      define_configure_variable ($var);\n    }\n\n  $output_vars .= $comments . $rules;\n}\n\n\n# read_main_am_file ($MAKEFILE_AM, $MAKEFILE_IN)\n# ----------------------------------------------\nsub read_main_am_file\n{\n    my ($amfile, $infile) = @_;\n\n    # This supports the strange variable tricks we are about to play.\n    prog_error (\"variable defined before read_main_am_file\\n\" . variables_dump ())\n      if (scalar (variables) > 0);\n\n    # Generate copyright header for generated Makefile.in.\n    # We do discard the output of predefined variables, handled below.\n    $output_vars = (\"# \" . basename ($infile) . \" generated by automake \"\n\t\t   . $VERSION . \" from \" . basename ($amfile) . \".\\n\");\n    $output_vars .= '# ' . subst ('configure_input') . \"\\n\";\n    $output_vars .= $gen_copyright;\n\n    # We want to predefine as many variables as possible.  This lets\n    # the user set them with '+=' in Makefile.am.\n    define_standard_variables;\n\n    # Read user file, which might override some of our values.\n    read_am_file ($amfile, new Automake::Location, '.');\n}\n\n\n\n################################################################\n\n# $STRING\n# flatten ($ORIGINAL_STRING)\n# --------------------------\nsub flatten\n{\n  $_ = shift;\n\n  s/\\\\\\n//somg;\n  s/\\s+/ /g;\n  s/^ //;\n  s/ $//;\n\n  return $_;\n}\n\n\n# transform_token ($TOKEN, \\%PAIRS, $KEY)\n# ---------------------------------------\n# Return the value associated to $KEY in %PAIRS, as used on $TOKEN\n# (which should be ?KEY? or any of the special %% requests)..\nsub transform_token ($\\%$)\n{\n  my ($token, $transform, $key) = @_;\n  my $res = $transform->{$key};\n  prog_error \"Unknown key '$key' in '$token'\" unless defined $res;\n  return $res;\n}\n\n\n# transform ($TOKEN, \\%PAIRS)\n# ---------------------------\n# If ($TOKEN, $VAL) is in %PAIRS:\n#   - replaces %KEY% with $VAL,\n#   - enables/disables ?KEY? and ?!KEY?,\n#   - replaces %?KEY% with TRUE or FALSE.\nsub transform ($\\%)\n{\n  my ($token, $transform) = @_;\n\n  # %KEY%.\n  # Must be before the following pattern to exclude the case\n  # when there is neither IFTRUE nor IFFALSE.\n  if ($token =~ /^%([\\w\\-]+)%$/)\n    {\n      return transform_token ($token, %$transform, $1);\n    }\n  # %?KEY%.\n  elsif ($token =~ /^%\\?([\\w\\-]+)%$/)\n    {\n      return transform_token ($token, %$transform, $1) ? 'TRUE' : 'FALSE';\n    }\n  # ?KEY? and ?!KEY?.\n  elsif ($token =~ /^ \\? (!?) ([\\w\\-]+) \\? $/x)\n    {\n      my $neg = ($1 eq '!') ? 1 : 0;\n      my $val = transform_token ($token, %$transform, $2);\n      return (!!$val == $neg) ? '##%' : '';\n    }\n  else\n    {\n      prog_error \"Unknown request format: $token\";\n    }\n}\n\n# $TEXT\n# preprocess_file ($MAKEFILE, [%TRANSFORM])\n# -----------------------------------------\n# Load a $MAKEFILE, apply the %TRANSFORM, and return the result.\n# No extra parsing or post-processing is done (i.e., recognition of\n# rules declaration or of make variables definitions).\nsub preprocess_file\n{\n  my ($file, %transform) = @_;\n\n  # Complete %transform with global options.\n  # Note that %transform goes last, so it overrides global options.\n  %transform = ( 'MAINTAINER-MODE'\n\t\t => $seen_maint_mode ? subst ('MAINTAINER_MODE_TRUE') : '',\n\n\t\t 'XZ'          => !! option 'dist-xz',\n\t\t 'LZIP'        => !! option 'dist-lzip',\n\t\t 'BZIP2'       => !! option 'dist-bzip2',\n\t\t 'COMPRESS'    => !! option 'dist-tarZ',\n\t\t 'GZIP'        =>  ! option 'no-dist-gzip',\n\t\t 'SHAR'        => !! option 'dist-shar',\n\t\t 'ZIP'         => !! option 'dist-zip',\n\t\t 'ZSTD'        => !! option 'dist-zstd',\n\n\t\t 'INSTALL-INFO' =>  ! option 'no-installinfo',\n\t\t 'INSTALL-MAN'  =>  ! option 'no-installman',\n\t\t 'CK-NEWS'      => !! option 'check-news',\n\n\t\t 'SUBDIRS'      => !! var ('SUBDIRS'),\n\t\t 'TOPDIR_P'     => $relative_dir eq '.',\n\n\t\t 'BUILD'    => ($seen_canonical >= AC_CANONICAL_BUILD),\n\t\t 'HOST'     => ($seen_canonical >= AC_CANONICAL_HOST),\n\t\t 'TARGET'   => ($seen_canonical >= AC_CANONICAL_TARGET),\n\n\t\t 'LIBTOOL'      => !! var ('LIBTOOL'),\n\t\t 'NONLIBTOOL'   => 1,\n\t\t%transform);\n\n  if (! defined ($_ = $am_file_cache{$file}))\n    {\n      verb \"reading $file\";\n      # Swallow the whole file.\n      my $fc_file = new Automake::XFile \"< $file\";\n      my $saved_dollar_slash = $/;\n      undef $/;\n      $_ = $fc_file->getline;\n      $/ = $saved_dollar_slash;\n      $fc_file->close;\n      # Remove ##-comments.\n      # Besides we don't need more than two consecutive new-lines.\n      s/(?:$IGNORE_PATTERN|(?<=\\n\\n)\\n+)//gom;\n      # Remember the contents of the just-read file.\n      $am_file_cache{$file} = $_;\n    }\n\n  # Substitute Automake template tokens.\n  s/(?: % \\?? [\\w\\-]+ %\n      | \\? !? [\\w\\-]+ \\?\n    )/transform($&, %transform)/gex;\n  # transform() may have added some ##%-comments to strip.\n  # (we use '##%' instead of '##' so we can distinguish ##%##%##% from\n  # ####### and do not remove the latter.)\n  s/^[ \\t]*(?:##%)+.*\\n//gm;\n\n  return $_;\n}\n\n\n# @PARAGRAPHS\n# make_paragraphs ($MAKEFILE, [%TRANSFORM])\n# -----------------------------------------\n# Load a $MAKEFILE, apply the %TRANSFORM, and return it as a list of\n# paragraphs.\nsub make_paragraphs\n{\n  my ($file, %transform) = @_;\n  $transform{FIRST} = !$transformed_files{$file};\n  $transformed_files{$file} = 1;\n\n  my @lines = split /(?<!\\\\)\\n/, preprocess_file ($file, %transform);\n  my @res;\n\n  while (defined ($_ = shift @lines))\n    {\n      my $paragraph = $_;\n      # If we are a rule, eat as long as we start with a tab.\n      if (/$RULE_PATTERN/smo)\n\t{\n\t  while (defined ($_ = shift @lines) && $_ =~ /^\\t/)\n\t    {\n\t      $paragraph .= \"\\n$_\";\n\t    }\n\t  unshift (@lines, $_);\n\t}\n\n      # If we are a comments, eat as much comments as you can.\n      elsif (/$COMMENT_PATTERN/smo)\n\t{\n\t  while (defined ($_ = shift @lines)\n\t\t && $_ =~ /$COMMENT_PATTERN/smo)\n\t    {\n\t      $paragraph .= \"\\n$_\";\n\t    }\n\t  unshift (@lines, $_);\n\t}\n\n      push @res, $paragraph;\n    }\n\n  return @res;\n}\n\n\n\n# ($COMMENT, $VARIABLES, $RULES)\n# file_contents_internal ($IS_AM, $FILE, $WHERE, [%TRANSFORM])\n# ------------------------------------------------------------\n# Return contents of a file from $libdir/am, automatically skipping\n# macros or rules which are already known. $IS_AM iff the caller is\n# reading an Automake file (as opposed to the user's Makefile.am).\nsub file_contents_internal\n{\n    my ($is_am, $file, $where, %transform) = @_;\n\n    $where->set ($file);\n\n    my $result_vars = '';\n    my $result_rules = '';\n    my $comment = '';\n    my $spacing = '';\n\n    # The following flags are used to track rules spanning across\n    # multiple paragraphs.\n    my $is_rule = 0;\t\t# 1 if we are processing a rule.\n    my $discard_rule = 0;\t# 1 if the current rule should not be output.\n\n    # We save the conditional stack on entry, and then check to make\n    # sure it is the same on exit.  This lets us conditionally include\n    # other files.\n    my @saved_cond_stack = @cond_stack;\n    my $cond = new Automake::Condition (@cond_stack);\n\n    foreach (make_paragraphs ($file, %transform))\n    {\n\t# FIXME: no line number available.\n\t$where->set ($file);\n\n\t# Sanity checks.\n\terror $where, \"blank line following trailing backslash:\\n$_\"\n\t  if /\\\\$/;\n\terror $where, \"comment following trailing backslash:\\n$_\"\n\t  if /\\\\#/;\n\n\tif (/^$/)\n\t{\n\t    $is_rule = 0;\n\t    # Stick empty line before the incoming macro or rule.\n\t    $spacing = \"\\n\";\n\t}\n\telsif (/$COMMENT_PATTERN/mso)\n\t{\n\t    $is_rule = 0;\n\t    # Stick comments before the incoming macro or rule.\n\t    $comment = \"$_\\n\";\n\t}\n\n\t# Handle inclusion of other files.\n\telsif (/$INCLUDE_PATTERN/o)\n\t{\n\t    if ($cond != FALSE)\n\t      {\n\t\tmy $file = ($is_am ? \"$libdir/am/\" : '') . $1;\n\t\t$where->push_context (\"'$file' included from here\");\n\t\t# N-ary '.=' fails.\n\t\tmy ($com, $vars, $rules)\n\t\t  = file_contents_internal ($is_am, $file, $where, %transform);\n\t\t$where->pop_context;\n\t\t$comment .= $com;\n\t\t$result_vars .= $vars;\n\t\t$result_rules .= $rules;\n\t      }\n\t}\n\n\t# Handling the conditionals.\n\telsif (/$IF_PATTERN/o)\n\t  {\n\t    $cond = cond_stack_if ($1, $2, $file);\n\t  }\n\telsif (/$ELSE_PATTERN/o)\n\t  {\n\t    $cond = cond_stack_else ($1, $2, $file);\n\t  }\n\telsif (/$ENDIF_PATTERN/o)\n\t  {\n\t    $cond = cond_stack_endif ($1, $2, $file);\n\t  }\n\n\t# Handling rules.\n\telsif (/$RULE_PATTERN/mso)\n\t{\n\t  $is_rule = 1;\n\t  $discard_rule = 0;\n\t  # Separate relationship from optional actions: the first\n\t  # `new-line tab\" not preceded by backslash (continuation\n\t  # line).\n\t  my $paragraph = $_;\n\t  /^(.*?)(?:(?<!\\\\)\\n(\\t.*))?$/s;\n\t  my ($relationship, $actions) = ($1, $2 || '');\n\n\t  # Separate targets from dependencies: the first colon.\n\t  $relationship =~ /^([^:]+\\S+) *: *(.*)$/som;\n\t  my ($targets, $dependencies) = ($1, $2);\n\t  # Remove the escaped new lines.\n\t  # I don't know why, but I have to use a tmp $flat_deps.\n\t  my $flat_deps = flatten ($dependencies);\n\t  my @deps = split (' ', $flat_deps);\n\n\t  foreach (split (' ', $targets))\n\t    {\n\t      # FIXME: 1. We are not robust to people defining several targets\n\t      # at once, only some of them being in %dependencies.  The\n\t      # actions from the targets in %dependencies are usually generated\n\t      # from the content of %actions, but if some targets in $targets\n\t      # are not in %dependencies the ELSE branch will output\n\t      # a rule for all $targets (i.e. the targets which are both\n\t      # in %dependencies and $targets will have two rules).\n\n\t      # FIXME: 2. The logic here is not able to output a\n\t      # multi-paragraph rule several time (e.g. for each condition\n\t      # it is defined for) because it only knows the first paragraph.\n\n\t      # FIXME: 3. We are not robust to people defining a subset\n\t      # of a previously defined \"multiple-target\" rule.  E.g.\n\t      # 'foo:' after 'foo bar:'.\n\n\t      # Output only if not in FALSE.\n\t      if (defined $dependencies{$_} && $cond != FALSE)\n\t\t{\n\t\t  depend ($_, @deps);\n\t\t  register_action ($_, $actions);\n\t\t}\n\t      else\n\t\t{\n\t\t  # Free-lance dependency.  Output the rule for all the\n\t\t  # targets instead of one by one.\n\t\t  my @undefined_conds =\n\t\t    Automake::Rule::define ($targets, $file,\n\t\t\t\t\t    $is_am ? RULE_AUTOMAKE : RULE_USER,\n\t\t\t\t\t    $cond, $where);\n\t\t  for my $undefined_cond (@undefined_conds)\n\t\t    {\n\t\t      my $condparagraph = $paragraph;\n\t\t      $condparagraph =~ s/^/$undefined_cond->subst_string/gme;\n\t\t      $result_rules .= \"$spacing$comment$condparagraph\\n\";\n\t\t    }\n\t\t  if (scalar @undefined_conds == 0)\n\t\t    {\n\t\t      # Remember to discard next paragraphs\n\t\t      # if they belong to this rule.\n\t\t      # (but see also FIXME: #2 above.)\n\t\t      $discard_rule = 1;\n\t\t    }\n\t\t  $comment = $spacing = '';\n\t\t  last;\n\t\t}\n\t    }\n\t}\n\n\telsif (/$ASSIGNMENT_PATTERN/mso)\n\t{\n\t    my ($var, $type, $val) = ($1, $2, $3);\n\t    error $where, \"variable '$var' with trailing backslash\"\n\t      if /\\\\$/;\n\n\t    $is_rule = 0;\n\n\t    Automake::Variable::define ($var,\n\t\t\t\t\t$is_am ? VAR_AUTOMAKE : VAR_MAKEFILE,\n\t\t\t\t\t$type, $cond, $val, $comment, $where,\n\t\t\t\t\tVAR_ASIS)\n\t      if $cond != FALSE;\n\n\t    $comment = $spacing = '';\n\t}\n\telse\n\t{\n\t    # This isn't an error; it is probably some tokens which\n\t    # configure is supposed to replace, such as '@SET-MAKE@',\n\t    # or some part of a rule cut by an if/endif.\n\t    if (! $cond->false && ! ($is_rule && $discard_rule))\n\t      {\n\t\ts/^/$cond->subst_string/gme;\n\t\t$result_rules .= \"$spacing$comment$_\\n\";\n\t      }\n\t    $comment = $spacing = '';\n\t}\n    }\n\n    error ($where, @cond_stack ?\n\t   \"unterminated conditionals: @cond_stack\" :\n\t   \"too many conditionals closed in include file\")\n      if \"@saved_cond_stack\" ne \"@cond_stack\";\n\n    return ($comment, $result_vars, $result_rules);\n}\n\n\n# $CONTENTS\n# file_contents ($BASENAME, $WHERE, [%TRANSFORM])\n# -----------------------------------------------\n# Return contents of a file from $libdir/am, automatically skipping\n# macros or rules which are already known.\nsub file_contents\n{\n    my ($basename, $where, %transform) = @_;\n    my ($comments, $variables, $rules) =\n      file_contents_internal (1, \"$libdir/am/$basename.am\", $where,\n\t\t\t      %transform);\n    return \"$comments$variables$rules\";\n}\n\n\n# @PREFIX\n# am_primary_prefixes ($PRIMARY, $CAN_DIST, @PREFIXES)\n# ----------------------------------------------------\n# Find all variable prefixes that are used for install directories.  A\n# prefix 'zar' qualifies iff:\n#\n# * 'zardir' is a variable.\n# * 'zar_PRIMARY' is a variable.\n#\n# As a side effect, it looks for misspellings.  It is an error to have\n# a variable ending in a \"reserved\" suffix whose prefix is unknown, e.g.\n# \"bni_PROGRAMS\".  However, unusual prefixes are allowed if a variable\n# of the same name (with \"dir\" appended) exists.  For instance, if the\n# variable \"zardir\" is defined, then \"zar_PROGRAMS\" becomes valid.\n# This is to provide a little extra flexibility in those cases which\n# need it.\nsub am_primary_prefixes\n{\n  my ($primary, $can_dist, @prefixes) = @_;\n\n  local $_;\n  my %valid = map { $_ => 0 } @prefixes;\n  $valid{'EXTRA'} = 0;\n  foreach my $var (variables $primary)\n    {\n      # Automake is allowed to define variables that look like primaries\n      # but which aren't.  E.g. INSTALL_sh_DATA.\n      # Autoconf can also define variables like INSTALL_DATA, so\n      # ignore all configure variables (at least those which are not\n      # redefined in Makefile.am).\n      # FIXME: We should make sure that these variables are not\n      # conditionally defined (or else adjust the condition below).\n      my $def = $var->def (TRUE);\n      next if $def && $def->owner != VAR_MAKEFILE;\n\n      my $varname = $var->name;\n\n      if ($varname =~ /^(nobase_)?(dist_|nodist_)?(.*)_[[:alnum:]]+$/)\n\t{\n\t  my ($base, $dist, $X) = ($1 || '', $2 || '', $3 || '');\n\t  if ($dist ne '' && ! $can_dist)\n\t    {\n\t      err_var ($var,\n\t\t       \"invalid variable '$varname': 'dist' is forbidden\");\n\t    }\n\t  # Standard directories must be explicitly allowed.\n\t  elsif (! defined $valid{$X} && exists $standard_prefix{$X})\n\t    {\n\t      err_var ($var,\n\t\t       \"'${X}dir' is not a legitimate directory \" .\n\t\t       \"for '$primary'\");\n\t    }\n\t  # A not explicitly valid directory is allowed if Xdir is defined.\n\t  elsif (! defined $valid{$X} &&\n\t\t $var->requires_variables (\"'$varname' is used\", \"${X}dir\"))\n\t    {\n\t      # Nothing to do.  Any error message has been output\n\t      # by $var->requires_variables.\n\t    }\n\t  else\n\t    {\n\t      # Ensure all extended prefixes are actually used.\n\t      $valid{\"$base$dist$X\"} = 1;\n\t    }\n\t}\n      else\n\t{\n\t  prog_error \"unexpected variable name: $varname\";\n\t}\n    }\n\n  # Return only those which are actually defined.\n  return sort grep { var ($_ . '_' . $primary) } keys %valid;\n}\n\n\n# am_install_var (-OPTION..., file, HOW, where...)\n# ------------------------------------------------\n#\n# Handle 'where_HOW' variable magic.  Does all lookups, generates\n# install code, and possibly generates code to define the primary\n# variable.  The first argument is the name of the .am file to munge,\n# the second argument is the primary variable (e.g. HEADERS), and all\n# subsequent arguments are possible installation locations.\n#\n# Returns list of [$location, $value] pairs, where\n# $value's are the values in all where_HOW variable, and $location\n# there associated location (the place here their parent variables were\n# defined).\n#\n# FIXME: this should be rewritten to be cleaner.  It should be broken\n# up into multiple functions.\n#\nsub am_install_var\n{\n  my (@args) = @_;\n\n  my $do_require = 1;\n  my $can_dist = 0;\n  my $default_dist = 0;\n  while (@args)\n    {\n      if ($args[0] eq '-noextra')\n\t{\n\t  $do_require = 0;\n\t}\n      elsif ($args[0] eq '-candist')\n\t{\n\t  $can_dist = 1;\n\t}\n      elsif ($args[0] eq '-defaultdist')\n\t{\n\t  $default_dist = 1;\n\t  $can_dist = 1;\n\t}\n      elsif ($args[0] !~ /^-/)\n\t{\n\t  last;\n\t}\n      shift (@args);\n    }\n\n  my ($file, $primary, @prefix) = @args;\n\n  # Now that configure substitutions are allowed in where_HOW\n  # variables, it is an error to actually define the primary.  We\n  # allow 'JAVA', as it is customarily used to mean the Java\n  # interpreter.  This is but one of several Java hacks.  Similarly,\n  # 'PYTHON' is customarily used to mean the Python interpreter.\n  reject_var $primary, \"'$primary' is an anachronism\"\n    unless $primary eq 'JAVA' || $primary eq 'PYTHON';\n\n  # Get the prefixes which are valid and actually used.\n  @prefix = am_primary_prefixes ($primary, $can_dist, @prefix);\n\n  # If a primary includes a configure substitution, then the EXTRA_\n  # form is required.  Otherwise we can't properly do our job.\n  my $require_extra;\n\n  my @used = ();\n  my @result = ();\n\n  foreach my $X (@prefix)\n    {\n      my $nodir_name = $X;\n      my $one_name = $X . '_' . $primary;\n      my $one_var = var $one_name;\n\n      my $strip_subdir = 1;\n      # If subdir prefix should be preserved, do so.\n      if ($nodir_name =~ /^nobase_/)\n\t{\n\t  $strip_subdir = 0;\n\t  $nodir_name =~ s/^nobase_//;\n\t}\n\n      # If files should be distributed, do so.\n      my $dist_p = 0;\n      if ($can_dist)\n\t{\n\t  $dist_p = (($default_dist && $nodir_name !~ /^nodist_/)\n\t\t     || (! $default_dist && $nodir_name =~ /^dist_/));\n\t  $nodir_name =~ s/^(dist|nodist)_//;\n\t}\n\n\n      # Use the location of the currently processed variable.\n      # We are not processing a particular condition, so pick the first\n      # available.\n      my $tmpcond = $one_var->conditions->one_cond;\n      my $where = $one_var->rdef ($tmpcond)->location->clone;\n\n      # Append actual contents of where_PRIMARY variable to\n      # @result, skipping @substitutions@.\n      foreach my $locvals ($one_var->value_as_list_recursive (location => 1))\n\t{\n\t  my ($loc, $value) = @$locvals;\n\t  # Skip configure substitutions.\n\t  if ($value =~ /^\\@.*\\@$/)\n\t    {\n\t      if ($nodir_name eq 'EXTRA')\n\t\t{\n\t\t  error ($where,\n\t\t\t \"'$one_name' contains configure substitution, \"\n\t\t\t . \"but shouldn't\");\n\t\t}\n\t      # Check here to make sure variables defined in\n\t      # configure.ac do not imply that EXTRA_PRIMARY\n\t      # must be defined.\n\t      elsif (! defined $configure_vars{$one_name})\n\t\t{\n\t\t  $require_extra = $one_name\n\t\t    if $do_require;\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      # Strip any $(EXEEXT) suffix the user might have added,\n              # or this will confuse handle_source_transform() and\n              # check_canonical_spelling().\n\t      # We'll add $(EXEEXT) back later anyway.\n\t      # Do it here rather than in handle_programs so the\n              # uniquifying at the end of this function works.\n\t      ${$locvals}[1] =~ s/\\$\\(EXEEXT\\)$//\n\t        if $primary eq 'PROGRAMS';\n\n\t      push (@result, $locvals);\n\t    }\n\t}\n      # A blatant hack: we rewrite each _PROGRAMS primary to include\n      # EXEEXT.\n      append_exeext { 1 } $one_name\n\tif $primary eq 'PROGRAMS';\n      # \"EXTRA\" shouldn't be used when generating clean targets,\n      # all, or install targets.  We used to warn if EXTRA_FOO was\n      # defined uselessly, but this was annoying.\n      next\n\tif $nodir_name eq 'EXTRA';\n\n      if ($nodir_name eq 'check')\n\t{\n\t  push (@check, '$(' . $one_name . ')');\n\t}\n      else\n\t{\n\t  push (@used, '$(' . $one_name . ')');\n\t}\n\n      # Is this to be installed?\n      my $install_p = $nodir_name ne 'noinst' && $nodir_name ne 'check';\n\n      # If so, with install-exec? (or install-data?).\n      my $exec_p = ($nodir_name =~ /$EXEC_DIR_PATTERN/o);\n\n      my $check_options_p = $install_p && !! option 'std-options';\n\n      # Use the location of the currently processed variable as context.\n      $where->push_context (\"while processing '$one_name'\");\n\n      # The variable containing all files to distribute.\n      my $distvar = \"\\$($one_name)\";\n      $distvar = shadow_unconditionally ($one_name, $where)\n\tif ($dist_p && $one_var->has_conditional_contents);\n\n      # Singular form of $PRIMARY.\n      (my $one_primary = $primary) =~ s/S$//;\n      $output_rules .= file_contents ($file, $where,\n                                      PRIMARY     => $primary,\n                                      ONE_PRIMARY => $one_primary,\n                                      DIR         => $X,\n                                      NDIR        => $nodir_name,\n                                      BASE        => $strip_subdir,\n                                      EXEC        => $exec_p,\n                                      INSTALL     => $install_p,\n                                      DIST        => $dist_p,\n                                      DISTVAR     => $distvar,\n                                      'CK-OPTS'   => $check_options_p);\n    }\n\n  # The JAVA variable is used as the name of the Java interpreter.\n  # The PYTHON variable is used as the name of the Python interpreter.\n  if (@used && $primary ne 'JAVA' && $primary ne 'PYTHON')\n    {\n      # Define it.\n      define_pretty_variable ($primary, TRUE, INTERNAL, @used);\n      $output_vars .= \"\\n\";\n    }\n\n  err_var ($require_extra,\n\t   \"'$require_extra' contains configure substitution,\\n\"\n\t   . \"but 'EXTRA_$primary' not defined\")\n    if ($require_extra && ! var ('EXTRA_' . $primary));\n\n  # Push here because PRIMARY might be configure time determined.\n  push (@all, '$(' . $primary . ')')\n    if @used && $primary ne 'JAVA' && $primary ne 'PYTHON';\n\n  # Make the result unique.  This lets the user use conditionals in\n  # a natural way, but still lets us program lazily -- we don't have\n  # to worry about handling a particular object more than once.\n  # We will keep only one location per object.\n  my %result = ();\n  for my $pair (@result)\n    {\n      my ($loc, $val) = @$pair;\n      $result{$val} = $loc;\n    }\n  my @l = sort keys %result;\n  return map { [$result{$_}->clone, $_] } @l;\n}\n\n\n################################################################\n\n# Each key in this hash is the name of a directory holding a\n# Makefile.in.  These variables are local to 'is_make_dir'.\nmy %make_dirs = ();\nmy $make_dirs_set = 0;\n\n# is_make_dir ($DIRECTORY)\n# ------------------------\nsub is_make_dir\n{\n    my ($dir) = @_;\n    if (! $make_dirs_set)\n    {\n\tforeach my $iter (@configure_input_files)\n\t{\n\t    $make_dirs{dirname ($iter)} = 1;\n\t}\n\t# We also want to notice Makefile.in's.\n\tforeach my $iter (@other_input_files)\n\t{\n\t    if ($iter =~ /Makefile\\.in$/)\n\t    {\n\t\t$make_dirs{dirname ($iter)} = 1;\n\t    }\n\t}\n\t$make_dirs_set = 1;\n    }\n    return defined $make_dirs{$dir};\n}\n\n################################################################\n\n# Find the aux dir.  This should match the algorithm used by\n# ./configure. (See the Autoconf documentation for for\n# AC_CONFIG_AUX_DIR.)\nsub locate_aux_dir ()\n{\n  if (! $config_aux_dir_set_in_configure_ac)\n    {\n      # The default auxiliary directory is the first\n      # of ., .., or ../.. that contains install-sh.\n      # Assume . if install-sh doesn't exist yet.\n      for my $dir (qw (. .. ../..))\n\t{\n\t  if (-f \"$dir/install-sh\")\n\t    {\n\t      $config_aux_dir = $dir;\n\t      last;\n\t    }\n\t}\n      $config_aux_dir = '.' unless $config_aux_dir;\n    }\n  # Avoid unsightly '/.'s.\n  $am_config_aux_dir =\n    '$(top_srcdir)' . ($config_aux_dir eq '.' ? \"\" : \"/$config_aux_dir\");\n  $am_config_aux_dir =~ s,/*$,,;\n}\n\n\n# push_required_file ($DIR, $FILE, $FULLFILE)\n# -------------------------------------------\n# Push the given file onto DIST_COMMON.\nsub push_required_file\n{\n  my ($dir, $file, $fullfile) = @_;\n\n  # If the file to be distributed is in the same directory of the\n  # currently processed Makefile.am, then we want to distribute it\n  # from this same Makefile.am.\n  if ($dir eq $relative_dir)\n    {\n      push_dist_common ($file);\n    }\n  # This is needed to allow a construct in a non-top-level Makefile.am\n  # to require a file in the build-aux directory (see at least the test\n  # script 'test-driver-is-distributed.sh').  This is related to the\n  # automake bug#9546.  Note that the use of $config_aux_dir instead\n  # of $am_config_aux_dir here is deliberate and necessary.\n  elsif ($dir eq $config_aux_dir)\n    {\n      push_dist_common (\"$am_config_aux_dir/$file\");\n    }\n  # FIXME: another spacial case, for AC_LIBOBJ/AC_LIBSOURCE support.\n  # We probably need some refactoring of this function and its callers,\n  # to have a more explicit and systematic handling of all the special\n  # cases; but, since there are only two of them, this is low-priority\n  # ATM.\n  elsif ($config_libobj_dir && $dir eq $config_libobj_dir)\n    {\n      # Avoid unsightly '/.'s.\n      my $am_config_libobj_dir =\n        '$(top_srcdir)' .\n        ($config_libobj_dir eq '.' ? \"\" : \"/$config_libobj_dir\");\n      $am_config_libobj_dir =~ s|/*$||;\n      push_dist_common (\"$am_config_libobj_dir/$file\");\n    }\n  elsif ($relative_dir eq '.' && ! is_make_dir ($dir))\n    {\n      # If we are doing the topmost directory, and the file is in a\n      # subdir which does not have a Makefile, then we distribute it\n      # here.\n\n      # If a required file is above the source tree, it is important\n      # to prefix it with '$(srcdir)' so that no VPATH search is\n      # performed.  Otherwise problems occur with Make implementations\n      # that rewrite and simplify rules whose dependencies are found in a\n      # VPATH location.  Here is an example with OSF1/Tru64 Make.\n      #\n      #   % cat Makefile\n      #   VPATH = sub\n      #   distdir: ../a\n      #\t          echo ../a\n      #   % ls\n      #   Makefile a\n      #   % make\n      #   echo a\n      #   a\n      #\n      # Dependency '../a' was found in 'sub/../a', but this make\n      # implementation simplified it as 'a'.  (Note that the sub/\n      # directory does not even exist.)\n      #\n      # This kind of VPATH rewriting seems hard to cancel.  The\n      # distdir.am hack against VPATH rewriting works only when no\n      # simplification is done, i.e., for dependencies which are in\n      # subdirectories, not in enclosing directories.  Hence, in\n      # the latter case we use a full path to make sure no VPATH\n      # search occurs.\n      $fullfile = '$(srcdir)/' . $fullfile\n\tif $dir =~ m,^\\.\\.(?:$|/),;\n\n      push_dist_common ($fullfile);\n    }\n  else\n    {\n      prog_error \"a Makefile in relative directory $relative_dir \" .\n                 \"can't add files in directory $dir to DIST_COMMON\";\n    }\n}\n\n\n# If a file name appears as a key in this hash, then it has already\n# been checked for.  This allows us not to report the same error more\n# than once.\nmy %required_file_not_found = ();\n\n# required_file_check_or_copy ($WHERE, $DIRECTORY, $FILE)\n# -------------------------------------------------------\n# Verify that the file must exist in $DIRECTORY, or install it.\nsub required_file_check_or_copy\n{\n  my ($where, $dir, $file) = @_;\n\n  my $fullfile = \"$dir/$file\";\n  my $found_it = 0;\n  my $dangling_sym = 0;\n\n  if (-l $fullfile && ! -f $fullfile)\n    {\n      $dangling_sym = 1;\n    }\n  elsif (dir_has_case_matching_file ($dir, $file))\n    {\n      $found_it = 1;\n    }\n\n  # '--force-missing' only has an effect if '--add-missing' is\n  # specified.\n  return\n    if $found_it && (! $add_missing || ! $force_missing);\n\n  # If we've already looked for it, we're done.  You might wonder why we\n  # don't do this before searching for the file.  If we do that, then\n  # something like AC_OUTPUT([subdir/foo foo]) will fail to put 'foo.in'\n  # into $(DIST_COMMON).\n  if (! $found_it)\n    {\n      return if defined $required_file_not_found{$fullfile};\n      $required_file_not_found{$fullfile} = 1;\n    }\n  if ($dangling_sym && $add_missing)\n    {\n      unlink ($fullfile);\n    }\n\n  my $trailer = '';\n  my $trailer2 = '';\n  my $suppress = 0;\n\n  # Only install missing files according to our desired\n  # strictness level.\n  my $message = \"required file '$fullfile' not found\";\n  if ($add_missing)\n    {\n      if (-f \"$libdir/$file\")\n        {\n          $suppress = 1;\n\n          # Install the missing file.  Symlink if we\n          # can, copy if we must.  Note: delete the file\n          # first, in case it is a dangling symlink.\n          $message = \"installing '$fullfile'\";\n\n          # The license file should not be volatile.\n          if ($file eq \"COPYING\")\n            {\n              $message .= \" using GNU General Public License v3 file\";\n              $trailer2 = \"\\n    Consider adding the COPYING file\"\n                        . \" to the version control system\"\n                        . \"\\n    for your code, to avoid questions\"\n                        . \" about which license your project uses\";\n            }\n\n          # Windows Perl will hang if we try to delete a\n          # file that doesn't exist.\n          unlink ($fullfile) if -f $fullfile;\n          if ($symlink_exists && ! $copy_missing)\n            {\n              if (! symlink (\"$libdir/$file\", $fullfile)\n                  || ! -e $fullfile)\n                {\n                  $suppress = 0;\n                  $trailer = \"; error while making link: $!\";\n                }\n            }\n          elsif (system ('cp', \"$libdir/$file\", $fullfile))\n            {\n              $suppress = 0;\n              $trailer = \"\\n    error while copying\";\n            }\n          set_dir_cache_file ($dir, $file);\n        }\n    }\n  else\n    {\n      $trailer = \"\\n  'automake --add-missing' can install '$file'\"\n        if -f \"$libdir/$file\";\n    }\n\n  # If --force-missing was specified, and we have\n  # actually found the file, then do nothing.\n  return\n    if $found_it && $force_missing;\n\n  # If we couldn't install the file, but it is a target in\n  # the Makefile, don't print anything.  This allows files\n  # like README, AUTHORS, or THANKS to be generated.\n  return\n    if !$suppress && rule $file;\n\n  msg ($suppress ? 'note' : 'error', $where, \"$message$trailer$trailer2\");\n}\n\n\n# require_file_internal ($WHERE, $MYSTRICT, $DIRECTORY, $QUEUE, @FILES)\n# ---------------------------------------------------------------------\n# Verify that the file must exist in $DIRECTORY, or install it.\n# $MYSTRICT is the strictness level at which this file becomes required.\n# Worker threads may queue up the action to be serialized by the master,\n# if $QUEUE is true\nsub require_file_internal\n{\n  my ($where, $mystrict, $dir, $queue, @files) = @_;\n\n  return\n    unless $strictness >= $mystrict;\n\n  foreach my $file (@files)\n    {\n      push_required_file ($dir, $file, \"$dir/$file\");\n      if ($queue)\n        {\n          queue_required_file_check_or_copy ($required_conf_file_queue,\n                                             QUEUE_CONF_FILE, $relative_dir,\n                                             $where, $mystrict, @files);\n        }\n      else\n        {\n          required_file_check_or_copy ($where, $dir, $file);\n        }\n    }\n}\n\n# require_file ($WHERE, $MYSTRICT, @FILES)\n# ----------------------------------------\nsub require_file\n{\n    my ($where, $mystrict, @files) = @_;\n    require_file_internal ($where, $mystrict, $relative_dir, 0, @files);\n}\n\n# require_file_with_macro ($COND, $MACRO, $MYSTRICT, @FILES)\n# ----------------------------------------------------------\nsub require_file_with_macro\n{\n    my ($cond, $macro, $mystrict, @files) = @_;\n    $macro = rvar ($macro) unless ref $macro;\n    require_file ($macro->rdef ($cond)->location, $mystrict, @files);\n}\n\n# require_libsource_with_macro ($COND, $MACRO, $MYSTRICT, @FILES)\n# ---------------------------------------------------------------\n# Require an AC_LIBSOURCEd file.  If AC_CONFIG_LIBOBJ_DIR was called, it\n# must be in that directory.  Otherwise expect it in the current directory.\nsub require_libsource_with_macro\n{\n    my ($cond, $macro, $mystrict, @files) = @_;\n    $macro = rvar ($macro) unless ref $macro;\n    if ($config_libobj_dir)\n      {\n\trequire_file_internal ($macro->rdef ($cond)->location, $mystrict,\n\t\t\t       $config_libobj_dir, 0, @files);\n      }\n    else\n      {\n\trequire_file ($macro->rdef ($cond)->location, $mystrict, @files);\n      }\n}\n\n# queue_required_file_check_or_copy ($QUEUE, $KEY, $DIR, $WHERE,\n#                                    $MYSTRICT, @FILES)\n# --------------------------------------------------------------\nsub queue_required_file_check_or_copy\n{\n    my ($queue, $key, $dir, $where, $mystrict, @files) = @_;\n    my @serial_loc;\n    if (ref $where)\n      {\n        @serial_loc = (QUEUE_LOCATION, $where->serialize ());\n      }\n    else\n      {\n        @serial_loc = (QUEUE_STRING, $where);\n      }\n    $queue->enqueue ($key, $dir, @serial_loc, $mystrict, 0 + @files, @files);\n}\n\n# require_queued_file_check_or_copy ($QUEUE)\n# ------------------------------------------\nsub require_queued_file_check_or_copy\n{\n    my ($queue) = @_;\n    my $where;\n    my $dir = $queue->dequeue ();\n    my $loc_key = $queue->dequeue ();\n    if ($loc_key eq QUEUE_LOCATION)\n      {\n\t$where = Automake::Location::deserialize ($queue);\n      }\n    elsif ($loc_key eq QUEUE_STRING)\n      {\n\t$where = $queue->dequeue ();\n      }\n    else\n      {\n\tprog_error \"unexpected key $loc_key\";\n      }\n    my $mystrict = $queue->dequeue ();\n    my $nfiles = $queue->dequeue ();\n    my @files;\n    push @files, $queue->dequeue ()\n      foreach (1 .. $nfiles);\n    return\n      unless $strictness >= $mystrict;\n    foreach my $file (@files)\n      {\n        required_file_check_or_copy ($where, $config_aux_dir, $file);\n      }\n}\n\n# require_conf_file ($WHERE, $MYSTRICT, @FILES)\n# ---------------------------------------------\n# Looks in configuration path, as specified by AC_CONFIG_AUX_DIR.\nsub require_conf_file\n{\n    my ($where, $mystrict, @files) = @_;\n    my $queue = defined $required_conf_file_queue ? 1 : 0;\n    require_file_internal ($where, $mystrict, $config_aux_dir,\n                           $queue, @files);\n}\n\n\n# require_conf_file_with_macro ($COND, $MACRO, $MYSTRICT, @FILES)\n# ---------------------------------------------------------------\nsub require_conf_file_with_macro\n{\n    my ($cond, $macro, $mystrict, @files) = @_;\n    require_conf_file (rvar ($macro)->rdef ($cond)->location,\n\t\t       $mystrict, @files);\n}\n\n################################################################\n\n# require_build_directory ($DIRECTORY)\n# ------------------------------------\n# Emit rules to create $DIRECTORY if needed, and return\n# the file that any target requiring this directory should be made\n# dependent upon.\n# We don't want to emit the rule twice, and want to reuse it\n# for directories with equivalent names (e.g., 'foo/bar' and './foo//bar').\nsub require_build_directory\n{\n  my $directory = shift;\n\n  return $directory_map{$directory} if exists $directory_map{$directory};\n\n  my $cdir = File::Spec->canonpath ($directory);\n\n  if (exists $directory_map{$cdir})\n    {\n      my $stamp = $directory_map{$cdir};\n      $directory_map{$directory} = $stamp;\n      return $stamp;\n    }\n\n  my $dirstamp = \"$cdir/\\$(am__dirstamp)\";\n\n  $directory_map{$directory} = $dirstamp;\n  $directory_map{$cdir} = $dirstamp;\n\n  # Set a variable for the dirstamp basename.\n  define_pretty_variable ('am__dirstamp', TRUE, INTERNAL,\n\t\t\t  '$(am__leading_dot)dirstamp');\n\n  # Directory must be removed by 'make distclean'.\n  $clean_files{$dirstamp} = DIST_CLEAN;\n\n  $output_rules .= (\"$dirstamp:\\n\"\n\t\t    . \"\\t\\@\\$(MKDIR_P) $directory\\n\"\n\t\t    . \"\\t\\@: > $dirstamp\\n\");\n\n  return $dirstamp;\n}\n\n# require_build_directory_maybe ($FILE)\n# -------------------------------------\n# If $FILE lies in a subdirectory, emit a rule to create this\n# directory and return the file that $FILE should be made\n# dependent upon.  Otherwise, just return the empty string.\nsub require_build_directory_maybe\n{\n    my $file = shift;\n    my $directory = dirname ($file);\n\n    if ($directory ne '.')\n    {\n\treturn require_build_directory ($directory);\n    }\n    else\n    {\n\treturn '';\n    }\n}\n\n################################################################\n\n# Push a list of files onto '@dist_common'.\nsub push_dist_common\n{\n  prog_error \"push_dist_common run after handle_dist\"\n    if $handle_dist_run;\n  push @dist_common, @_;\n}\n\n\n################################################################\n\n# generate_makefile ($MAKEFILE_AM, $MAKEFILE_IN)\n# ----------------------------------------------\n# Generate a Makefile.in given the name of the corresponding Makefile and\n# the name of the file output by config.status.\nsub generate_makefile\n{\n  my ($makefile_am, $makefile_in) = @_;\n\n  # Reset all the Makefile.am related variables.\n  initialize_per_input;\n\n  # AUTOMAKE_OPTIONS can contains -W flags to disable or enable\n  # warnings for this file.  So hold any warning issued before\n  # we have processed AUTOMAKE_OPTIONS.\n  buffer_messages ('warning');\n\n  # $OUTPUT is encoded.  If it contains a \":\" then the first element\n  # is the real output file, and all remaining elements are input\n  # files.  We don't scan or otherwise deal with these input files,\n  # other than to mark them as dependencies.  See the subroutine\n  # 'scan_autoconf_files' for details.\n  my ($makefile, @inputs) = split (/:/, $output_files{$makefile_in});\n\n  $relative_dir = dirname ($makefile);\n\n  read_main_am_file ($makefile_am, $makefile_in);\n  if (not handle_options)\n    {\n      # Process buffered warnings.\n      flush_messages;\n      # Fatal error.  Just return, so we can continue with next file.\n      return;\n    }\n  # Process buffered warnings.\n  flush_messages;\n\n  # There are a few install-related variables that you should not define.\n  foreach my $var ('PRE_INSTALL', 'POST_INSTALL', 'NORMAL_INSTALL')\n    {\n      my $v = var $var;\n      if ($v)\n\t{\n\t  my $def = $v->def (TRUE);\n\t  prog_error \"$var not defined in condition TRUE\"\n\t    unless $def;\n\t  reject_var $var, \"'$var' should not be defined\"\n\t    if $def->owner != VAR_AUTOMAKE;\n\t}\n    }\n\n  # Catch some obsolete variables.\n  msg_var ('obsolete', 'INCLUDES',\n\t   \"'INCLUDES' is the old name for 'AM_CPPFLAGS' (or '*_CPPFLAGS')\")\n    if var ('INCLUDES');\n\n  # Must do this after reading .am file.\n  define_variable ('subdir', $relative_dir, INTERNAL);\n\n  # If DIST_SUBDIRS is defined, make sure SUBDIRS is, so that\n  # recursive rules are enabled.\n  define_pretty_variable ('SUBDIRS', TRUE, INTERNAL, '')\n    if var 'DIST_SUBDIRS' && ! var 'SUBDIRS';\n\n  # Check first, because we might modify some state.\n  check_gnu_standards;\n  check_gnits_standards;\n\n  handle_configure ($makefile_am, $makefile_in, $makefile, @inputs);\n  handle_gettext;\n\n  handle_targets;\n  handle_libraries;\n  handle_ltlibraries;\n  handle_programs;\n  handle_scripts;\n\n  handle_silent;\n\n  # These must be run after all the sources are scanned.  They use\n  # variables defined by handle_libraries(), handle_ltlibraries(),\n  # or handle_programs().\n  handle_compile;\n  handle_languages;\n  handle_libtool;\n\n  # Variables used by distdir.am and tags.am.\n  define_pretty_variable ('SOURCES', TRUE, INTERNAL, @sources);\n  if (! option 'no-dist')\n    {\n      define_pretty_variable ('DIST_SOURCES', TRUE, INTERNAL, @dist_sources);\n    }\n\n  handle_texinfo;\n  handle_emacs_lisp;\n  handle_python;\n  handle_java;\n  handle_man_pages;\n  handle_data;\n  handle_headers;\n  handle_subdirs;\n  handle_user_recursion;\n  handle_tags;\n  handle_minor_options;\n  # Must come after handle_programs so that %known_programs is up-to-date.\n  handle_tests;\n\n  # This must come after most other rules.\n  handle_dist;\n\n  handle_footer;\n  do_check_merge_target;\n  handle_all ($makefile);\n\n  # FIXME: Gross!\n  if (var ('lib_LTLIBRARIES') && var ('bin_PROGRAMS'))\n    {\n      $output_rules .= \"install-binPROGRAMS: install-libLTLIBRARIES\\n\\n\";\n    }\n  if (var ('nobase_lib_LTLIBRARIES') && var ('bin_PROGRAMS'))\n    {\n      $output_rules .= \"install-binPROGRAMS: install-nobase_libLTLIBRARIES\\n\\n\";\n    }\n\n  handle_install;\n  handle_clean ($makefile);\n  handle_factored_dependencies;\n\n  # Comes last, because all the above procedures may have\n  # defined or overridden variables.\n  $output_vars .= output_variables;\n\n  check_typos;\n\n  if ($exit_code != 0)\n    {\n      verb \"not writing $makefile_in because of earlier errors\";\n      return;\n    }\n\n  my $am_relative_dir = dirname ($makefile_am);\n  mkdir ($am_relative_dir, 0755) if ! -d $am_relative_dir;\n\n  # We make sure that 'all:' is the first target.\n  my $output =\n    \"$output_vars$output_all$output_header$output_rules$output_trailer\";\n\n  # Decide whether we must update the output file or not.\n  # We have to update in the following situations.\n  #  * $force_generation is set.\n  #  * any of the output dependencies is younger than the output\n  #  * the contents of the output is different (this can happen\n  #    if the project has been populated with a file listed in\n  #    @common_files since the last run).\n  # Output's dependencies are split in two sets:\n  #  * dependencies which are also configure dependencies\n  #    These do not change between each Makefile.am\n  #  * other dependencies, specific to the Makefile.am being processed\n  #    (such as the Makefile.am itself, or any Makefile fragment\n  #    it includes).\n  my $timestamp = mtime $makefile_in;\n  if (! $force_generation\n      && $configure_deps_greatest_timestamp < $timestamp\n      && $output_deps_greatest_timestamp < $timestamp\n      && $output eq contents ($makefile_in))\n    {\n      verb \"$makefile_in unchanged\";\n      # No need to update.\n      return;\n    }\n\n  if (-e $makefile_in)\n    {\n      unlink ($makefile_in)\n\tor fatal \"cannot remove $makefile_in: $!\";\n    }\n\n  my $gm_file = new Automake::XFile \"> $makefile_in\";\n  verb \"creating $makefile_in\";\n  print $gm_file $output;\n}\n\n\n################################################################\n\n\n# Helper function for usage().\nsub print_autodist_files\n{\n  my @lcomm = uniq (sort @_);\n\n  my @four;\n  format USAGE_FORMAT =\n  @<<<<<<<<<<<<<<<<   @<<<<<<<<<<<<<<<<   @<<<<<<<<<<<<<<<<   @<<<<<<<<<<<<<<<<\n  $four[0],           $four[1],           $four[2],           $four[3]\n.\n  local $~ = \"USAGE_FORMAT\";\n\n  my $cols = 4;\n  my $rows = int(@lcomm / $cols);\n  my $rest = @lcomm % $cols;\n\n  if ($rest)\n    {\n      $rows++;\n    }\n  else\n    {\n      $rest = $cols;\n    }\n\n  for (my $y = 0; $y < $rows; $y++)\n    {\n      @four = (\"\", \"\", \"\", \"\");\n      for (my $x = 0; $x < $cols; $x++)\n        {\n          last if $y + 1 == $rows && $x == $rest;\n\n          my $idx = (($x > $rest)\n               ?  ($rows * $rest + ($rows - 1) * ($x - $rest))\n               : ($rows * $x));\n\n          $idx += $y;\n          $four[$x] = $lcomm[$idx];\n        }\n      write;\n    }\n}\n\n\nsub usage ()\n{\n    print \"Usage: $0 [OPTION]... [Makefile]...\n\nGenerate Makefile.in for configure from Makefile.am.\n\nOperation modes:\n      --help               print this help, then exit\n      --version            print version number, then exit\n  -v, --verbose            verbosely list files processed\n      --no-force           only update Makefile.in's that are out of date\n  -W, --warnings=CATEGORY  report the warnings falling in CATEGORY\n\nDependency tracking:\n  -i, --ignore-deps      disable dependency tracking code\n      --include-deps     enable dependency tracking code\n\nFlavors:\n      --foreign          set strictness to foreign\n      --gnits            set strictness to gnits\n      --gnu              set strictness to gnu\n\nLibrary files:\n  -a, --add-missing      add missing standard files to package\n      --libdir=DIR       set directory storing library files\n      --print-libdir     print directory storing library files\n  -c, --copy             with -a, copy missing files (default is symlink)\n  -f, --force-missing    force update of standard files\n\n\";\n    print Automake::ChannelDefs::usage (), \"\\n\";\n\n    print \"\\nFiles automatically distributed if found \" .\n          \"(always):\\n\";\n    print_autodist_files @common_files;\n    print \"\\nFiles automatically distributed if found \" .\n          \"(under certain conditions):\\n\";\n    print_autodist_files @common_sometimes;\n\n    print '\nReport bugs to <@PACKAGE_BUGREPORT@>.\nGNU Automake home page: <@PACKAGE_URL@>.\nGeneral help using GNU software: <https://www.gnu.org/gethelp/>.\n';\n\n    # --help always returns 0 per GNU standards.\n    exit 0;\n}\n\n\nsub version ()\n{\n  print <<EOF;\nautomake (GNU $PACKAGE) $VERSION\nCopyright (C) $RELEASE_YEAR Free Software Foundation, Inc.\nLicense GPLv2+: GNU GPL version 2 or later <https://gnu.org/licenses/gpl-2.0.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by Tom Tromey <tromey\\@redhat.com>\n       and Alexandre Duret-Lutz <adl\\@gnu.org>.\nEOF\n  # --version always returns 0 per GNU standards.\n  exit 0;\n}\n\n################################################################\n\n# Parse command line.\nsub parse_arguments ()\n{\n  my $strict = 'gnu';\n  my $ignore_deps = 0;\n  my @warnings = ();\n\n  my %cli_options =\n    (\n     'version' => \\&version,\n     'help'    => \\&usage,\n     'libdir=s'\t=> \\$libdir,\n     'print-libdir'     => sub { print \"$libdir\\n\"; exit 0; },\n     'gnu'\t\t=> sub { $strict = 'gnu'; },\n     'gnits'\t\t=> sub { $strict = 'gnits'; },\n     'foreign'\t\t=> sub { $strict = 'foreign'; },\n     'include-deps'\t=> sub { $ignore_deps = 0; },\n     'i|ignore-deps'\t=> sub { $ignore_deps = 1; },\n     'no-force'\t=> sub { $force_generation = 0; },\n     'f|force-missing'  => \\$force_missing,\n     'a|add-missing'\t=> \\$add_missing,\n     'c|copy'\t\t=> \\$copy_missing,\n     'v|verbose'\t=> sub { setup_channel 'verb', silent => 0; },\n     'W|warnings=s'     => \\@warnings,\n     );\n\n  use Automake::Getopt ();\n  Automake::Getopt::parse_options %cli_options;\n\n  set_strictness ($strict);\n  my $cli_where = new Automake::Location;\n  set_global_option ('no-dependencies', $cli_where) if $ignore_deps;\n  parse_warnings @warnings;\n\n  return unless @ARGV;\n\n  my $errspec = 0;\n  foreach my $arg (@ARGV)\n    {\n      fatal (\"empty argument\\nTry '$0 --help' for more information\")\n\tif ($arg eq '');\n\n      # Handle $local:$input syntax.\n      my ($local, @rest) = split (/:/, $arg);\n      @rest = (\"$local.in\",) unless @rest;\n      my $input = locate_am @rest;\n      if ($input)\n\t{\n\t  push @input_files, $input;\n\t  $output_files{$input} = join (':', ($local, @rest));\n\t}\n      else\n\t{\n\t  error \"no Automake input file found for '$arg'\";\n\t  $errspec = 1;\n\t}\n    }\n  fatal \"no input file found among supplied arguments\"\n    if $errspec && ! @input_files;\n}\n\n\n# handle_makefile ($MAKEFILE)\n# ---------------------------\nsub handle_makefile\n{\n  my ($file) =  @_;\n  ($am_file = $file) =~ s/\\.in$//;\n  if (! -f ($am_file . '.am'))\n    {\n      error \"'$am_file.am' does not exist\";\n    }\n  else\n    {\n      # Any warning setting now local to this Makefile.am.\n      dup_channel_setup;\n\n      generate_makefile ($am_file . '.am', $file);\n\n      # Back out any warning setting.\n      drop_channel_setup;\n    }\n}\n\n# Deal with all makefiles, without threads.\nsub handle_makefiles_serial ()\n{\n  foreach my $file (@input_files)\n    {\n      handle_makefile ($file);\n    }\n}\n\n# Logic for deciding how many worker threads to use.\nsub get_number_of_threads ()\n{\n  my $nthreads = $ENV{'AUTOMAKE_JOBS'} || 0;\n\n  $nthreads = 0\n    unless $nthreads =~ /^[0-9]+$/;\n\n  # It doesn't make sense to use more threads than makefiles,\n  my $max_threads = @input_files;\n\n  if ($nthreads > $max_threads)\n    {\n      $nthreads = $max_threads;\n    }\n  return $nthreads;\n}\n\n# handle_makefiles_threaded ($NTHREADS)\n# -------------------------------------\n# Deal with all makefiles, using threads.  The general strategy is to\n# spawn NTHREADS worker threads, dispatch makefiles to them, and let the\n# worker threads push back everything that needs serialization:\n# * warning and (normal) error messages, for stable stderr output\n#   order and content (avoiding duplicates, for example),\n# * races when installing aux files (and respective messages),\n# * races when collecting aux files for distribution.\n#\n# The latter requires that the makefile that deals with the aux dir\n# files be handled last, done by the master thread.\nsub handle_makefiles_threaded\n{\n  my ($nthreads) = @_;\n\n  # The file queue distributes all makefiles, the message queues\n  # collect all serializations needed for respective files.\n  my $file_queue = Thread::Queue->new;\n  my %msg_queues;\n  foreach my $file (@input_files)\n    {\n      $msg_queues{$file} = Thread::Queue->new;\n    }\n\n  verb \"spawning $nthreads worker threads\";\n  my @threads = (1 .. $nthreads);\n  foreach my $t (@threads)\n    {\n      $t = threads->new (sub\n\t{\n\t  while (my $file = $file_queue->dequeue)\n\t    {\n\t      verb \"handling $file\";\n\t      my $queue = $msg_queues{$file};\n\t      setup_channel_queue ($queue, QUEUE_MESSAGE);\n\t      $required_conf_file_queue = $queue;\n\t      handle_makefile ($file);\n\t      $queue->enqueue (undef);\n\t      setup_channel_queue (undef, undef);\n\t      $required_conf_file_queue = undef;\n\t    }\n\t  return $exit_code;\n\t});\n    }\n\n  # Queue all makefiles.\n  verb \"queuing \" . @input_files . \" input files\";\n  $file_queue->enqueue (@input_files, (undef) x @threads);\n\n  # Collect and process serializations.\n  foreach my $file (@input_files)\n    {\n      verb \"dequeuing messages for \" . $file;\n      reset_local_duplicates ();\n      my $queue = $msg_queues{$file};\n      while (my $key = $queue->dequeue)\n\t{\n\t  if ($key eq QUEUE_MESSAGE)\n\t    {\n\t      pop_channel_queue ($queue);\n\t    }\n\t  elsif ($key eq QUEUE_CONF_FILE)\n\t    {\n\t      require_queued_file_check_or_copy ($queue);\n\t    }\n\t  else\n\t    {\n\t      prog_error \"unexpected key $key\";\n\t    }\n\t}\n    }\n\n  foreach my $t (@threads)\n    {\n      my @exit_thread = $t->join;\n      $exit_code = $exit_thread[0]\n\tif ($exit_thread[0] > $exit_code);\n    }\n}\n\n################################################################\n\n# Parse the WARNINGS environment variable.\nparse_WARNINGS;\n\n# Parse command line.\nparse_arguments;\n\n$configure_ac = require_configure_ac;\n\n# Do configure.ac scan only once.\nscan_autoconf_files;\n\nif (! @input_files)\n  {\n    my $msg = '';\n    $msg = \"\\nDid you forget AC_CONFIG_FILES([Makefile]) in $configure_ac?\"\n      if -f 'Makefile.am';\n    fatal (\"no 'Makefile.am' found for any configure output$msg\");\n  }\n\nmy $nthreads = get_number_of_threads ();\n\nif ($perl_threads && $nthreads >= 1)\n  {\n    handle_makefiles_threaded ($nthreads);\n  }\nelse\n  {\n    handle_makefiles_serial ();\n  }\n\nexit $exit_code;\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/doc/automake.texi": "\\input texinfo   @c -*-texinfo-*-\n@c %**start of header\n@setfilename automake.info\n@settitle automake\n@documentencoding UTF-8\n@documentlanguage en\n@setchapternewpage off\n@c %**end of header\n\n@include version.texi\n\n@c @ovar(ARG, DEFAULT)\n@c -------------------\n@c The ARG is an optional argument.  To be used for macro arguments in\n@c their documentation (@defmac).\n@macro ovar{varname}\n@r{[}@var{\\varname\\}@r{]}\n@end macro\n\n@set PACKAGE_BUGREPORT bug-automake@@gnu.org\n\n@copying\n\nThis manual is for GNU Automake (version @value{VERSION},\n@value{UPDATED}), a program that creates GNU standards-compliant\nMakefiles from template files.\n\nCopyright @copyright{} 1995--2020 Free Software Foundation, Inc.\n\n@quotation\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License,\nVersion 1.3 or any later version published by the Free Software\nFoundation; with no Invariant Sections, with no Front-Cover texts,\nand with no Back-Cover Texts.  A copy of the license is included in the\nsection entitled ``GNU Free Documentation License.''\n\n@end quotation\n@end copying\n\n@dircategory Software development\n@direntry\n* Automake: (automake).         Making GNU standards-compliant Makefiles.\n@end direntry\n\n@dircategory Individual utilities\n@direntry\n* aclocal-invocation: (automake)aclocal Invocation.   Generating aclocal.m4.\n* automake-invocation: (automake)automake Invocation. Generating Makefile.in.\n@end direntry\n\n@titlepage\n@title GNU Automake\n@subtitle For version @value{VERSION}, @value{UPDATED}\n@author David MacKenzie\n@author Tom Tromey\n@author Alexandre Duret-Lutz\n@author Ralf Wildenhues\n@author Stefano Lattarini\n@page\n@vskip 0pt plus 1filll\n@insertcopying\n@end titlepage\n\n@contents\n\n@c We use the following macros to define indices:\n@c   @cindex   concepts, and anything that does not fit elsewhere\n@c   @vindex   Makefile variables\n@c   @trindex  targets\n@c   @acindex  Autoconf/Automake/Libtool/M4/... macros\n@c   @opindex  tool options\n\n@c Define an index of configure macros.\n@defcodeindex ac\n@c Define an index of options.\n@defcodeindex op\n@c Define an index of targets.\n@defcodeindex tr\n@c Define an index of commands.\n@defcodeindex cm\n\n@c Put the macros in the function index.\n@syncodeindex ac fn\n\n@c Put everything else into one index (arbitrarily chosen to be the\n@c concept index).\n@syncodeindex op cp\n@syncodeindex tr cp\n@syncodeindex cm cp\n\n@ifnottex\n@node Top\n@comment  node-name,  next,  previous,  up\n@top GNU Automake\n\n@insertcopying\n\n@menu\n* Introduction::                Automake's purpose\n* Autotools Introduction::      An Introduction to the Autotools\n* Generalities::                General ideas\n* Examples::                    Some example packages\n* automake Invocation::         Creating a Makefile.in\n* configure::                   Scanning configure.ac, using aclocal\n* Directories::                 Declaring subdirectories\n* Programs::                    Building programs and libraries\n* Other Objects::               Other derived objects\n* Other GNU Tools::             Other GNU Tools\n* Documentation::               Building documentation\n* Install::                     What gets installed\n* Clean::                       What gets cleaned\n* Dist::                        What goes in a distribution\n* Tests::                       Support for test suites\n* Rebuilding::                  Automatic rebuilding of Makefile\n* Options::                     Changing Automake's behavior\n* Miscellaneous::               Miscellaneous rules\n* Include::                     Including extra files in an Automake template\n* Conditionals::                Conditionals\n* Silencing Make::              Obtain less verbose output from @command{make}\n* Not Enough::                  When Automake is not Enough\n* Distributing::                Distributing the Makefile.in\n* API Versioning::              About compatibility between Automake versions\n* Upgrading::                   Upgrading to a Newer Automake Version\n* FAQ::                         Frequently Asked Questions\n* Copying This Manual::         How to make copies of this manual\n* Indices::                     Indices of variables, macros, and concepts\n\n@detailmenu\n --- The Detailed Node Listing ---\n\nAn Introduction to the Autotools\n\n* GNU Build System::            Introducing the GNU Build System\n* Use Cases::                   Use Cases for the GNU Build System\n* Why Autotools::               How Autotools Help\n* Hello World::                 A Small Hello World Package\n\nUse Cases for the GNU Build System\n\n* Basic Installation::          Common installation procedure\n* Standard Targets::            A list of standard Makefile targets\n* Standard Directory Variables::  A list of standard directory variables\n* Standard Configuration Variables::  Using configuration variables\n* config.site::                 Using a config.site file\n* VPATH Builds::                Parallel build trees\n* Two-Part Install::            Installing data and programs separately\n* Cross-Compilation::           Building for other architectures\n* Renaming::                    Renaming programs at install time\n* DESTDIR::                     Building binary packages with DESTDIR\n* Preparing Distributions::     Rolling out tarballs\n* Dependency Tracking::         Automatic dependency tracking\n* Nested Packages::             The GNU Build Systems can be nested\n\nA Small Hello World\n\n* Creating amhello::            Create @file{amhello-1.0.tar.gz} from scratch\n* amhello's configure.ac Setup Explained::\n* amhello's Makefile.am Setup Explained::\n\nGeneral ideas\n\n* General Operation::           General operation of Automake\n* Strictness::                  Standards conformance checking\n* Uniform::                     The Uniform Naming Scheme\n* Length Limitations::          Staying below the command line length limit\n* Canonicalization::            How derived variables are named\n* User Variables::              Variables reserved for the user\n* Auxiliary Programs::          Programs automake might require\n\nSome example packages\n\n* Complete::                    A simple example, start to finish\n* true::                        Building true and false\n\nScanning @file{configure.ac}, using @command{aclocal}\n\n* Requirements::                Configuration requirements\n* Optional::                    Other things Automake recognizes\n* aclocal Invocation::          Auto-generating aclocal.m4\n* Macros::                      Autoconf macros supplied with Automake\n\nAuto-generating aclocal.m4\n\n* aclocal Options::             Options supported by aclocal\n* Macro Search Path::           How aclocal finds .m4 files\n* Extending aclocal::           Writing your own aclocal macros\n* Local Macros::                Organizing local macros\n* Serials::                     Serial lines in Autoconf macros\n* Future of aclocal::           aclocal's scheduled death\n\nAutoconf macros supplied with Automake\n\n* Public Macros::               Macros that you can use.\n* Private Macros::              Macros that you should not use.\n\nDirectories\n\n* Subdirectories::              Building subdirectories recursively\n* Conditional Subdirectories::  Conditionally not building directories\n* Alternative::                 Subdirectories without recursion\n* Subpackages::                 Nesting packages\n\nConditional Subdirectories\n\n* SUBDIRS vs DIST_SUBDIRS::     Two sets of directories\n* Subdirectories with AM_CONDITIONAL::  Specifying conditional subdirectories\n* Subdirectories with AC_SUBST::  Another way for conditional recursion\n* Unconfigured Subdirectories::  Not even creating a @samp{Makefile}\n\nBuilding Programs and Libraries\n\n* A Program::                   Building a program\n* A Library::                   Building a library\n* A Shared Library::            Building a Libtool library\n* Program and Library Variables::  Variables controlling program and\n                                library builds\n* Default _SOURCES::            Default source files\n* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA\n* Program Variables::           Variables used when building a program\n* Yacc and Lex::                Yacc and Lex support\n* C++ Support::                 Compiling C++ sources\n* Objective C Support::         Compiling Objective C sources\n* Objective C++ Support::       Compiling Objective C++ sources\n* Unified Parallel C Support::  Compiling Unified Parallel C sources\n* Assembly Support::            Compiling assembly sources\n* Fortran 77 Support::          Compiling Fortran 77 sources\n* Fortran 9x Support::          Compiling Fortran 9x sources\n* Java Support with gcj::       Compiling Java sources using gcj\n* Vala Support::                Compiling Vala sources\n* Support for Other Languages::  Compiling other languages\n* Dependencies::                Automatic dependency tracking\n* EXEEXT::                      Support for executable extensions\n\nBuilding a program\n\n* Program Sources::             Defining program sources\n* Linking::                     Linking with libraries or extra objects\n* Conditional Sources::         Handling conditional sources\n* Conditional Programs::        Building a program conditionally\n\nBuilding a Shared Library\n\n* Libtool Concept::             Introducing Libtool\n* Libtool Libraries::           Declaring Libtool Libraries\n* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally\n* Conditional Libtool Sources::  Choosing Library Sources Conditionally\n* Libtool Convenience Libraries::  Building Convenience Libtool Libraries\n* Libtool Modules::             Building Libtool Modules\n* Libtool Flags::               Using _LIBADD, _LDFLAGS, and _LIBTOOLFLAGS\n* LTLIBOBJS::                   Using $(LTLIBOBJS) and $(LTALLOCA)\n* Libtool Issues::              Common Issues Related to Libtool's Use\n\nCommon Issues Related to Libtool's Use\n\n* Error required file ltmain.sh not found::  The need to run libtoolize\n* Objects created both with libtool and without::  Avoid a specific build race\n\nFortran 77 Support\n\n* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources\n* Compiling Fortran 77 Files::  Compiling Fortran 77 sources\n* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++\n\nMixing Fortran 77 With C and C++\n\n* How the Linker is Chosen::    Automatic linker selection\n\nFortran 9x Support\n\n* Compiling Fortran 9x Files::  Compiling Fortran 9x sources\n\nOther Derived Objects\n\n* Scripts::                     Executable scripts\n* Headers::                     Header files\n* Data::                        Architecture-independent data files\n* Sources::                     Derived sources\n\nBuilt Sources\n\n* Built Sources Example::       Several ways to handle built sources.\n\nOther GNU Tools\n\n* Emacs Lisp::                  Emacs Lisp\n* gettext::                     Gettext\n* Libtool::                     Libtool\n* Java::                        Java bytecode compilation (deprecated)\n* Python::                      Python\n\nBuilding documentation\n\n* Texinfo::                     Texinfo\n* Man Pages::                   Man pages\n\nWhat Gets Installed\n\n* Basics of Installation::      What gets installed where\n* The Two Parts of Install::    Installing data and programs separately\n* Extending Installation::      Adding your own rules for installation\n* Staged Installs::             Installation in a temporary location\n* Install Rules for the User::  Useful additional rules\n\nWhat Goes in a Distribution\n\n* Basics of Distribution::      Files distributed by default\n* Fine-grained Distribution Control::  @code{dist_} and @code{nodist_} prefixes\n* The dist Hook::               A target for last-minute distribution changes\n* Checking the Distribution::   @samp{make distcheck} explained\n* The Types of Distributions::  A variety of formats and compression methods\n\nSupport for test suites\n\n* Generalities about Testing::  Generic concepts and terminology about testing\n* Simple Tests::                Listing test scripts in @code{TESTS}\n* Custom Test Drivers::         Writing and using custom test drivers\n* Using the TAP test protocol:: Integrating test scripts that use the TAP protocol\n* DejaGnu Tests::               Interfacing with the @command{dejagnu} testing framework\n* Install Tests::               Running tests on installed packages\n\nSimple Tests\n\n* Scripts-based Testsuites::    Automake-specific concepts and terminology\n* Serial Test Harness::         Older (and discouraged) serial test harness\n* Parallel Test Harness::       Generic concurrent test harness\n\nUsing the TAP test protocol\n\n* Introduction to TAP::\n* Use TAP with the Automake test harness::\n* Incompatibilities with other TAP parsers and drivers::\n* Links and external resources on TAP::\n\nCustom Test Drivers\n\n* Overview of Custom Test Drivers Support::\n* Declaring Custom Test Drivers::\n* API for Custom Test Drivers::\n\nAPI for Custom Test Drivers\n\n* Command-line arguments for test drivers::\n* Log files generation and test results recording::\n* Testsuite progress output::\n\nChanging Automake's Behavior\n\n* Options generalities::        Semantics of Automake option\n* List of Automake options::    A comprehensive list of Automake options\n\nMiscellaneous Rules\n\n* Tags::                        Interfacing to cscope, etags and mkid\n* Suffixes::                    Handling new file extensions\n\nConditionals\n\n* Usage of Conditionals::       Declaring conditional content\n* Limits of Conditionals::      Enclosing complete statements\n\nSilencing Make\n\n* Make verbosity::              Make is verbose by default\n* Tricks For Silencing Make::   Standard and generic ways to silence make\n* Automake Silent Rules::       How Automake can help in silencing make\n\nWhen Automake Isn't Enough\n\n* Extending::                   Adding new rules or overriding existing ones.\n* Third-Party Makefiles::       Integrating Non-Automake @file{Makefile}s.\n\nFrequently Asked Questions about Automake\n\n* CVS::                         CVS and generated files\n* maintainer-mode::             missing and AM_MAINTAINER_MODE\n* Wildcards::                   Why doesn't Automake support wildcards?\n* Limitations on File Names::   Limitations on source and installed file names\n* Errors with distclean::       Files left in build directory after distclean\n* Flag Variables Ordering::     CFLAGS vs.@: AM_CFLAGS vs.@: mumble_CFLAGS\n* Renamed Objects::             Why are object files sometimes renamed?\n* Per-Object Flags::            How to simulate per-object flags?\n* Multiple Outputs::            Writing rules for tools with many output files\n* Hard-Coded Install Paths::    Installing to hard-coded locations\n* Debugging Make Rules::        Strategies when things don't work as expected\n* Reporting Bugs::              Feedback on bugs and feature requests\n\nCopying This Manual\n\n* GNU Free Documentation License::  License for copying this manual\n\nIndices\n\n* Macro Index::                 Index of Autoconf macros\n* Variable Index::              Index of Makefile variables\n* General Index::               General index\n\n@end detailmenu\n@end menu\n\n@end ifnottex\n\n\n@node Introduction\n@chapter Introduction\n\nAutomake is a tool for automatically generating @file{Makefile.in}s\nfrom files called @file{Makefile.am}.  Each @file{Makefile.am} is\nbasically a series of @command{make} variable\ndefinitions@footnote{These variables are also called @dfn{make macros}\nin Make terminology, however in this manual we reserve the term\n@dfn{macro} for Autoconf's macros.}, with rules being thrown in\noccasionally.  The generated @file{Makefile.in}s are compliant with\nthe GNU Makefile standards.\n\n@cindex GNU Makefile standards\n\nThe GNU Makefile Standards Document\n(@pxref{Makefile Conventions, , , standards, The GNU Coding Standards})\nis long, complicated, and subject to change.  The goal of Automake is to\nremove the burden of Makefile maintenance from the back of the\nindividual GNU maintainer (and put it on the back of the Automake\nmaintainers).\n\nThe typical Automake input file is simply a series of variable definitions.\nEach such file is processed to create a @file{Makefile.in}.\n\n@cindex Constraints of Automake\n@cindex Automake constraints\n\nAutomake does constrain a project in certain ways; for instance, it\nassumes that the project uses Autoconf (@pxref{Top, , Introduction,\nautoconf, The Autoconf Manual}), and enforces certain restrictions on\nthe @file{configure.ac} contents.\n\n@cindex Automake requirements\n@cindex Requirements, Automake\n\nAutomake requires @command{perl} in order to generate the\n@file{Makefile.in}s.  However, the distributions created by Automake are\nfully GNU standards-compliant, and do not require @command{perl} in order\nto be built.\n\n@cindex Bugs, reporting\n@cindex Reporting bugs\n@cindex E-mail, bug reports\n\nFor more information on bug reports, @xref{Reporting Bugs}.\n\n@node Autotools Introduction\n@chapter An Introduction to the Autotools\n\nIf you are new to Automake, maybe you know that it is part of a set of\ntools called @emph{The Autotools}.  Maybe you've already delved into a\npackage full of files named @file{configure}, @file{configure.ac},\n@file{Makefile.in}, @file{Makefile.am}, @file{aclocal.m4}, @dots{},\nsome of them claiming to be @emph{generated by} Autoconf or Automake.\nBut the exact purpose of these files and their relations is probably\nfuzzy.  The goal of this chapter is to introduce you to this machinery,\nto show you how it works and how powerful it is.  If you've never\ninstalled or seen such a package, do not worry: this chapter will walk\nyou through it.\n\nIf you need some teaching material, more illustrations, or a less\n@command{automake}-centered continuation, some slides for this\nintroduction are available in Alexandre Duret-Lutz's\n@uref{https://www.lrde.epita.fr/@/~adl/@/autotools.html,\nAutotools Tutorial}.\nThis chapter is the written version of the first part of his tutorial.\n\n@menu\n* GNU Build System::            Introducing the GNU Build System\n* Use Cases::                   Use Cases for the GNU Build System\n* Why Autotools::               How Autotools Help\n* Hello World::                 A Small Hello World Package\n@end menu\n\n@node GNU Build System\n@section Introducing the GNU Build System\n@cindex GNU Build System, introduction\n\nIt is a truth universally acknowledged, that as a developer in\npossession of a new package, you must be in want of a build system.\n\nIn the Unix world, such a build system is traditionally achieved using\nthe command @command{make} (@pxref{Top, , Overview, make, The GNU Make\nManual}).  You express the recipe to build your package in a\n@file{Makefile}.  This file is a set of rules to build the files in\nthe package.  For instance the program @file{prog} may be built by\nrunning the linker on the files @file{main.o}, @file{foo.o}, and\n@file{bar.o}; the file @file{main.o} may be built by running the\ncompiler on @file{main.c}; etc.  Each time @command{make} is run, it\nreads @file{Makefile}, checks the existence and modification time of\nthe files mentioned, decides what files need to be built (or rebuilt),\nand runs the associated commands.\n\nWhen a package needs to be built on a different platform than the one\nit was developed on, its @file{Makefile} usually needs to be adjusted.\nFor instance the compiler may have another name or require more\noptions.  In 1991, David J. MacKenzie got tired of customizing\n@file{Makefile} for the 20 platforms he had to deal with.  Instead, he\nhandcrafted a little shell script called @file{configure} to\nautomatically adjust the @file{Makefile} (@pxref{Genesis, , Genesis,\nautoconf, The Autoconf Manual}).  Compiling his package was now\nas simple as running @code{./configure && make}.\n\n@cindex GNU Coding Standards\n\nToday this process has been standardized in the GNU project.  The GNU\nCoding Standards (@pxref{Managing Releases, The Release Process, ,\nstandards, The GNU Coding Standards}) explains how each package of the\nGNU project should have a @file{configure} script, and the minimal\ninterface it should have.  The @file{Makefile} too should follow some\nestablished conventions.  The result?  A unified build system that\nmakes all packages almost indistinguishable by the installer.  In its\nsimplest scenario, all the installer has to do is to unpack the\npackage, run @code{./configure && make && make install}, and repeat\nwith the next package to install.\n\nWe call this build system the @dfn{GNU Build System}, since it was\ngrown out of the GNU project.  However it is used by a vast number of\nother packages: following any existing convention has its advantages.\n\n@cindex Autotools, introduction\n\nThe Autotools are tools that will create a GNU Build System for your\npackage.  Autoconf mostly focuses on @file{configure} and Automake on\n@file{Makefile}s.  It is entirely possible to create a GNU Build\nSystem without the help of these tools.  However it is rather\nburdensome and error-prone.  We will discuss this again after some\nillustration of the GNU Build System in action.\n\n@node Use Cases\n@section Use Cases for the GNU Build System\n@cindex GNU Build System, use cases\n@cindex GNU Build System, features\n@cindex Features of the GNU Build System\n@cindex Use Cases for the GNU Build System\n@cindex @file{amhello-1.0.tar.gz}, location\n@cindex @file{amhello-1.0.tar.gz}, use cases\n\nIn this section we explore several use cases for the GNU Build System.\nYou can replay all of these examples on the @file{amhello-1.0.tar.gz}\npackage distributed with Automake.  If Automake is installed on your\nsystem, you should find a copy of this file in\n@file{@var{prefix}/share/doc/automake/amhello-1.0.tar.gz}, where\n@var{prefix} is the installation prefix specified during configuration\n(@var{prefix} defaults to @file{/usr/local}, however if Automake was\ninstalled by some GNU/Linux distribution it most likely has been set\nto @file{/usr}).  If you do not have a copy of Automake installed,\nyou can find a copy of this file inside the @file{doc/} directory of\nthe Automake package.\n\nSome of the following use cases present features that are in fact\nextensions to the GNU Build System.  Read: they are not specified by\nthe GNU Coding Standards, but they are nonetheless part of the build\nsystem created by the Autotools.  To keep things simple, we do not\npoint out the difference.  Our objective is to show you many of the\nfeatures that the build system created by the Autotools will offer to\nyou.\n\n@menu\n* Basic Installation::          Common installation procedure\n* Standard Targets::            A list of standard Makefile targets\n* Standard Directory Variables::  A list of standard directory variables\n* Standard Configuration Variables::  Using configuration variables\n* config.site::                 Using a config.site file\n* VPATH Builds::                Parallel build trees\n* Two-Part Install::            Installing data and programs separately\n* Cross-Compilation::           Building for other architectures\n* Renaming::                    Renaming programs at install time\n* DESTDIR::                     Building binary packages with DESTDIR\n* Preparing Distributions::     Rolling out tarballs\n* Dependency Tracking::         Automatic dependency tracking\n* Nested Packages::             The GNU Build Systems can be nested\n@end menu\n\n@node Basic Installation\n@subsection Basic Installation\n@cindex Configuration, basics\n@cindex Installation, basics\n@cindex GNU Build System, basics\n\nThe most common installation procedure looks as follows.\n\n@example\n~ % @kbd{tar zxf amhello-1.0.tar.gz}\n~ % @kbd{cd amhello-1.0}\n~/amhello-1.0 % @kbd{./configure}\n@dots{}\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\n@dots{}\n~/amhello-1.0 % @kbd{make}\n@dots{}\n~/amhello-1.0 % @kbd{make check}\n@dots{}\n~/amhello-1.0 % @kbd{su}\nPassword:\n/home/adl/amhello-1.0 # @kbd{make install}\n@dots{}\n/home/adl/amhello-1.0 # @kbd{exit}\n~/amhello-1.0 % @kbd{make installcheck}\n@dots{}\n@end example\n\n@cindex Unpacking\n\nThe user first unpacks the package.  Here, and in the following\nexamples, we will use the non-portable @code{tar zxf} command for\nsimplicity.  On a system without GNU @command{tar} installed, this\ncommand should read @code{gunzip -c amhello-1.0.tar.gz | tar xf -}.\n\nThe user then enters the newly created directory to run the\n@file{configure} script.  This script probes the system for various\nfeatures, and finally creates the @file{Makefile}s.  In this toy\nexample there are only two @file{Makefile}s, but in real-world projects,\nthere may be many more, usually one @file{Makefile} per directory.\n\nIt is now possible to run @code{make}.  This will construct all the\nprograms, libraries, and scripts that need to be constructed for the\npackage.  In our example, this compiles the @file{hello} program.\nAll files are constructed in place, in the source tree; we will see\nlater how this can be changed.\n\n@code{make check} causes the package's tests to be run.  This step is\nnot mandatory, but it is often good to make sure the programs that\nhave been built behave as they should, before you decide to install\nthem.  Our example does not contain any tests, so running @code{make\ncheck} is a no-op.\n\n@cindex su, before @code{make install}\nAfter everything has been built, and maybe tested, it is time to\ninstall it on the system.  That means copying the programs,\nlibraries, header files, scripts, and other data files from the\nsource directory to their final destination on the system.  The\ncommand @code{make install} will do that.  However, by default\neverything will be installed in subdirectories of @file{/usr/local}:\nbinaries will go into @file{/usr/local/bin}, libraries will end up in\n@file{/usr/local/lib}, etc.  This destination is usually not writable\nby any user, so we assume that we have to become root before we can\nrun @code{make install}.  In our example, running @code{make install}\nwill copy the program @file{hello} into @file{/usr/local/bin}\nand @file{README} into @file{/usr/local/share/doc/amhello}.\n\nA last and optional step is to run @code{make installcheck}.  This\ncommand may run tests on the installed files.  @code{make check} tests\nthe files in the source tree, while @code{make installcheck} tests\ntheir installed copies.  The tests run by the latter can be different\nfrom those run by the former.  For instance, there are tests that\ncannot be run in the source tree.  Conversely, some packages are set\nup so that @code{make installcheck} will run the very same tests as\n@code{make check}, only on different files (non-installed\nvs.@: installed).  It can make a difference, for instance when the\nsource tree's layout is different from that of the installation.\nFurthermore it may help to diagnose an incomplete installation.\n\nPresently most packages do not have any @code{installcheck} tests\nbecause the existence of @code{installcheck} is little known, and its\nusefulness is neglected.  Our little toy package is no better: @code{make\ninstallcheck} does nothing.\n\n@node Standard Targets\n@subsection Standard @file{Makefile} Targets\n\nSo far we have come across four ways to run @command{make} in the GNU\nBuild System: @code{make}, @code{make check}, @code{make install}, and\n@code{make installcheck}.  The words @code{check}, @code{install}, and\n@code{installcheck}, passed as arguments to @command{make}, are called\n@dfn{targets}.  @code{make} is a shorthand for @code{make all},\n@code{all} being the default target in the GNU Build System.\n\nHere is a list of the most useful targets that the GNU Coding Standards\nspecify.\n\n@table @code\n@item make all\n@trindex all\nBuild programs, libraries, documentation, etc.@: (same as @code{make}).\n@item make install\n@trindex install\nInstall what needs to be installed, copying the files from the\npackage's tree to system-wide directories.\n@item make install-strip\n@trindex install-strip\nSame as @code{make install}, then strip debugging symbols.  Some\nusers like to trade space for useful bug reports@enddots{}\n@item make uninstall\n@trindex uninstall\nThe opposite of @code{make install}: erase the installed files.\n(This needs to be run from the same build tree that was installed.)\n@item make clean\n@trindex clean\nErase from the build tree the files built by @code{make all}.\n@item make distclean\n@trindex distclean\nAdditionally erase anything @code{./configure} created.\n@item make check\n@trindex check\nRun the test suite, if any.\n@item make installcheck\n@trindex installcheck\nCheck the installed programs or libraries, if supported.\n@item make dist\n@trindex dist\nRecreate @file{@var{package}-@var{version}.tar.gz} from all the source\nfiles.\n@end table\n\n@node Standard Directory Variables\n@subsection Standard Directory Variables\n@cindex directory variables\n\nThe GNU Coding Standards also specify a hierarchy of variables to\ndenote installation directories.  Some of these are:\n\n@multitable {Directory variable} {@code{$@{datarootdir@}/doc/$@{PACKAGE@}}}\n@headitem Directory variable    @tab Default value\n@item @code{prefix}              @tab @code{/usr/local}\n@item @w{@ @ @code{exec_prefix}} @tab @code{$@{prefix@}}\n@item @w{@ @ @ @ @code{bindir}}  @tab @code{$@{exec_prefix@}/bin}\n@item @w{@ @ @ @ @code{libdir}}  @tab @code{$@{exec_prefix@}/lib}\n@item @w{@ @ @ @ @dots{}}\n@item @w{@ @ @code{includedir}}  @tab @code{$@{prefix@}/include}\n@item @w{@ @ @code{datarootdir}} @tab @code{$@{prefix@}/share}\n@item @w{@ @ @ @ @code{datadir}} @tab @code{$@{datarootdir@}}\n@item @w{@ @ @ @ @code{mandir}}  @tab @code{$@{datarootdir@}/man}\n@item @w{@ @ @ @ @code{infodir}} @tab @code{$@{datarootdir@}/info}\n@item @w{@ @ @ @ @code{docdir}}  @tab @code{$@{datarootdir@}/doc/$@{PACKAGE@}}\n@item @w{@ @ @dots{}}\n@end multitable\n\n@c We should provide a complete table somewhere, but not here.  The\n@c complete list of directory variables it too confusing as-is.  It\n@c requires some explanations that are too complicated for this\n@c introduction.  Besides listing directories like localstatedir\n@c would make the explanations in ``Two-Part Install'' harder.\n\nEach of these directories has a role which is often obvious from its\nname.  In a package, any installable file will be installed in one of\nthese directories.  For instance in @code{amhello-1.0}, the program\n@file{hello} is to be installed in @var{bindir}, the directory for\nbinaries.  The default value for this directory is\n@file{/usr/local/bin}, but the user can supply a different value when\ncalling @command{configure}.  Also the file @file{README} will be\ninstalled into @var{docdir}, which defaults to\n@file{/usr/local/share/doc/amhello}.\n\n@opindex --prefix\n\nAs a user, if you wish to install a package on your own account, you\ncould proceed as follows:\n\n@example\n~/amhello-1.0 % @kbd{./configure --prefix ~/usr}\n@dots{}\n~/amhello-1.0 % @kbd{make}\n@dots{}\n~/amhello-1.0 % @kbd{make install}\n@dots{}\n@end example\n\nThis would install @file{~/usr/bin/hello} and\n@file{~/usr/share/doc/amhello/README}.\n\nThe list of all such directory options is shown by\n@code{./configure --help}.\n\n@node Standard Configuration Variables\n@subsection Standard Configuration Variables\n@cindex configuration variables, overriding\n\nThe GNU Coding Standards also define a set of standard configuration\nvariables used during the build.  Here are some:\n\n@table @asis\n@item @code{CC}\nC compiler command\n@item @code{CFLAGS}\nC compiler flags\n@item @code{CXX}\nC++ compiler command\n@item @code{CXXFLAGS}\nC++ compiler flags\n@item @code{LDFLAGS}\nlinker flags\n@item @code{CPPFLAGS}\nC/C++ preprocessor flags\n@item @dots{}\n@end table\n\n@command{configure} usually does a good job at setting appropriate\nvalues for these variables, but there are cases where you may want to\noverride them.  For instance you may have several versions of a\ncompiler installed and would like to use another one, you may have\nheader files installed outside the default search path of the\ncompiler, or even libraries out of the way of the linker.\n\nHere is how one would call @command{configure} to force it to use\n@command{gcc-3} as C compiler, use header files from\n@file{~/usr/include} when compiling, and libraries from\n@file{~/usr/lib} when linking.\n\n@example\n~/amhello-1.0 % @kbd{./configure --prefix ~/usr CC=gcc-3 \\\nCPPFLAGS=-I$HOME/usr/include LDFLAGS=-L$HOME/usr/lib}\n@end example\n\nAgain, a full list of these variables appears in the output of\n@code{./configure --help}.\n\n@node config.site\n@subsection Overriding Default Configuration Setting with @file{config.site}\n@cindex @file{config.site} example\n\nWhen installing several packages using the same setup, it can be\nconvenient to create a file to capture common settings.\nIf a file named @file{@var{prefix}/share/config.site} exists,\n@command{configure} will source it at the beginning of its execution.\n\nRecall the command from the previous section:\n\n@example\n~/amhello-1.0 % @kbd{./configure --prefix ~/usr CC=gcc-3 \\\nCPPFLAGS=-I$HOME/usr/include LDFLAGS=-L$HOME/usr/lib}\n@end example\n\nAssuming we are installing many package in @file{~/usr}, and will\nalways want to use these definitions of @code{CC}, @code{CPPFLAGS}, and\n@code{LDFLAGS}, we can automate this by creating the following\n@file{~/usr/share/config.site} file:\n\n@example\ntest -z \"$CC\" && CC=gcc-3\ntest -z \"$CPPFLAGS\" && CPPFLAGS=-I$HOME/usr/include\ntest -z \"$LDFLAGS\" && LDFLAGS=-L$HOME/usr/lib\n@end example\n\nNow, any time a @file{configure} script is using the @file{~/usr}\nprefix, it will execute the above @file{config.site} and define\nthese three variables.\n\n@example\n~/amhello-1.0 % @kbd{./configure --prefix ~/usr}\nconfigure: loading site script /home/adl/usr/share/config.site\n@dots{}\n@end example\n\n@xref{Site Defaults, , Setting Site Defaults, autoconf, The Autoconf\nManual}, for more information about this feature.\n\n\n@node VPATH Builds\n@subsection Parallel Build Trees (a.k.a.@: VPATH Builds)\n@cindex Parallel build trees\n@cindex VPATH builds\n@cindex source tree and build tree\n@cindex build tree and source tree\n@cindex trees, source vs.@: build\n\nThe GNU Build System distinguishes two trees: the source tree, and\nthe build tree.  These are two directories that may be the same, or\ndifferent.\n\nThe source tree is rooted in the directory containing the\n@file{configure} script.  It contains all the source files (those that are\ndistributed), and may be arranged using several subdirectories.\n\nThe build tree is rooted in the current directory at the time @file{configure}\nwas run, and is populated with all object files, programs, libraries,\nand other derived files built from the sources (and hence not\ndistributed).  The build tree usually has the same subdirectory layout\nas the source tree; its subdirectories are created automatically by\nthe build system.\n\nIf @file{configure} is executed in its own directory, the source and\nbuild trees are combined: derived files are constructed in the same\ndirectories as their sources.  This was the case in our first\ninstallation example (@pxref{Basic Installation}).\n\nA common request from users is that they want to confine all derived\nfiles to a single directory, to keep their source directories\nuncluttered.  Here is how we could run @file{configure} to create\neverything in a build tree (that is, subdirectory) called @file{build/}.\n\n@example\n~ % @kbd{tar zxf ~/amhello-1.0.tar.gz}\n~ % @kbd{cd amhello-1.0}\n~/amhello-1.0 % @kbd{mkdir build && cd build}\n~/amhello-1.0/build % @kbd{../configure}\n@dots{}\n~/amhello-1.0/build % @kbd{make}\n@dots{}\n@end example\n\nThese setups, where source and build trees are different, are often\ncalled @dfn{parallel builds} or @dfn{VPATH builds}.  The expression\n@emph{parallel build} is misleading: the word @emph{parallel} is a\nreference to the way the build tree shadows the source tree, it is not\nabout some concurrency in the way build commands are run.  For this\nreason we refer to such setups using the name @emph{VPATH builds} in\nthe following.  @emph{VPATH} is the name of the @command{make} feature\nused by the @file{Makefile}s to allow these builds (@pxref{General\nSearch, , @code{VPATH} Search Path for All Prerequisites, make, The\nGNU Make Manual}).\n\n@cindex multiple configurations, example\n@cindex debug build, example\n@cindex optimized build, example\n\nVPATH builds have other interesting uses.  One is to build the same\nsources with multiple configurations.  For instance:\n\n@c Keep in sync with amhello-cflags.sh\n@example\n~ % @kbd{tar zxf ~/amhello-1.0.tar.gz}\n~ % @kbd{cd amhello-1.0}\n~/amhello-1.0 % @kbd{mkdir debug optim && cd debug}\n~/amhello-1.0/debug % @kbd{../configure CFLAGS='-g -O0'}\n@dots{}\n~/amhello-1.0/debug % @kbd{make}\n@dots{}\n~/amhello-1.0/debug % cd ../optim\n~/amhello-1.0/optim % @kbd{../configure CFLAGS='-O3 -fomit-frame-pointer'}\n@dots{}\n~/amhello-1.0/optim % @kbd{make}\n@dots{}\n@end example\n\nWith network file systems, a similar approach can be used to build the\nsame sources on different machines.  For instance, suppose that the\nsources are installed on a directory shared by two hosts: @code{HOST1}\nand @code{HOST2}, which may be different platforms.\n\n@example\n~ % @kbd{cd /nfs/src}\n/nfs/src % @kbd{tar zxf ~/amhello-1.0.tar.gz}\n@end example\n\nOn the first host, you could create a local build directory:\n@example\n[HOST1] ~ % @kbd{mkdir /tmp/amh && cd /tmp/amh}\n[HOST1] /tmp/amh % @kbd{/nfs/src/amhello-1.0/configure}\n...\n[HOST1] /tmp/amh % @kbd{make && sudo make install}\n...\n@end example\n\n@noindent\n(Here we assume that the installer has configured @command{sudo} so it\ncan execute @code{make install} with root privileges; it is more convenient\nthan using @command{su} like in @ref{Basic Installation}).\n\nOn the second host, you would do exactly the same, possibly at\nthe same time:\n@example\n[HOST2] ~ % @kbd{mkdir /tmp/amh && cd /tmp/amh}\n[HOST2] /tmp/amh % @kbd{/nfs/src/amhello-1.0/configure}\n...\n[HOST2] /tmp/amh % @kbd{make && sudo make install}\n...\n@end example\n\n@cindex read-only source tree\n@cindex source tree, read-only\n\nIn this scenario, nothing forbids the @file{/nfs/src/amhello-1.0}\ndirectory from being read-only.  In fact VPATH builds are also a means\nof building packages from a read-only medium such as a CD-ROM.  (The\nFSF used to sell CD-ROMs with unpacked source code, before the GNU\nproject grew so big.)\n\n@node Two-Part Install\n@subsection Two-Part Installation\n\nIn our last example (@pxref{VPATH Builds}), a source tree was shared\nby two hosts, but compilation and installation were done separately on\neach host.\n\nThe GNU Build System also supports networked setups where part of the\ninstalled files should be shared amongst multiple hosts.  It does so\nby distinguishing architecture-dependent files from\narchitecture-independent files, and providing two @file{Makefile}\ntargets to install each of these classes of files.\n\n@trindex install-exec\n@trindex install-data\n\nThese targets are @code{install-exec} for architecture-dependent files\nand @code{install-data} for architecture-independent files.\nThe command we used up to now, @code{make install}, can be thought of\nas a shorthand for @code{make install-exec install-data}.\n\nFrom the GNU Build System point of view, the distinction between\narchitecture-dependent files and architecture-independent files is\nbased exclusively on the directory variable used to specify their\ninstallation destination.  In the list of directory variables we\nprovided earlier (@pxref{Standard Directory Variables}), all the\nvariables based on @var{exec-prefix} designate architecture-dependent\ndirectories whose files will be installed by @code{make install-exec}.\nThe others designate architecture-independent directories and will\nserve files installed by @code{make install-data}.  @xref{The Two Parts\nof Install}, for more details.\n\nHere is how we could revisit our two-host installation example,\nassuming that (1) we want to install the package directly in\n@file{/usr}, and (2) the directory @file{/usr/share} is shared by the\ntwo hosts.\n\nOn the first host we would run\n@example\n[HOST1] ~ % @kbd{mkdir /tmp/amh && cd /tmp/amh}\n[HOST1] /tmp/amh % @kbd{/nfs/src/amhello-1.0/configure --prefix /usr}\n...\n[HOST1] /tmp/amh % @kbd{make && sudo make install}\n...\n@end example\n\nOn the second host, however, we need only install the\narchitecture-specific files.\n@example\n[HOST2] ~ % @kbd{mkdir /tmp/amh && cd /tmp/amh}\n[HOST2] /tmp/amh % @kbd{/nfs/src/amhello-1.0/configure --prefix /usr}\n...\n[HOST2] /tmp/amh % @kbd{make && sudo make install-exec}\n...\n@end example\n\nIn packages that have installation checks, it would make sense to run\n@code{make installcheck} (@pxref{Basic Installation}) to verify that\nthe package works correctly despite the apparent partial installation.\n\n@node Cross-Compilation\n@subsection Cross-Compilation\n@cindex cross-compilation\n\nTo @dfn{cross-compile} is to build on one platform a binary that will\nrun on another platform.  When speaking of cross-compilation, it is\nimportant to distinguish between the @dfn{build platform} on which\nthe compilation is performed, and the @dfn{host platform} on which the\nresulting executable is expected to run.  The following\n@command{configure} options are used to specify each of them:\n\n@table @option\n@item --build=@var{build}\n@opindex --build=@var{build}\nThe system on which the package is built.\n@item --host=@var{host}\n@opindex --host=@var{host}\nThe system where built programs and libraries will run.\n@end table\n\nWhen the @option{--host} is used, @command{configure} will search for\nthe cross-compiling suite for this platform.  Cross-compilation tools\ncommonly have their target architecture as prefix of their name.  For\ninstance my cross-compiler for MinGW32 has its binaries called\n@code{i586-mingw32msvc-gcc}, @code{i586-mingw32msvc-ld},\n@code{i586-mingw32msvc-as}, etc.\n\n@cindex MinGW cross-compilation example\n@cindex cross-compilation example\n\nHere is how we could build @code{amhello-1.0} for\n@code{i586-mingw32msvc} on a GNU/Linux PC.\n\n@c Keep in sync with amhello-cross-compile.sh\n@smallexample\n~/amhello-1.0 % @kbd{./configure --build i686-pc-linux-gnu --host i586-mingw32msvc}\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for gawk... gawk\nchecking whether make sets $(MAKE)... yes\nchecking for i586-mingw32msvc-strip... i586-mingw32msvc-strip\nchecking for i586-mingw32msvc-gcc... i586-mingw32msvc-gcc\nchecking for C compiler default output file name... a.exe\nchecking whether the C compiler works... yes\nchecking whether we are cross compiling... yes\nchecking for suffix of executables... .exe\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether i586-mingw32msvc-gcc accepts -g... yes\nchecking for i586-mingw32msvc-gcc option to accept ANSI C...\n@dots{}\n~/amhello-1.0 % @kbd{make}\n@dots{}\n~/amhello-1.0 % @kbd{cd src; file hello.exe}\nhello.exe: MS Windows PE 32-bit Intel 80386 console executable not relocatable\n@end smallexample\n\nThe @option{--host} and @option{--build} options are usually all we\nneed for cross-compiling.  The only exception is if the package being\nbuilt is itself a cross-compiler: we need a third option to specify\nits target architecture.\n\n@table @option\n@item --target=@var{target}\n@opindex --target=@var{target}\nWhen building compiler tools: the system for which the tools will\ncreate output.\n@end table\n\nFor instance when installing GCC, the GNU Compiler Collection, we can\nuse @option{--target=@/@var{target}} to specify that we want to build\nGCC as a cross-compiler for @var{target}.  Mixing @option{--build} and\n@option{--target}, we can actually cross-compile a cross-compiler;\nsuch a three-way cross-compilation is known as a @dfn{Canadian cross}.\n\n@xref{Specifying Names, , Specifying the System Type, autoconf, The\nAutoconf Manual}, for more information about these @command{configure}\noptions.\n\n@node Renaming\n@subsection Renaming Programs at Install Time\n@cindex Renaming programs\n@cindex Transforming program names\n@cindex Programs, renaming during installation\n\nThe GNU Build System provides means to automatically rename\nexecutables and manpages before they are installed (@pxref{Man Pages}).\nThis is especially convenient\nwhen installing a GNU package on a system that already has a\nproprietary implementation you do not want to overwrite.  For instance,\nyou may want to install GNU @command{tar} as @command{gtar} so you can\ndistinguish it from your vendor's @command{tar}.\n\nThis can be done using one of these three @command{configure} options.\n\n@table @option\n@item --program-prefix=@var{prefix}\n@opindex --program-prefix=@var{prefix}\nPrepend @var{prefix} to installed program names.\n@item --program-suffix=@var{suffix}\n@opindex --program-suffix=@var{suffix}\nAppend @var{suffix} to installed program names.\n@item --program-transform-name=@var{program}\n@opindex --program-transform-name=@var{program}\nRun @code{sed @var{program}} on installed program names.\n@end table\n\nThe following commands would install @file{hello}\nas @file{/usr/local/bin/test-hello}, for instance.\n\n@example\n~/amhello-1.0 % @kbd{./configure --program-prefix test-}\n@dots{}\n~/amhello-1.0 % @kbd{make}\n@dots{}\n~/amhello-1.0 % @kbd{sudo make install}\n@dots{}\n@end example\n\n@node DESTDIR\n@subsection Building Binary Packages Using DESTDIR\n@vindex DESTDIR\n\nThe GNU Build System's @code{make install} and @code{make uninstall}\ninterface does not exactly fit the needs of a system administrator\nwho has to deploy and upgrade packages on lots of hosts.  In other\nwords, the GNU Build System does not replace a package manager.\n\nSuch package managers usually need to know which files have been\ninstalled by a package, so a mere @code{make install} is\ninappropriate.\n\n@cindex Staged installation\n\nThe @code{DESTDIR} variable can be used to perform a staged\ninstallation.  The package should be configured as if it was going to\nbe installed in its final location (e.g., @code{--prefix /usr}), but\nwhen running @code{make install}, the @code{DESTDIR} should be set to\nthe absolute name of a directory into which the installation will be\ndiverted.  From this directory it is easy to review which files are\nbeing installed where, and finally copy them to their final location\nby some means.\n\n@cindex Binary package\n\nFor instance here is how we could create a binary package containing a\nsnapshot of all the files to be installed.\n\n@c Keep in sync with amhello-binpkg.sh\n@example\n~/amhello-1.0 % @kbd{./configure --prefix /usr}\n@dots{}\n~/amhello-1.0 % @kbd{make}\n@dots{}\n~/amhello-1.0 % @kbd{make DESTDIR=$HOME/inst install}\n@dots{}\n~/amhello-1.0 % @kbd{cd ~/inst}\n~/inst % @kbd{find . -type f -print > ../files.lst}\n~/inst % @kbd{tar zcvf ~/amhello-1.0-i686.tar.gz `cat ../files.lst`}\n./usr/bin/hello\n./usr/share/doc/amhello/README\n@end example\n\nAfter this example, @code{amhello-1.0-i686.tar.gz} is ready to be\nuncompressed in @file{/} on many hosts.  (Using @code{`cat ../files.lst`}\ninstead of @samp{.} as argument for @command{tar} avoids entries for\neach subdirectory in the archive: we would not like @command{tar} to\nrestore the modification time of @file{/}, @file{/usr/}, etc.)\n\nNote that when building packages for several architectures, it might\nbe convenient to use @code{make install-data} and @code{make\ninstall-exec} (@pxref{Two-Part Install}) to gather\narchitecture-independent files in a single package.\n\n@xref{Install}, for more information.\n\n@c We should document PRE_INSTALL/POST_INSTALL/NORMAL_INSTALL and their\n@c UNINSTALL counterparts.\n\n@node Preparing Distributions\n@subsection Preparing Distributions\n@cindex Preparing distributions\n@cindex Packages, preparation\n@cindex Distributions, preparation\n\nWe have already mentioned @code{make dist}.  This target collects all\nyour source files and the necessary parts of the build system to\ncreate a tarball named @file{@var{package}-@var{version}.tar.gz}.\n\n@cindex @code{distcheck} better than @code{dist}\n\nAnother, more useful command is @code{make distcheck}.  The\n@code{distcheck} target constructs\n@file{@var{package}-@var{version}.tar.gz} just as well as @code{dist},\nbut it additionally ensures most of the use cases presented so far\nwork:\n\n@itemize @bullet\n@item\nIt attempts a full compilation of the package (@pxref{Basic\nInstallation}): unpacking the newly constructed tarball, running\n@code{make}, @code{make dvi}, @code{make check}, @code{make install},\nas well as @code{make installcheck}, and even @code{make dist},\n@item\nit tests VPATH builds with read-only source tree (@pxref{VPATH Builds}),\n@item\nit makes sure @code{make clean}, @code{make distclean}, and @code{make\nuninstall} do not omit any file (@pxref{Standard Targets}),\n@item\nand it checks that @code{DESTDIR} installations work (@pxref{DESTDIR}).\n@end itemize\n\nAll of these actions are performed in a temporary directory, so that\nno root privileges are required.  The exact location and the exact\nstructure of such a subdirectory (where the extracted sources are\nplaced, how the temporary build and install directories are named and\nhow deeply they are nested, etc.) is to be considered an\nimplementation detail, which can change at any time; so do not rely on\nit.\n\nReleasing a package that fails @code{make distcheck} means that one of\nthe scenarios we presented will not work and some users will be\ndisappointed.  Therefore it is a good practice to release a package\nonly after a successful @code{make distcheck}.  This of course does\nnot imply that the package will be flawless, but at least it will\nprevent some of the embarrassing errors you may find in packages\nreleased by people who have never heard about @code{distcheck} (like\n@code{DESTDIR} not working because of a typo, or a distributed file\nbeing erased by @code{make clean}, or even @code{VPATH} builds not\nworking).\n\n@xref{Creating amhello}, to recreate @file{amhello-1.0.tar.gz} using\n@code{make distcheck}.  @xref{Checking the Distribution}, for more\ninformation about @code{distcheck}.\n\n@node Dependency Tracking\n@subsection Automatic Dependency Tracking\n@cindex Dependency tracking\n\nDependency tracking is performed as a side-effect of compilation.\nEach time the build system compiles a source file, it computes its\nlist of dependencies (in C these are the header files included by the\nsource being compiled).  Later, any time @command{make} is run and a\ndependency appears to have changed, the dependent files will be\nrebuilt.\n\nAutomake generates code for automatic dependency tracking by default,\nunless the developer chooses to override it; for more information,\n@pxref{Dependencies}.\n\nWhen @command{configure} is executed, you can see it probing each\ncompiler for the dependency mechanism it supports (several mechanisms\ncan be used):\n\n@example\n~/amhello-1.0 % @kbd{./configure --prefix /usr}\n@dots{}\nchecking dependency style of gcc... gcc3\n@dots{}\n@end example\n\nBecause dependencies are only computed as a side-effect of the\ncompilation, no dependency information exists the first time a package\nis built.  This is OK because all the files need to be built anyway:\n@code{make} does not have to decide which files need to be rebuilt.\nIn fact, dependency tracking is completely useless for one-time builds\nand there is a @command{configure} option to disable this:\n\n@table @option\n@item --disable-dependency-tracking\n@opindex --disable-dependency-tracking\nSpeed up one-time builds.\n@end table\n\nSome compilers do not offer any practical way to derive the list of\ndependencies as a side-effect of the compilation, requiring a separate\nrun (maybe of another tool) to compute these dependencies.  The\nperformance penalty implied by these methods is important enough to\ndisable them by default.  The option @option{--enable-dependency-tracking}\nmust be passed to @command{configure} to activate them.\n\n@table @option\n@item --enable-dependency-tracking\n@opindex --enable-dependency-tracking\nDo not reject slow dependency extractors.\n@end table\n\n@xref{Dependency Tracking Evolution, , Dependency Tracking Evolution,\nautomake-history, Brief History of Automake}, for some discussion about\nthe different dependency tracking schemes used by Automake over the years.\n\n@node Nested Packages\n@subsection Nested Packages\n@cindex Nested packages\n@cindex Packages, nested\n@cindex Subpackages\n\nAlthough nesting packages isn't something we would recommend to\nsomeone who is discovering the Autotools, it is a nice feature worthy\nof mention in this small advertising tour.\n\nAutoconfiscated packages (that means packages whose build system have\nbeen created by Autoconf and friends) can be nested to arbitrary\ndepth.\n\nA typical setup is that package A will distribute one of the libraries\nit needs in a subdirectory.  This library B is a complete package with\nits own GNU Build System.  The @command{configure} script of A will\nrun the @command{configure} script of B as part of its execution;\nbuilding and installing A will also build and install B.  Generating a\ndistribution for A will also include B.\n\nIt is possible to gather several packages like this.  GCC is a heavy\nuser of this feature.  This gives installers a single package to\nconfigure, build and install, while it allows developers to work on\nsubpackages independently.\n\nWhen configuring nested packages, the @command{configure} options\ngiven to the top-level @command{configure} are passed recursively to\nnested @command{configure}s.  A package that does not understand an\noption will ignore it, assuming it is meaningful to some other\npackage.\n\n@opindex --help=recursive\n\nThe command @code{configure --help=recursive} can be used to display\nthe options supported by all the included packages.\n\n@xref{Subpackages}, for an example setup.\n\n@node Why Autotools\n@section How Autotools Help\n@cindex Autotools, purpose\n\nThere are several reasons why you may not want to implement the GNU\nBuild System yourself (read: write a @file{configure} script and\n@file{Makefile}s yourself).\n\n@itemize @bullet\n@item\nAs we have seen, the GNU Build System has a lot of\nfeatures (@pxref{Use Cases}).\nSome users may expect features you have not implemented because\nyou did not need them.\n@item\nImplementing these features portably is difficult and exhausting.\nThink of writing portable shell scripts, and portable\n@file{Makefile}s, for systems you may not have handy.  @xref{Portable\nShell, , Portable Shell Programming, autoconf, The Autoconf Manual}, to\nconvince yourself.\n@item\nYou will have to upgrade your setup to follow changes to the GNU\nCoding Standards.\n@end itemize\n\nThe GNU Autotools take all this burden off your back and provide:\n\n@itemize @bullet\n@item\nTools to create a portable, complete, and self-contained GNU Build\nSystem, from simple instructions.\n@emph{Self-contained} meaning the resulting build system does not\nrequire the GNU Autotools.\n@item\nA central place where fixes and improvements are made:\na bug-fix for a portability issue will benefit every package.\n@end itemize\n\nYet there also exist reasons why you may want NOT to use the\nAutotools@enddots{} For instance you may be already using (or used to)\nanother incompatible build system.  Autotools will only be useful if\nyou do accept the concepts of the GNU Build System.  People who have their\nown idea of how a build system should work will feel frustrated by the\nAutotools.\n\n@node Hello World\n@section A Small Hello World\n@cindex Example Hello World\n@cindex Hello World example\n@cindex @file{amhello-1.0.tar.gz}, creation\n\nIn this section we recreate the @file{amhello-1.0} package from\nscratch.  The first subsection shows how to call the Autotools to\ninstantiate the GNU Build System, while the second explains the\nmeaning of the @file{configure.ac} and @file{Makefile.am} files read\nby the Autotools.\n\n@anchor{amhello Explained}\n@menu\n* Creating amhello::            Create @file{amhello-1.0.tar.gz} from scratch\n* amhello's configure.ac Setup Explained::\n* amhello's Makefile.am Setup Explained::\n@end menu\n\n@node Creating amhello\n@subsection Creating @file{amhello-1.0.tar.gz}\n\nHere is how we can recreate @file{amhello-1.0.tar.gz} from scratch.\nThe package is simple enough so that we will only need to write 5\nfiles.  (You may copy them from the final @file{amhello-1.0.tar.gz}\nthat is distributed with Automake if you do not want to write them.)\n\nCreate the following files in an empty directory.\n\n@itemize @bullet\n\n@item\n@file{src/main.c} is the source file for the @file{hello} program.  We\nstore it in the @file{src/} subdirectory, because later, when the package\nevolves, it will ease the addition of a @file{man/} directory for man\npages, a @file{data/} directory for data files, etc.\n@example\n~/amhello % @kbd{cat src/main.c}\n#include <config.h>\n#include <stdio.h>\n\nint\nmain (void)\n@{\n  puts (\"Hello World!\");\n  puts (\"This is \" PACKAGE_STRING \".\");\n  return 0;\n@}\n@end example\n\n@item\n@file{README} contains some very limited documentation for our little\npackage.\n@example\n~/amhello % @kbd{cat README}\nThis is a demonstration package for GNU Automake.\nType 'info Automake' to read the Automake manual.\n@end example\n\n@item\n@file{Makefile.am} and @file{src/Makefile.am} contain Automake\ninstructions for these two directories.\n\n@example\n~/amhello % @kbd{cat src/Makefile.am}\nbin_PROGRAMS = hello\nhello_SOURCES = main.c\n~/amhello % @kbd{cat Makefile.am}\nSUBDIRS = src\ndist_doc_DATA = README\n@end example\n\n@item\nFinally, @file{configure.ac} contains Autoconf instructions to\ncreate the @command{configure} script.\n\n@example\n~/amhello % @kbd{cat configure.ac}\nAC_INIT([amhello], [1.0], [@value{PACKAGE_BUGREPORT}])\nAM_INIT_AUTOMAKE([-Wall -Werror foreign])\nAC_PROG_CC\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_FILES([\n Makefile\n src/Makefile\n])\nAC_OUTPUT\n@end example\n@end itemize\n\n@cindex @command{autoreconf}, example\n\nOnce you have these five files, it is time to run the Autotools to\ninstantiate the build system.  Do this using the @command{autoreconf}\ncommand as follows:\n\n@example\n~/amhello % @kbd{autoreconf --install}\nconfigure.ac: installing './install-sh'\nconfigure.ac: installing './missing'\nconfigure.ac: installing './compile'\nsrc/Makefile.am: installing './depcomp'\n@end example\n\nAt this point the build system is complete.\n\nIn addition to the three scripts mentioned in its output, you can see\nthat @command{autoreconf} created four other files: @file{configure},\n@file{config.h.in}, @file{Makefile.in}, and @file{src/Makefile.in}.\nThe latter three files are templates that will be adapted to the\nsystem by @command{configure} under the names @file{config.h},\n@file{Makefile}, and @file{src/Makefile}.  Let's do this:\n\n@example\n~/amhello % @kbd{./configure}\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for gawk... no\nchecking for mawk... mawk\nchecking whether make sets $(MAKE)... yes\nchecking for gcc... gcc\nchecking for C compiler default output file name... a.out\nchecking whether the C compiler works... yes\nchecking whether we are cross compiling... no\nchecking for suffix of executables...\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking for style of include used by make... GNU\nchecking dependency style of gcc... gcc3\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\nconfig.status: creating config.h\nconfig.status: executing depfiles commands\n@end example\n\n@trindex distcheck\n@cindex @code{distcheck} example\n\nYou can see @file{Makefile}, @file{src/Makefile}, and @file{config.h}\nbeing created at the end after @command{configure} has probed the\nsystem.  It is now possible to run all the targets we wish\n(@pxref{Standard Targets}).  For instance:\n\n@example\n~/amhello % @kbd{make}\n@dots{}\n~/amhello % @kbd{src/hello}\nHello World!\nThis is amhello 1.0.\n~/amhello % @kbd{make distcheck}\n@dots{}\n=============================================\namhello-1.0 archives ready for distribution:\namhello-1.0.tar.gz\n=============================================\n@end example\n\nNote that running @command{autoreconf} is only needed initially when\nthe GNU Build System does not exist.  When you later change some\ninstructions in a @file{Makefile.am} or @file{configure.ac}, the\nrelevant part of the build system will be regenerated automatically\nwhen you execute @command{make}.\n\n@command{autoreconf} is a script that calls @command{autoconf},\n@command{automake}, and a bunch of other commands in the right order.\nIf you are beginning with these tools, it is not important to figure\nout in which order all of these tools should be invoked and why.  However,\nbecause Autoconf and Automake have separate manuals, the important\npoint to understand is that @command{autoconf} is in charge of\ncreating @file{configure} from @file{configure.ac}, while\n@command{automake} is in charge of creating @file{Makefile.in}s from\n@file{Makefile.am}s and @file{configure.ac}.  This should at least\ndirect you to the right manual when seeking answers.\n\n\n@node amhello's configure.ac Setup Explained\n@subsection @code{amhello}'s @file{configure.ac} Setup Explained\n\n@cindex @file{configure.ac}, Hello World\n\nLet us begin with the contents of @file{configure.ac}.\n\n@example\nAC_INIT([amhello], [1.0], [@value{PACKAGE_BUGREPORT}])\nAM_INIT_AUTOMAKE([-Wall -Werror foreign])\nAC_PROG_CC\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_FILES([\n Makefile\n src/Makefile\n])\nAC_OUTPUT\n@end example\n\nThis file is read by both @command{autoconf} (to create\n@file{configure}) and @command{automake} (to create the various\n@file{Makefile.in}s).  It contains a series of M4 macros that will be\nexpanded as shell code to finally form the @file{configure} script.\nWe will not elaborate on the syntax of this file, because the Autoconf\nmanual has a whole section about it (@pxref{Writing Autoconf Input, ,\nWriting @file{configure.ac}, autoconf, The Autoconf Manual}).\n\nThe macros prefixed with @code{AC_} are Autoconf macros, documented\nin the Autoconf manual (@pxref{Autoconf Macro Index, , Autoconf Macro\nIndex, autoconf, The Autoconf Manual}).  The macros that start with\n@code{AM_} are Automake macros, documented later in this manual\n(@pxref{Macro Index}).\n\nThe first two lines of @file{configure.ac} initialize Autoconf and\nAutomake.  @code{AC_INIT} takes in as parameters the name of the package,\nits version number, and a contact address for bug-reports about the\npackage (this address is output at the end of @code{./configure\n--help}, for instance).  When adapting this setup to your own package,\nby all means please do not blindly copy Automake's address: use the\nmailing list of your package, or your own mail address.\n\n@opindex -Wall\n@opindex -Werror\n@opindex foreign\n\nThe argument to @code{AM_INIT_AUTOMAKE} is a list of options for\n@command{automake} (@pxref{Options}).  @option{-Wall} and\n@option{-Werror} ask @command{automake} to turn on all warnings and\nreport them as errors.  We are speaking of @strong{Automake} warnings\nhere, such as dubious instructions in @file{Makefile.am}.  This has\nabsolutely nothing to do with how the compiler will be called, even\nthough it may support options with similar names.  Using @option{-Wall\n-Werror} is a safe setting when starting to work on a package: you do\nnot want to miss any issues.  Later you may decide to relax things a\nbit.  The @option{foreign} option tells Automake that this package\nwill not follow the GNU Standards.  GNU packages should always\ndistribute additional files such as @file{ChangeLog}, @file{AUTHORS},\netc.  We do not want @command{automake} to complain about these\nmissing files in our small example.\n\nThe @code{AC_PROG_CC} line causes the @command{configure} script to\nsearch for a C compiler and define the variable @code{CC} with its\nname.  The @file{src/Makefile.in} file generated by Automake uses the\nvariable @code{CC} to build @file{hello}, so when @command{configure}\ncreates @file{src/Makefile} from @file{src/Makefile.in}, it will define\n@code{CC} with the value it has found.  If Automake is asked to create\na @file{Makefile.in} that uses @code{CC} but @file{configure.ac} does\nnot define it, it will suggest you add a call to @code{AC_PROG_CC}.\n\nThe @code{AC_CONFIG_HEADERS([config.h])} invocation causes the\n@command{configure} script to create a @file{config.h} file gathering\n@samp{#define}s defined by other macros in @file{configure.ac}.  In our\ncase, the @code{AC_INIT} macro already defined a few of them.  Here\nis an excerpt of @file{config.h} after @command{configure} has run:\n\n@smallexample\n@dots{}\n/* Define to the address where bug reports for this package should be sent. */\n#define PACKAGE_BUGREPORT \"@value{PACKAGE_BUGREPORT}\"\n\n/* Define to the full name and version of this package. */\n#define PACKAGE_STRING \"amhello 1.0\"\n@dots{}\n@end smallexample\n\nAs you probably noticed, @file{src/main.c} includes @file{config.h} so\nit can use @code{PACKAGE_STRING}.  In a real-world project,\n@file{config.h} can grow really big, with one @samp{#define} per\nfeature probed on the system.\n\nThe @code{AC_CONFIG_FILES} macro declares the list of files that\n@command{configure} should create from their @file{*.in} templates.\nAutomake also scans this list to find the @file{Makefile.am} files it must\nprocess.  (This is important to remember: when adding a new directory\nto your project, you should add its @file{Makefile} to this list,\notherwise Automake will never process the new @file{Makefile.am} you\nwrote in that directory.)\n\nFinally, the @code{AC_OUTPUT} line is a closing command that actually\nproduces the part of the script in charge of creating the files\nregistered with @code{AC_CONFIG_HEADERS} and @code{AC_CONFIG_FILES}.\n\n@cindex @command{autoscan}\n\nWhen starting a new project, we suggest you start with such a simple\n@file{configure.ac}, and gradually add the other tests it requires.\nThe command @command{autoscan} can also suggest a few of the tests\nyour package may need (@pxref{autoscan Invocation, , Using\n@command{autoscan} to Create @file{configure.ac}, autoconf, The\nAutoconf Manual}).\n\n\n@node amhello's Makefile.am Setup Explained\n@subsection @code{amhello}'s @file{Makefile.am} Setup Explained\n\n@cindex @file{Makefile.am}, Hello World\n\nWe now turn to @file{src/Makefile.am}.  This file contains\nAutomake instructions to build and install @file{hello}.\n\n@example\nbin_PROGRAMS = hello\nhello_SOURCES = main.c\n@end example\n\nA @file{Makefile.am} has the same syntax as an ordinary\n@file{Makefile}.  When @command{automake} processes a\n@file{Makefile.am} it copies the entire file into the output\n@file{Makefile.in} (that will be later turned into @file{Makefile} by\n@command{configure}) but will react to certain variable definitions\nby generating some build rules and other variables.\nOften @file{Makefile.am}s contain only a list of variable definitions as\nabove, but they can also contain other variable and rule definitions that\n@command{automake} will pass along without interpretation.\n\nVariables that end with @code{_PROGRAMS} are special variables\nthat list programs that the resulting @file{Makefile} should build.\nIn Automake speak, this @code{_PROGRAMS} suffix is called a\n@dfn{primary}; Automake recognizes other primaries such as\n@code{_SCRIPTS}, @code{_DATA}, @code{_LIBRARIES}, etc.@: corresponding\nto different types of files.\n\nThe @samp{bin} part of the @code{bin_PROGRAMS} tells\n@command{automake} that the resulting programs should be installed in\n@var{bindir}.  Recall that the GNU Build System uses a set of variables\nto denote destination directories and allow users to customize these\nlocations (@pxref{Standard Directory Variables}).  Any such directory\nvariable can be put in front of a primary (omitting the @code{dir}\nsuffix) to tell @command{automake} where to install the listed files.\n\nPrograms need to be built from source files, so for each program\n@code{@var{prog}} listed in a @code{@w{_PROGRAMS}} variable,\n@command{automake} will look for another variable named\n@code{@var{prog}_SOURCES} listing its source files.  There may be more\nthan one source file: they will all be compiled and linked together.\n\nAutomake also knows that source files need to be distributed when\ncreating a tarball (unlike built programs).  So a side-effect of this\n@code{hello_SOURCES} declaration is that @file{main.c} will be\npart of the tarball created by @code{make dist}.\n\nFinally here are some explanations regarding the top-level\n@file{Makefile.am}.\n\n@example\nSUBDIRS = src\ndist_doc_DATA = README\n@end example\n\n@code{SUBDIRS} is a special variable listing all directories that\n@command{make} should recurse into before processing the current\ndirectory.  So this line is responsible for @command{make} building\n@file{src/hello} even though we run it from the top-level.  This line\nalso causes @code{make install} to install @file{src/hello} before\ninstalling @file{README} (not that this order matters).\n\nThe line @code{dist_doc_DATA = README} causes @file{README} to be\ndistributed and installed in @var{docdir}.  Files listed with the\n@code{_DATA} primary are not automatically part of the tarball built\nwith @code{make dist}, so we add the @code{dist_} prefix so they get\ndistributed.  However, for @file{README} it would not have been\nnecessary: @command{automake} automatically distributes any\n@file{README} file it encounters (the list of other files\nautomatically distributed is presented by @code{automake --help}).\nThe only important effect of this second line is therefore to install\n@file{README} during @code{make install}.\n\nOne thing not covered in this example is accessing the installation\ndirectory values (@pxref{Standard Directory Variables}) from your\nprogram code, that is, converting them into defined macros.  For this,\n@pxref{Defining Directories,,, autoconf, The Autoconf Manual}.\n\n\n@node Generalities\n@chapter General ideas\n\nThe following sections cover a few basic ideas that will help you\nunderstand how Automake works.\n\n@menu\n* General Operation::           General operation of Automake\n* Strictness::                  Standards conformance checking\n* Uniform::                     The Uniform Naming Scheme\n* Length Limitations::          Staying below the command line length limit\n* Canonicalization::            How derived variables are named\n* User Variables::              Variables reserved for the user\n* Auxiliary Programs::          Programs automake might require\n@end menu\n\n\n@node General Operation\n@section General Operation\n\nAutomake works by reading a @file{Makefile.am} and generating a\n@file{Makefile.in}.  Certain variables and rules defined in the\n@file{Makefile.am} instruct Automake to generate more specialized code;\nfor instance, a @code{bin_PROGRAMS} variable definition will cause rules\nfor compiling and linking programs to be generated.\n\n@cindex Non-standard targets\n@cindex @code{git-dist}, non-standard example\n@trindex git-dist\n\nThe variable definitions and rules in the @file{Makefile.am} are\ncopied mostly verbatim into the generated file, with all variable\ndefinitions preceding all rules.  This allows you to add almost\narbitrary code into the generated @file{Makefile.in}.  For instance,\nthe Automake distribution includes a non-standard rule for the\n@code{git-dist} target, which the Automake maintainer uses to make\ndistributions from the source control system.\n\n@cindex GNU make extensions\n\nNote that most GNU make extensions are not recognized by Automake.  Using\nsuch extensions in a @file{Makefile.am} will lead to errors or confusing\nbehavior.\n\n@cindex Append operator\n@cmindex +=\nA special exception is that the GNU make append operator, @samp{+=}, is\nsupported.  This operator appends its right hand argument to the variable\nspecified on the left.  Automake will translate the operator into\nan ordinary @samp{=} operator; @samp{+=} will thus work with any make program.\n\nAutomake tries to keep comments grouped with any adjoining rules or\nvariable definitions.\n\n@cindex Limitations of automake parser\n@cindex Automake parser, limitations of\n@cindex indentation in Makefile.am\nGenerally, Automake is not particularly smart in the parsing of unusual\nMakefile constructs, so you're advised to avoid fancy constructs or\n``creative'' use of whitespace.\n@c Keep this in sync with doc-parsing-buglets-tabs.sh\nFor example, @key{TAB} characters cannot be used between a target name\nand the following ``@code{:}'' character, and variable assignments\nshouldn't be indented with @key{TAB} characters.\n@c Keep this in sync with doc-parsing-buglets-colneq-subst.sh\nAlso, using more complex macros in target names can cause trouble:\n\n@example\n% @kbd{cat Makefile.am}\n$(FOO:=x): bar\n% @kbd{automake}\nMakefile.am:1: bad characters in variable name '$(FOO'\nMakefile.am:1: ':='-style assignments are not portable\n@end example\n\n@cindex Make targets, overriding\n@cindex Make rules, overriding\n@cindex Overriding make rules\n@cindex Overriding make targets\n\nA rule defined in @file{Makefile.am} generally overrides any such\nrule of a similar name that would be automatically generated by\n@command{automake}.  Although this is a supported feature, it is generally\nbest to avoid making use of it, as sometimes the generated rules are\nvery particular.\n\n@cindex Variables, overriding\n@cindex Overriding make variables\n\nSimilarly, a variable defined in @file{Makefile.am} or\n@code{AC_SUBST}ed from @file{configure.ac} will override any\ndefinition of the variable that @command{automake} would ordinarily\ncreate.  This feature is often more useful than the ability to\noverride a rule.  Be warned that many of the variables generated by\n@command{automake} are considered to be for internal use only, and their\nnames might change in future releases.\n\n@cindex Recursive operation of Automake\n@cindex Automake, recursive operation\n@cindex Example of recursive operation\n\nWhen examining a variable definition, Automake will recursively examine\nvariables referenced in the definition.  For example, if Automake is\nlooking at the content of @code{foo_SOURCES} in this snippet\n\n@c Keep in sync with interp.sh\n@example\nxs = a.c b.c\nfoo_SOURCES = c.c $(xs)\n@end example\n\nit would use the files @file{a.c}, @file{b.c}, and @file{c.c} as the\ncontents of @code{foo_SOURCES}.\n\n@cindex @code{##} (special Automake comment)\n@cindex Special Automake comment\n@cindex Comment, special to Automake\n\nAutomake also allows a form of comment that is @emph{not} copied into\nthe output; all lines beginning with @samp{##} (leading spaces allowed)\nare completely ignored by Automake.\n\nIt is customary to make the first line of @file{Makefile.am} read:\n\n@cindex Makefile.am, first line\n@cindex First line of Makefile.am\n\n@example\n## Process this file with automake to produce Makefile.in\n@end example\n\n@c FIXME document customary ordering of Makefile.am here!\n\n\n@node Strictness\n@section Strictness\n@c \"Gnits\" used to be a separate section.\n@c This @anchor allows old links to still work.\n@anchor{Gnits}\n@cindex Non-GNU packages\n\nWhile Automake is intended to be used by maintainers of GNU packages, it\ndoes make some effort to accommodate those who wish to use it, but do\nnot want to use all the GNU conventions.\n\n@cindex Strictness, defined\nTo this end, Automake supports three levels of @dfn{strictness}---how\nstringently Automake should enforce conformance with GNU conventions.\nEach strictness level can be selected using an option of the same name;\nsee @ref{Options}.\n\nThe strictness levels are:\n\n@table @option\n@item gnu\n@cindex Strictness, @option{gnu}\n@cindex @option{gnu} strictness\n@opindex --gnu\nThis is the default level of strictness.  Automake will check for\nbasic compliance with the GNU standards for software packaging.\n@xref{Top,,, standards, The GNU Coding Standards} for full details\nof these standards.  Currently the following checks are made:\n\n@itemize @bullet\n@item\nThe files @file{INSTALL}, @file{NEWS}, @file{README}, @file{AUTHORS},\nand @file{ChangeLog}, plus one of @file{COPYING.LIB}, @file{COPYING.LESSER}\nor @file{COPYING}, are required at the topmost directory of the package.\n\nIf the @option{--add-missing} option is given, @command{automake} will\nadd a generic version of the @file{INSTALL} file as well as the\n@file{COPYING} file containing the text of the current version of the\nGNU General Public License existing at the time of this Automake release\n(version 3 as this is written,\n@uref{https://www.gnu.org/@/copyleft/@/gpl.html}).\nHowever, an existing @file{COPYING} file will never be overwritten by\n@command{automake}.\n\n@item\nThe options @option{no-installman} and @option{no-installinfo} are\nprohibited.\n@end itemize\n\nFuture versions of Automake will add more checks at this level of\nstrictness; it is advisable to be familiar with the precise requirements\nof the GNU standards.\n\nFuture versions of Automake may, at this level of strictness, require\ncertain non-standard GNU tools to be available to maintainer-only\nMakefile rules.  For instance, in the future @command{pathchk}\n(@pxref{pathchk invocation,,, coreutils, GNU Coreutils})\nmay be required to run @samp{make dist}.\n\n@item foreign\n@cindex Strictness, @option{foreign}\n@cindex @option{foreign} strictness\n@opindex --foreign\nAutomake will check for only those things that are absolutely\nrequired for proper operation.  For instance, whereas GNU standards\ndictate the existence of a @file{NEWS} file, it will not be required in\nthis mode.  This strictness will also turn off some warnings by default\n(among them, portability warnings).\n\n@item gnits\n@cindex Strictness, @option{gnits}\n@cindex @option{gnits} strictness\n@opindex --gnits\nAutomake will check for compliance to the as-yet-unwritten @dfn{Gnits\nstandards}.  These are based on the GNU standards, but are even more\ndetailed.  Unless you are a Gnits standards contributor, it is\nrecommended that you avoid this option until such time as the Gnits\nstandard is actually published (which may never happen).\n\nCurrently, @option{--gnits} does all the checks that\n@option{--gnu} does, and checks the following as well:\n\n@itemize @bullet\n@item\n@samp{make installcheck} will check to make sure that the @option{--help}\nand @option{--version} really print a usage message and a version string,\nrespectively.  This is the @option{std-options} option (@pxref{Options}).\n\n@item\n@samp{make dist} will check to make sure the @file{NEWS} file has been\nupdated to the current version.\n\n@item\n@code{VERSION} is checked to make sure its format complies with Gnits\nstandards.\n@c FIXME xref when standards are finished\n\n@item\n@cindex @file{README-alpha}\nIf @code{VERSION} indicates that this is an alpha release, and the file\n@file{README-alpha} appears in the topmost directory of a package, then\nit is included in the distribution.  This is done in @option{--gnits}\nmode, and no other, because this mode is the only one where version\nnumber formats are constrained, and hence the only mode where Automake\ncan automatically determine whether @file{README-alpha} should be\nincluded.\n\n@item\nThe file @file{THANKS} is required.\n@end itemize\n\n@end table\n\n\n\n@node Uniform\n@section The Uniform Naming Scheme\n\n@cindex Uniform naming scheme\n\nAutomake variables generally follow a @dfn{uniform naming scheme} that\nmakes it easy to decide how programs (and other derived objects) are\nbuilt, and how they are installed.  This scheme also supports\n@command{configure} time determination of what should be built.\n\n@cindex @code{_PROGRAMS} primary variable\n@cindex @code{PROGRAMS} primary variable\n@cindex Primary variable, @code{PROGRAMS}\n@cindex Primary variable, defined\n@vindex _PROGRAMS\n\nAt @command{make} time, certain variables are used to determine which\nobjects are to be built.  The variable names are made of several pieces\nthat are concatenated together.\n\nThe piece that tells @command{automake} what is being built is commonly called\nthe @dfn{primary}.  For instance, the primary @code{PROGRAMS} holds a\nlist of programs that are to be compiled and linked.\n@vindex PROGRAMS\n\n@cindex @code{pkgdatadir}, defined\n@cindex @code{pkgincludedir}, defined\n@cindex @code{pkglibdir}, defined\n@cindex @code{pkglibexecdir}, defined\n\n@vindex pkgdatadir\n@vindex pkgincludedir\n@vindex pkglibdir\n@vindex pkglibexecdir\n\n@cindex @code{PACKAGE}, directory\nA different set of names is used to decide where the built objects\nshould be installed.  These names are prefixes to the primary, and they\nindicate which standard directory should be used as the installation\ndirectory.  The standard directory names are given in the GNU standards\n(@pxref{Directory Variables, , , standards, The GNU Coding Standards}).\nAutomake extends this list with @code{pkgdatadir}, @code{pkgincludedir},\n@code{pkglibdir}, and @code{pkglibexecdir}; these are the same as the\nnon-@samp{pkg} versions, but with @samp{$(PACKAGE)} appended.  For instance,\n@code{pkglibdir} is defined as @samp{$(libdir)/$(PACKAGE)}.\n\n@cindex @code{EXTRA_}, prepending\nFor each primary, there is one additional variable named by prepending\n@samp{EXTRA_} to the primary name.  This variable is used to list\nobjects that may or may not be built, depending on what\n@command{configure} decides.  This variable is required because Automake\nmust statically know the entire list of objects that may be built in\norder to generate a @file{Makefile.in} that will work in all cases.\n\n@cindex @code{EXTRA_PROGRAMS}, defined\n@cindex Example, @code{EXTRA_PROGRAMS}\n@cindex @command{cpio} example\n\nFor instance, @command{cpio} decides at configure time which programs\nshould be built.  Some of the programs are installed in @code{bindir},\nand some are installed in @code{sbindir}:\n\n@example\nEXTRA_PROGRAMS = mt rmt\nbin_PROGRAMS = cpio pax\nsbin_PROGRAMS = $(MORE_PROGRAMS)\n@end example\n\nDefining a primary without a prefix as a variable, e.g.,\n@samp{PROGRAMS}, is an error.\n\nNote that the common @samp{dir} suffix is left off when constructing the\nvariable names; thus one writes @samp{bin_PROGRAMS} and not\n@samp{bindir_PROGRAMS}.\n\nNot every sort of object can be installed in every directory.  Automake\nwill flag those attempts it finds in error (but see below how to override\nthe check if you really need to).\nAutomake will also diagnose obvious misspellings in directory names.\n\n@cindex Extending list of installation directories\n@cindex Installation directories, extending list\n\nSometimes the standard directories---even as augmented by\nAutomake---are not enough.  In particular it is sometimes useful, for\nclarity, to install objects in a subdirectory of some predefined\ndirectory.  To this end, Automake allows you to extend the list of\npossible installation directories.  A given prefix (e.g., @samp{zar})\nis valid if a variable of the same name with @samp{dir} appended is\ndefined (e.g., @samp{zardir}).\n\nFor instance, the following snippet will install @file{file.xml} into\n@samp{$(datadir)/xml}.\n\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@example\nxmldir = $(datadir)/xml\nxml_DATA = file.xml\n@end example\n\nThis feature can also be used to override the sanity checks Automake\nperforms to diagnose suspicious directory/primary couples (in the\nunlikely case these checks are undesirable, and you really know what\nyou're doing).  For example, Automake would error out on this input:\n\n@c Should be tested in primary-prefix-invalid-couples.sh\n@example\n# Forbidden directory combinations, automake will error out on this.\npkglib_PROGRAMS = foo\ndoc_LIBRARIES = libquux.a\n@end example\n\n@noindent\nbut it will succeed with this:\n\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@example\n# Work around forbidden directory combinations.  Do not use this\n# without a very good reason!\nmy_execbindir = $(pkglibdir)\nmy_doclibdir = $(docdir)\nmy_execbin_PROGRAMS = foo\nmy_doclib_LIBRARIES = libquux.a\n@end example\n\nThe @samp{exec} substring of the @samp{my_execbindir} variable lets\nthe files be installed at the right time (@pxref{The Two Parts of\nInstall}).\n\n@cindex @samp{noinst_} primary prefix, definition\n@vindex noinst_\n\nThe special prefix @samp{noinst_} indicates that the objects in question\nshould be built but not installed at all.  This is usually used for\nobjects required to build the rest of your package, for instance static\nlibraries (@pxref{A Library}), or helper scripts.\n\n@cindex @samp{check_} primary prefix, definition\n@vindex check_\n\nThe special prefix @samp{check_} indicates that the objects in question\nshould not be built until the @samp{make check} command is run.  Those\nobjects are not installed either.\n\nThe current primary names are @samp{PROGRAMS}, @samp{LIBRARIES},\n@samp{LTLIBRARIES}, @samp{LISP}, @samp{PYTHON}, @samp{JAVA},\n@samp{SCRIPTS}, @samp{DATA}, @samp{HEADERS}, @samp{MANS}, and\n@samp{TEXINFOS}.\n@vindex PROGRAMS\n@vindex LIBRARIES\n@vindex LTLIBRARIES\n@vindex LISP\n@vindex PYTHON\n@vindex JAVA\n@vindex SCRIPTS\n@vindex DATA\n@vindex HEADERS\n@vindex MANS\n@vindex TEXINFOS\n\nSome primaries also allow additional prefixes that control other\naspects of @command{automake}'s behavior.  The currently defined prefixes\nare @samp{dist_}, @samp{nodist_}, @samp{nobase_}, and @samp{notrans_}.\nThese prefixes are explained later (@pxref{Program and Library Variables})\n(@pxref{Man Pages}).\n\n\n@node Length Limitations\n@section Staying below the command line length limit\n\n@cindex command line length limit\n@cindex ARG_MAX\n\nTraditionally, most unix-like systems have a length limitation for the\ncommand line arguments and environment contents when creating new\nprocesses (see for example\n@uref{https://www.in-ulm.de/@/~mascheck/@/various/@/argmax/} for an\noverview on this issue),\nwhich of course also applies to commands spawned by @command{make}.\nPOSIX requires this limit to be at least 4096 bytes, and most modern\nsystems have quite high limits (or are unlimited).\n\nIn order to create portable Makefiles that do not trip over these\nlimits, it is necessary to keep the length of file lists bounded.\nUnfortunately, it is not possible to do so fully transparently within\nAutomake, so your help may be needed.  Typically, you can split long\nfile lists manually and use different installation directory names for\neach list.  For example,\n\n@example\ndata_DATA = file1 @dots{} file@var{N} file@var{N+1} @dots{} file@var{2N}\n@end example\n\n@noindent\nmay also be written as\n\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@example\ndata_DATA = file1 @dots{} file@var{N}\ndata2dir = $(datadir)\ndata2_DATA = file@var{N+1} @dots{} file@var{2N}\n@end example\n\n@noindent\nand will cause Automake to treat the two lists separately during\n@code{make install}.  See @ref{The Two Parts of Install} for choosing\ndirectory names that will keep the ordering of the two parts of\ninstallation Note that @code{make dist} may still only work on a host\nwith a higher length limit in this example.\n\nAutomake itself employs a couple of strategies to avoid long command\nlines.  For example, when @samp{$@{srcdir@}/} is prepended to file\nnames, as can happen with above @code{$(data_DATA)} lists, it limits\nthe amount of arguments passed to external commands.\n\nUnfortunately, some systems' @command{make} commands may prepend\n@code{VPATH} prefixes like @samp{$@{srcdir@}/} to file names from the\nsource tree automatically (@pxref{Automatic Rule Rewriting, , Automatic\nRule Rewriting, autoconf, The Autoconf Manual}).  In this case, the user\nmay have to switch to use GNU Make, or refrain from using VPATH builds,\nin order to stay below the length limit.\n\nFor libraries and programs built from many sources, convenience archives\nmay be used as intermediates in order to limit the object list length\n(@pxref{Libtool Convenience Libraries}).\n\n\n@node Canonicalization\n@section How derived variables are named\n\n@cindex canonicalizing Automake variables\n\nSometimes a Makefile variable name is derived from some text the\nmaintainer supplies.  For instance, a program name listed in\n@samp{_PROGRAMS} is rewritten into the name of a @samp{_SOURCES}\nvariable.  In cases like this, Automake canonicalizes the text, so that\nprogram names and the like do not have to follow Makefile variable naming\nrules.  All characters in the name except for letters, numbers, the\nstrudel (@@), and the underscore are turned into underscores when making\nvariable references.\n\nFor example, if your program is named @file{sniff-glue}, the derived\nvariable name would be @samp{sniff_glue_SOURCES}, not\n@samp{sniff-glue_SOURCES}.  Similarly the sources for a library named\n@file{libmumble++.a} should be listed in the\n@samp{libmumble___a_SOURCES} variable.\n\nThe strudel is an addition, to make the use of Autoconf substitutions in\nvariable names less obfuscating.\n\n\n@node User Variables\n@section Variables reserved for the user\n\n@cindex variables, reserved for the user\n@cindex user variables\n\nSome @file{Makefile} variables are reserved by the GNU Coding Standards\nfor the use of the ``user''---the person building the package.  For\ninstance, @code{CFLAGS} is one such variable.\n\nSometimes package developers are tempted to set user variables such as\n@code{CFLAGS} because it appears to make their job easier.  However,\nthe package itself should never set a user variable, particularly not\nto include switches that are required for proper compilation of the\npackage.  Since these variables are documented as being for the\npackage builder, that person rightfully expects to be able to override\nany of these variables at build time.\n\nTo get around this problem, Automake introduces an automake-specific\nshadow variable for each user flag variable.  (Shadow variables are\nnot introduced for variables like @code{CC}, where they would make no\nsense.)  The shadow variable is named by prepending @samp{AM_} to the\nuser variable's name.  For instance, the shadow variable for\n@code{YFLAGS} is @code{AM_YFLAGS}.  The package maintainer---that is,\nthe author(s) of the @file{Makefile.am} and @file{configure.ac}\nfiles---may adjust these shadow variables however necessary.\n\n@xref{Flag Variables Ordering}, for more discussion about these\nvariables and how they interact with per-target variables.\n\n@node Auxiliary Programs\n@section Programs automake might require\n\n@cindex Programs, auxiliary\n@cindex Auxiliary programs\n\nAutomake sometimes requires helper programs so that the generated\n@file{Makefile} can do its work properly.  There are a fairly large\nnumber of them, and we list them here.\n\nAlthough all of these files are distributed and installed with\nAutomake, a couple of them are maintained separately.  The Automake\ncopies are updated before each release, but we mention the original\nsource in case you need more recent versions.\n\n@table @code\n@item ar-lib\n@cmindex ar-lib\nThis is a wrapper primarily for the Microsoft lib archiver, to make\nit more POSIX-like.\n\n@item compile\n@cmindex compile\nThis is a wrapper for compilers that do not accept options @option{-c}\nand @option{-o} at the same time.  It is only used when absolutely\nrequired.  Such compilers are rare, with the Microsoft C/C++ Compiler\nas the most notable exception. This wrapper also makes the following\ncommon options available for that compiler, while performing file name\ntranslation where needed: @option{-I}, @option{-L}, @option{-l},\n@option{-Wl,} and @option{-Xlinker}.\n\n@item config.guess\n@itemx config.sub\n@cmindex config.guess\n@cmindex config.sub\nThese two programs compute the canonical triplets for the given build,\nhost, or target architecture.  These programs are updated regularly to\nsupport new architectures and fix probes broken by changes in new\nkernel versions.  Each new release of Automake comes with up-to-date\ncopies of these programs.  If your copy of Automake is getting old,\nyou are encouraged to fetch the latest versions of these files from\n@url{https://savannah.gnu.org/git/?group=config} before making a\nrelease.\n\n@item depcomp\n@cmindex depcomp\nThis program understands how to run a compiler so that it will\ngenerate not only the desired output but also dependency information\nthat is then used by the automatic dependency tracking feature\n(@pxref{Dependencies}).\n\n@item install-sh\n@cmindex install-sh\nThis is a replacement for the @command{install} program that works on\nplatforms where @command{install} is unavailable or unusable.\n\n@item mdate-sh\n@cmindex mdate-sh\nThis script is used to generate a @file{version.texi} file.  It examines\na file and prints some date information about it.\n\n@item missing\n@cmindex missing @r{program}\nThis wraps a number of programs that are typically only required by\nmaintainers.  If the program in question doesn't exist, or seems too old,\n@command{missing} will print an informative warning before failing out,\nto provide the user with more context and information.\n\n@item mkinstalldirs\n@cmindex mkinstalldirs\nThis script used to be a wrapper around @samp{mkdir -p}, which is not\nportable.  Now we prefer to use @samp{install-sh -d} when @command{configure}\nfinds that @samp{mkdir -p} does not work, this makes one less script to\ndistribute.\n\nFor backward compatibility @file{mkinstalldirs} is still used and\ndistributed when @command{automake} finds it in a package.  But it is no\nlonger installed automatically, and it should be safe to remove it.\n\n@item py-compile\n@cmindex py-compile\nThis is used to byte-compile Python scripts.\n\n@item test-driver\n@cmindex test-driver\nThis implements the default test driver offered by the parallel\ntestsuite harness.\n\n@item texinfo.tex\n@cmindex texinfo.tex\nWhen Texinfo sources are in the package, this file is required for\n@samp{make dvi}, @samp{make ps} and @samp{make pdf}. The latest\nversion can be downloaded from\n@url{https://www.gnu.org/software/texinfo/}.  A working @TeX{}\ndistribution, or at least a @file{tex} program, is also required.\nFurthermore, @samp{make dist} invokes @samp{make dvi}, so these become\nrequirements for making a distribution with Texinfo sources.\n\n@item ylwrap\n@cmindex ylwrap\nThis program wraps @command{lex} and @command{yacc} to rename their\noutput files.  It also ensures that, for instance, multiple\n@command{yacc} instances can be invoked in a single directory in\nparallel.\n\n@end table\n\n\n@node Examples\n@chapter Some example packages\n\nThis section contains two small examples.\n\nThe first example (@pxref{Complete}) assumes you have an existing\nproject already using Autoconf, with handcrafted @file{Makefile}s, and\nthat you want to convert it to using Automake.  If you are discovering\nboth tools, it is probably better that you look at the Hello World\nexample presented earlier (@pxref{Hello World}).\n\nThe second example (@pxref{true}) shows how two programs can be built\nfrom the same file, using different compilation parameters.  It\ncontains some technical digressions that are probably best skipped on\nfirst read.\n\n@menu\n* Complete::                    A simple example, start to finish\n* true::                        Building true and false\n@end menu\n\n\n@node Complete\n@section A simple example, start to finish\n\n@cindex Complete example\n\nLet's suppose you just finished writing @code{zardoz}, a program to make\nyour head float from vortex to vortex.  You've been using Autoconf to\nprovide a portability framework, but your @file{Makefile.in}s have been\nad-hoc.  You want to make them bulletproof, so you turn to Automake.\n\n@cindex @code{AM_INIT_AUTOMAKE}, example use\n\nThe first step is to update your @file{configure.ac} to include the\ncommands that @command{automake} needs.  The way to do this is to add an\n@code{AM_INIT_AUTOMAKE} call just after @code{AC_INIT}:\n\n@example\nAC_INIT([zardoz], [1.0])\nAM_INIT_AUTOMAKE\n@dots{}\n@end example\n\nSince your program doesn't have any complicating factors (e.g., it\ndoesn't use @code{gettext}, it doesn't want to build a shared library),\nyou're done with this part.  That was easy!\n\n@cindex @command{aclocal} program, introduction\n@cindex @file{aclocal.m4}, preexisting\n@cindex @file{acinclude.m4}, defined\n\nNow you must regenerate @file{configure}.  But to do that, you'll need\nto tell @command{autoconf} how to find the new macro you've used.  The\neasiest way to do this is to use the @command{aclocal} program to\ngenerate your @file{aclocal.m4} for you.  But wait@dots{} maybe you\nalready have an @file{aclocal.m4}, because you had to write some hairy\nmacros for your program.  The @command{aclocal} program lets you put\nyour own macros into @file{acinclude.m4}, so simply rename and then\nrun:\n\n@example\nmv aclocal.m4 acinclude.m4\naclocal\nautoconf\n@end example\n\n@cindex @command{zardoz} example\n\nNow it is time to write your @file{Makefile.am} for @code{zardoz}.\nSince @code{zardoz} is a user program, you want to install it where the\nrest of the user programs go: @code{bindir}.  Additionally,\n@code{zardoz} has some Texinfo documentation.  Your @file{configure.ac}\nscript uses @code{AC_REPLACE_FUNCS}, so you need to link against\n@samp{$(LIBOBJS)}.  So here's what you'd write:\n\n@example\nbin_PROGRAMS = zardoz\nzardoz_SOURCES = main.c head.c float.c vortex9.c gun.c\nzardoz_LDADD = $(LIBOBJS)\n\ninfo_TEXINFOS = zardoz.texi\n@end example\n\nNow you can run @samp{automake --add-missing} to generate your\n@file{Makefile.in} and grab any auxiliary files you might need, and\nyou're done!\n\n\n@node true\n@section Building true and false\n\n@cindex Example, @command{false} and @command{true}\n@cindex @command{false} Example\n@cindex @command{true} Example\n\nHere is another, trickier example.  It shows how to generate two\nprograms (@code{true} and @code{false}) from the same source file\n(@file{true.c}).  The difficult part is that each compilation of\n@file{true.c} requires different @code{cpp} flags.\n\n@example\nbin_PROGRAMS = true false\nfalse_SOURCES =\nfalse_LDADD = false.o\n\ntrue.o: true.c\n        $(COMPILE) -DEXIT_CODE=0 -c true.c\n\nfalse.o: true.c\n        $(COMPILE) -DEXIT_CODE=1 -o false.o -c true.c\n@end example\n\nNote that there is no @code{true_SOURCES} definition.  Automake will\nimplicitly assume that there is a source file named @file{true.c}\n(@pxref{Default _SOURCES}), and\ndefine rules to compile @file{true.o} and link @file{true}.  The\n@samp{true.o: true.c} rule supplied by the above @file{Makefile.am},\nwill override the Automake generated rule to build @file{true.o}.\n\n@code{false_SOURCES} is defined to be empty---that way no implicit value\nis substituted.  Because we have not listed the source of\n@file{false}, we have to tell Automake how to link the program.  This is\nthe purpose of the @code{false_LDADD} line.  A @code{false_DEPENDENCIES}\nvariable, holding the dependencies of the @file{false} target will be\nautomatically generated by Automake from the content of\n@code{false_LDADD}.\n\nThe above rules won't work if your compiler doesn't accept both\n@option{-c} and @option{-o}.  The simplest fix for this is to introduce a\nbogus dependency (to avoid problems with a parallel @command{make}):\n\n@example\ntrue.o: true.c false.o\n        $(COMPILE) -DEXIT_CODE=0 -c true.c\n\nfalse.o: true.c\n        $(COMPILE) -DEXIT_CODE=1 -c true.c && mv true.o false.o\n@end example\n\nAs it turns out, there is also a much easier way to do this same task.\nSome of the above technique is useful enough that we've kept the\nexample in the manual.  However if you were to build @code{true} and\n@code{false} in real life, you would probably use per-program\ncompilation flags, like so:\n\n@c Keep in sync with specflg7.sh and specflg8.sh\n@example\nbin_PROGRAMS = false true\n\nfalse_SOURCES = true.c\nfalse_CPPFLAGS = -DEXIT_CODE=1\n\ntrue_SOURCES = true.c\ntrue_CPPFLAGS = -DEXIT_CODE=0\n@end example\n\nIn this case Automake will cause @file{true.c} to be compiled twice,\nwith different flags.  In this instance, the names of the object files\nwould be chosen by automake; they would be @file{false-true.o} and\n@file{true-true.o}. (The name of the object files rarely matters.)\n\n@node automake Invocation\n@chapter Creating a @file{Makefile.in}\n@c This node used to be named \"Invoking automake\".  This @anchor\n@c allows old links to still work.\n@anchor{Invoking automake}\n\n@cindex Multiple @file{configure.ac} files\n@cindex Invoking @command{automake}\n@cindex @command{automake}, invoking\n@cindex Invocation of @command{automake}\n@cindex @command{automake}, invocation\n\nTo create all the @file{Makefile.in}s for a package, run the\n@command{automake} program in the top level directory, with no\narguments.  @command{automake} will automatically find each\nappropriate @file{Makefile.am} (by scanning @file{configure.ac};\n@pxref{configure}) and generate the corresponding @file{Makefile.in}.\nNote that @command{automake} has a rather simplistic view of what\nconstitutes a package; it assumes that a package has only one\n@file{configure.ac}, at the top.  If your package has multiple\n@file{configure.ac}s, then you must run @command{automake} in each\ndirectory holding a @file{configure.ac}.  (Alternatively, you may rely\non Autoconf's @command{autoreconf}, which is able to recurse your\npackage tree and run @command{automake} where appropriate.)\n\nYou can optionally give @command{automake} an argument; @file{.am} is\nappended to the argument and the result is used as the name of the\ninput file.  This feature is generally only used to automatically\nrebuild an out-of-date @file{Makefile.in}.  Note that\n@command{automake} must always be run from the topmost directory of a\nproject, even if being used to regenerate the @file{Makefile.in} in\nsome subdirectory.  This is necessary because @command{automake} must\nscan @file{configure.ac}, and because @command{automake} uses the\nknowledge that a @file{Makefile.in} is in a subdirectory to change its\nbehavior in some cases.\n\n@vindex AUTOCONF\nAutomake will run @command{autoconf} to scan @file{configure.ac} and\nits dependencies (i.e., @file{aclocal.m4} and any included file),\ntherefore @command{autoconf} must be in your @env{PATH}.  If there is\nan @env{AUTOCONF} variable in your environment it will be used\ninstead of @command{autoconf}; this allows you to select a particular\nversion of Autoconf.  By the way, don't misunderstand this paragraph:\n@command{automake} runs @command{autoconf} to @strong{scan} your\n@file{configure.ac}; this won't build @file{configure} and you still\nhave to run @command{autoconf} yourself for this purpose.\n\n@cindex @command{automake} options\n@cindex Options, @command{automake}\n@cindex Strictness, command line\n\n@command{automake} accepts the following options:\n\n@cindex Extra files distributed with Automake\n@cindex Files distributed with Automake\n@cindex @file{config.guess}\n\n@table @code\n@item -a\n@itemx --add-missing\n@opindex -a\n@opindex --add-missing\nAutomake requires certain common files to exist in certain situations;\nfor instance, @file{config.guess} is required if @file{configure.ac} invokes\n@code{AC_CANONICAL_HOST}.  Automake is distributed with several of these\nfiles (@pxref{Auxiliary Programs}); this option will cause the missing\nones to be automatically added to the package, whenever possible.  In\ngeneral if Automake tells you a file is missing, try using this option.\nBy default Automake tries to make a symbolic link pointing to its own\ncopy of the missing file; this can be changed with @option{--copy}.\n\nMany of the potentially-missing files are common scripts whose\nlocation may be specified via the @code{AC_CONFIG_AUX_DIR} macro.\nTherefore, @code{AC_CONFIG_AUX_DIR}'s setting affects whether a\nfile is considered missing, and where the missing file is added\n(@pxref{Optional}).\n\nIn some strictness modes, additional files are installed, see @ref{Gnits}\nfor more information.\n\n@item --libdir=@var{dir}\n@opindex --libdir\nLook for Automake data files in directory @var{dir} instead of in the\ninstallation directory.  This is typically used for debugging.\n\n@vindex AUTOMAKE_LIBDIR\nThe environment variable @env{AUTOMAKE_LIBDIR} provides another way to\nset the directory containing Automake data files.  However\n@option{--libdir} takes precedence over it.\n\n@item --print-libdir\n@opindex --print-libdir\nPrint the path of the installation directory containing Automake-provided\nscripts and data files (e.g., @file{texinfo.texi} and\n@file{install-sh}).\n\n@item -c\n@opindex -c\n@itemx --copy\n@opindex --copy\nWhen used with @option{--add-missing}, causes installed files to be\ncopied.  The default is to make a symbolic link.\n\n@item -f\n@opindex -f\n@itemx --force-missing\n@opindex --force-missing\nWhen used with @option{--add-missing}, causes standard files to be reinstalled\neven if they already exist in the source tree.  This involves removing\nthe file from the source tree before creating the new symlink (or, with\n@option{--copy}, copying the new file).\n\n@item --foreign\n@opindex --foreign\nSet the global strictness to @option{foreign}.  For more information, see\n@ref{Strictness}.\n\n@item --gnits\n@opindex --gnits\nSet the global strictness to @option{gnits}.  For more information, see\n@ref{Strictness}.\n\n@item --gnu\n@opindex --gnu\nSet the global strictness to @option{gnu}.  For more information, see\n@ref{Strictness}.  This is the default strictness.\n\n@item --help\n@opindex --help\nPrint a summary of the command line options and exit.\n\n@item -i\n@itemx --ignore-deps\n@opindex -i\nThis disables the dependency tracking feature in generated\n@file{Makefile}s; see @ref{Dependencies}.\n\n@item --include-deps\n@opindex --include-deps\nThis enables the dependency tracking feature.  This feature is enabled\nby default.  This option is provided for historical reasons only and\nprobably should not be used.\n\n@item --no-force\n@opindex --no-force\nOrdinarily @command{automake} creates all @file{Makefile.in}s mentioned in\n@file{configure.ac}.  This option causes it to only update those\n@file{Makefile.in}s that are out of date with respect to one of their\ndependents.\n\n@item -o @var{dir}\n@itemx --output-dir=@var{dir}\n@opindex -o\n@opindex --output-dir\nPut the generated @file{Makefile.in} in the directory @var{dir}.\nOrdinarily each @file{Makefile.in} is created in the directory of the\ncorresponding @file{Makefile.am}.  This option is deprecated and will be\nremoved in a future release.\n\n@item -v\n@itemx --verbose\n@opindex -v\n@opindex --verbose\nCause Automake to print information about which files are being read or\ncreated.\n\n@item --version\n@opindex --version\nPrint the version number of Automake and exit.\n\n@item -W @var{category}[,@var{category}...]\n@itemx --warnings=@var{category}[,@var{category}...]\n@opindex -W\n@opindex --warnings\nOutput warnings about a @var{category} of potential problems with the\npackage.  @var{category} can be any of:\n\n@table @code\n@item cross\nConstructs compromising the ability to cross-compile the package.\n@item gnu\nMinor deviations from the GNU Coding Standards\n(@pxref{Top, , , standards, The GNU Coding Standards}).\n@item obsolete\nObsolete features or constructions.\n@item override\nRedefinitions of Automake rules or variables.\n@item portability\nPortability issues (e.g., use of @command{make} features that are\nknown to be not portable).\n@item portability-recursive\nRecursive, or nested, Make variable expansions (@code{$(foo$(x))}).\nThese are not universally supported, but are more portable than the\nother non-portable constructs diagnosed by @option{-Wportability}.\nThese warnings are turned on by @option{-Wportability} but can then be\nturned off specifically by @option{-Wno-portability-recursive}.\n@item extra-portability\nExtra portability issues, related to rarely-used tools such as\nthe Microsoft @command{lib} archiver.\n@item syntax\nQuestionable syntax, unused variables, typos, etc.\n@item unsupported\nUnsupported or incomplete features.\n@item all\nTurn on all the above categories of warnings.\n@item none\nTurn off all the above categories of warnings.\n@item error\nTreat warnings as errors.\n@end table\n\nA category can be turned off by prefixing its name with @samp{no-}.  For\ninstance, @option{-Wno-syntax} will hide the warnings about unused\nvariables.\n\nWarnings in the @samp{gnu}, @samp{obsolete}, @samp{portability},\n@samp{syntax}, and @samp{unsupported} categories are turned on by\ndefault.  The @samp{gnu} and @samp{portability} categories are turned\noff in @option{--foreign} strictness.\n\n@c Checked by extra-portability.sh\nTurning off @samp{portability} will also turn off @samp{extra-portability},\nand similarly turning on @samp{extra-portability} will also turn on\n@samp{portability}.  However, turning on @samp{portability} or turning\noff @samp{extra-portability} will not affect the other category.\n\nUnknown warning categories supplied as an argument to @option{-W} will\nthemselves produce a warning, in the @samp{unsupported} category.  This\nwarning is never treated as an error.\n\n@vindex WARNINGS\nThe environment variable @env{WARNINGS} can contain a comma separated\nlist of categories to enable.  @option{-W} settings on the command line\ntake precedence; for instance, @option{-Wnone} also turns off any\nwarning categories enabled by @env{WARNINGS}.\n\nUnknown warning categories named in @env{WARNINGS} are silently ignored.\n\n@end table\n\n@vindex AUTOMAKE_JOBS\nIf the environment variable @env{AUTOMAKE_JOBS} contains a positive\nnumber, it is taken as the maximum number of Perl threads to use in\n@command{automake} for generating multiple @file{Makefile.in} files\nconcurrently.  This is an experimental feature.\n\n\n@node configure\n@chapter Scanning @file{configure.ac}, using @command{aclocal}\n\n@cindex @file{configure.ac}, scanning\n@cindex Scanning @file{configure.ac}\n@cindex Using @command{aclocal}\n@cindex @command{aclocal}, using\n\nAutomake scans the package's @file{configure.ac} to determine certain\ninformation about the package.  Some @command{autoconf} macros are required\nand some variables must be defined in @file{configure.ac}.  Automake\nwill also use information from @file{configure.ac} to further tailor its\noutput.\n\nAutomake also supplies some Autoconf macros to make the maintenance\neasier.  These macros can automatically be put into your\n@file{aclocal.m4} using the @command{aclocal} program.\n\n@menu\n* Requirements::                Configuration requirements\n* Optional::                    Other things Automake recognizes\n* aclocal Invocation::          Auto-generating aclocal.m4\n* Macros::                      Autoconf macros supplied with Automake\n@end menu\n\n\n@node Requirements\n@section Configuration requirements\n\n@cindex Automake requirements\n@cindex Requirements of Automake\n\n@acindex AM_INIT_AUTOMAKE\nThe one real requirement of Automake is that your @file{configure.ac}\ncall @code{AM_INIT_AUTOMAKE}.  This macro does several things that are\nrequired for proper Automake operation (@pxref{Macros}).\n\nHere are the other macros that Automake requires but which are not run\nby @code{AM_INIT_AUTOMAKE}:\n\n@table @code\n@item AC_CONFIG_FILES\n@itemx AC_OUTPUT\n@acindex AC_CONFIG_FILES\n@acindex AC_OUTPUT\nThese two macros are usually invoked as follows near the end of\n@file{configure.ac}.\n\n@example\n@dots{}\nAC_CONFIG_FILES([\n  Makefile\n  doc/Makefile\n  src/Makefile\n  src/lib/Makefile\n  @dots{}\n])\nAC_OUTPUT\n@end example\n\nAutomake uses these to determine which files to create (@pxref{Output, ,\nCreating Output Files, autoconf, The Autoconf Manual}).  A listed file\nis considered to be an Automake generated @file{Makefile} if there\nexists a file with the same name and the @file{.am} extension appended.\nTypically, @samp{AC_CONFIG_FILES([foo/Makefile])} will cause Automake to\ngenerate @file{foo/Makefile.in} if @file{foo/Makefile.am} exists.\n\nWhen using @code{AC_CONFIG_FILES} with multiple input files, as in\n\n@example\nAC_CONFIG_FILES([Makefile:top.in:Makefile.in:bot.in])\n@end example\n\n@noindent\n@command{automake} will generate the first @file{.in} input file for\nwhich a @file{.am} file exists.  If no such file exists the output\nfile is not considered to be generated by Automake.\n\nFiles created by @code{AC_CONFIG_FILES}, be they Automake\n@file{Makefile}s or not, are all removed by @samp{make distclean}.\nTheir inputs are automatically distributed, unless they\nare the output of prior @code{AC_CONFIG_FILES} commands.\nFinally, rebuild rules are generated in the Automake @file{Makefile}\nexisting in the subdirectory of the output file, if there is one, or\nin the top-level @file{Makefile} otherwise.\n\nThe above machinery (cleaning, distributing, and rebuilding) works\nfine if the @code{AC_CONFIG_FILES} specifications contain only\nliterals.  If part of the specification uses shell variables,\n@command{automake} will not be able to fulfill this setup, and you will\nhave to complete the missing bits by hand.  For instance, on\n\n@c Keep in sync with output11.sh\n@example\nfile=input\n@dots{}\nAC_CONFIG_FILES([output:$file],, [file=$file])\n@end example\n\n@noindent\n@command{automake} will output rules to clean @file{output}, and\nrebuild it.  However the rebuild rule will not depend on @file{input},\nand this file will not be distributed either.  (You must add\n@samp{EXTRA_DIST = input} to your @file{Makefile.am} if @file{input} is a\nsource file.)\n\nSimilarly\n\n@c Keep in sync with output11.sh\n@example\nfile=output\nfile2=out:in\n@dots{}\nAC_CONFIG_FILES([$file:input],, [file=$file])\nAC_CONFIG_FILES([$file2],, [file2=$file2])\n@end example\n\n@noindent\nwill only cause @file{input} to be distributed.  No file will be\ncleaned automatically (add @samp{DISTCLEANFILES = output out}\nyourself), and no rebuild rule will be output.\n\nObviously @command{automake} cannot guess what value @samp{$file} is\ngoing to hold later when @file{configure} is run, and it cannot use\nthe shell variable @samp{$file} in a @file{Makefile}.  However, if you\nmake reference to @samp{$file} as @samp{$@{file@}} (i.e., in a way\nthat is compatible with @command{make}'s syntax) and furthermore use\n@code{AC_SUBST} to ensure that @samp{$@{file@}} is meaningful in a\n@file{Makefile}, then @command{automake} will be able to use\n@samp{$@{file@}} to generate all of these rules.  For instance, here is\nhow the Automake package itself generates versioned scripts for its\ntest suite:\n\n@example\nAC_SUBST([APIVERSION], @dots{})\n@dots{}\nAC_CONFIG_FILES(\n  [tests/aclocal-$@{APIVERSION@}:tests/aclocal.in],\n  [chmod +x tests/aclocal-$@{APIVERSION@}],\n  [APIVERSION=$APIVERSION])\nAC_CONFIG_FILES(\n  [tests/automake-$@{APIVERSION@}:tests/automake.in],\n  [chmod +x tests/automake-$@{APIVERSION@}])\n@end example\n\n@noindent\nHere cleaning, distributing, and rebuilding are done automatically,\nbecause @samp{$@{APIVERSION@}} is known at @command{make}-time.\n\nNote that you should not use shell variables to declare\n@file{Makefile} files for which @command{automake} must create\n@file{Makefile.in}.  Even @code{AC_SUBST} does not help here, because\n@command{automake} needs to know the file name when it runs in order\nto check whether @file{Makefile.am} exists.  (In the very hairy case\nthat your setup requires such use of variables, you will have to tell\nAutomake which @file{Makefile.in}s to generate on the command-line.)\n\nIt is possible to let @command{automake} emit conditional rules for\n@code{AC_CONFIG_FILES} with the help of @code{AM_COND_IF}\n(@pxref{Optional}).\n\nTo summarize:\n@itemize @bullet\n@item\nUse literals for @file{Makefile}s, and for other files whenever possible.\n@item\nUse @samp{$file} (or @samp{$@{file@}} without @samp{AC_SUBST([file])})\nfor files that @command{automake} should ignore.\n@item\nUse @samp{$@{file@}} and @samp{AC_SUBST([file])} for files\nthat @command{automake} should not ignore.\n@end itemize\n\n@end table\n\n\n@node Optional\n@section Other things Automake recognizes\n\n@cindex Macros Automake recognizes\n@cindex Recognized macros by Automake\n\nEvery time Automake is run it calls Autoconf to trace\n@file{configure.ac}.  This way it can recognize the use of certain\nmacros and tailor the generated @file{Makefile.in} appropriately.\nCurrently recognized macros and their effects are:\n\n@ftable @code\n@item AC_CANONICAL_BUILD\n@itemx AC_CANONICAL_HOST\n@itemx AC_CANONICAL_TARGET\n@vindex build_triplet\n@vindex host_triplet\n@vindex target_triplet\nAutomake will ensure that @file{config.guess} and @file{config.sub}\nexist.  Also, the @file{Makefile} variables @code{build_triplet},\n@code{host_triplet} and @code{target_triplet} are introduced.  See\n@ref{Canonicalizing, , Getting the Canonical System Type, autoconf,\nThe Autoconf Manual}.\n\n@item AC_CONFIG_AUX_DIR\nAutomake will look for various helper scripts, such as\n@file{install-sh}, in the directory named in this macro invocation.\n@c This list is accurate relative to version 1.11\n(The full list of scripts is:\n@file{ar-lib},\n@file{config.guess},\n@file{config.sub},\n@file{depcomp},\n@file{compile},\n@file{install-sh},\n@file{ltmain.sh},\n@file{mdate-sh},\n@file{missing},\n@file{mkinstalldirs},\n@file{py-compile},\n@file{test-driver},\n@file{texinfo.tex},\n@file{ylwrap}.)\nNot all scripts are always searched for; some scripts\nwill only be sought if the generated @file{Makefile.in} requires them.\n\nIf @code{AC_CONFIG_AUX_DIR} is not given, the scripts are looked for in\ntheir standard locations.  For @file{mdate-sh},\n@file{texinfo.tex}, and @file{ylwrap}, the standard location is the\nsource directory corresponding to the current @file{Makefile.am}.  For\nthe rest, the standard location is the first one of @file{.}, @file{..},\nor @file{../..} (relative to the top source directory) that provides any\none of the helper scripts.  @xref{Input, , Finding `configure' Input,\nautoconf, The Autoconf Manual}.\n\nRequired files from @code{AC_CONFIG_AUX_DIR} are automatically\ndistributed, even if there is no @file{Makefile.am} in this directory.\n\n@item AC_CONFIG_LIBOBJ_DIR\nAutomake will require the sources file declared with\n@code{AC_LIBSOURCE} (see below) in the directory specified by this\nmacro.\n\n@item AC_CONFIG_HEADERS\nAutomake will generate rules to rebuild these headers from the\ncorresponding templates (usually, the template for a @file{foo.h}\nheader being @file{foo.h.in}).  Older versions of Automake\nrequired the use of @code{AM_CONFIG_HEADER}; this is no longer\nthe case, and that macro has indeed been removed.\n\nAs with @code{AC_CONFIG_FILES} (@pxref{Requirements}), parts of the\nspecification using shell variables will be ignored as far as\ncleaning, distributing, and rebuilding is concerned.\n\n@item AC_CONFIG_LINKS\nAutomake will generate rules to remove @file{configure} generated\nlinks on @samp{make distclean} and to distribute named source files as\npart of @samp{make dist}.\n\nAs for @code{AC_CONFIG_FILES} (@pxref{Requirements}), parts of the\nspecification using shell variables will be ignored as far as cleaning\nand distributing is concerned.  (There are no rebuild rules for links.)\n\n@item AC_LIBOBJ\n@itemx AC_LIBSOURCE\n@itemx AC_LIBSOURCES\n@vindex LIBOBJS\nAutomake will automatically distribute any file listed in\n@code{AC_LIBSOURCE} or @code{AC_LIBSOURCES}.\n\nNote that the @code{AC_LIBOBJ} macro calls @code{AC_LIBSOURCE}.  So if\nan Autoconf macro is documented to call @samp{AC_LIBOBJ([file])}, then\n@file{file.c} will be distributed automatically by Automake.  This\nencompasses many macros like @code{AC_FUNC_ALLOCA},\n@code{AC_FUNC_MEMCMP}, @code{AC_REPLACE_FUNCS}, and others.\n\nBy the way, direct assignments to @code{LIBOBJS} are no longer\nsupported.  You should always use @code{AC_LIBOBJ} for this purpose.\n@xref{AC_LIBOBJ vs LIBOBJS, , @code{AC_LIBOBJ} vs.@: @code{LIBOBJS},\nautoconf, The Autoconf Manual}.\n\n@item AC_PROG_RANLIB\nThis is required if any libraries are built in the package.\n@xref{Particular Programs, , Particular Program Checks, autoconf, The\nAutoconf Manual}.\n\n@item AC_PROG_CXX\nThis is required if any C++ source is included.  @xref{Particular\nPrograms, , Particular Program Checks, autoconf, The Autoconf Manual}.\n\n@item AC_PROG_OBJC\nThis is required if any Objective C source is included.  @xref{Particular\nPrograms, , Particular Program Checks, autoconf, The Autoconf Manual}.\n\n@item AC_PROG_OBJCXX\nThis is required if any Objective C++ source is included.  @xref{Particular\nPrograms, , Particular Program Checks, autoconf, The Autoconf Manual}.\n\n@item AC_PROG_F77\nThis is required if any Fortran 77 source is included.  @xref{Particular\nPrograms, , Particular Program Checks, autoconf, The Autoconf Manual}.\n\n@item AC_F77_LIBRARY_LDFLAGS\nThis is required for programs and shared libraries that are a mixture of\nlanguages that include Fortran 77 (@pxref{Mixing Fortran 77 With C and\nC++}).  @xref{Macros, , Autoconf macros supplied with Automake}.\n\n@item AC_FC_SRCEXT\nAutomake will add the flags computed by @code{AC_FC_SRCEXT} to compilation\nof files with the respective source extension (@pxref{Fortran Compiler, ,\nFortran Compiler Characteristics, autoconf, The Autoconf Manual}).\n\n@item AC_PROG_FC\nThis is required if any Fortran 90/95 source is included.  This macro is\ndistributed with Autoconf version 2.58 and later.  @xref{Particular\nPrograms, , Particular Program Checks, autoconf, The Autoconf Manual}.\n\n@item AC_PROG_LIBTOOL\nAutomake will turn on processing for @command{libtool} (@pxref{Top, ,\nIntroduction, libtool, The Libtool Manual}).\n\n@item AC_PROG_YACC\n@vindex YACC\nIf a Yacc source file is seen, then you must either use this macro or\ndefine the variable @code{YACC} in @file{configure.ac}.  The former is\npreferred (@pxref{Particular Programs, , Particular Program Checks,\nautoconf, The Autoconf Manual}).\n\n@item AC_PROG_LEX\nIf a Lex source file is seen, then this macro must be used.\n@xref{Particular Programs, , Particular Program Checks, autoconf, The\nAutoconf Manual}.\n\n@item AC_REQUIRE_AUX_FILE\nFor each @code{AC_REQUIRE_AUX_FILE([@var{file}])},\n@command{automake} will ensure that @file{@var{file}} exists in the\naux directory, and will complain otherwise.  It\nwill also automatically distribute the file.  This macro should be\nused by third-party Autoconf macros that require some supporting\nfiles in the aux directory specified with @code{AC_CONFIG_AUX_DIR}\nabove.  @xref{Input, , Finding @command{configure} Input, autoconf,\nThe Autoconf Manual}.\n\n@item AC_SUBST\nThe first argument is automatically defined as a variable in each\ngenerated @file{Makefile.in}, unless @code{AM_SUBST_NOTMAKE} is also\nused for this variable.  @xref{Setting Output Variables, , Setting\nOutput Variables, autoconf, The Autoconf Manual}.\n\nFor every substituted variable @var{var}, @command{automake} will add\na line @code{@var{var} = @var{value}} to each @file{Makefile.in} file.\nMany Autoconf macros invoke @code{AC_SUBST} to set output variables\nthis way, e.g., @code{AC_PATH_XTRA} defines @code{X_CFLAGS} and\n@code{X_LIBS}.  Thus, you can access these variables as\n@code{$(X_CFLAGS)} and @code{$(X_LIBS)} in any @file{Makefile.am}\nif @code{AC_PATH_XTRA} is called.\n\n@item AM_CONDITIONAL\nThis introduces an Automake conditional (@pxref{Conditionals}).\n\n@item AM_COND_IF\nThis macro allows @code{automake} to detect subsequent access within\n@file{configure.ac} to a conditional previously introduced with\n@code{AM_CONDITIONAL}, thus enabling conditional @code{AC_CONFIG_FILES}\n(@pxref{Usage of Conditionals}).\n\n@item AM_GNU_GETTEXT\nThis macro is required for packages that use GNU gettext\n(@pxref{gettext}).  It is distributed with gettext.  If Automake sees\nthis macro it ensures that the package meets some of gettext's\nrequirements.\n\n@item AM_GNU_GETTEXT_INTL_SUBDIR\nThis macro specifies that the @file{intl/} subdirectory is to be built,\neven if the @code{AM_GNU_GETTEXT} macro was invoked with a first argument\nof @samp{external}.\n\n@item AM_MAINTAINER_MODE(@ovar{default-mode})\n@opindex --enable-maintainer-mode\n@opindex --disable-maintainer-mode\nThis macro adds an @option{--enable-maintainer-mode} option to\n@command{configure}.  If this is used, @command{automake} will cause\n``maintainer-only'' rules to be turned off by default in the\ngenerated @file{Makefile.in}s, unless @var{default-mode} is\n@samp{enable}.  This macro defines the @code{MAINTAINER_MODE}\nconditional, which you can use in your own @file{Makefile.am}.\n@xref{maintainer-mode}.\n\n@item AM_SUBST_NOTMAKE(@var{var})\nPrevent Automake from defining a variable @var{var}, even if it is\nsubstituted by @command{config.status}.  Normally, Automake defines a\n@command{make} variable for each @command{configure} substitution,\ni.e., for each @code{AC_SUBST([@var{var}])}.  This macro prevents that\ndefinition from Automake.  If @code{AC_SUBST} has not been called\nfor this variable, then @code{AM_SUBST_NOTMAKE} has no effects.\nPreventing variable definitions may be useful for substitution of\nmulti-line values, where @code{@var{var} = @@@var{value}@@} might yield\nunintended results.\n\n@item m4_include\nFiles included by @file{configure.ac} using this macro will be\ndetected by Automake and automatically distributed.  They will also\nappear as dependencies in @file{Makefile} rules.\n\n@code{m4_include} is seldom used by @file{configure.ac} authors, but\ncan appear in @file{aclocal.m4} when @command{aclocal} detects that\nsome required macros come from files local to your package (as opposed to\nmacros installed in a system-wide directory; @pxref{aclocal Invocation}).\n\n@end ftable\n\n@node aclocal Invocation\n@section Auto-generating aclocal.m4\n@c This node used to be named \"Invoking automake\".  This @anchor\n@c allows old links to still work.\n@anchor{Invoking aclocal}\n\n@cindex Invocation of @command{aclocal}\n@cindex @command{aclocal}, Invocation\n@cindex Invoking @command{aclocal}\n@cindex @command{aclocal}, Invoking\n\nAutomake includes a number of Autoconf macros that can be used in\nyour package (@pxref{Macros}); some of them are actually required by\nAutomake in certain situations.  These macros must be defined in your\n@file{aclocal.m4}; otherwise they will not be seen by\n@command{autoconf}.\n\nThe @command{aclocal} program will automatically generate\n@file{aclocal.m4} files based on the contents of @file{configure.ac}.\nThis provides a convenient way to get Automake-provided macros,\nwithout having to search around.  The @command{aclocal} mechanism\nallows other packages to supply their own macros (@pxref{Extending\naclocal}).  You can also use it to maintain your own set of custom\nmacros (@pxref{Local Macros}).\n\nAt startup, @command{aclocal} scans all the @file{.m4} files it can\nfind, looking for macro definitions (@pxref{Macro Search Path}).  Then\nit scans @file{configure.ac}.  Any mention of one of the macros found\nin the first step causes that macro, and any macros it in turn\nrequires, to be put into @file{aclocal.m4}.\n\n@emph{Putting} the file that contains the macro definition into\n@file{aclocal.m4} is usually done by copying the entire text of this\nfile, including unused macro definitions as well as both @samp{#} and\n@samp{dnl} comments.  If you want to make a comment that will be\ncompletely ignored by @command{aclocal}, use @samp{##} as the comment\nleader.\n\nWhen a file selected by @command{aclocal} is located in a subdirectory\nspecified as a relative search path with @command{aclocal}'s @option{-I}\nargument, @command{aclocal} assumes the file belongs to the package\nand uses @code{m4_include} instead of copying it into\n@file{aclocal.m4}.  This makes the package smaller, eases dependency\ntracking, and cause the file to be distributed automatically.\n(@xref{Local Macros}, for an example.)  Any macro that is found in a\nsystem-wide directory or via an absolute search path will be copied.\nSo use @samp{-I `pwd`/reldir} instead of @samp{-I reldir} whenever\nsome relative directory should be considered outside the package.\n\nThe contents of @file{acinclude.m4}, if this file exists, are also\nautomatically included in @file{aclocal.m4}.  We recommend against\nusing @file{acinclude.m4} in new packages (@pxref{Local Macros}).\n\n@vindex AUTOM4TE\n@cindex autom4te\nWhile computing @file{aclocal.m4}, @command{aclocal} runs\n@command{autom4te} (@pxref{Using autom4te, , Using @command{Autom4te},\nautoconf, The Autoconf Manual}) in order to trace the macros that are\nreally used, and omit from @file{aclocal.m4} all macros that are\nmentioned but otherwise unexpanded (this can happen when a macro is\ncalled conditionally).  @command{autom4te} is expected to be in the\n@env{PATH}, just as @command{autoconf}.  Its location can be\noverridden using the @env{AUTOM4TE} environment variable.\n\n@menu\n* aclocal Options::             Options supported by aclocal\n* Macro Search Path::           How aclocal finds .m4 files\n* Extending aclocal::           Writing your own aclocal macros\n* Local Macros::                Organizing local macros\n* Serials::                     Serial lines in Autoconf macros\n* Future of aclocal::           aclocal's scheduled death\n@end menu\n\n@node aclocal Options\n@subsection aclocal Options\n\n@cindex @command{aclocal}, Options\n@cindex Options, @command{aclocal}\n\n@command{aclocal} accepts the following options:\n\n@table @code\n@item --automake-acdir=@var{dir}\n@opindex --automake-acdir\nLook for the automake-provided macro files in @var{dir} instead of\nin the installation directory.  This is typically used for debugging.\n\n@vindex ACLOCAL_AUTOMAKE_DIR\nThe environment variable @env{ACLOCAL_AUTOMAKE_DIR} provides another\nway to set the directory containing automake-provided macro files.\nHowever @option{--automake-acdir} takes precedence over it.\n\n@item --system-acdir=@var{dir}\n@opindex --system-acdir\nLook for the system-wide third-party macro files (and the special\n@file{dirlist} file) in @var{dir} instead of in the installation\ndirectory.  This is typically used for debugging.\n\n@item --diff[=@var{command}]\n@opindex --diff\nRun @var{command} on the M4 file that would be installed or overwritten\nby @option{--install}.  The default @var{command} is @samp{diff -u}.\nThis option implies @option{--install} and @option{--dry-run}.\n\n@item --dry-run\n@opindex --dry-run\nDo not actually overwrite (or create) @file{aclocal.m4} and M4\nfiles installed by @option{--install}.\n\n@item --help\n@opindex --help\nPrint a summary of the command line options and exit.\n\n@item -I @var{dir}\n@opindex -I\nAdd the directory @var{dir} to the list of directories searched for\n@file{.m4} files.\n\n@item --install\n@opindex --install\nInstall system-wide third-party macros into the first directory\nspecified with @samp{-I @var{dir}} instead of copying them in the\noutput file.\n@c Keep in sync with aclocal-install-absdir.sh\nNote that this will happen also if @var{dir} is an absolute path.\n\n@cindex serial number and @option{--install}\nWhen this option is used, and only when this option is used,\n@command{aclocal} will also honor @samp{#serial @var{number}} lines\nthat appear in macros: an M4 file is ignored if there exists another\nM4 file with the same basename and a greater serial number in the\nsearch path (@pxref{Serials}).\n\n@item --force\n@opindex --force\nAlways overwrite the output file.  The default is to overwrite the output\nfile only when really needed, i.e., when its contents change or if one\nof its dependencies is younger.\n\nThis option forces the update of @file{aclocal.m4} (or the file\nspecified with @file{--output} below) and only this file, it has\nabsolutely no influence on files that may need to be installed by\n@option{--install}.\n\n@item --output=@var{file}\n@opindex --output\nCause the output to be put into @var{file} instead of @file{aclocal.m4}.\n\n@item --print-ac-dir\n@opindex --print-ac-dir\nPrints the name of the directory that @command{aclocal} will search to\nfind third-party @file{.m4} files.  When this option is given, normal\nprocessing is suppressed.  This option was used @emph{in the past} by\nthird-party packages to determine where to install @file{.m4} macro\nfiles, but @emph{this usage is today discouraged}, since it causes\n@samp{$(prefix)} not to be thoroughly honored (which violates the\nGNU Coding Standards), and similar semantics can be better obtained\nwith the @env{ACLOCAL_PATH} environment variable; @pxref{Extending aclocal}.\n\n@item --verbose\n@opindex --verbose\nPrint the names of the files it examines.\n\n@item --version\n@opindex --version\nPrint the version number of Automake and exit.\n\n@item -W CATEGORY\n@item --warnings=@var{category}\n@opindex -W\n@opindex --warnings\nOutput warnings falling in @var{category}.  @var{category} can be\none of:\n@table @code\n@item syntax\ndubious syntactic constructs, underquoted macros, unused macros, etc.\n@item unsupported\nunknown macros\n@item all\nall the warnings, this is the default\n@item none\nturn off all the warnings\n@item error\ntreat warnings as errors\n@end table\n\nAll warnings are output by default.\n\n@vindex WARNINGS\nThe environment variable @env{WARNINGS} is honored in the same\nway as it is for @command{automake} (@pxref{automake Invocation}).\n\n@end table\n\n@node Macro Search Path\n@subsection Macro Search Path\n\n@cindex Macro search path\n@cindex @command{aclocal} search path\n\nBy default, @command{aclocal} searches for @file{.m4} files in the following\ndirectories, in this order:\n\n@table @code\n@item @var{acdir-APIVERSION}\nThis is where the @file{.m4} macros distributed with Automake itself\nare stored.  @var{APIVERSION} depends on the Automake release used;\nfor example, for Automake 1.11.x, @var{APIVERSION} = @code{1.11}.\n\n@item @var{acdir}\nThis directory is intended for third party @file{.m4} files, and is\nconfigured when @command{automake} itself is built.  This is\n@file{@@datadir@@/aclocal/}, which typically\nexpands to @file{$@{prefix@}/share/aclocal/}.  To find the compiled-in\nvalue of @var{acdir}, use the @option{--print-ac-dir} option\n(@pxref{aclocal Options}).\n@end table\n\nAs an example, suppose that @command{automake-1.11.2} was configured with\n@option{--prefix=@-/usr/local}.  Then, the search path would be:\n\n@enumerate\n@item @file{/usr/local/share/aclocal-1.11.2/}\n@item @file{/usr/local/share/aclocal/}\n@end enumerate\n\nThe paths for the @var{acdir} and @var{acdir-APIVERSION} directories can\nbe changed respectively through aclocal options @option{--system-acdir}\nand @option{--automake-acdir} (@pxref{aclocal Options}).  Note however\nthat these options are only intended for use by the internal Automake\ntest suite, or for debugging under highly unusual situations; they are\nnot ordinarily needed by end-users.\n\nAs explained in (@pxref{aclocal Options}), there are several options that\ncan be used to change or extend this search path.\n\n@subsubheading Modifying the Macro Search Path: @samp{-I @var{dir}}\n\nAny extra directories specified using @option{-I} options\n(@pxref{aclocal Options}) are @emph{prepended} to this search list.  Thus,\n@samp{aclocal -I /foo -I /bar} results in the following search path:\n\n@enumerate\n@item @file{/foo}\n@item @file{/bar}\n@item @var{acdir}-@var{APIVERSION}\n@item @var{acdir}\n@end enumerate\n\n@subsubheading Modifying the Macro Search Path: @file{dirlist}\n@cindex @file{dirlist}\n\nThere is a third mechanism for customizing the search path.  If a\n@file{dirlist} file exists in @var{acdir}, then that file is assumed to\ncontain a list of directory patterns, one per line.  @command{aclocal}\nexpands these patterns to directory names, and adds them to the search\nlist @emph{after} all other directories.  @file{dirlist} entries may\nuse shell wildcards such as @samp{*}, @samp{?}, or @code{[...]}.\n\nFor example, suppose\n@file{@var{acdir}/dirlist} contains the following:\n\n@example\n/test1\n/test2\n/test3*\n@end example\n\n@noindent\nand that @command{aclocal} was called with the @samp{-I /foo -I /bar} options.\nThen, the search path would be\n\n@c @code looks better than @file here\n@enumerate\n@item @code{/foo}\n@item @code{/bar}\n@item @var{acdir}-@var{APIVERSION}\n@item @var{acdir}\n@item @code{/test1}\n@item @code{/test2}\n@end enumerate\n\n@noindent\nand all directories with path names starting with @code{/test3}.\n\nIf the @option{--system-acdir=@var{dir}} option is used, then\n@command{aclocal} will search for the @file{dirlist} file in\n@var{dir}; but remember the warnings  above against the use of\n@option{--system-acdir}.\n\n@file{dirlist} is useful in the following situation: suppose that\n@command{automake} version @code{1.11.2} is installed with\n@samp{--prefix=/usr} by the system vendor.  Thus, the default search\ndirectories are\n\n@c @code looks better than @file here\n@enumerate\n@item @code{/usr/share/aclocal-1.11/}\n@item @code{/usr/share/aclocal/}\n@end enumerate\n\nHowever, suppose further that many packages have been manually\ninstalled on the system, with $prefix=/usr/local, as is typical.  In\nthat case, many of these ``extra'' @file{.m4} files are in\n@file{/usr/local/share/aclocal}.  The only way to force\n@file{/usr/bin/aclocal} to find these ``extra'' @file{.m4} files is to\nalways call @samp{aclocal -I /usr/local/share/aclocal}.  This is\ninconvenient.  With @file{dirlist}, one may create a file\n@file{/usr/share/aclocal/dirlist} containing only the single line\n\n@example\n/usr/local/share/aclocal\n@end example\n\nNow, the ``default'' search path on the affected system is\n\n@c @code looks better than @file here\n@enumerate\n@item @code{/usr/share/aclocal-1.11/}\n@item @code{/usr/share/aclocal/}\n@item @code{/usr/local/share/aclocal/}\n@end enumerate\n\n@noindent\nwithout the need for @option{-I} options; @option{-I} options can be reserved\nfor project-specific needs (@file{my-source-dir/m4/}), rather than\nusing them to work around local system-dependent tool installation\ndirectories.\n\nSimilarly, @file{dirlist} can be handy if you have installed a local\ncopy of Automake in your account and want @command{aclocal} to look for\nmacros installed at other places on the system.\n\n@anchor{ACLOCAL_PATH}\n@subsubheading Modifying the Macro Search Path: @file{ACLOCAL_PATH}\n@cindex @env{ACLOCAL_PATH}\n\nThe fourth and last mechanism to customize the macro search path is\nalso the simplest.  Any directory included in the colon-separated\nenvironment variable @env{ACLOCAL_PATH} is added to the search path\n@c Keep in sync with aclocal-path-precedence.sh\nand takes precedence over system directories (including those found via\n@file{dirlist}), with the exception of the versioned directory\n@var{acdir-APIVERSION} (@pxref{Macro Search Path}).  However, directories\npassed via @option{-I} will take precedence over directories in\n@env{ACLOCAL_PATH}.\n\n@c Keep in sync with aclocal-path-installed.sh\nAlso note that, if the @option{--install} option is used, any @file{.m4}\nfile containing a required macro that is found in a directory listed in\n@env{ACLOCAL_PATH} will be installed locally.\n@c Keep in sync with aclocal-path-installed-serial.sh\nIn this case, serial numbers in @file{.m4} are honored too,\n@pxref{Serials}.\n\nConversely to @file{dirlist}, @env{ACLOCAL_PATH} is useful if you are\nusing a global copy of Automake and want @command{aclocal} to look for\nmacros somewhere under your home directory.\n\n@subsubheading Planned future incompatibilities\n\nThe order in which the directories in the macro search path are currently\nlooked up is confusing and/or suboptimal in various aspects, and is\nprobably going to be changed in the future Automake release.  In\nparticular, directories in @env{ACLOCAL_PATH} and @file{@var{acdir}}\nmight end up taking precedence over @file{@var{acdir-APIVERSION}}, and\ndirectories in @file{@var{acdir}/dirlist} might end up taking precedence\nover @file{@var{acdir}}.  @emph{This is a possible future incompatibility!}\n\n@node Extending aclocal\n@subsection Writing your own aclocal macros\n\n@cindex @command{aclocal}, extending\n@cindex Extending @command{aclocal}\n\nThe @command{aclocal} program doesn't have any built-in knowledge of any\nmacros, so it is easy to extend it with your own macros.\n\nThis can be used by libraries that want to supply their own Autoconf\nmacros for use by other programs.  For instance, the @command{gettext}\nlibrary supplies a macro @code{AM_GNU_GETTEXT} that should be used by\nany package using @command{gettext}.  When the library is installed, it\ninstalls this macro so that @command{aclocal} will find it.\n\nA macro file's name should end in @file{.m4}.  Such files should be\ninstalled in @file{$(datadir)/aclocal}.  This is as simple as writing:\n\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@example\naclocaldir = $(datadir)/aclocal\naclocal_DATA = mymacro.m4 myothermacro.m4\n@end example\n\n@noindent\nPlease do use @file{$(datadir)/aclocal}, and not something based on\nthe result of @samp{aclocal --print-ac-dir} (@pxref{Hard-Coded Install\nPaths}, for arguments).  It might also be helpful to suggest to\nthe user to add the @file{$(datadir)/aclocal} directory to his\n@env{ACLOCAL_PATH} variable (@pxref{ACLOCAL_PATH}) so that\n@command{aclocal} will find the @file{.m4} files installed by your\npackage automatically.\n\nA file of macros should be a series of properly quoted\n@code{AC_DEFUN}'s (@pxref{Macro Definitions, , , autoconf, The\nAutoconf Manual}).  The @command{aclocal} programs also understands\n@code{AC_REQUIRE} (@pxref{Prerequisite Macros, , , autoconf, The\nAutoconf Manual}), so it is safe to put each macro in a separate file.\nEach file should have no side effects but macro definitions.\nEspecially, any call to @code{AC_PREREQ} should be done inside the\ndefined macro, not at the beginning of the file.\n\n@cindex underquoted @code{AC_DEFUN}\n@acindex AC_DEFUN\n@acindex AC_PREREQ\n\nStarting with Automake 1.8, @command{aclocal} will warn about all\nunderquoted calls to @code{AC_DEFUN}.  We realize this will annoy a\nlot of people, because @command{aclocal} was not so strict in the past\nand many third party macros are underquoted; and we have to apologize\nfor this temporary inconvenience.  The reason we have to be stricter\nis that a future implementation of @command{aclocal} (@pxref{Future of\naclocal}) will have to temporarily include all of these third party\n@file{.m4} files, maybe several times, including even files that are\nnot actually needed.  Doing so should alleviate many problems of the\ncurrent implementation; however it requires a stricter style from the\nmacro authors.  Hopefully it is easy to revise the existing macros.\nFor instance,\n\n@example\n# bad style\nAC_PREREQ(2.68)\nAC_DEFUN(AX_FOOBAR,\n[AC_REQUIRE([AX_SOMETHING])dnl\nAX_FOO\nAX_BAR\n])\n@end example\n\n@noindent\nshould be rewritten as\n\n@example\nAC_DEFUN([AX_FOOBAR],\n[AC_PREREQ([2.68])dnl\nAC_REQUIRE([AX_SOMETHING])dnl\nAX_FOO\nAX_BAR\n])\n@end example\n\nWrapping the @code{AC_PREREQ} call inside the macro ensures that\nAutoconf 2.68 will not be required if @code{AX_FOOBAR} is not actually\nused.  Most importantly, quoting the first argument of @code{AC_DEFUN}\nallows the macro to be redefined or included twice (otherwise this\nfirst argument would be expanded during the second definition).  For\nconsistency we like to quote even arguments such as @code{2.68} that\ndo not require it.\n\nIf you have been directed here by the @command{aclocal} diagnostic but\nare not the maintainer of the implicated macro, you will want to\ncontact the maintainer of that macro.  Please make sure you have the\nlatest version of the macro and that the problem hasn't already been\nreported before doing so: people tend to work faster when they aren't\nflooded by mails.\n\nAnother situation where @command{aclocal} is commonly used is to\nmanage macros that are used locally by the package; @ref{Local\nMacros}.\n\n@node Local Macros\n@subsection Handling Local Macros\n\nFeature tests offered by Autoconf do not cover all needs.  People\noften have to supplement existing tests with their own macros, or\nwith third-party macros.\n\nThere are two ways to organize custom macros in a package.\n\nThe first possibility (the historical practice) is to list all your\nmacros in @file{acinclude.m4}.  This file will be included in\n@file{aclocal.m4} when you run @command{aclocal}, and its macro(s) will\nhenceforth be visible to @command{autoconf}.  However if it contains\nnumerous macros, it will rapidly become difficult to maintain, and it\nwill be almost impossible to share macros between packages.\n\nThe second possibility, which we do recommend, is to write each macro\nin its own file and gather all these files in a directory.  This\ndirectory is usually called @file{m4/}.  Then it's enough to update\n@file{configure.ac} by adding a proper call to @code{AC_CONFIG_MACRO_DIRS}:\n\n@example\nAC_CONFIG_MACRO_DIRS([m4])\n@end example\n\n@command{aclocal} will then take care of automatically adding @file{m4/}\nto its search path for m4 files.\n\nWhen @samp{aclocal} is run, it will build an @file{aclocal.m4}\nthat @code{m4_include}s any file from @file{m4/} that defines a\nrequired macro.  Macros not found locally will still be searched in\nsystem-wide directories, as explained in @ref{Macro Search Path}.\n\nCustom macros should be distributed for the same reason that\n@file{configure.ac} is: so that other people have all the sources of\nyour package if they want to work on it.  Actually, this distribution\nhappens automatically because all @code{m4_include}d files are\ndistributed.\n\nHowever there is no consensus on the distribution of third-party\nmacros that your package may use.  Many libraries install their own\nmacro in the system-wide @command{aclocal} directory (@pxref{Extending\naclocal}).  For instance, Guile ships with a file called\n@file{guile.m4} that contains the macro @code{GUILE_FLAGS} that can\nbe used to define setup compiler and linker flags appropriate for\nusing Guile.  Using @code{GUILE_FLAGS} in @file{configure.ac} will\ncause @command{aclocal} to copy @file{guile.m4} into\n@file{aclocal.m4}, but as @file{guile.m4} is not part of the project,\nit will not be distributed.  Technically, that means a user who\nneeds to rebuild @file{aclocal.m4} will have to install Guile first.\nThis is probably OK, if Guile already is a requirement to build the\npackage.  However, if Guile is only an optional feature, or if your\npackage might run on architectures where Guile cannot be installed,\nthis requirement will hinder development.  An easy solution is to copy\nsuch third-party macros in your local @file{m4/} directory so they get\ndistributed.\n\nSince Automake 1.10, @command{aclocal} offers the option @code{--install}\nto copy these system-wide third-party macros in your local macro directory,\nhelping to solve the above problem.\n\nWith this setup, system-wide macros will be copied to @file{m4/}\nthe first time you run @command{aclocal}.  Then the locally installed\nmacros will have precedence over the system-wide installed macros\neach time @command{aclocal} is run again.\n\nOne reason why you should keep @option{--install} in the flags even\nafter the first run is that when you later edit @file{configure.ac}\nand depend on a new macro, this macro will be installed in your\n@file{m4/} automatically.  Another one is that serial numbers\n(@pxref{Serials}) can be used to update the macros in your source tree\nautomatically when new system-wide versions are installed.  A serial\nnumber should be a single line of the form\n\n@example\n#serial @var{nnn}\n@end example\n\n@noindent\nwhere @var{nnn} contains only digits and dots.  It should appear in\nthe M4 file before any macro definition.  It is a good practice to\nmaintain a serial number for each macro you distribute, even if you do\nnot use the @option{--install} option of @command{aclocal}: this allows\nother people to use it.\n\n\n@node Serials\n@subsection Serial Numbers\n@cindex serial numbers in macros\n@cindex macro serial numbers\n@cindex @code{#serial} syntax\n@cindex @command{aclocal} and serial numbers\n\nBecause third-party macros defined in @file{*.m4} files are naturally\nshared between multiple projects, some people like to version them.\nThis makes it easier to tell which of two M4 files is newer.  Since at\nleast 1996, the tradition is to use a @samp{#serial} line for this.\n\nA serial number should be a single line of the form\n\n@example\n# serial @var{version}\n@end example\n\n@noindent\nwhere @var{version} is a version number containing only digits and\ndots.  Usually people use a single integer, and they increment it each\ntime they change the macro (hence the name of ``serial'').  Such a\nline should appear in the M4 file before any macro definition.\n\nThe @samp{#} must be the first character on the line,\nand it is OK to have extra words after the version, as in\n\n@example\n#serial @var{version} @var{garbage}\n@end example\n\nNormally these serial numbers are completely ignored by\n@command{aclocal} and @command{autoconf}, like any genuine comment.\nHowever when using @command{aclocal}'s @option{--install} feature, these\nserial numbers will modify the way @command{aclocal} selects the\nmacros to install in the package: if two files with the same basename\nexist in your search path, and if at least one of them uses a\n@samp{#serial} line, @command{aclocal} will ignore the file that has\nthe older @samp{#serial} line (or the file that has none).\n\nNote that a serial number applies to a whole M4 file, not to any macro\nit contains.  A file can contain multiple macros, but only one\nserial.\n\nHere is a use case that illustrates the use of @option{--install} and\nits interaction with serial numbers.  Let's assume we maintain a\npackage called MyPackage, the @file{configure.ac} of which requires a\nthird-party macro @code{AX_THIRD_PARTY} defined in\n@file{/usr/share/aclocal/thirdparty.m4} as follows:\n\n@example\n# serial 1\nAC_DEFUN([AX_THIRD_PARTY], [...])\n@end example\n\nMyPackage uses an @file{m4/} directory to store local macros as\nexplained in @ref{Local Macros}, and has\n\n@example\nAC_CONFIG_MACRO_DIRS([m4])\n@end example\n\n@noindent\nin its @file{configure.ac}.\n\nInitially the @file{m4/} directory is empty.  The first time we run\n@command{aclocal --install}, it will notice that\n\n@itemize @bullet\n@item\n@file{configure.ac} uses @code{AX_THIRD_PARTY}\n@item\nNo local macros define @code{AX_THIRD_PARTY}\n@item\n@file{/usr/share/aclocal/thirdparty.m4} defines @code{AX_THIRD_PARTY}\nwith serial @w{number 1}.\n@end itemize\n\n@noindent\nBecause @file{/usr/share/aclocal/thirdparty.m4} is a system-wide macro\nand @command{aclocal} was given the @option{--install} option, it will\ncopy this file in @file{m4/thirdparty.m4}, and output an\n@file{aclocal.m4} that contains @samp{m4_include([m4/thirdparty.m4])}.\n\nThe next time @samp{aclocal --install} is run, something different\nhappens.  @command{aclocal} notices that\n\n@itemize @bullet\n@item\n@file{configure.ac} uses @code{AX_THIRD_PARTY}\n@item\n@file{m4/thirdparty.m4} defines @code{AX_THIRD_PARTY}\nwith serial @w{number 1}.\n@item\n@file{/usr/share/aclocal/thirdparty.m4} defines @code{AX_THIRD_PARTY}\nwith serial @w{number 1}.\n@end itemize\n\n@noindent\nBecause both files have the same serial number, @command{aclocal} uses\nthe first it found in its search path order (@pxref{Macro Search\nPath}).  @command{aclocal} therefore ignores\n@file{/usr/share/aclocal/thirdparty.m4} and outputs an\n@file{aclocal.m4} that contains @samp{m4_include([m4/thirdparty.m4])}.\n\nLocal directories specified with @option{-I} are always searched before\nsystem-wide directories, so a local file will always be preferred to\nthe system-wide file in case of equal serial numbers.\n\nNow suppose the system-wide third-party macro is changed.  This can\nhappen if the package installing this macro is updated.  Let's suppose\nthe new macro has serial @w{number 2}.  The next time @samp{aclocal --install}\nis run the situation is the following:\n\n@itemize @bullet\n@item\n@file{configure.ac} uses @code{AX_THIRD_PARTY}\n@item\n@file{m4/thirdparty.m4} defines @code{AX_THIRD_PARTY}\nwith serial @w{number 1}.\n@item\n@file{/usr/share/aclocal/thirdparty.m4} defines @code{AX_THIRD_PARTY}\nwith @w{serial 2}.\n@end itemize\n\n@noindent\nWhen @command{aclocal} sees a greater serial number, it immediately\nforgets anything it knows from files that have the same basename and a\nsmaller serial number.  So after it has found\n@file{/usr/share/aclocal/thirdparty.m4} with serial 2,\n@command{aclocal} will proceed as if it had never seen\n@file{m4/thirdparty.m4}.  This brings us back to a situation similar\nto that at the beginning of our example, where no local file defined\nthe macro.  @command{aclocal} will install the new version of the\nmacro in @file{m4/thirdparty.m4}, in this case overriding the old\nversion.  MyPackage just had its macro updated as a side effect of\nrunning @command{aclocal}.\n\nIf you are leery of letting @command{aclocal} update your local\nmacro, you can run @samp{aclocal --diff} to review the changes\n@samp{aclocal --install} would perform on these macros.\n\nFinally, note that the @option{--force} option of @command{aclocal} has\nabsolutely no effect on the files installed by @option{--install}.  For\ninstance, if you have modified your local macros, do not expect\n@option{--install --force} to replace the local macros by their\nsystem-wide versions.  If you want to do so, simply erase the local\nmacros you want to revert, and run @samp{aclocal --install}.\n\n\n@node Future of aclocal\n@subsection The Future of @command{aclocal}\n@cindex @command{aclocal}'s scheduled death\n\n@command{aclocal} is expected to disappear.  This feature really\nshould not be offered by Automake.  Automake should focus on\ngenerating @file{Makefile}s; dealing with M4 macros really is\nAutoconf's job.  The fact that some people install Automake just to use\n@command{aclocal}, but do not use @command{automake} otherwise is an\nindication of how that feature is misplaced.\n\nThe new implementation will probably be done slightly differently.\nFor instance, it could enforce the @file{m4/}-style layout discussed in\n@ref{Local Macros}.\n\nWe have no idea when and how this will happen.  This has been\ndiscussed several times in the past, but someone still has to commit\nto that non-trivial task.\n\nFrom the user point of view, @command{aclocal}'s removal might turn\nout to be painful.  There is a simple precaution that you may take to\nmake that switch more seamless: never call @command{aclocal} yourself.\nKeep this guy under the exclusive control of @command{autoreconf} and\nAutomake's rebuild rules.  Hopefully you won't need to worry about\nthings breaking; when @command{aclocal} disappears, because everything\nwill have been taken care of.  If otherwise you used to call\n@command{aclocal} directly yourself or from some script, you will\nquickly notice the change.\n\nMany packages come with a script called @file{bootstrap} or\n@file{autogen.sh}, that will just call @command{aclocal},\n@command{libtoolize}, @command{gettextize} or @command{autopoint},\n@command{autoconf}, @command{autoheader}, and @command{automake} in\nthe right order.  Actually this is precisely what @command{autoreconf}\ncan do for you.  If your package has such a @file{bootstrap} or\n@file{autogen.sh} script, consider using @command{autoreconf}.  That\nshould simplify its logic a lot (less things to maintain, yum!), it's\neven likely you will not need the script anymore, and more to the point\nyou will not call @command{aclocal} directly anymore.\n\nFor the time being, third-party packages should continue to install\npublic macros into @file{/usr/share/aclocal/}.  If @command{aclocal}\nis replaced by another tool it might make sense to rename the\ndirectory, but supporting @file{/usr/share/aclocal/} for backward\ncompatibility should be really easy provided all macros are properly\nwritten (@pxref{Extending aclocal}).\n\n\n\n@node Macros\n@section Autoconf macros supplied with Automake\n\nAutomake ships with several Autoconf macros that you can use from your\n@file{configure.ac}.  When you use one of them it will be included by\n@command{aclocal} in @file{aclocal.m4}.\n\n@menu\n* Public Macros::               Macros that you can use.\n* Obsolete Macros::             Macros that will soon be removed.\n* Private Macros::              Macros that you should not use.\n@end menu\n\n@c consider generating the following subsections automatically from m4 files.\n\n@node Public Macros\n@subsection Public Macros\n\n@table @code\n\n@item AM_INIT_AUTOMAKE([OPTIONS])\n@acindex AM_INIT_AUTOMAKE\nRuns many macros required for proper operation of the generated Makefiles.\n\n@vindex AUTOMAKE_OPTIONS\nToday, @code{AM_INIT_AUTOMAKE} is called with a single argument: a\nspace-separated list of Automake options that should be applied to\nevery @file{Makefile.am} in the tree.  The effect is as if\neach option were listed in @code{AUTOMAKE_OPTIONS} (@pxref{Options}).\n\n@acindex AC_INIT\nThis macro can also be called in another, @emph{deprecated} form:\n@code{AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])}.  In this form,\nthere are two required arguments: the package and the version number.\nThis usage is mostly obsolete because the @var{package} and @var{version}\ncan be obtained from Autoconf's @code{AC_INIT} macro.  However,\ndifferently from what happens for @code{AC_INIT} invocations, this\n@code{AM_INIT_AUTOMAKE} invocation supports shell variables' expansions\nin the @code{PACKAGE} and @code{VERSION} arguments (which otherwise\ndefaults, respectively, to the @code{PACKAGE_TARNAME} and\n@code{PACKAGE_VERSION} defined via the @code{AC_INIT} invocation;\n@pxref{AC_INIT, , The @code{AC_INIT} macro, autoconf, The Autoconf Manual});\nand this can still be useful in some selected situations.\nOur hope is that future Autoconf versions will improve their support\nfor package versions defined dynamically at configure runtime; when\n(and if) this happens, support for the two-args @code{AM_INIT_AUTOMAKE}\ninvocation will likely be removed from Automake.\n\n@anchor{Modernize AM_INIT_AUTOMAKE invocation}\nIf your @file{configure.ac} has:\n\n@example\nAC_INIT([src/foo.c])\nAM_INIT_AUTOMAKE([mumble], [1.5])\n@end example\n\n@noindent\nyou should modernize it as follows:\n\n@example\nAC_INIT([mumble], [1.5])\nAC_CONFIG_SRCDIR([src/foo.c])\nAM_INIT_AUTOMAKE\n@end example\n\nNote that if you're upgrading your @file{configure.ac} from an earlier\nversion of Automake, it is not always correct to simply move the\npackage and version arguments from @code{AM_INIT_AUTOMAKE} directly to\n@code{AC_INIT}, as in the example above.  The first argument to\n@code{AC_INIT} should be the name of your package (e.g., @samp{GNU\nAutomake}), not the tarball name (e.g., @samp{automake}) that you used\nto pass to @code{AM_INIT_AUTOMAKE}.  Autoconf tries to derive a\ntarball name from the package name, which should work for most but not\nall package names.  (If it doesn't work for yours, you can use the\nfour-argument form of @code{AC_INIT} to provide the tarball name\nexplicitly).\n\n@cindex @code{PACKAGE}, prevent definition\n@cindex @code{VERSION}, prevent definition\n@opindex no-define\nBy default this macro @code{AC_DEFINE}'s @code{PACKAGE} and\n@code{VERSION}.  This can be avoided by passing the @option{no-define}\noption (@pxref{List of Automake options}):\n@example\nAM_INIT_AUTOMAKE([no-define ...])\n@end example\n\n@item AM_PATH_LISPDIR\n@acindex AM_PATH_LISPDIR\n@vindex EMACS\n@vindex lispdir\nSearches for the program @command{emacs}, and, if found, sets the\noutput variable @code{lispdir} to the full path to Emacs' site-lisp\ndirectory.\n\nNote that this test assumes the @command{emacs} found to be a version\nthat supports Emacs Lisp (such as GNU Emacs or XEmacs).  Other\nemacsen can cause this test to hang (some, like old versions of\nMicroEmacs, start up in interactive mode, requiring @kbd{C-x C-c} to\nexit, which is hardly obvious for a non-emacs user).  In most cases,\nhowever, you should be able to use @kbd{C-c} to kill the test.  In\norder to avoid problems, you can set @env{EMACS} to ``no'' in the\nenvironment, or use the @option{--with-lispdir} option to\n@command{configure} to explicitly set the correct path (if you're sure\nyou have an @command{emacs} that supports Emacs Lisp).\n\n@item AM_PROG_AR(@ovar{act-if-fail})\n@acindex AM_PROG_AR\n@vindex AR\nYou must use this macro when you use the archiver in your project, if\nyou want support for unusual archivers such as Microsoft @command{lib}.\nThe content of the optional argument is executed if the archiver\ninterface is not recognized; the default action is to abort configure\nwith an error message.\n\n@item AM_PROG_AS\n@acindex AM_PROG_AS\n@vindex CCAS\n@vindex CCASFLAGS\nUse this macro when you have assembly code in your project.  This will\nchoose the assembler for you (by default the C compiler) and set\n@code{CCAS}, and will also set @code{CCASFLAGS} if required.\n\n@item AM_PROG_CC_C_O\n@acindex AM_PROG_CC_C_O\nThis is an obsolescent macro that checks that the C compiler supports\nthe @option{-c} and @option{-o} options together.  Note that, since\nAutomake 1.14, the @code{AC_PROG_CC} is rewritten to implement such\nchecks itself, and thus the explicit use of @code{AM_PROG_CC_C_O}\nshould no longer be required.\n\n@item AM_PROG_LEX\n@acindex AM_PROG_LEX\n@acindex AC_PROG_LEX\n@cindex HP-UX 10, @command{lex} problems\n@cindex @command{lex} problems with HP-UX 10\nLike @code{AC_PROG_LEX} (@pxref{Particular Programs, , Particular\nProgram Checks, autoconf, The Autoconf Manual}), but uses the\n@command{missing} script on systems that do not have @command{lex}.\nHP-UX 10 is one such system.\n\n@item AM_PROG_GCJ\n@acindex AM_PROG_GCJ\n@vindex GCJ\n@vindex GCJFLAGS\nThis macro finds the @command{gcj} program or causes an error.  It sets\n@code{GCJ} and @code{GCJFLAGS}.  @command{gcj} is the Java front-end to the\nGNU Compiler Collection.\n\n@item AM_PROG_UPC([@var{compiler-search-list}])\n@acindex AM_PROG_UPC\n@vindex UPC\nFind a compiler for Unified Parallel C and define the @code{UPC}\nvariable.  The default @var{compiler-search-list} is @samp{upcc upc}.\nThis macro will abort @command{configure} if no Unified Parallel C\ncompiler is found.\n\n@item AM_MISSING_PROG(@var{name}, @var{program})\n@acindex AM_MISSING_PROG\n@vindex MISSING\nFind a maintainer tool @var{program} and define the @var{name}\nenvironment variable with its location.  If @var{program} is not\ndetected, then @var{name} will instead invoke the @command{missing}\nscript, in order to give useful advice to the user about the missing\nmaintainer tool.  @xref{maintainer-mode}, for more information on when\nthe @command{missing} script is appropriate.\n\n@item AM_SILENT_RULES\n@acindex AM_SILENT_RULES\nControl the machinery for less verbose build output\n(@pxref{Automake Silent Rules}).\n\n@item AM_WITH_DMALLOC\n@acindex AM_WITH_DMALLOC\n@cindex @command{dmalloc}, support for\n@vindex WITH_DMALLOC\n@opindex --with-dmalloc\nAdd support for the @uref{https://dmalloc.com/, Dmalloc package}.  If\nthe user runs @command{configure} with @option{--with-dmalloc}, then\ndefine @code{WITH_DMALLOC} and add @option{-ldmalloc} to @code{LIBS}.\n\n@end table\n\n\n@node Obsolete Macros\n@subsection Obsolete Macros\n@cindex obsolete macros\n@cindex autoupdate\n\nAlthough using some of the following macros was required in past\nreleases, you should not use any of them in new code.  @emph{All\nthese macros will be removed in the next major Automake version};\nif you are still using them, running @command{autoupdate} should\nadjust your @file{configure.ac} automatically (@pxref{autoupdate\nInvocation, , Using @command{autoupdate} to Modernize\n@file{configure.ac}, autoconf, The Autoconf Manual}).\n@emph{Do it NOW!}\n\n@table @code\n\n@item AM_PROG_MKDIR_P\n@acindex AM_PROG_MKDIR_P\n@cindex @code{mkdir -p}, macro check\n@vindex MKDIR_P\n@vindex mkdir_p\n\nFrom Automake 1.8 to 1.9.6 this macro used to define the output\nvariable @code{mkdir_p} to one of @code{mkdir -p}, @code{install-sh\n-d}, or @code{mkinstalldirs}.\n\nNowadays Autoconf provides a similar functionality with\n@code{AC_PROG_MKDIR_P} (@pxref{Particular Programs, , Particular\nProgram Checks, autoconf, The Autoconf Manual}), however this defines\nthe output variable @code{MKDIR_P} instead.  In case you are still\nusing the @code{AM_PROG_MKDIR_P} macro in your @file{configure.ac},\nor its provided variable @code{$(mkdir_p)} in your @file{Makefile.am},\nyou are advised to switch ASAP to the more modern Autoconf-provided\ninterface instead; both the macro and the variable might be removed\nin a future major Automake release.\n\n@end table\n\n\n@node Private Macros\n@subsection Private Macros\n\nThe following macros are private macros you should not call directly.\nThey are called by the other public macros when appropriate.  Do not\nrely on them, as they might be changed in a future version.  Consider\nthem as implementation details; or better, do not consider them at all:\nskip this section!\n\n@ftable @code\n@item _AM_DEPENDENCIES\n@itemx AM_SET_DEPDIR\n@itemx AM_DEP_TRACK\n@itemx AM_OUTPUT_DEPENDENCY_COMMANDS\nThese macros are used to implement Automake's automatic dependency\ntracking scheme.  They are called automatically by Automake when\nrequired, and there should be no need to invoke them manually.\n\n@item AM_MAKE_INCLUDE\nThis macro is used to discover how the user's @command{make} handles\n@code{include} statements.  This macro is automatically invoked when\nneeded; there should be no need to invoke it manually.\n\n@item AM_PROG_INSTALL_STRIP\nThis is used to find a version of @code{install} that can be used to\nstrip a program at installation time.  This macro is automatically\nincluded when required.\n\n@item AM_SANITY_CHECK\nThis checks to make sure that a file created in the build directory is\nnewer than a file in the source directory.  This can fail on systems\nwhere the clock is set incorrectly.  This macro is automatically run\nfrom @code{AM_INIT_AUTOMAKE}.\n\n@end ftable\n\n\n@node Directories\n@chapter Directories\n\nFor simple projects that distribute all files in the same directory\nit is enough to have a single @file{Makefile.am} that builds\neverything in place.\n\nIn larger projects, it is common to organize files in different\ndirectories, in a tree.  For example, there could be a directory\nfor the program's source, one for the testsuite, and one for the\ndocumentation; or, for very large projects, there could be one\ndirectory per program, per library or per module.\n\nThe traditional approach is to build these subdirectories recursively,\nemploying @emph{make recursion}: each directory contains its\nown @file{Makefile}, and when @command{make} is run from the top-level\ndirectory, it enters each subdirectory in turn, and invokes there a\nnew @command{make} instance to build the directory's contents.\n\nBecause this approach is very widespread, Automake offers built-in\nsupport for it.  However, it is worth noting that the use of make\nrecursion has its own serious issues and drawbacks, and that it's\nwell possible to have packages with a multi directory layout that\nmake little or no use of such recursion (examples of such packages\nare GNU Bison and GNU Automake itself); see also the @ref{Alternative}\nsection below.\n\n@menu\n* Subdirectories::              Building subdirectories recursively\n* Conditional Subdirectories::  Conditionally not building directories\n* Alternative::                 Subdirectories without recursion\n* Subpackages::                 Nesting packages\n@end menu\n\n@node Subdirectories\n@section Recursing subdirectories\n\n@cindex @code{SUBDIRS}, explained\n\nIn packages using make recursion, the top level @file{Makefile.am} must\ntell Automake which subdirectories are to be built.  This is done via\nthe @code{SUBDIRS} variable.\n@vindex SUBDIRS\n\nThe @code{SUBDIRS} variable holds a list of subdirectories in which\nbuilding of various sorts can occur.  The rules for many targets\n(e.g., @code{all}) in the generated @file{Makefile} will run commands\nboth locally and in all specified subdirectories.  Note that the\ndirectories listed in @code{SUBDIRS} are not required to contain\n@file{Makefile.am}s; only @file{Makefile}s (after configuration).\nThis allows inclusion of libraries from packages that do not use\nAutomake (such as @code{gettext}; see also @ref{Third-Party\nMakefiles}).\n\nIn packages that use subdirectories, the top-level @file{Makefile.am} is\noften very short.  For instance, here is the @file{Makefile.am} from the\nGNU Hello distribution:\n\n@example\nEXTRA_DIST = BUGS ChangeLog.O README-alpha\nSUBDIRS = doc intl po src tests\n@end example\n\nWhen Automake invokes @command{make} in a subdirectory, it uses the value\nof the @code{MAKE} variable.  It passes the value of the variable\n@code{AM_MAKEFLAGS} to the @command{make} invocation; this can be set in\n@file{Makefile.am} if there are flags you must always pass to\n@command{make}.\n@vindex MAKE\n@vindex AM_MAKEFLAGS\n\nThe directories mentioned in @code{SUBDIRS} are usually direct\nchildren of the current directory, each subdirectory containing its\nown @file{Makefile.am} with a @code{SUBDIRS} pointing to deeper\nsubdirectories.  Automake can be used to construct packages of\narbitrary depth this way.\n\nBy default, Automake generates @file{Makefiles} that work depth-first\nin postfix order: the subdirectories are built before the current\ndirectory.  However, it is possible to change this ordering.  You can\ndo this by putting @samp{.} into @code{SUBDIRS}.  For instance,\nputting @samp{.} first will cause a prefix ordering of\ndirectories.\n\nUsing\n\n@example\nSUBDIRS = lib src . test\n@end example\n\n@noindent\nwill cause @file{lib/} to be built before @file{src/}, then the\ncurrent directory will be built, finally the @file{test/} directory\nwill be built.  It is customary to arrange test directories to be\nbuilt after everything else since they are meant to test what has\nbeen constructed.\n\nIn addition to the built-in recursive targets defined by Automake\n(@code{all}, @code{check}, etc.), the developer can also define his\nown recursive targets.  That is done by passing the names of such\ntargets as arguments to the m4 macro @code{AM_EXTRA_RECURSIVE_TARGETS}\nin @file{configure.ac}.  Automake generates rules to handle the\nrecursion for such targets; and the developer can define real actions\nfor them by defining corresponding @code{-local} targets.\n\n@example\n% @kbd{cat configure.ac}\nAC_INIT([pkg-name], [1.0])\nAM_INIT_AUTOMAKE\nAM_EXTRA_RECURSIVE_TARGETS([foo])\nAC_CONFIG_FILES([Makefile sub/Makefile sub/src/Makefile])\nAC_OUTPUT\n% @kbd{cat Makefile.am}\nSUBDIRS = sub\nfoo-local:\n        @@echo This will be run by \"make foo\".\n% @kbd{cat sub/Makefile.am}\nSUBDIRS = src\n% @kbd{cat sub/src/Makefile.am}\nfoo-local:\n        @@echo This too will be run by a \"make foo\" issued either in\n        @@echo the 'sub/src/' directory, the 'sub/' directory, or the\n        @@echo top-level directory.\n@end example\n\n@node Conditional Subdirectories\n@section Conditional Subdirectories\n@cindex Subdirectories, building conditionally\n@cindex Conditional subdirectories\n@cindex @code{SUBDIRS}, conditional\n@cindex Conditional @code{SUBDIRS}\n\nIt is possible to define the @code{SUBDIRS} variable conditionally if,\nlike in the case of GNU Inetutils, you want to only build a subset of\nthe entire package.\n\nTo illustrate how this works, let's assume we have two directories,\n@file{src/} and @file{opt/}.  @file{src/} should always be built, but we\nwant to decide in @command{configure} whether @file{opt/} will be built\nor not.  (For this example we will assume that @file{opt/} should be\nbuilt when the variable @samp{$want_opt} was set to @samp{yes}.)\n\nRunning @command{make} should thus recurse into @file{src/} always, and\nthen maybe in @file{opt/}.\n\nHowever @samp{make dist} should always recurse into both @file{src/}\nand @file{opt/}, because @file{opt/} should be distributed even if it\nis not needed in the current configuration.  This means\n@file{opt/Makefile} should be created @emph{unconditionally}.\n\nThere are two ways to set up a project like this.  You can use Automake\nconditionals (@pxref{Conditionals}) or use Autoconf @code{AC_SUBST}\nvariables (@pxref{Setting Output Variables, , Setting Output\nVariables, autoconf, The Autoconf Manual}).  Using Automake\nconditionals is the preferred solution.  Before we illustrate these\ntwo possibilities, let's introduce @code{DIST_SUBDIRS}.\n\n@menu\n* SUBDIRS vs DIST_SUBDIRS::     Two sets of directories\n* Subdirectories with AM_CONDITIONAL::  Specifying conditional subdirectories\n* Subdirectories with AC_SUBST::  Another way for conditional recursion\n* Unconfigured Subdirectories::  Not even creating a @samp{Makefile}\n@end menu\n\n@node SUBDIRS vs DIST_SUBDIRS\n@subsection @code{SUBDIRS} vs.@: @code{DIST_SUBDIRS}\n@cindex @code{DIST_SUBDIRS}, explained\n\nAutomake considers two sets of directories, defined by the variables\n@code{SUBDIRS} and @code{DIST_SUBDIRS}.\n\n@code{SUBDIRS} contains the subdirectories of the current directory\nthat must be built (@pxref{Subdirectories}).  It must be defined\nmanually; Automake will never guess a directory is to be built.  As we\nwill see in the next two sections, it is possible to define it\nconditionally so that some directory will be omitted from the build.\n\n@code{DIST_SUBDIRS} is used in rules that need to recurse in all\ndirectories, even those that have been conditionally left out of the\nbuild.  Recall our example where we may not want to build subdirectory\n@file{opt/}, but yet we want to distribute it?  This is where\n@code{DIST_SUBDIRS} comes into play: @samp{opt} may not appear in\n@code{SUBDIRS}, but it must appear in @code{DIST_SUBDIRS}.\n\nPrecisely, @code{DIST_SUBDIRS} is used by @samp{make\nmaintainer-clean}, @samp{make distclean} and @samp{make dist}.  All\nother recursive rules use @code{SUBDIRS}.\n\nIf @code{SUBDIRS} is defined conditionally using Automake\nconditionals, Automake will define @code{DIST_SUBDIRS} automatically\nfrom the possible values of @code{SUBDIRS} in all conditions.\n\nIf @code{SUBDIRS} contains @code{AC_SUBST} variables,\n@code{DIST_SUBDIRS} will not be defined correctly because Automake\ndoes not know the possible values of these variables.  In this case\n@code{DIST_SUBDIRS} needs to be defined manually.\n\n@node Subdirectories with AM_CONDITIONAL\n@subsection Subdirectories with @code{AM_CONDITIONAL}\n@cindex @code{SUBDIRS} and @code{AM_CONDITIONAL}\n@cindex @code{AM_CONDITIONAL} and @code{SUBDIRS}\n\n@c Keep in sync with subdir-am-cond.sh\n\n@file{configure} should output the @file{Makefile} for each directory\nand define a condition into which @file{opt/} should be built.\n\n@example\n@dots{}\nAM_CONDITIONAL([COND_OPT], [test \"$want_opt\" = yes])\nAC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])\n@dots{}\n@end example\n\nThen @code{SUBDIRS} can be defined in the top-level @file{Makefile.am}\nas follows.\n\n@example\nif COND_OPT\n  MAYBE_OPT = opt\nendif\nSUBDIRS = src $(MAYBE_OPT)\n@end example\n\nAs you can see, running @command{make} will rightly recurse into\n@file{src/} and maybe @file{opt/}.\n\n@vindex DIST_SUBDIRS\nAs you can't see, running @samp{make dist} will recurse into both\n@file{src/} and @file{opt/} directories because @samp{make dist}, unlike\n@samp{make all}, doesn't use the @code{SUBDIRS} variable.  It uses the\n@code{DIST_SUBDIRS} variable.\n\nIn this case Automake will define @samp{DIST_SUBDIRS = src opt}\nautomatically because it knows that @code{MAYBE_OPT} can contain\n@samp{opt} in some condition.\n\n@node Subdirectories with AC_SUBST\n@subsection Subdirectories with @code{AC_SUBST}\n@cindex @code{SUBDIRS} and @code{AC_SUBST}\n@cindex @code{AC_SUBST} and @code{SUBDIRS}\n\n@c Keep in sync with subdir-ac-subst.sh\n\nAnother possibility is to define @code{MAYBE_OPT} from\n@file{./configure} using @code{AC_SUBST}:\n\n@example\n@dots{}\nif test \"$want_opt\" = yes; then\n  MAYBE_OPT=opt\nelse\n  MAYBE_OPT=\nfi\nAC_SUBST([MAYBE_OPT])\nAC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])\n@dots{}\n@end example\n\nIn this case the top-level @file{Makefile.am} should look as follows.\n\n@example\nSUBDIRS = src $(MAYBE_OPT)\nDIST_SUBDIRS = src opt\n@end example\n\nThe drawback is that since Automake cannot guess what the possible\nvalues of @code{MAYBE_OPT} are, it is necessary to define\n@code{DIST_SUBDIRS}.\n\n@node Unconfigured Subdirectories\n@subsection Unconfigured Subdirectories\n@cindex Subdirectories, configured conditionally\n\nThe semantics of @code{DIST_SUBDIRS} are often misunderstood by some\nusers that try to @emph{configure and build} subdirectories\nconditionally.  Here by configuring we mean creating the\n@file{Makefile} (it might also involve running a nested\n@command{configure} script: this is a costly operation that explains\nwhy people want to do it conditionally, but only the @file{Makefile}\nis relevant to the discussion).\n\nThe above examples all assume that every @file{Makefile} is created,\neven in directories that are not going to be built.  The simple reason\nis that we want @samp{make dist} to distribute even the directories\nthat are not being built (e.g., platform-dependent code), hence\n@file{make dist} must recurse into the subdirectory, hence this\ndirectory must be configured and appear in @code{DIST_SUBDIRS}.\n\nBuilding packages that do not configure every subdirectory is a tricky\nbusiness, and we do not recommend it to the novice as it is easy to\nproduce an incomplete tarball by mistake.  We will not discuss this\ntopic in depth here, yet for the adventurous here are a few rules to\nremember.\n\n@cartouche\n@itemize\n@item @code{SUBDIRS} should always be a subset of @code{DIST_SUBDIRS}.\n\nIt makes little sense to have a directory in @code{SUBDIRS} that\nis not in @code{DIST_SUBDIRS}.  Think of the former as a way to tell\nwhich directories listed in the latter should be built.\n@item Any directory listed in @code{DIST_SUBDIRS} and @code{SUBDIRS}\nmust be configured.\n\nI.e., the @file{Makefile} must exist or the recursive @command{make}\nrules will not be able to process the directory.\n@item Any configured directory must be listed in @code{DIST_SUBDIRS}.\n\nThis is so the cleaning rules remove the generated @file{Makefile}s.\nIt would be correct to see @code{DIST_SUBDIRS} as a variable that\nlists all the directories that have been configured.\n@end itemize\n@end cartouche\n\nIn order to prevent recursion in some unconfigured directory you\nmust therefore ensure that this directory does not appear in\n@code{DIST_SUBDIRS} (and @code{SUBDIRS}).  For instance, if you define\n@code{SUBDIRS} conditionally using @code{AC_SUBST} and do not define\n@code{DIST_SUBDIRS} explicitly, it will be default to\n@samp{$(SUBDIRS)}; another possibility is to force @code{DIST_SUBDIRS\n= $(SUBDIRS)}.\n\nOf course, directories that are omitted from @code{DIST_SUBDIRS} will\nnot be distributed unless you make other arrangements for this to\nhappen (for instance, always running @samp{make dist} in a\nconfiguration where all directories are known to appear in\n@code{DIST_SUBDIRS}; or writing a @code{dist-hook} target to\ndistribute these directories).\n\n@cindex Subdirectories, not distributed\nIn a few packages, unconfigured directories are not even expected to\nbe distributed.  Although these packages do not require the\naforementioned extra arrangements, there is another pitfall.  If the\nname of a directory appears in @code{SUBDIRS} or @code{DIST_SUBDIRS},\n@command{automake} will make sure the directory exists.  Consequently\n@command{automake} cannot be run on such a distribution when one\ndirectory has been omitted.  One way to avoid this check is to use the\n@code{AC_SUBST} method to declare conditional directories; since\n@command{automake} does not know the values of @code{AC_SUBST}\nvariables it cannot ensure the corresponding directory exists.\n\n@node Alternative\n@section An Alternative Approach to Subdirectories\n\nIf you've ever read Peter Miller's excellent paper, @cite{Recursive\nMake Considered Harmful}, the preceding sections on the use of make\nrecursion will probably come as unwelcome advice.  For those who\nhaven't read the paper, Miller's main thesis is that recursive\n@command{make} invocations are both slow and error-prone.\n\nAutomake provides sufficient cross-directory support @footnote{We\nbelieve.  This work is new and there are probably warts.\n@xref{Introduction}, for information on reporting bugs.} to enable you\nto write a single @file{Makefile.am} for a complex multi-directory\npackage.\n\nBy default an installable file specified in a subdirectory will have its\ndirectory name stripped before installation.  For instance, in this\nexample, the header file will be installed as\n@file{$(includedir)/stdio.h}:\n\n@example\ninclude_HEADERS = inc/stdio.h\n@end example\n\n@vindex nobase_\n@cindex @code{nobase_} prefix\n@cindex Path stripping, avoiding\n@cindex Avoiding path stripping\n\nHowever, the @samp{nobase_} prefix can be used to circumvent this path\nstripping.  In this example, the header file will be installed as\n@file{$(includedir)/sys/types.h}:\n\n@example\nnobase_include_HEADERS = sys/types.h\n@end example\n\n@cindex @code{nobase_} and @code{dist_} or @code{nodist_}\n@cindex @code{dist_} and @code{nobase_}\n@cindex @code{nodist_} and @code{nobase_}\n@vindex dist_\n@vindex nodist_\n\n@samp{nobase_} should be specified first when used in conjunction with\neither @samp{dist_} or @samp{nodist_} (@pxref{Fine-grained Distribution\nControl}).  For instance:\n\n@example\nnobase_dist_pkgdata_DATA = images/vortex.pgm sounds/whirl.ogg\n@end example\n\nFinally, note that a variable using the @samp{nobase_} prefix can\noften be replaced by several variables, one for each destination\ndirectory (@pxref{Uniform}).  For instance, the last example could be\nrewritten as follows:\n\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@example\nimagesdir = $(pkgdatadir)/images\nsoundsdir = $(pkgdatadir)/sounds\ndist_images_DATA = images/vortex.pgm\ndist_sounds_DATA = sounds/whirl.ogg\n@end example\n\n@noindent\nThis latter syntax makes it possible to change one destination\ndirectory without changing the layout of the source tree.\n\nCurrently, @samp{nobase_*_LTLIBRARIES} are the only exception to this\nrule, in that there is no particular installation order guarantee for\nan otherwise equivalent set of variables without @samp{nobase_} prefix.\n\n@node Subpackages\n@section Nesting Packages\n@cindex Nesting packages\n@cindex Subpackages\n@acindex AC_CONFIG_SUBDIRS\n@acindex AC_CONFIG_AUX_DIR\n\n\nIn the GNU Build System, packages can be nested to arbitrary depth.\nThis means that a package can embed other packages with their own\n@file{configure}, @file{Makefile}s, etc.\n\nThese other packages should just appear as subdirectories of their\nparent package.  They must be listed in @code{SUBDIRS} like other\nordinary directories.  However the subpackage's @file{Makefile}s\nshould be output by its own @file{configure} script, not by the\nparent's @file{configure}.  This is achieved using the\n@code{AC_CONFIG_SUBDIRS} Autoconf macro (@pxref{Subdirectories,\nAC_CONFIG_SUBDIRS, Configuring Other Packages in Subdirectories,\nautoconf, The Autoconf Manual}).\n\nHere is an example package for an @code{arm} program that links with\na @code{hand} library that is a nested package in subdirectory\n@file{hand/}.\n\n@code{arm}'s @file{configure.ac}:\n\n@example\nAC_INIT([arm], [1.0])\nAC_CONFIG_AUX_DIR([.])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_CONFIG_FILES([Makefile])\n# Call hand's ./configure script recursively.\nAC_CONFIG_SUBDIRS([hand])\nAC_OUTPUT\n@end example\n\n@code{arm}'s @file{Makefile.am}:\n\n@example\n# Build the library in the hand subdirectory first.\nSUBDIRS = hand\n\n# Include hand's header when compiling this directory.\nAM_CPPFLAGS = -I$(srcdir)/hand\n\nbin_PROGRAMS = arm\narm_SOURCES = arm.c\n# link with the hand library.\narm_LDADD = hand/libhand.a\n@end example\n\nNow here is @code{hand}'s @file{hand/configure.ac}:\n\n@example\nAC_INIT([hand], [1.2])\nAC_CONFIG_AUX_DIR([.])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAM_PROG_AR\nAC_PROG_RANLIB\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n@end example\n\n@noindent\nand its @file{hand/Makefile.am}:\n\n@example\nlib_LIBRARIES = libhand.a\nlibhand_a_SOURCES = hand.c\n@end example\n\nWhen @samp{make dist} is run from the top-level directory it will\ncreate an archive @file{arm-1.0.tar.gz} that contains the @code{arm}\ncode as well as the @file{hand} subdirectory.  This package can be\nbuilt and installed like any ordinary package, with the usual\n@samp{./configure && make && make install} sequence (the @code{hand}\nsubpackage will be built and installed by the process).\n\nWhen @samp{make dist} is run from the hand directory, it will create a\nself-contained @file{hand-1.2.tar.gz} archive.  So although it appears\nto be embedded in another package, it can still be used separately.\n\nThe purpose of the @samp{AC_CONFIG_AUX_DIR([.])} instruction is to\nforce Automake and Autoconf to search for auxiliary scripts in the\ncurrent directory.  For instance, this means that there will be two\ncopies of @file{install-sh}: one in the top-level of the @code{arm}\npackage, and another one in the @file{hand/} subdirectory for the\n@code{hand} package.\n\nThe historical default is to search for these auxiliary scripts in\nthe parent directory and the grandparent directory.  So if the\n@samp{AC_CONFIG_AUX_DIR([.])} line was removed from\n@file{hand/configure.ac}, that subpackage would share the auxiliary\nscript of the @code{arm} package.  This may look like a gain in size\n(a few kilobytes), but it is actually a loss of modularity as the\n@code{hand} subpackage is no longer self-contained (@samp{make dist}\nin the subdirectory will not work anymore).\n\nPackages that do not use Automake need more work to be integrated this\nway.  @xref{Third-Party Makefiles}.\n\n@node Programs\n@chapter Building Programs and Libraries\n\nA large part of Automake's functionality is dedicated to making it easy\nto build programs and libraries.\n\n@menu\n* A Program::                   Building a program\n* A Library::                   Building a library\n* A Shared Library::            Building a Libtool library\n* Program and Library Variables::  Variables controlling program and\n                                library builds\n* Default _SOURCES::            Default source files\n* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA\n* Program Variables::           Variables used when building a program\n* Yacc and Lex::                Yacc and Lex support\n* C++ Support::                 Compiling C++ sources\n* Objective C Support::         Compiling Objective C sources\n* Objective C++ Support::       Compiling Objective C++ sources\n* Unified Parallel C Support::  Compiling Unified Parallel C sources\n* Assembly Support::            Compiling assembly sources\n* Fortran 77 Support::          Compiling Fortran 77 sources\n* Fortran 9x Support::          Compiling Fortran 9x sources\n* Java Support with gcj::       Compiling Java sources using gcj\n* Vala Support::                Compiling Vala sources\n* Support for Other Languages::  Compiling other languages\n* Dependencies::                Automatic dependency tracking\n* EXEEXT::                      Support for executable extensions\n@end menu\n\n\n@node A Program\n@section Building a program\n\nIn order to build a program, you need to tell Automake which sources\nare part of it, and which libraries it should be linked with.\n\nThis section also covers conditional compilation of sources or\nprograms.  Most of the comments about these also apply to libraries\n(@pxref{A Library}) and libtool libraries (@pxref{A Shared Library}).\n\n@menu\n* Program Sources::             Defining program sources\n* Linking::                     Linking with libraries or extra objects\n* Conditional Sources::         Handling conditional sources\n* Conditional Programs::        Building a program conditionally\n@end menu\n\n@node Program Sources\n@subsection Defining program sources\n\n@cindex @code{PROGRAMS}, @code{bindir}\n@vindex _PROGRAMS\n@vindex bin_PROGRAMS\n@vindex sbin_PROGRAMS\n@vindex libexec_PROGRAMS\n@vindex pkglibexec_PROGRAMS\n@vindex noinst_PROGRAMS\n@vindex check_PROGRAMS\n\nIn a directory containing source that gets built into a program (as\nopposed to a library or a script), the @code{PROGRAMS} primary is used.\nPrograms can be installed in @code{bindir}, @code{sbindir},\n@code{libexecdir}, @code{pkglibexecdir}, or not at all\n(@code{noinst_}).  They can also be built only for @samp{make check}, in\nwhich case the prefix is @samp{check_}.\n\nFor instance:\n\n@example\nbin_PROGRAMS = hello\n@end example\n\nIn this simple case, the resulting @file{Makefile.in} will contain code\nto generate a program named @code{hello}.\n\nAssociated with each program are several assisting variables that are\nnamed after the program.  These variables are all optional, and have\nreasonable defaults.  Each variable, its use, and default is spelled out\nbelow; we use the ``hello'' example throughout.\n\nThe variable @code{hello_SOURCES} is used to specify which source files\nget built into an executable:\n\n@example\nhello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h\n@end example\n\nThis causes each mentioned @file{.c} file to be compiled into the\ncorresponding @file{.o}.  Then all are linked to produce @file{hello}.\n\n@cindex @code{_SOURCES} primary, defined\n@cindex @code{SOURCES} primary, defined\n@cindex Primary variable, @code{SOURCES}\n@vindex _SOURCES\n\nIf @code{hello_SOURCES} is not specified, then it defaults to the single\nfile @file{hello.c} (@pxref{Default _SOURCES}).\n@vindex _SOURCES\n@vindex SOURCES\n\nMultiple programs can be built in a single directory.  Multiple programs\ncan share a single source file, which must be listed in each\n@code{_SOURCES} definition.\n\n@cindex Header files in @code{_SOURCES}\n@cindex @code{_SOURCES} and header files\n\nHeader files listed in a @code{_SOURCES} definition will be included in\nthe distribution but otherwise ignored.  In case it isn't obvious, you\nshould not include the header file generated by @file{configure} in a\n@code{_SOURCES} variable; this file should not be distributed.  Lex\n(@file{.l}) and Yacc (@file{.y}) files can also be listed; see @ref{Yacc\nand Lex}.\n\n\n@node Linking\n@subsection Linking the program\n\nIf you need to link against libraries that are not found by\n@command{configure}, you can use @code{LDADD} to do so.  This variable is\nused to specify additional objects or libraries to link with; it is\ninappropriate for specifying specific linker flags; you should use\n@code{AM_LDFLAGS} for this purpose.\n@vindex LDADD\n@vindex AM_LDFLAGS\n\n@cindex @code{prog_LDADD}, defined\n\nSometimes, multiple programs are built in one directory but do not share\nthe same link-time requirements.  In this case, you can use the\n@code{@var{prog}_LDADD} variable (where @var{prog} is the name of the\nprogram as it appears in some @code{_PROGRAMS} variable, and usually\nwritten in lowercase) to override @code{LDADD}.  If this variable exists\nfor a given program, then that program is not linked using @code{LDADD}.\n@vindex maude_LDADD\n\nFor instance, in GNU cpio, @code{pax}, @code{cpio} and @code{mt} are\nlinked against the library @file{libcpio.a}.  However, @code{rmt} is\nbuilt in the same directory, and has no such link requirement.  Also,\n@code{mt} and @code{rmt} are only built on certain architectures.  Here\nis what cpio's @file{src/Makefile.am} looks like (abridged):\n\n@example\nbin_PROGRAMS = cpio pax $(MT)\nlibexec_PROGRAMS = $(RMT)\nEXTRA_PROGRAMS = mt rmt\n\nLDADD = ../lib/libcpio.a $(INTLLIBS)\nrmt_LDADD =\n\ncpio_SOURCES = @dots{}\npax_SOURCES = @dots{}\nmt_SOURCES = @dots{}\nrmt_SOURCES = @dots{}\n@end example\n\n@cindex @code{_LDFLAGS}, defined\n@vindex maude_LDFLAGS\n@code{@var{prog}_LDADD} is inappropriate for passing program-specific\nlinker flags (except for @option{-l}, @option{-L}, @option{-dlopen} and\n@option{-dlpreopen}).  So, use the @code{@var{prog}_LDFLAGS} variable for\nthis purpose.\n\n@cindex @code{_DEPENDENCIES}, defined\n@vindex maude_DEPENDENCIES\n@vindex EXTRA_maude_DEPENDENCIES\nIt is also occasionally useful to have a program depend on some other\ntarget that is not actually part of that program.  This can be done\nusing either the @code{@var{prog}_DEPENDENCIES} or the\n@code{EXTRA_@var{prog}_DEPENDENCIES} variable.  Each program depends on\nthe contents both variables, but no further interpretation is done.\n\nSince these dependencies are associated to the link rule used to\ncreate the programs they should normally list files used by the link\ncommand.  That is @file{*.$(OBJEXT)}, @file{*.a}, or @file{*.la}\nfiles.  In rare cases you may need to add other kinds of files such as\nlinker scripts, but @emph{listing a source file in\n@code{_DEPENDENCIES} is wrong}.  If some source file needs to be built\nbefore all the components of a program are built, consider using the\n@code{BUILT_SOURCES} variable instead (@pxref{Sources}).\n\nIf @code{@var{prog}_DEPENDENCIES} is not supplied, it is computed by\nAutomake.  The automatically-assigned value is the contents of\n@code{@var{prog}_LDADD}, with most configure substitutions, @option{-l},\n@option{-L}, @option{-dlopen} and @option{-dlpreopen} options removed.  The\nconfigure substitutions that are left in are only @samp{$(LIBOBJS)} and\n@samp{$(ALLOCA)}; these are left because it is known that they will not\ncause an invalid value for @code{@var{prog}_DEPENDENCIES} to be\ngenerated.\n\n@ref{Conditional Sources} shows a situation where @code{_DEPENDENCIES}\nmay be used.\n\nThe @code{EXTRA_@var{prog}_DEPENDENCIES} may be useful for cases where\nyou merely want to augment the @command{automake}-generated\n@code{@var{prog}_DEPENDENCIES} rather than replacing it.\n\n@cindex @code{LDADD} and @option{-l}\n@cindex @option{-l} and @code{LDADD}\nWe recommend that you avoid using @option{-l} options in @code{LDADD}\nor @code{@var{prog}_LDADD} when referring to libraries built by your\npackage.  Instead, write the file name of the library explicitly as in\nthe above @code{cpio} example.  Use @option{-l} only to list\nthird-party libraries.  If you follow this rule, the default value of\n@code{@var{prog}_DEPENDENCIES} will list all your local libraries and\nomit the other ones.\n\n\n@node Conditional Sources\n@subsection Conditional compilation of sources\n\nYou can't put a configure substitution (e.g., @samp{@@FOO@@} or\n@samp{$(FOO)} where @code{FOO} is defined via @code{AC_SUBST}) into a\n@code{_SOURCES} variable.  The reason for this is a bit hard to\nexplain, but suffice to say that it simply won't work.  Automake will\ngive an error if you try to do this.\n\nFortunately there are two other ways to achieve the same result.  One is\nto use configure substitutions in @code{_LDADD} variables, the other is\nto use an Automake conditional.\n\n@subsubheading Conditional Compilation using @code{_LDADD} Substitutions\n\n@cindex @code{EXTRA_prog_SOURCES}, defined\n\nAutomake must know all the source files that could possibly go into a\nprogram, even if not all the files are built in every circumstance.  Any\nfiles that are only conditionally built should be listed in the\nappropriate @code{EXTRA_} variable.  For instance, if\n@file{hello-linux.c} or @file{hello-generic.c} were conditionally included\nin @code{hello}, the @file{Makefile.am} would contain:\n\n@example\nbin_PROGRAMS = hello\nhello_SOURCES = hello-common.c\nEXTRA_hello_SOURCES = hello-linux.c hello-generic.c\nhello_LDADD = $(HELLO_SYSTEM)\nhello_DEPENDENCIES = $(HELLO_SYSTEM)\n@end example\n\n@noindent\nYou can then set up the @samp{$(HELLO_SYSTEM)} substitution from\n@file{configure.ac}:\n\n@example\n@dots{}\ncase $host in\n  *linux*) HELLO_SYSTEM='hello-linux.$(OBJEXT)' ;;\n  *)       HELLO_SYSTEM='hello-generic.$(OBJEXT)' ;;\nesac\nAC_SUBST([HELLO_SYSTEM])\n@dots{}\n@end example\n\nIn this case, the variable @code{HELLO_SYSTEM} should be replaced by\neither @file{hello-linux.o} or @file{hello-generic.o}, and added to\nboth @code{hello_DEPENDENCIES} and @code{hello_LDADD} in order to be\nbuilt and linked in.\n\n@subsubheading Conditional Compilation using Automake Conditionals\n\nAn often simpler way to compile source files conditionally is to use\nAutomake conditionals.  For instance, you could use this\n@file{Makefile.am} construct to build the same @file{hello} example:\n\n@example\nbin_PROGRAMS = hello\nif LINUX\nhello_SOURCES = hello-linux.c hello-common.c\nelse\nhello_SOURCES = hello-generic.c hello-common.c\nendif\n@end example\n\nIn this case, @file{configure.ac} should set up the @code{LINUX}\nconditional using @code{AM_CONDITIONAL} (@pxref{Conditionals}).\n\nWhen using conditionals like this you don't need to use the\n@code{EXTRA_} variable, because Automake will examine the contents of\neach variable to construct the complete list of source files.\n\nIf your program uses a lot of files, you will probably prefer a\nconditional @samp{+=}.\n\n@example\nbin_PROGRAMS = hello\nhello_SOURCES = hello-common.c\nif LINUX\nhello_SOURCES += hello-linux.c\nelse\nhello_SOURCES += hello-generic.c\nendif\n@end example\n\n@node Conditional Programs\n@subsection Conditional compilation of programs\n@cindex Conditional programs\n@cindex Programs, conditional\n\nSometimes it is useful to determine the programs that are to be built\nat configure time.  For instance, GNU @code{cpio} only builds\n@code{mt} and @code{rmt} under special circumstances.  The means to\nachieve conditional compilation of programs are the same you can use\nto compile source files conditionally: substitutions or conditionals.\n\n@subsubheading Conditional Programs using @command{configure} Substitutions\n\n@vindex EXTRA_PROGRAMS\n@cindex @code{EXTRA_PROGRAMS}, defined\nIn this case, you must notify Automake of all the programs that can\npossibly be built, but at the same time cause the generated\n@file{Makefile.in} to use the programs specified by @command{configure}.\nThis is done by having @command{configure} substitute values into each\n@code{_PROGRAMS} definition, while listing all optionally built programs\nin @code{EXTRA_PROGRAMS}.\n\n@example\nbin_PROGRAMS = cpio pax $(MT)\nlibexec_PROGRAMS = $(RMT)\nEXTRA_PROGRAMS = mt rmt\n@end example\n\nAs explained in @ref{EXEEXT}, Automake will rewrite\n@code{bin_PROGRAMS}, @code{libexec_PROGRAMS}, and\n@code{EXTRA_PROGRAMS}, appending @samp{$(EXEEXT)} to each binary.\nObviously it cannot rewrite values obtained at run-time through\n@command{configure} substitutions, therefore you should take care of\nappending @samp{$(EXEEXT)} yourself, as in @samp{AC_SUBST([MT],\n['mt$@{EXEEXT@}'])}.\n\n@subsubheading Conditional Programs using Automake Conditionals\n\nYou can also use Automake conditionals (@pxref{Conditionals}) to\nselect programs to be built.  In this case you don't have to worry\nabout @samp{$(EXEEXT)} or @code{EXTRA_PROGRAMS}.\n\n@c Keep in sync with exeext.sh\n@example\nbin_PROGRAMS = cpio pax\nif WANT_MT\n  bin_PROGRAMS += mt\nendif\nif WANT_RMT\n  libexec_PROGRAMS = rmt\nendif\n@end example\n\n\n@node A Library\n@section Building a library\n\n@cindex @code{_LIBRARIES} primary, defined\n@cindex @code{LIBRARIES} primary, defined\n@cindex Primary variable, @code{LIBRARIES}\n@vindex _LIBRARIES\n\n@vindex lib_LIBRARIES\n@vindex pkglib_LIBRARIES\n@vindex noinst_LIBRARIES\n\nBuilding a library is much like building a program.  In this case, the\nname of the primary is @code{LIBRARIES}.  Libraries can be installed in\n@code{libdir} or @code{pkglibdir}.\n\n@xref{A Shared Library}, for information on how to build shared\nlibraries using libtool and the @code{LTLIBRARIES} primary.\n\nEach @code{_LIBRARIES} variable is a list of the libraries to be built.\nFor instance, to create a library named @file{libcpio.a}, but not install\nit, you would write:\n\n@example\nnoinst_LIBRARIES = libcpio.a\nlibcpio_a_SOURCES = @dots{}\n@end example\n\nThe sources that go into a library are determined exactly as they are\nfor programs, via the @code{_SOURCES} variables.  Note that the library\nname is canonicalized (@pxref{Canonicalization}), so the @code{_SOURCES}\nvariable corresponding to @file{libcpio.a} is @samp{libcpio_a_SOURCES},\nnot @samp{libcpio.a_SOURCES}.\n\n@vindex maude_LIBADD\nExtra objects can be added to a library using the\n@code{@var{library}_LIBADD} variable.  This should be used for objects\ndetermined by @command{configure}.  Again from @code{cpio}:\n\n@c Keep in sync with pr401c.sh\n@example\nlibcpio_a_LIBADD = $(LIBOBJS) $(ALLOCA)\n@end example\n\nIn addition, sources for extra objects that will not exist until\nconfigure-time must be added to the @code{BUILT_SOURCES} variable\n(@pxref{Sources}).\n\nBuilding a static library is done by compiling all object files, then\nby invoking @samp{$(AR) $(ARFLAGS)} followed by the name of the\nlibrary and the list of objects, and finally by calling\n@samp{$(RANLIB)} on that library.  You should call\n@code{AC_PROG_RANLIB} from your @file{configure.ac} to define\n@code{RANLIB} (Automake will complain otherwise).  You should also\ncall @code{AM_PROG_AR} to define @code{AR}, in order to support unusual\narchivers such as Microsoft lib.  @code{ARFLAGS} will default to\n@code{cru}; you can override this variable by setting it in your\n@file{Makefile.am} or by @code{AC_SUBST}ing it from your\n@file{configure.ac}.  You can override the @code{AR} variable by\ndefining a per-library @code{maude_AR} variable (@pxref{Program and\nLibrary Variables}).\n\n@cindex Empty libraries\nBe careful when selecting library components conditionally.  Because\nbuilding an empty library is not portable, you should ensure that any\nlibrary always contains at least one object.\n\nTo use a static library when building a program, add it to\n@code{LDADD} for this program.  In the following example, the program\n@file{cpio} is statically linked with the library @file{libcpio.a}.\n\n@example\nnoinst_LIBRARIES = libcpio.a\nlibcpio_a_SOURCES = @dots{}\n\nbin_PROGRAMS = cpio\ncpio_SOURCES = cpio.c @dots{}\ncpio_LDADD = libcpio.a\n@end example\n\n\n@node A Shared Library\n@section Building a Shared Library\n\n@cindex Shared libraries, support for\n\nBuilding shared libraries portably is a relatively complex matter.\nFor this reason, GNU Libtool (@pxref{Top, , Introduction, libtool, The\nLibtool Manual}) was created to help build shared libraries in a\nplatform-independent way.\n\n@menu\n* Libtool Concept::             Introducing Libtool\n* Libtool Libraries::           Declaring Libtool Libraries\n* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally\n* Conditional Libtool Sources::  Choosing Library Sources Conditionally\n* Libtool Convenience Libraries::  Building Convenience Libtool Libraries\n* Libtool Modules::             Building Libtool Modules\n* Libtool Flags::               Using _LIBADD, _LDFLAGS, and _LIBTOOLFLAGS\n* LTLIBOBJS::                   Using $(LTLIBOBJS) and $(LTALLOCA)\n* Libtool Issues::              Common Issues Related to Libtool's Use\n@end menu\n\n@node Libtool Concept\n@subsection The Libtool Concept\n\n@cindex @command{libtool}, introduction\n@cindex libtool library, definition\n@cindex suffix @file{.la}, defined\n@cindex @file{.la} suffix, defined\n\nLibtool abstracts shared and static libraries into a unified concept\nhenceforth called @dfn{libtool libraries}.  Libtool libraries are\nfiles using the @file{.la} suffix, and can designate a static library,\na shared library, or maybe both.  Their exact nature cannot be\ndetermined until @file{./configure} is run: not all platforms support\nall kinds of libraries, and users can explicitly select which\nlibraries should be built.  (However the package's maintainers can\ntune the default; @pxref{LT_INIT, , The @code{LT_INIT}\nmacro, libtool, The Libtool Manual}.)\n\n@cindex suffix @file{.lo}, defined\nBecause object files for shared and static libraries must be compiled\ndifferently, libtool is also used during compilation.  Object files\nbuilt by libtool are called @dfn{libtool objects}: these are files\nusing the @file{.lo} suffix.  Libtool libraries are built from these\nlibtool objects.\n\nYou should not assume anything about the structure of @file{.la} or\n@file{.lo} files and how libtool constructs them: this is libtool's\nconcern, and the last thing one wants is to learn about libtool's\nguts.  However the existence of these files matters, because they are\nused as targets and dependencies in @file{Makefile}s' rules when\nbuilding libtool libraries.  There are situations where you may have\nto refer to these, for instance when expressing dependencies for\nbuilding source files conditionally (@pxref{Conditional Libtool\nSources}).\n\n@cindex @file{libltdl}, introduction\n\nPeople considering writing a plug-in system, with dynamically loaded\nmodules, should look into @file{libltdl}: libtool's dlopening library\n(@pxref{Using libltdl, , Using libltdl, libtool, The Libtool Manual}).\nThis offers a portable dlopening facility to load libtool libraries\ndynamically, and can also achieve static linking where unavoidable.\n\nBefore we discuss how to use libtool with Automake in detail, it\nshould be noted that the libtool manual also has a section about how\nto use Automake with libtool (@pxref{Using Automake, , Using Automake\nwith Libtool, libtool, The Libtool Manual}).\n\n@node Libtool Libraries\n@subsection Building Libtool Libraries\n\n@cindex @code{_LTLIBRARIES} primary, defined\n@cindex @code{LTLIBRARIES} primary, defined\n@cindex Primary variable, @code{LTLIBRARIES}\n@cindex Example of shared libraries\n@vindex lib_LTLIBRARIES\n@vindex pkglib_LTLIBRARIES\n@vindex _LTLIBRARIES\n\nAutomake uses libtool to build libraries declared with the\n@code{LTLIBRARIES} primary.  Each @code{_LTLIBRARIES} variable is a\nlist of libtool libraries to build.  For instance, to create a libtool\nlibrary named @file{libgettext.la}, and install it in @code{libdir},\nwrite:\n\n@example\nlib_LTLIBRARIES = libgettext.la\nlibgettext_la_SOURCES = gettext.c gettext.h @dots{}\n@end example\n\nAutomake predefines the variable @code{pkglibdir}, so you can use\n@code{pkglib_LTLIBRARIES} to install libraries in\n@samp{$(libdir)/@@PACKAGE@@/}.\n\nIf @file{gettext.h} is a public header file that needs to be installed\nin order for people to use the library, it should be declared using a\n@code{_HEADERS} variable, not in @code{libgettext_la_SOURCES}.\nHeaders listed in the latter should be internal headers that are not\npart of the public interface.\n\n@example\nlib_LTLIBRARIES = libgettext.la\nlibgettext_la_SOURCES = gettext.c @dots{}\ninclude_HEADERS = gettext.h @dots{}\n@end example\n\nA package can build and install such a library along with other\nprograms that use it.  This dependency should be specified using\n@code{LDADD}.  The following example builds a program named\n@file{hello} that is linked with @file{libgettext.la}.\n\n@example\nlib_LTLIBRARIES = libgettext.la\nlibgettext_la_SOURCES = gettext.c @dots{}\n\nbin_PROGRAMS = hello\nhello_SOURCES = hello.c @dots{}\nhello_LDADD = libgettext.la\n@end example\n\n@noindent\nWhether @file{hello} is statically or dynamically linked with\n@file{libgettext.la} is not yet known: this will depend on the\nconfiguration of libtool and the capabilities of the host.\n\n\n@node Conditional Libtool Libraries\n@subsection Building Libtool Libraries Conditionally\n@cindex libtool libraries, conditional\n@cindex conditional libtool libraries\n\nLike conditional programs (@pxref{Conditional Programs}), there are\ntwo main ways to build conditional libraries: using Automake\nconditionals or using Autoconf @code{AC_SUBST}itutions.\n\nThe important implementation detail you have to be aware of is that\nthe place where a library will be installed matters to libtool: it\nneeds to be indicated @emph{at link-time} using the @option{-rpath}\noption.\n\nFor libraries whose destination directory is known when Automake runs,\nAutomake will automatically supply the appropriate @option{-rpath}\noption to libtool.  This is the case for libraries listed explicitly in\nsome installable @code{_LTLIBRARIES} variables such as\n@code{lib_LTLIBRARIES}.\n\nHowever, for libraries determined at configure time (and thus\nmentioned in @code{EXTRA_LTLIBRARIES}), Automake does not know the\nfinal installation directory.  For such libraries you must add the\n@option{-rpath} option to the appropriate @code{_LDFLAGS} variable by\nhand.\n\nThe examples below illustrate the differences between these two methods.\n\nHere is an example where @code{WANTEDLIBS} is an @code{AC_SUBST}ed\nvariable set at @file{./configure}-time to either @file{libfoo.la},\n@file{libbar.la}, both, or none.  Although @samp{$(WANTEDLIBS)}\nappears in the @code{lib_LTLIBRARIES}, Automake cannot guess it\nrelates to @file{libfoo.la} or @file{libbar.la} at the time it creates\nthe link rule for these two libraries.  Therefore the @option{-rpath}\nargument must be explicitly supplied.\n\n@c Keep in sync with ltcond.sh\n@example\nEXTRA_LTLIBRARIES = libfoo.la libbar.la\nlib_LTLIBRARIES = $(WANTEDLIBS)\nlibfoo_la_SOURCES = foo.c @dots{}\nlibfoo_la_LDFLAGS = -rpath '$(libdir)'\nlibbar_la_SOURCES = bar.c @dots{}\nlibbar_la_LDFLAGS = -rpath '$(libdir)'\n@end example\n\nHere is how the same @file{Makefile.am} would look using Automake\nconditionals named @code{WANT_LIBFOO} and @code{WANT_LIBBAR}.  Now\nAutomake is able to compute the @option{-rpath} setting itself, because\nit's clear that both libraries will end up in @samp{$(libdir)} if they\nare installed.\n\n@c Keep in sync with ltcond.sh\n@example\nlib_LTLIBRARIES =\nif WANT_LIBFOO\nlib_LTLIBRARIES += libfoo.la\nendif\nif WANT_LIBBAR\nlib_LTLIBRARIES += libbar.la\nendif\nlibfoo_la_SOURCES = foo.c @dots{}\nlibbar_la_SOURCES = bar.c @dots{}\n@end example\n\n@node Conditional Libtool Sources\n@subsection Libtool Libraries with Conditional Sources\n\nConditional compilation of sources in a library can be achieved in the\nsame way as conditional compilation of sources in a program\n(@pxref{Conditional Sources}).  The only difference is that\n@code{_LIBADD} should be used instead of @code{_LDADD} and that it\nshould mention libtool objects (@file{.lo} files).\n\nSo, to mimic the @file{hello} example from @ref{Conditional Sources},\nwe could build a @file{libhello.la} library using either\n@file{hello-linux.c} or @file{hello-generic.c} with the following\n@file{Makefile.am}.\n\n@c Keep in sync with ltcond2.sh\n@example\nlib_LTLIBRARIES = libhello.la\nlibhello_la_SOURCES = hello-common.c\nEXTRA_libhello_la_SOURCES = hello-linux.c hello-generic.c\nlibhello_la_LIBADD = $(HELLO_SYSTEM)\nlibhello_la_DEPENDENCIES = $(HELLO_SYSTEM)\n@end example\n\n@noindent\nAnd make sure @command{configure} defines @code{HELLO_SYSTEM} as\neither @file{hello-linux.lo} or @file{hello-@-generic.lo}.\n\nOr we could simply use an Automake conditional as follows.\n\n@c Keep in sync with ltcond2.sh\n@example\nlib_LTLIBRARIES = libhello.la\nlibhello_la_SOURCES = hello-common.c\nif LINUX\nlibhello_la_SOURCES += hello-linux.c\nelse\nlibhello_la_SOURCES += hello-generic.c\nendif\n@end example\n\n@node Libtool Convenience Libraries\n@subsection Libtool Convenience Libraries\n@cindex convenience libraries, libtool\n@cindex libtool convenience libraries\n@vindex noinst_LTLIBRARIES\n@vindex check_LTLIBRARIES\n\nSometimes you want to build libtool libraries that should not be\ninstalled.  These are called @dfn{libtool convenience libraries} and\nare typically used to encapsulate many sublibraries, later gathered\ninto one big installed library.\n\nLibtool convenience libraries are declared by directory-less variables\nsuch as @code{noinst_LTLIBRARIES}, @code{check_LTLIBRARIES}, or even\n@code{EXTRA_LTLIBRARIES}.  Unlike installed libtool libraries they do\nnot need an @option{-rpath} flag at link time (actually this is the only\ndifference).\n\nConvenience libraries listed in @code{noinst_LTLIBRARIES} are always\nbuilt.  Those listed in @code{check_LTLIBRARIES} are built only upon\n@samp{make check}.  Finally, libraries listed in\n@code{EXTRA_LTLIBRARIES} are never built explicitly: Automake outputs\nrules to build them, but if the library does not appear as a Makefile\ndependency anywhere it won't be built (this is why\n@code{EXTRA_LTLIBRARIES} is used for conditional compilation).\n\nHere is a sample setup merging libtool convenience libraries from\nsubdirectories into one main @file{libtop.la} library.\n\n@c Keep in sync with ltconv.sh\n@example\n# -- Top-level Makefile.am --\nSUBDIRS = sub1 sub2 @dots{}\nlib_LTLIBRARIES = libtop.la\nlibtop_la_SOURCES =\nlibtop_la_LIBADD = \\\n  sub1/libsub1.la \\\n  sub2/libsub2.la \\\n  @dots{}\n\n# -- sub1/Makefile.am --\nnoinst_LTLIBRARIES = libsub1.la\nlibsub1_la_SOURCES = @dots{}\n\n# -- sub2/Makefile.am --\n# showing nested convenience libraries\nSUBDIRS = sub2.1 sub2.2 @dots{}\nnoinst_LTLIBRARIES = libsub2.la\nlibsub2_la_SOURCES =\nlibsub2_la_LIBADD = \\\n  sub21/libsub21.la \\\n  sub22/libsub22.la \\\n  @dots{}\n@end example\n\nWhen using such a setup, beware that @command{automake} will assume\n@file{libtop.la} is to be linked with the C linker.  This is because\n@code{libtop_la_SOURCES} is empty, so @command{automake} picks C as\ndefault language.  If @code{libtop_la_SOURCES} was not empty,\n@command{automake} would select the linker as explained in @ref{How\nthe Linker is Chosen}.\n\nIf one of the sublibraries contains non-C source, it is important that\nthe appropriate linker be chosen.  One way to achieve this is to\npretend that there is such a non-C file among the sources of the\nlibrary, thus forcing @command{automake} to select the appropriate\nlinker.  Here is the top-level @file{Makefile} of our example updated\nto force C++ linking.\n\n@example\nSUBDIRS = sub1 sub2 @dots{}\nlib_LTLIBRARIES = libtop.la\nlibtop_la_SOURCES =\n# Dummy C++ source to cause C++ linking.\nnodist_EXTRA_libtop_la_SOURCES = dummy.cxx\nlibtop_la_LIBADD = \\\n  sub1/libsub1.la \\\n  sub2/libsub2.la \\\n  @dots{}\n@end example\n\n@samp{EXTRA_*_SOURCES} variables are used to keep track of source\nfiles that might be compiled (this is mostly useful when doing\nconditional compilation using @code{AC_SUBST}; @pxref{Conditional\nLibtool Sources}), and the @code{nodist_} prefix means the listed\nsources are not to be distributed (@pxref{Program and Library\nVariables}).  In effect the file @file{dummy.cxx} does not need to\nexist in the source tree.  Of course if you have some real source file\nto list in @code{libtop_la_SOURCES} there is no point in cheating with\n@code{nodist_EXTRA_libtop_la_SOURCES}.\n\n\n@node Libtool Modules\n@subsection Libtool Modules\n@cindex modules, libtool\n@cindex libtool modules\n@cindex @option{-module}, libtool\n\nThese are libtool libraries meant to be dlopened.  They are\nindicated to libtool by passing @option{-module} at link-time.\n\n@example\npkglib_LTLIBRARIES = mymodule.la\nmymodule_la_SOURCES = doit.c\nmymodule_la_LDFLAGS = -module\n@end example\n\nOrdinarily, Automake requires that a library's name start with\n@code{lib}.  However, when building a dynamically loadable module you\nmight wish to use a \"nonstandard\" name.  Automake will not complain\nabout such nonstandard names if it knows the library being built is a\nlibtool module, i.e., if @option{-module} explicitly appears in the\nlibrary's @code{_LDFLAGS} variable (or in the common @code{AM_LDFLAGS}\nvariable when no per-library @code{_LDFLAGS} variable is defined).\n\nAs always, @code{AC_SUBST} variables are black boxes to Automake since\ntheir values are not yet known when @command{automake} is run.\nTherefore if @option{-module} is set via such a variable, Automake\ncannot notice it and will proceed as if the library was an ordinary\nlibtool library, with strict naming.\n\nIf @code{mymodule_la_SOURCES} is not specified, then it defaults to\nthe single file @file{mymodule.c} (@pxref{Default _SOURCES}).\n\n@node Libtool Flags\n@subsection @code{_LIBADD}, @code{_LDFLAGS}, and @code{_LIBTOOLFLAGS}\n@cindex @code{_LIBADD}, libtool\n@cindex @code{_LDFLAGS}, libtool\n@cindex @code{_LIBTOOLFLAGS}, libtool\n@vindex AM_LIBTOOLFLAGS\n@vindex LIBTOOLFLAGS\n@vindex maude_LIBTOOLFLAGS\n\nAs shown in previous sections, the @samp{@var{library}_LIBADD}\nvariable should be used to list extra libtool objects (@file{.lo}\nfiles) or libtool libraries (@file{.la}) to add to @var{library}.\n\nThe @samp{@var{library}_LDFLAGS} variable is the place to list\nadditional libtool linking flags, such as @option{-version-info},\n@option{-static}, and a lot more.  @xref{Link mode, , Link mode,\nlibtool, The Libtool Manual}.\n\nThe @command{libtool} command has two kinds of options: mode-specific\noptions and generic options.  Mode-specific options such as the\naforementioned linking flags should be lumped with the other flags\npassed to the tool invoked by @command{libtool} (hence the use of\n@samp{@var{library}_LDFLAGS} for libtool linking flags).  Generic\noptions include @option{--tag=@var{tag}} and @option{--silent}\n(@pxref{Invoking libtool, , Invoking @command{libtool}, libtool, The\nLibtool Manual} for more options).  They should appear before the mode\nselection on the command line; in @file{Makefile.am}s they should\nbe listed in the @samp{@var{library}_LIBTOOLFLAGS} variable.\n\nIf @samp{@var{library}_LIBTOOLFLAGS} is not defined, then the variable\n@code{AM_LIBTOOLFLAGS} is used instead.\n\nThese flags are passed to libtool after the @option{--tag=@var{tag}}\noption computed by Automake (if any), so\n@samp{@var{library}_LIBTOOLFLAGS} (or @code{AM_LIBTOOLFLAGS}) is a\ngood place to override or supplement the @option{--tag=@var{tag}}\nsetting.\n\nThe libtool rules also use a @code{LIBTOOLFLAGS} variable that should\nnot be set in @file{Makefile.am}: this is a user variable (@pxref{Flag\nVariables Ordering}).  It allows users to run @samp{make\nLIBTOOLFLAGS=--silent}, for instance.  Note that the verbosity of\n@command{libtool} can also be influenced by the Automake support\nfor silent rules (@pxref{Automake Silent Rules}).\n\n@node LTLIBOBJS, Libtool Issues, Libtool Flags, A Shared Library\n@subsection @code{LTLIBOBJS} and @code{LTALLOCA}\n@cindex @code{LTLIBOBJS}, special handling\n@cindex @code{LIBOBJS}, and Libtool\n@cindex @code{LTALLOCA}, special handling\n@cindex @code{ALLOCA}, and Libtool\n@vindex LTLIBOBJS\n@vindex LIBOBJS\n@vindex LTALLOCA\n@vindex ALLOCA\n@acindex AC_LIBOBJ\n\nWhere an ordinary library might include @samp{$(LIBOBJS)} or\n@samp{$(ALLOCA)} (@pxref{LIBOBJS}), a libtool library must use\n@samp{$(LTLIBOBJS)} or @samp{$(LTALLOCA)}.  This is required because\nthe object files that libtool operates on do not necessarily end in\n@file{.o}.\n\nNowadays, the computation of @code{LTLIBOBJS} from @code{LIBOBJS} is\nperformed automatically by Autoconf (@pxref{AC_LIBOBJ vs LIBOBJS, ,\n@code{AC_LIBOBJ} vs.@: @code{LIBOBJS}, autoconf, The Autoconf Manual}).\n\n@node Libtool Issues\n@subsection Common Issues Related to Libtool's Use\n\n@menu\n* Error required file ltmain.sh not found::  The need to run libtoolize\n* Objects created both with libtool and without::  Avoid a specific build race\n@end menu\n\n@node Error required file ltmain.sh not found\n@subsubsection Error: @samp{required file `./ltmain.sh' not found}\n@cindex @file{ltmain.sh} not found\n@cindex @command{libtoolize}, no longer run by @command{automake}\n@cindex @command{libtoolize} and @command{autoreconf}\n@cindex @command{autoreconf} and @command{libtoolize}\n@cindex @file{bootstrap} and @command{autoreconf}\n@cindex @file{autogen.sh} and @command{autoreconf}\n\nLibtool comes with a tool called @command{libtoolize} that will\ninstall libtool's supporting files into a package.  Running this\ncommand will install @file{ltmain.sh}.  You should execute it before\n@command{aclocal} and @command{automake}.\n\nPeople upgrading old packages to newer autotools are likely to face\nthis issue because older Automake versions used to call\n@command{libtoolize}.  Therefore old build scripts do not call\n@command{libtoolize}.\n\nSince Automake 1.6, it has been decided that running\n@command{libtoolize} was none of Automake's business.  Instead, that\nfunctionality has been moved into the @command{autoreconf} command\n(@pxref{autoreconf Invocation, , Using @command{autoreconf}, autoconf,\nThe Autoconf Manual}).  If you do not want to remember what to run and\nwhen, just learn the @command{autoreconf} command.  Hopefully,\nreplacing existing @file{bootstrap} or @file{autogen.sh} scripts by\na call to @command{autoreconf} should also free you from any similar\nincompatible change in the future.\n\n@node Objects created both with libtool and without\n@subsubsection Objects @samp{created with both libtool and without}\n\nSometimes, the same source file is used both to build a libtool\nlibrary and to build another non-libtool target (be it a program or\nanother library).\n\nLet's consider the following @file{Makefile.am}.\n\n@example\nbin_PROGRAMS = prog\nprog_SOURCES = prog.c foo.c @dots{}\n\nlib_LTLIBRARIES = libfoo.la\nlibfoo_la_SOURCES = foo.c @dots{}\n@end example\n\n@noindent\n(In this trivial case the issue could be avoided by linking\n@file{libfoo.la} with @file{prog} instead of listing @file{foo.c} in\n@code{prog_SOURCES}.  But let's assume we really want to keep\n@file{prog} and @file{libfoo.la} separate.)\n\nTechnically, it means that we should build @file{foo.$(OBJEXT)} for\n@file{prog}, and @file{foo.lo} for @file{libfoo.la}.  The problem is\nthat in the course of creating @file{foo.lo}, libtool may erase (or\nreplace) @file{foo.$(OBJEXT)}, and this cannot be avoided.\n\nTherefore, when Automake detects this situation it will complain\nwith a message such as\n@example\nobject 'foo.$(OBJEXT)' created both with libtool and without\n@end example\n\nA workaround for this issue is to ensure that these two objects get\ndifferent basenames.  As explained in @ref{Renamed Objects}, this\nhappens automatically when per-target flags are used.\n\n@example\nbin_PROGRAMS = prog\nprog_SOURCES = prog.c foo.c @dots{}\nprog_CFLAGS = $(AM_CFLAGS)\n\nlib_LTLIBRARIES = libfoo.la\nlibfoo_la_SOURCES = foo.c @dots{}\n@end example\n\n@noindent\nAdding @samp{prog_CFLAGS = $(AM_CFLAGS)} is almost a no-op, because\nwhen the @code{prog_CFLAGS} is defined, it is used instead of\n@code{AM_CFLAGS}.  However as a side effect it will cause\n@file{prog.c} and @file{foo.c} to be compiled as\n@file{prog-prog.$(OBJEXT)} and @file{prog-foo.$(OBJEXT)}, which solves\nthe issue.\n\n@node Program and Library Variables\n@section Program and Library Variables\n\nAssociated with each program is a collection of variables that can be\nused to modify how that program is built.  There is a similar list of\nsuch variables for each library.  The canonical name of the program (or\nlibrary) is used as a base for naming these variables.\n\nIn the list below, we use the name ``maude'' to refer to the program or\nlibrary.  In your @file{Makefile.am} you would replace this with the\ncanonical name of your program.  This list also refers to ``maude'' as a\nprogram, but in general the same rules apply for both static and dynamic\nlibraries; the documentation below notes situations where programs and\nlibraries differ.\n\n@vtable @code\n@item maude_SOURCES\nThis variable, if it exists, lists all the source files that are\ncompiled to build the program.  These files are added to the\ndistribution by default.  When building the program, Automake will cause\neach source file to be compiled to a single @file{.o} file (or\n@file{.lo} when using libtool).  Normally these object files are named\nafter the source file, but other factors can change this.  If a file in\nthe @code{_SOURCES} variable has an unrecognized extension, Automake\nwill do one of two things with it.  If a suffix rule exists for turning\nfiles with the unrecognized extension into @file{.o} files, then\n@command{automake} will treat this file as it will any other source file\n(@pxref{Support for Other Languages}).  Otherwise, the file will be\nignored as though it were a header file.\n\nThe prefixes @code{dist_} and @code{nodist_} can be used to control\nwhether files listed in a @code{_SOURCES} variable are distributed.\n@code{dist_} is redundant, as sources are distributed by default, but it\ncan be specified for clarity if desired.\n\nIt is possible to have both @code{dist_} and @code{nodist_} variants of\na given @code{_SOURCES} variable at once; this lets you easily\ndistribute some files and not others, for instance:\n\n@example\nnodist_maude_SOURCES = nodist.c\ndist_maude_SOURCES = dist-me.c\n@end example\n\nBy default the output file (on Unix systems, the @file{.o} file) will\nbe put into the current build directory.  However, if the option\n@option{subdir-objects} is in effect in the current directory then the\n@file{.o} file will be put into the subdirectory named after the\nsource file.  For instance, with @option{subdir-objects} enabled,\n@file{sub/dir/file.c} will be compiled to @file{sub/dir/file.o}.  Some\npeople prefer this mode of operation.  You can specify\n@option{subdir-objects} in @code{AUTOMAKE_OPTIONS} (@pxref{Options}).\n@cindex Subdirectory, objects in\n@cindex Objects in subdirectory\n\n\n@item EXTRA_maude_SOURCES\nAutomake needs to know the list of files you intend to compile\n@emph{statically}.  For one thing, this is the only way Automake has of\nknowing what sort of language support a given @file{Makefile.in}\nrequires.  @footnote{There are other, more obscure reasons for\nthis limitation as well.}  This means that, for example, you can't put a\nconfigure substitution like @samp{@@my_sources@@} into a @samp{_SOURCES}\nvariable.  If you intend to conditionally compile source files and use\n@file{configure} to substitute the appropriate object names into, e.g.,\n@code{_LDADD} (see below), then you should list the corresponding source\nfiles in the @code{EXTRA_} variable.\n\nThis variable also supports @code{dist_} and @code{nodist_} prefixes.\nFor instance, @code{nodist_EXTRA_maude_SOURCES} would list extra\nsources that may need to be built, but should not be distributed.\n\n@item maude_AR\nA static library is created by default by invoking @samp{$(AR)\n$(ARFLAGS)} followed by the name of the library and then the objects\nbeing put into the library.  You can override this by setting the\n@code{_AR} variable.  This is usually used with C++; some C++\ncompilers require a special invocation in order to instantiate all the\ntemplates that should go into a library.  For instance, the SGI C++\ncompiler likes this variable set like so:\n@example\nlibmaude_a_AR = $(CXX) -ar -o\n@end example\n\n@item maude_LIBADD\nExtra objects can be added to a @emph{library} using the @code{_LIBADD}\nvariable.  For instance, this should be used for objects determined by\n@command{configure} (@pxref{A Library}).\n\nIn the case of libtool libraries, @code{maude_LIBADD} can also refer\nto other libtool libraries.\n\n@item maude_LDADD\nExtra objects (@file{*.$(OBJEXT)}) and libraries (@file{*.a},\n@file{*.la}) can be added to a @emph{program} by listing them in the\n@code{_LDADD} variable.  For instance, this should be used for objects\ndetermined by @command{configure} (@pxref{Linking}).\n\n@code{_LDADD} and @code{_LIBADD} are inappropriate for passing\nprogram-specific linker flags (except for @option{-l}, @option{-L},\n@option{-dlopen} and @option{-dlpreopen}).  Use the @code{_LDFLAGS} variable\nfor this purpose.\n\nFor instance, if your @file{configure.ac} uses @code{AC_PATH_XTRA}, you\ncould link your program against the X libraries like so:\n\n@example\nmaude_LDADD = $(X_PRE_LIBS) $(X_LIBS) $(X_EXTRA_LIBS)\n@end example\n\nWe recommend that you use @option{-l} and @option{-L} only when\nreferring to third-party libraries, and give the explicit file names\nof any library built by your package.  Doing so will ensure that\n@code{maude_DEPENDENCIES} (see below) is correctly defined by default.\n\n@item maude_LDFLAGS\nThis variable is used to pass extra flags to the link step of a program\nor a shared library.  It overrides the @code{AM_LDFLAGS} variable.\n\n@item maude_LIBTOOLFLAGS\nThis variable is used to pass extra options to @command{libtool}.\nIt overrides the @code{AM_LIBTOOLFLAGS} variable.\nThese options are output before @command{libtool}'s @option{--mode=@var{mode}}\noption, so they should not be mode-specific options (those belong to\nthe compiler or linker flags).  @xref{Libtool Flags}.\n\n@item maude_DEPENDENCIES\n@itemx EXTRA_maude_DEPENDENCIES\nIt is also occasionally useful to have a target (program or library)\ndepend on some other file that is not actually part of that target.\nThis can be done using the @code{_DEPENDENCIES} variable.  Each\ntarget depends on the contents of such a variable, but no further\ninterpretation is done.\n\nSince these dependencies are associated with the link rule used to\ncreate the programs they should normally list files used by the link\ncommand.  That is @file{*.$(OBJEXT)}, @file{*.a}, or @file{*.la} files\nfor programs; @file{*.lo} and @file{*.la} files for Libtool libraries;\nand @file{*.$(OBJEXT)} files for static libraries.  In rare cases you\nmay need to add other kinds of files such as linker scripts, but\n@emph{listing a source file in @code{_DEPENDENCIES} is wrong}.  If\nsome source file needs to be built before all the components of a\nprogram are built, consider using the @code{BUILT_SOURCES} variable\n(@pxref{Sources}).\n\nIf @code{_DEPENDENCIES} is not supplied, it is computed by Automake.\nThe automatically-assigned value is the contents of @code{_LDADD} or\n@code{_LIBADD}, with most configure substitutions, @option{-l}, @option{-L},\n@option{-dlopen} and @option{-dlpreopen} options removed.  The configure\nsubstitutions that are left in are only @samp{$(LIBOBJS)} and\n@samp{$(ALLOCA)}; these are left because it is known that they will not\ncause an invalid value for @code{_DEPENDENCIES} to be generated.\n\n@code{_DEPENDENCIES} is more likely used to perform conditional\ncompilation using an @code{AC_SUBST} variable that contains a list of\nobjects.  @xref{Conditional Sources}, and @ref{Conditional Libtool\nSources}.\n\nThe @code{EXTRA_*_DEPENDENCIES} variable may be useful for cases where\nyou merely want to augment the @command{automake}-generated\n@code{_DEPENDENCIES} variable rather than replacing it.\n\n@item maude_LINK\nYou can override the linker on a per-program basis.  By default the\nlinker is chosen according to the languages used by the program.  For\ninstance, a program that includes C++ source code would use the C++\ncompiler to link.  The @code{_LINK} variable must hold the name of a\ncommand that can be passed all the @file{.o} file names and libraries\nto link against as arguments.  Note that the name of the underlying\nprogram is @emph{not} passed to @code{_LINK}; typically one uses\n@samp{$@@}:\n\n@example\nmaude_LINK = $(CCLD) -magic -o $@@\n@end example\n\nIf a @code{_LINK} variable is not supplied, it may still be generated\nand used by Automake due to the use of per-target link flags such as\n@code{_CFLAGS}, @code{_LDFLAGS} or @code{_LIBTOOLFLAGS}, in cases where\nthey apply.\n\n@item maude_CCASFLAGS\n@itemx maude_CFLAGS\n@itemx maude_CPPFLAGS\n@itemx maude_CXXFLAGS\n@itemx maude_FFLAGS\n@itemx maude_GCJFLAGS\n@itemx maude_LFLAGS\n@itemx maude_OBJCFLAGS\n@itemx maude_OBJCXXFLAGS\n@itemx maude_RFLAGS\n@itemx maude_UPCFLAGS\n@itemx maude_YFLAGS\n@cindex per-target compilation flags, defined\nAutomake allows you to set compilation flags on a per-program (or\nper-library) basis.  A single source file can be included in several\nprograms, and it will potentially be compiled with different flags for\neach program.  This works for any language directly supported by\nAutomake.  These @dfn{per-target compilation flags} are\n@samp{_CCASFLAGS},\n@samp{_CFLAGS},\n@samp{_CPPFLAGS},\n@samp{_CXXFLAGS},\n@samp{_FFLAGS},\n@samp{_GCJFLAGS},\n@samp{_LFLAGS},\n@samp{_OBJCFLAGS},\n@samp{_OBJCXXFLAGS},\n@samp{_RFLAGS},\n@samp{_UPCFLAGS}, and\n@samp{_YFLAGS}.\n\nWhen using a per-target compilation flag, Automake will choose a\ndifferent name for the intermediate object files.  Ordinarily a file\nlike @file{sample.c} will be compiled to produce @file{sample.o}.\nHowever, if the program's @code{_CFLAGS} variable is set, then the\nobject file will be named, for instance, @file{maude-sample.o}.  (See\nalso @ref{Renamed Objects}.)\n\nIn compilations with per-target flags, the ordinary @samp{AM_} form of\nthe flags variable is @emph{not} automatically included in the\ncompilation (however, the user form of the variable @emph{is} included).\nSo for instance, if you want the hypothetical @file{maude} compilations\nto also use the value of @code{AM_CFLAGS}, you would need to write:\n\n@example\nmaude_CFLAGS = @dots{} your flags @dots{} $(AM_CFLAGS)\n@end example\n\n@xref{Flag Variables Ordering}, for more discussion about the\ninteraction between user variables, @samp{AM_} shadow variables, and\nper-target variables.\n\n@item maude_SHORTNAME\nOn some platforms the allowable file names are very short.  In order to\nsupport these systems and per-target compilation flags at the same\ntime, Automake allows you to set a ``short name'' that will influence\nhow intermediate object files are named.  For instance, in the following\nexample,\n\n@example\nbin_PROGRAMS = maude\nmaude_CPPFLAGS = -DSOMEFLAG\nmaude_SHORTNAME = m\nmaude_SOURCES = sample.c @dots{}\n@end example\n\n@noindent\nthe object file would be named @file{m-sample.o} rather than\n@file{maude-sample.o}.\n\nThis facility is rarely needed in practice,\nand we recommend avoiding it until you find it is required.\n@end vtable\n\n@node Default _SOURCES\n@section Default @code{_SOURCES}\n\n@vindex _SOURCES\n@vindex SOURCES\n@cindex @code{_SOURCES}, default\n@cindex default @code{_SOURCES}\n@vindex AM_DEFAULT_SOURCE_EXT\n\n@code{_SOURCES} variables are used to specify source files of programs\n(@pxref{A Program}), libraries (@pxref{A Library}), and Libtool\nlibraries (@pxref{A Shared Library}).\n\nWhen no such variable is specified for a target, Automake will define\none itself.  The default is to compile a single C file whose base name\nis the name of the target itself, with any extension replaced by\n@code{AM_DEFAULT_SOURCE_EXT}, which defaults to @file{.c}.\n\nFor example if you have the following somewhere in your\n@file{Makefile.am} with no corresponding @code{libfoo_a_SOURCES}:\n\n@example\nlib_LIBRARIES = libfoo.a sub/libc++.a\n@end example\n\n@noindent\n@file{libfoo.a} will be built using a default source file named\n@file{libfoo.c}, and @file{sub/libc++.a} will be built from\n@file{sub/libc++.c}.  (In older versions @file{sub/libc++.a}\nwould be built from @file{sub_libc___a.c}, i.e., the default source\nwas the canonicalized name of the target, with @file{.c} appended.\nWe believe the new behavior is more sensible, but for backward\ncompatibility @command{automake} will use the old name if a file or a rule\nwith that name exists and @code{AM_DEFAULT_SOURCE_EXT} is not used.)\n\n@cindex @code{check_PROGRAMS} example\n@vindex check_PROGRAMS\nDefault sources are mainly useful in test suites, when building many\ntest programs each from a single source.  For instance, in\n\n@example\ncheck_PROGRAMS = test1 test2 test3\nAM_DEFAULT_SOURCE_EXT = .cpp\n@end example\n\n@noindent\n@file{test1}, @file{test2}, and @file{test3} will be built\nfrom @file{test1.cpp}, @file{test2.cpp}, and @file{test3.cpp}.\nWithout the last line, they will be built from @file{test1.c},\n@file{test2.c}, and @file{test3.c}.\n\n@cindex Libtool modules, default source example\n@cindex default source, Libtool modules example\nAnother case where this is convenient is building many Libtool modules\n(@file{module@var{n}.la}), each defined in its own file\n(@file{module@var{n}.c}).\n\n@example\nAM_LDFLAGS = -module\nlib_LTLIBRARIES = module1.la module2.la module3.la\n@end example\n\n@cindex empty @code{_SOURCES}\n@cindex @code{_SOURCES}, empty\nFinally, there is one situation where this default source computation\nneeds to be avoided: when a target should not be built from sources.\nWe already saw such an example in @ref{true}; this happens when all\nthe constituents of a target have already been compiled and just need\nto be combined using a @code{_LDADD} variable.  Then it is necessary\nto define an empty @code{_SOURCES} variable, so that @command{automake}\ndoes not compute a default.\n\n@example\nbin_PROGRAMS = target\ntarget_SOURCES =\ntarget_LDADD = libmain.a libmisc.a\n@end example\n\n@node LIBOBJS\n@section Special handling for @code{LIBOBJS} and @code{ALLOCA}\n\n@cindex @code{LIBOBJS}, example\n@cindex @code{ALLOCA}, example\n@cindex @code{LIBOBJS}, special handling\n@cindex @code{ALLOCA}, special handling\n@vindex LTLIBOBJS\n@vindex LIBOBJS\n@vindex LTALLOCA\n@vindex ALLOCA\n\nThe @samp{$(LIBOBJS)} and @samp{$(ALLOCA)} variables list object\nfiles that should be compiled into the project to provide an\nimplementation for functions that are missing or broken on the host\nsystem.  They are substituted by @file{configure}.\n\n@acindex AC_LIBOBJ\n\nThese variables are defined by Autoconf macros such as\n@code{AC_LIBOBJ}, @code{AC_REPLACE_FUNCS} (@pxref{Generic Functions, ,\nGeneric Function Checks, autoconf, The Autoconf Manual}), or\n@code{AC_FUNC_ALLOCA} (@pxref{Particular Functions, , Particular\nFunction Checks, autoconf, The Autoconf Manual}).  Many other Autoconf\nmacros call @code{AC_LIBOBJ} or @code{AC_REPLACE_FUNCS} to\npopulate @samp{$(LIBOBJS)}.\n\n@acindex AC_LIBSOURCE\n\nUsing these variables is very similar to doing conditional compilation\nusing @code{AC_SUBST} variables, as described in @ref{Conditional\nSources}.  That is, when building a program, @samp{$(LIBOBJS)} and\n@samp{$(ALLOCA)} should be added to the associated @samp{*_LDADD}\nvariable, or to the @samp{*_LIBADD} variable when building a library.\nHowever there is no need to list the corresponding sources in\n@samp{EXTRA_*_SOURCES} nor to define @samp{*_DEPENDENCIES}.  Automake\nautomatically adds @samp{$(LIBOBJS)} and @samp{$(ALLOCA)} to the\ndependencies, and it will discover the list of corresponding source\nfiles automatically (by tracing the invocations of the\n@code{AC_LIBSOURCE} Autoconf macros).  If you have already defined\n@samp{*_DEPENDENCIES} explicitly for an unrelated reason, then you\neither need to add these variables manually, or use\n@samp{EXTRA_*_DEPENDENCIES} instead of @samp{*_DEPENDENCIES}.\n\nThese variables are usually used to build a portability library that\nis linked with all the programs of the project.  We now review a\nsample setup.  First, @file{configure.ac} contains some checks that\naffect either @code{LIBOBJS} or @code{ALLOCA}.\n\n@example\n# configure.ac\n@dots{}\nAC_CONFIG_LIBOBJ_DIR([lib])\n@dots{}\nAC_FUNC_MALLOC             dnl May add malloc.$(OBJEXT) to LIBOBJS\nAC_FUNC_MEMCMP             dnl May add memcmp.$(OBJEXT) to LIBOBJS\nAC_REPLACE_FUNCS([strdup]) dnl May add strdup.$(OBJEXT) to LIBOBJS\nAC_FUNC_ALLOCA             dnl May add alloca.$(OBJEXT) to ALLOCA\n@dots{}\nAC_CONFIG_FILES([\n  lib/Makefile\n  src/Makefile\n])\nAC_OUTPUT\n@end example\n\n@acindex AC_CONFIG_LIBOBJ_DIR\n\nThe @code{AC_CONFIG_LIBOBJ_DIR} tells Autoconf that the source files\nof these object files are to be found in the @file{lib/} directory.\nAutomake can also use this information, otherwise it expects the\nsource files are to be in the directory where the @samp{$(LIBOBJS)}\nand @samp{$(ALLOCA)} variables are used.\n\nThe @file{lib/} directory should therefore contain @file{malloc.c},\n@file{memcmp.c}, @file{strdup.c}, @file{alloca.c}.  Here is its\n@file{Makefile.am}:\n\n@example\n# lib/Makefile.am\n\nnoinst_LIBRARIES = libcompat.a\nlibcompat_a_SOURCES =\nlibcompat_a_LIBADD = $(LIBOBJS) $(ALLOCA)\n@end example\n\nThe library can have any name, of course, and anyway it is not going\nto be installed: it just holds the replacement versions of the missing\nor broken functions so we can later link them in.  Many projects\nalso include extra functions, specific to the project, in that\nlibrary: they are simply added on the @code{_SOURCES} line.\n\n@cindex Empty libraries and @samp{$(LIBOBJS)}\n@cindex @samp{$(LIBOBJS)} and empty libraries\nThere is a small trap here, though: @samp{$(LIBOBJS)} and\n@samp{$(ALLOCA)} might be empty, and building an empty library is not\nportable.  You should ensure that there is always something to put in\n@file{libcompat.a}.  Most projects will also add some utility\nfunctions in that directory, and list them in\n@code{libcompat_a_SOURCES}, so in practice @file{libcompat.a} cannot\nbe empty.\n\nFinally here is how this library could be used from the @file{src/}\ndirectory.\n\n@example\n# src/Makefile.am\n\n# Link all programs in this directory with libcompat.a\nLDADD = ../lib/libcompat.a\n\nbin_PROGRAMS = tool1 tool2 @dots{}\ntool1_SOURCES = @dots{}\ntool2_SOURCES = @dots{}\n@end example\n\nWhen option @option{subdir-objects} is not used, as in the above\nexample, the variables @samp{$(LIBOBJS)} or @samp{$(ALLOCA)} can only\nbe used in the directory where their sources lie.  E.g., here it would\nbe wrong to use @samp{$(LIBOBJS)} or @samp{$(ALLOCA)} in\n@file{src/Makefile.am}.  However if both @option{subdir-objects} and\n@code{AC_CONFIG_LIBOBJ_DIR} are used, it is OK to use these variables\nin other directories.  For instance @file{src/Makefile.am} could be\nchanged as follows.\n\n@example\n# src/Makefile.am\n\nAUTOMAKE_OPTIONS = subdir-objects\nLDADD = $(LIBOBJS) $(ALLOCA)\n\nbin_PROGRAMS = tool1 tool2 @dots{}\ntool1_SOURCES = @dots{}\ntool2_SOURCES = @dots{}\n@end example\n\nBecause @samp{$(LIBOBJS)} and @samp{$(ALLOCA)} contain object\nfile names that end with @samp{.$(OBJEXT)}, they are not suitable for\nLibtool libraries (where the expected object extension is @file{.lo}):\n@code{LTLIBOBJS} and @code{LTALLOCA} should be used instead.\n\n@code{LTLIBOBJS} is defined automatically by Autoconf and should not\nbe defined by hand (as in the past), however at the time of writing\n@code{LTALLOCA} still needs to be defined from @code{ALLOCA} manually.\n@xref{AC_LIBOBJ vs LIBOBJS, , @code{AC_LIBOBJ} vs.@: @code{LIBOBJS},\nautoconf, The Autoconf Manual}.\n\n\n@node Program Variables\n@section Variables used when building a program\n\nOccasionally it is useful to know which @file{Makefile} variables\nAutomake uses for compilations, and in which order (@pxref{Flag\nVariables Ordering}); for instance, you might need to do your own\ncompilation in some special cases.\n\nSome variables are inherited from Autoconf; these are @code{CC},\n@code{CFLAGS}, @code{CPPFLAGS}, @code{DEFS}, @code{LDFLAGS}, and\n@code{LIBS}.\n@vindex CC\n@vindex CFLAGS\n@vindex CPPFLAGS\n@vindex DEFS\n@vindex LDFLAGS\n@vindex LIBS\n\nThere are some additional variables that Automake defines on its own:\n\n@vtable @code\n@item AM_CPPFLAGS\nThe contents of this variable are passed to every compilation that invokes\nthe C preprocessor; it is a list of arguments to the preprocessor.  For\ninstance, @option{-I} and @option{-D} options should be listed here.\n\nAutomake already provides some @option{-I} options automatically, in a\nseparate variable that is also passed to every compilation that invokes\nthe C preprocessor.  In particular it generates @samp{-I.},\n@samp{-I$(srcdir)}, and a @option{-I} pointing to the directory holding\n@file{config.h} (if you've used @code{AC_CONFIG_HEADERS}).  You can\ndisable the default @option{-I} options using the @option{nostdinc}\noption.\n\nWhen a file to be included is generated during the build and not part\nof a distribution tarball, its location is under @code{$(builddir)},\nnot under @code{$(srcdir)}.  This matters especially for packages that\nuse header files placed in sub-directories and want to allow builds\noutside the source tree (@pxref{VPATH Builds}). In that case we\nrecommend using a pair of @option{-I} options, such as, e.g.,\n@samp{-Isome/subdir -I$(srcdir)/some/subdir} or\n@samp{-I$(top_builddir)/some/subdir -I$(top_srcdir)/some/subdir}.\nNote that the reference to the build tree should come before the\nreference to the source tree, so that accidentally leftover generated\nfiles in the source directory are ignored.\n\n@code{AM_CPPFLAGS} is ignored in preference to a per-executable (or\nper-library) @code{_CPPFLAGS} variable if it is defined.\n\n@item INCLUDES\nThis does the same job as @code{AM_CPPFLAGS} (or any per-target\n@code{_CPPFLAGS} variable if it is used).  It is an older name for the\nsame functionality.  This variable is deprecated; we suggest using\n@code{AM_CPPFLAGS} and per-target @code{_CPPFLAGS} instead.\n\n@item AM_CFLAGS\nThis is the variable the @file{Makefile.am} author can use to pass\nin additional C compiler flags.  In some situations, this is\nnot used, in preference to the per-executable (or per-library)\n@code{_CFLAGS}.\n\n@item COMPILE\nThis is the command used to actually compile a C source file.  The\nfile name is appended to form the complete command line.\n\n@item AM_LDFLAGS\nThis is the variable the @file{Makefile.am} author can use to pass\nin additional linker flags.  In some situations, this is not used, in\npreference to the per-executable (or per-library) @code{_LDFLAGS}.\n\n@item LINK\nThis is the command used to actually link a C program.  It already\nincludes @samp{-o $@@} and the usual variable references (for instance,\n@code{CFLAGS}); it takes as ``arguments'' the names of the object files\nand libraries to link in.  This variable is not used when the linker is\noverridden with a per-target @code{_LINK} variable or per-target flags\ncause Automake to define such a @code{_LINK} variable.\n@end vtable\n\n\n@node Yacc and Lex\n@section Yacc and Lex support\n\nAutomake has somewhat idiosyncratic support for Yacc and Lex.\n\nAutomake assumes that the @file{.c} file generated by @command{yacc}\n(or @command{lex}) should be named using the basename of the input\nfile.  That is, for a yacc source file @file{foo.y}, Automake will\ncause the intermediate file to be named @file{foo.c} (as opposed to\n@file{y.tab.c}, which is more traditional).\n\nThe extension of a yacc source file is used to determine the extension\nof the resulting C or C++ source and header files.  Note that header\nfiles are generated only when the @option{-d} Yacc option is used; see\nbelow for more information about this flag, and how to specify it.\nFiles with the extension @file{.y} will thus be turned into @file{.c}\nsources and @file{.h} headers; likewise, @file{.yy} will become\n@file{.cc} and @file{.hh}, @file{.y++} will become @file{c++} and\n@file{h++}, @file{.yxx} will become @file{.cxx} and @file{.hxx},\nand @file{.ypp} will become @file{.cpp} and @file{.hpp}.\n\nSimilarly, lex source files can be used to generate C or C++; the\nextensions @file{.l}, @file{.ll}, @file{.l++}, @file{.lxx}, and\n@file{.lpp} are recognized.\n\nYou should never explicitly mention the intermediate (C or C++) file\nin any @code{SOURCES} variable; only list the source file.\n\nThe intermediate files generated by @command{yacc} (or @command{lex})\nwill be included in any distribution that is made.  That way the user\ndoesn't need to have @command{yacc} or @command{lex}.\n\nIf a @command{yacc} source file is seen, then your @file{configure.ac} must\ndefine the variable @code{YACC}.  This is most easily done by invoking\nthe macro @code{AC_PROG_YACC} (@pxref{Particular Programs, , Particular\nProgram Checks, autoconf, The Autoconf Manual}).\n\n@vindex YFLAGS\n@vindex AM_YFLAGS\nWhen @code{yacc} is invoked, it is passed @code{AM_YFLAGS} and\n@code{YFLAGS}.  The latter is a user variable and the former is\nintended for the @file{Makefile.am} author.\n\n@code{AM_YFLAGS} is usually used to pass the @option{-d} option to\n@command{yacc}.  Automake knows what this means and will automatically\nadjust its rules to update and distribute the header file built by\n@samp{yacc -d}@footnote{Please note that @command{automake} recognizes\n@option{-d} in @code{AM_YFLAGS} only if it is not clustered with other\noptions; for example, it won't be recognized if @code{AM_YFLAGS} is\n@option{-dt}, but it will be if @code{AM_YFLAGS} is @option{-d -t} or\n@option{-t -d}.}.\nWhat Automake cannot guess, though, is where this\nheader will be used: it is up to you to ensure the header gets built\nbefore it is first used.  Typically this is necessary in order for\ndependency tracking to work when the header is included by another\nfile.  The common solution is listing the header file in\n@code{BUILT_SOURCES} (@pxref{Sources}) as follows.\n\n@example\nBUILT_SOURCES = parser.h\nAM_YFLAGS = -d\nbin_PROGRAMS = foo\nfoo_SOURCES = @dots{} parser.y @dots{}\n@end example\n\nIf a @command{lex} source file is seen, then your @file{configure.ac}\nmust define the variable @code{LEX}.  You can use @code{AC_PROG_LEX}\nto do this (@pxref{Particular Programs, , Particular Program Checks,\nautoconf, The Autoconf Manual}), but using the @code{AM_PROG_LEX} macro\n(@pxref{Macros}) is recommended.\n\n@vindex LFLAGS\n@vindex AM_LFLAGS\nWhen @command{lex} is invoked, it is passed @code{AM_LFLAGS} and\n@code{LFLAGS}.  The latter is a user variable and the former is\nintended for the @file{Makefile.am} author.\n\nWhen @code{AM_MAINTAINER_MODE} (@pxref{maintainer-mode}) is used, the\nrebuild rule for distributed Yacc and Lex sources are only used when\n@code{maintainer-mode} is enabled, or when the files have been erased.\n\n@cindex @command{ylwrap}\n@cindex @command{yacc}, multiple parsers\n@cindex Multiple @command{yacc} parsers\n@cindex Multiple @command{lex} lexers\n@cindex @command{lex}, multiple lexers\n\nWhen @command{lex} or @command{yacc} sources are used, @code{automake -a}\nautomatically installs an auxiliary program called @command{ylwrap} in\nyour package (@pxref{Auxiliary Programs}).\nThis program is used by the build rules to rename the output of these\ntools, and makes it possible to include multiple @command{yacc} (or\n@command{lex}) source files in a single directory.  (This is necessary\nbecause yacc's output file name is fixed, and a parallel make could\nconceivably invoke more than one instance of @command{yacc}\nsimultaneously.)\n\nFor @command{yacc}, simply managing locking is insufficient.  The output of\n@command{yacc} always uses the same symbol names internally, so it isn't\npossible to link two @command{yacc} parsers into the same executable.\n\nWe recommend using the following renaming hack used in @command{gdb}:\n@example\n#define yymaxdepth c_maxdepth\n#define yyparse c_parse\n#define yylex   c_lex\n#define yyerror c_error\n#define yylval  c_lval\n#define yychar  c_char\n#define yydebug c_debug\n#define yypact  c_pact\n#define yyr1    c_r1\n#define yyr2    c_r2\n#define yydef   c_def\n#define yychk   c_chk\n#define yypgo   c_pgo\n#define yyact   c_act\n#define yyexca  c_exca\n#define yyerrflag c_errflag\n#define yynerrs c_nerrs\n#define yyps    c_ps\n#define yypv    c_pv\n#define yys     c_s\n#define yy_yys  c_yys\n#define yystate c_state\n#define yytmp   c_tmp\n#define yyv     c_v\n#define yy_yyv  c_yyv\n#define yyval   c_val\n#define yylloc  c_lloc\n#define yyreds  c_reds\n#define yytoks  c_toks\n#define yylhs   c_yylhs\n#define yylen   c_yylen\n#define yydefred c_yydefred\n#define yydgoto  c_yydgoto\n#define yysindex c_yysindex\n#define yyrindex c_yyrindex\n#define yygindex c_yygindex\n#define yytable  c_yytable\n#define yycheck  c_yycheck\n#define yyname   c_yyname\n#define yyrule   c_yyrule\n@end example\n\nFor each define, replace the @samp{c_} prefix with whatever you like.\nThese defines work for @command{bison}, @command{byacc}, and\ntraditional @code{yacc}s.  If you find a parser generator that uses a\nsymbol not covered here, please report the new name so it can be added\nto the list.\n\n\n@node C++ Support\n@section C++ Support\n\n@cindex C++ support\n@cindex Support for C++\n\nAutomake includes full support for C++.\n\nAny package including C++ code must define the output variable\n@code{CXX} in @file{configure.ac}; the simplest way to do this is to use\nthe @code{AC_PROG_CXX} macro (@pxref{Particular Programs, , Particular\nProgram Checks, autoconf, The Autoconf Manual}).\n\nA few additional variables are defined when a C++ source file is seen:\n\n@vtable @code\n@item CXX\nThe name of the C++ compiler.\n\n@item CXXFLAGS\nAny flags to pass to the C++ compiler.\n\n@item AM_CXXFLAGS\nThe maintainer's variant of @code{CXXFLAGS}.\n\n@item CXXCOMPILE\nThe command used to actually compile a C++ source file.  The file name\nis appended to form the complete command line.\n\n@item CXXLINK\nThe command used to actually link a C++ program.\n@end vtable\n\n\n@node Objective C Support\n@section Objective C Support\n\n@cindex Objective C support\n@cindex Support for Objective C\n\nAutomake includes some support for Objective C.\n\nAny package including Objective C code must define the output variable\n@code{OBJC} in @file{configure.ac}; the simplest way to do this is to use\nthe @code{AC_PROG_OBJC} macro (@pxref{Particular Programs, , Particular\nProgram Checks, autoconf, The Autoconf Manual}).\n\nA few additional variables are defined when an Objective C source file\nis seen:\n\n@vtable @code\n@item OBJC\nThe name of the Objective C compiler.\n\n@item OBJCFLAGS\nAny flags to pass to the Objective C compiler.\n\n@item AM_OBJCFLAGS\nThe maintainer's variant of @code{OBJCFLAGS}.\n\n@item OBJCCOMPILE\nThe command used to actually compile an Objective C source file.  The\nfile name is appended to form the complete command line.\n\n@item OBJCLINK\nThe command used to actually link an Objective C program.\n@end vtable\n\n\n@node Objective C++ Support\n@section Objective C++ Support\n\n@cindex Objective C++ support\n@cindex Support for Objective C++\n\nAutomake includes some support for Objective C++.\n\nAny package including Objective C++ code must define the output variable\n@code{OBJCXX} in @file{configure.ac}; the simplest way to do this is to use\nthe @code{AC_PROG_OBJCXX} macro (@pxref{Particular Programs, , Particular\nProgram Checks, autoconf, The Autoconf Manual}).\n\nA few additional variables are defined when an Objective C++ source file\nis seen:\n\n@vtable @code\n@item OBJCXX\nThe name of the Objective C++ compiler.\n\n@item OBJCXXFLAGS\nAny flags to pass to the Objective C++ compiler.\n\n@item AM_OBJCXXFLAGS\nThe maintainer's variant of @code{OBJCXXFLAGS}.\n\n@item OBJCXXCOMPILE\nThe command used to actually compile an Objective C++ source file.  The\nfile name is appended to form the complete command line.\n\n@item OBJCXXLINK\nThe command used to actually link an Objective C++ program.\n@end vtable\n\n\n@node Unified Parallel C Support\n@section Unified Parallel C Support\n\n@cindex Unified Parallel C support\n@cindex Support for Unified Parallel C\n\nAutomake includes some support for Unified Parallel C.\n\nAny package including Unified Parallel C code must define the output\nvariable @code{UPC} in @file{configure.ac}; the simplest way to do\nthis is to use the @code{AM_PROG_UPC} macro (@pxref{Public Macros}).\n\nA few additional variables are defined when a Unified Parallel C\nsource file is seen:\n\n@vtable @code\n@item UPC\nThe name of the Unified Parallel C compiler.\n\n@item UPCFLAGS\nAny flags to pass to the Unified Parallel C compiler.\n\n@item AM_UPCFLAGS\nThe maintainer's variant of @code{UPCFLAGS}.\n\n@item UPCCOMPILE\nThe command used to actually compile a Unified Parallel C source file.\nThe file name is appended to form the complete command line.\n\n@item UPCLINK\nThe command used to actually link a Unified Parallel C program.\n@end vtable\n\n\n@node Assembly Support\n@section Assembly Support\n\nAutomake includes some support for assembly code.  There are two forms\nof assembler files: normal (@file{*.s}) and preprocessed by @code{CPP}\n(@file{*.S} or @file{*.sx}).\n\n@vindex CCAS\n@vindex CCASFLAGS\n@vindex CPPFLAGS\n@vindex AM_CCASFLAGS\n@vindex AM_CPPFLAGS\nThe variable @code{CCAS} holds the name of the compiler used to build\nassembly code.  This compiler must work a bit like a C compiler; in\nparticular it must accept @option{-c} and @option{-o}.  The values of\n@code{CCASFLAGS} and @code{AM_CCASFLAGS} (or its per-target\ndefinition) is passed to the compilation.  For preprocessed files,\n@code{DEFS}, @code{DEFAULT_INCLUDES}, @code{INCLUDES}, @code{CPPFLAGS}\nand @code{AM_CPPFLAGS} are also used.\n\nThe autoconf macro @code{AM_PROG_AS} will define @code{CCAS} and\n@code{CCASFLAGS} for you (unless they are already set, it simply sets\n@code{CCAS} to the C compiler and @code{CCASFLAGS} to the C compiler\nflags), but you are free to define these variables by other means.\n\nOnly the suffixes @file{.s}, @file{.S}, and @file{.sx} are recognized by\n@command{automake} as being files containing assembly code.\n\n\n@node Fortran 77 Support\n@comment  node-name,  next,  previous,  up\n@section Fortran 77 Support\n\n@cindex Fortran 77 support\n@cindex Support for Fortran 77\n\nAutomake includes full support for Fortran 77.\n\nAny package including Fortran 77 code must define the output variable\n@code{F77} in @file{configure.ac}; the simplest way to do this is to use\nthe @code{AC_PROG_F77} macro (@pxref{Particular Programs, , Particular\nProgram Checks, autoconf, The Autoconf Manual}).\n\nA few additional variables are defined when a Fortran 77 source file is\nseen:\n\n@vtable @code\n\n@item F77\nThe name of the Fortran 77 compiler.\n\n@item FFLAGS\nAny flags to pass to the Fortran 77 compiler.\n\n@item AM_FFLAGS\nThe maintainer's variant of @code{FFLAGS}.\n\n@item RFLAGS\nAny flags to pass to the Ratfor compiler.\n\n@item AM_RFLAGS\nThe maintainer's variant of @code{RFLAGS}.\n\n@item F77COMPILE\nThe command used to actually compile a Fortran 77 source file.  The file\nname is appended to form the complete command line.\n\n@item FLINK\nThe command used to actually link a pure Fortran 77 program or shared\nlibrary.\n\n@end vtable\n\nAutomake can handle preprocessing Fortran 77 and Ratfor source files in\naddition to compiling them@footnote{Much, if not most, of the\ninformation in the following sections pertaining to preprocessing\nFortran 77 programs was taken almost verbatim from @ref{Catalogue of\nRules, , Catalogue of Rules, make, The GNU Make Manual}.}.  Automake\nalso contains some support for creating programs and shared libraries\nthat are a mixture of Fortran 77 and other languages (@pxref{Mixing\nFortran 77 With C and C++}).\n\nThese issues are covered in the following sections.\n\n@menu\n* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources\n* Compiling Fortran 77 Files::  Compiling Fortran 77 sources\n* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++\n@end menu\n\n\n@node Preprocessing Fortran 77\n@comment  node-name,  next,  previous,  up\n@subsection Preprocessing Fortran 77\n\n@cindex Preprocessing Fortran 77\n@cindex Fortran 77, Preprocessing\n@cindex Ratfor programs\n\n@file{N.f} is made automatically from @file{N.F} or @file{N.r}.  This\nrule runs just the preprocessor to convert a preprocessable Fortran 77\nor Ratfor source file into a strict Fortran 77 source file.  The precise\ncommand used is as follows:\n\n@table @file\n\n@item .F\n@code{$(F77) -F $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)@*\n$(AM_FFLAGS) $(FFLAGS)}\n\n@item .r\n@code{$(F77) -F $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)}\n\n@end table\n\n\n@node Compiling Fortran 77 Files\n@comment  node-name,  next,  previous,  up\n@subsection Compiling Fortran 77 Files\n\n@file{N.o} is made automatically from @file{N.f}, @file{N.F} or\n@file{N.r} by running the Fortran 77 compiler.  The precise command used\nis as follows:\n\n@table @file\n\n@item .f\n@code{$(F77) -c $(AM_FFLAGS) $(FFLAGS)}\n\n@item .F\n@code{$(F77) -c $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)@*\n$(AM_FFLAGS) $(FFLAGS)}\n\n@item .r\n@code{$(F77) -c $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)}\n\n@end table\n\n\n@node Mixing Fortran 77 With C and C++\n@comment  node-name,  next,  previous,  up\n@subsection Mixing Fortran 77 With C and C++\n\n@cindex Fortran 77, mixing with C and C++\n@cindex Mixing Fortran 77 with C and C++\n@cindex Linking Fortran 77 with C and C++\n@cindex cfortran\n@cindex Mixing Fortran 77 with C and/or C++\n\nAutomake currently provides @emph{limited} support for creating programs\nand shared libraries that are a mixture of Fortran 77 and C and/or C++.\nHowever, there are many other issues related to mixing Fortran 77 with\nother languages that are @emph{not} (currently) handled by Automake, but\nthat are handled by other packages@footnote{For example,\n@uref{https://www-zeus.desy.de/~burow/cfortran/, the cfortran package}\naddresses all of these inter-language issues, and runs under nearly all\nFortran 77, C and C++ compilers on nearly all platforms.  However,\n@command{cfortran} is not yet Free Software, but it will be in the next\nmajor release.}.\n\nAutomake can help in two ways:\n\n@enumerate\n@item\nAutomatic selection of the linker depending on which combinations of\nsource code.\n\n@item\nAutomatic selection of the appropriate linker flags (e.g., @option{-L} and\n@option{-l}) to pass to the automatically selected linker in order to link\nin the appropriate Fortran 77 intrinsic and run-time libraries.\n\n@cindex @code{FLIBS}, defined\n@vindex FLIBS\nThese extra Fortran 77 linker flags are supplied in the output variable\n@code{FLIBS} by the @code{AC_F77_LIBRARY_LDFLAGS} Autoconf macro.\n@xref{Fortran Compiler, , Fortran Compiler Characteristics, autoconf,\nThe Autoconf Manual}.\n@end enumerate\n\nIf Automake detects that a program or shared library (as mentioned in\nsome @code{_PROGRAMS} or @code{_LTLIBRARIES} primary) contains source\ncode that is a mixture of Fortran 77 and C and/or C++, then it requires\nthat the macro @code{AC_F77_LIBRARY_LDFLAGS} be called in\n@file{configure.ac}, and that either @code{$(FLIBS)}\nappear in the appropriate @code{_LDADD} (for programs) or @code{_LIBADD}\n(for shared libraries) variables.  It is the responsibility of the\nperson writing the @file{Makefile.am} to make sure that @samp{$(FLIBS)}\nappears in the appropriate @code{_LDADD} or\n@code{_LIBADD} variable.\n\n@cindex Mixed language example\n@cindex Example, mixed language\n\nFor example, consider the following @file{Makefile.am}:\n\n@example\nbin_PROGRAMS = foo\nfoo_SOURCES  = main.cc foo.f\nfoo_LDADD    = libfoo.la $(FLIBS)\n\npkglib_LTLIBRARIES = libfoo.la\nlibfoo_la_SOURCES  = bar.f baz.c zardoz.cc\nlibfoo_la_LIBADD   = $(FLIBS)\n@end example\n\nIn this case, Automake will insist that @code{AC_F77_LIBRARY_LDFLAGS}\nis mentioned in @file{configure.ac}.  Also, if @samp{$(FLIBS)} hadn't\nbeen mentioned in @code{foo_LDADD} and @code{libfoo_la_LIBADD}, then\nAutomake would have issued a warning.\n\n@menu\n* How the Linker is Chosen::    Automatic linker selection\n@end menu\n\n@node How the Linker is Chosen\n@comment  node-name,  next,  previous,  up\n@subsubsection How the Linker is Chosen\n\n@cindex Automatic linker selection\n@cindex Selecting the linker automatically\n\nWhen a program or library mixes several languages, Automake chooses the\nlinker according to the following priorities.  (The names in\nparentheses are the variables containing the link command.)\n\n@enumerate\n@item\n@vindex GCJLINK\nNative Java (@code{GCJLINK})\n@item\n@vindex OBJCXXLINK\nObjective C++ (@code{OBJCXXLINK})\n@item\n@vindex CXXLINK\nC++ (@code{CXXLINK})\n@item\n@vindex F77LINK\nFortran 77 (@code{F77LINK})\n@item\n@vindex FCLINK\nFortran (@code{FCLINK})\n@item\n@vindex OBJCLINK\nObjective C (@code{OBJCLINK})\n@item\n@vindex UPCLINK\nUnified Parallel C (@code{UPCLINK})\n@item\n@vindex LINK\nC (@code{LINK})\n@end enumerate\n\nFor example, if Fortran 77, C and C++ source code is compiled\ninto a program, then the C++ linker will be used.  In this case, if the\nC or Fortran 77 linkers required any special libraries that weren't\nincluded by the C++ linker, then they must be manually added to an\n@code{_LDADD} or @code{_LIBADD} variable by the user writing the\n@file{Makefile.am}.\n\nAutomake only looks at the file names listed in @file{_SOURCES}\nvariables to choose the linker, and defaults to the C linker.\nSometimes this is inconvenient because you are linking against a\nlibrary written in another language and would like to set the linker\nmore appropriately.  @xref{Libtool Convenience Libraries}, for a\ntrick with @code{nodist_EXTRA_@dots{}_SOURCES}.\n\nA per-target @code{_LINK} variable will override the above selection.\nPer-target link flags will cause Automake to write a per-target\n@code{_LINK} variable according to the language chosen as above.\n\n\n@node Fortran 9x Support\n@comment  node-name,  next,  previous,  up\n@section Fortran 9x Support\n\n@cindex Fortran 9x support\n@cindex Support for Fortran 9x\n\nAutomake includes support for Fortran 9x.\n\nAny package including Fortran 9x code must define the output variable\n@code{FC} in @file{configure.ac}; the simplest way to do this is to use\nthe @code{AC_PROG_FC} macro (@pxref{Particular Programs, , Particular\nProgram Checks, autoconf, The Autoconf Manual}).\n\nA few additional variables are defined when a Fortran 9x source file is\nseen:\n\n@vtable @code\n\n@item FC\nThe name of the Fortran 9x compiler.\n\n@item FCFLAGS\nAny flags to pass to the Fortran 9x compiler.\n\n@item AM_FCFLAGS\nThe maintainer's variant of @code{FCFLAGS}.\n\n@item FCCOMPILE\nThe command used to actually compile a Fortran 9x source file.  The file\nname is appended to form the complete command line.\n\n@item FCLINK\nThe command used to actually link a pure Fortran 9x program or shared\nlibrary.\n\n@end vtable\n\n@menu\n* Compiling Fortran 9x Files::  Compiling Fortran 9x sources\n@end menu\n\n@node Compiling Fortran 9x Files\n@comment  node-name,  next,  previous,  up\n@subsection Compiling Fortran 9x Files\n\n@file{@var{file}.o} is made automatically from @file{@var{file}.f90},\n@file{@var{file}.f95}, @file{@var{file}.f03}, or @file{@var{file}.f08}\nby running the Fortran 9x compiler.  The precise command used\nis as follows:\n\n@table @file\n\n@item .f90\n@code{$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f90) $<}\n\n@item .f95\n@code{$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f95) $<}\n\n@item .f03\n@code{$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f03) $<}\n\n@item .f08\n@code{$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f08) $<}\n\n@end table\n\n@node Java Support with gcj\n@comment  node-name,  next,  previous,  up\n@section Compiling Java sources using gcj\n\n@cindex Java support with gcj\n@cindex Support for Java with gcj\n@cindex Java to native code, compilation\n@cindex Compilation of Java to native code\n\nAutomake includes support for natively compiled Java, using @command{gcj},\nthe Java front end to the GNU Compiler Collection (rudimentary support\nfor compiling Java to bytecode using the @command{javac} compiler is\nalso present, @emph{albeit deprecated}; @pxref{Java}).\n\nAny package including Java code to be compiled must define the output\nvariable @code{GCJ} in @file{configure.ac}; the variable @code{GCJFLAGS}\nmust also be defined somehow (either in @file{configure.ac} or\n@file{Makefile.am}).  The simplest way to do this is to use the\n@code{AM_PROG_GCJ} macro.\n\n@vindex GCJFLAGS\n\nBy default, programs including Java source files are linked with\n@command{gcj}.\n\nAs always, the contents of @code{AM_GCJFLAGS} are passed to every\ncompilation invoking @command{gcj} (in its role as an ahead-of-time\ncompiler, when invoking it to create @file{.class} files,\n@code{AM_JAVACFLAGS} is used instead).  If it is necessary to pass\noptions to @command{gcj} from @file{Makefile.am}, this variable, and not\nthe user variable @code{GCJFLAGS}, should be used.\n\n@vindex AM_GCJFLAGS\n\n@command{gcj} can be used to compile @file{.java}, @file{.class},\n@file{.zip}, or @file{.jar} files.\n\nWhen linking, @command{gcj} requires that the main class be specified\nusing the @option{--main=} option.  The easiest way to do this is to use\nthe @code{_LDFLAGS} variable for the program.\n\n\n@node Vala Support\n@comment  node-name,  next,  previous,  up\n@section Vala Support\n\n@cindex Vala Support\n@cindex Support for Vala\n\nAutomake provides initial support for Vala\n(@uref{https://www.vala-project.org/}).\nThis requires valac version 0.7.0 or later, and currently requires\nthe user to use GNU @command{make}.\n\n@example\nfoo_SOURCES = foo.vala bar.vala zardoc.c\n@end example\n\nAny @file{.vala} file listed in a @code{_SOURCES} variable will be\ncompiled into C code by the Vala compiler. The generated @file{.c} files\nare distributed. The end user does not need to have a Vala compiler installed.\n\nAutomake ships with an Autoconf macro called @code{AM_PROG_VALAC}\nthat will locate the Vala compiler and optionally check its version\nnumber.\n\n@defmac AM_PROG_VALAC (@ovar{minimum-version}, @ovar{action-if-found},\n  @ovar{action-if-not-found})\nSearch for a Vala compiler in @env{PATH}.  If it is found, the variable\n@code{VALAC} is set to point to it (see below for more details).  This\nmacro takes three optional arguments.  The first argument, if present,\nis the minimum version of the Vala API required to compile this package.\nFor Vala releases, this is the same as the major and minor release\nnumber; e.g., when @code{valac --version} reports @code{0.48.7},\n@code{valac --api-version} reports @code{0.48}.  If a compiler is found\nand satisfies @var{minimum-version}, then @var{action-if-found} is run\n(this defaults to do nothing).  Otherwise, @var{action-if-not-found} is\nrun.  If @var{action-if-not-found} is not specified, the default value\nis to print a warning in case no compiler is found, or if a too-old\nversion of the compiler is found.\n@end defmac\n\nThere are a few variables that are used when compiling Vala sources:\n\n@vtable @code\n@item VALAC\nAbsolute path to the Vala compiler, or simply @samp{valac} if no\nsuitable Vala compiler could be found at configure runtime.\n\n@item VALAFLAGS\nAdditional arguments for the Vala compiler.\n\n@item AM_VALAFLAGS\nThe maintainer's variant of @code{VALAFLAGS}.\n\n@example\nlib_LTLIBRARIES = libfoo.la\nlibfoo_la_SOURCES = foo.vala\n@end example\n@end vtable\n\nNote that currently, you cannot use per-target @code{*_VALAFLAGS}\n(@pxref{Renamed Objects}) to produce different C files from one Vala\nsource file.\n\n\n@node Support for Other Languages\n@comment  node-name,  next,  previous,  up\n@section Support for Other Languages\n\nAutomake currently only includes full support for C, C++ (@pxref{C++\nSupport}), Objective C (@pxref{Objective C Support}),\nObjective C++ (@pxref{Objective C++ Support}),\nFortran 77\n(@pxref{Fortran 77 Support}), Fortran 9x (@pxref{Fortran 9x Support}),\nand Java (@pxref{Java Support with gcj}).  There is only rudimentary\nsupport for other languages, support for which will be improved based\non user demand.\n\nSome limited support for adding your own languages is available via the\nsuffix rule handling (@pxref{Suffixes}).\n\n@node Dependencies\n@section Automatic dependency tracking\n\nAs a developer it is often painful to continually update the\n@file{Makefile.am} whenever the include-file dependencies change in a\nproject.  Automake supplies a way to automatically track dependency\nchanges (@pxref{Dependency Tracking}).\n\n@cindex Dependency tracking\n@cindex Automatic dependency tracking\n\nAutomake always uses complete dependencies for a compilation,\nincluding system headers.  Automake's model is that dependency\ncomputation should be a side effect of the build.  To this end,\ndependencies are computed by running all compilations through a\nspecial wrapper program called @command{depcomp}.  @command{depcomp}\nunderstands how to coax many different C and C++ compilers into\ngenerating dependency information in the format it requires.\n@samp{automake -a} will install @command{depcomp} into your source\ntree for you.  If @command{depcomp} can't figure out how to properly\ninvoke your compiler, dependency tracking will simply be disabled for\nyour build.\n\n@cindex @command{depcomp}\n\nExperience with earlier versions of Automake (@pxref{Dependency Tracking\nEvolution, , Dependency Tracking Evolution, automake-history, Brief History\nof Automake}) taught us that it is not reliable to generate dependencies\nonly on the maintainer's system, as configurations vary too much.  So\ninstead Automake implements dependency tracking at build time.\n\nAutomatic dependency tracking can be suppressed by putting\n@option{no-dependencies} in the variable @code{AUTOMAKE_OPTIONS}, or\npassing @option{no-dependencies} as an argument to @code{AM_INIT_AUTOMAKE}\n(this should be the preferred way).  Or, you can invoke @command{automake}\nwith the @option{-i} option.  Dependency tracking is enabled by default.\n\n@vindex AUTOMAKE_OPTIONS\n@opindex no-dependencies\n\nThe person building your package also can choose to disable dependency\ntracking by configuring with @option{--disable-dependency-tracking}.\n\n@cindex Disabling dependency tracking\n@cindex Dependency tracking, disabling\n\n\n@node EXEEXT\n@section Support for executable extensions\n\n@cindex Executable extension\n@cindex Extension, executable\n@cindex Windows\n\nOn some platforms, such as Windows, executables are expected to have an\nextension such as @file{.exe}.  On these platforms, some compilers (GCC\namong them) will automatically generate @file{foo.exe} when asked to\ngenerate @file{foo}.\n\nAutomake provides mostly-transparent support for this.  Unfortunately\n@emph{mostly} doesn't yet mean @emph{fully}.  Until the English\ndictionary is revised, you will have to assist Automake if your package\nmust support those platforms.\n\nOne thing you must be aware of is that, internally, Automake rewrites\nsomething like this:\n\n@example\nbin_PROGRAMS = liver\n@end example\n\n@noindent\nto this:\n\n@example\nbin_PROGRAMS = liver$(EXEEXT)\n@end example\n\nThe targets Automake generates are likewise given the @samp{$(EXEEXT)}\nextension.\n\nThe variables @code{TESTS} and @code{XFAIL_TESTS} (@pxref{Simple Tests})\nare also rewritten if they contain filenames that have been declared as\nprograms in the same @file{Makefile}.  (This is mostly useful when some\nprograms from @code{check_PROGRAMS} are listed in @code{TESTS}.)\n\nHowever, Automake cannot apply this rewriting to @command{configure}\nsubstitutions.  This means that if you are conditionally building a\nprogram using such a substitution, then your @file{configure.ac} must\ntake care to add @samp{$(EXEEXT)} when constructing the output variable.\n\nSometimes maintainers like to write an explicit link rule for their\nprogram.  Without executable extension support, this is easy---you\nsimply write a rule whose target is the name of the program.  However,\nwhen executable extension support is enabled, you must instead add the\n@samp{$(EXEEXT)} suffix.\n\nThis might be a nuisance for maintainers who know their package will\nnever run on a platform that has\nexecutable extensions.  For those maintainers, the @option{no-exeext}\noption (@pxref{Options}) will disable this feature.  This works in a\nfairly ugly way; if @option{no-exeext} is seen, then the presence of a\nrule for a target named @code{foo} in @file{Makefile.am} will override\nan @command{automake}-generated rule for @samp{foo$(EXEEXT)}.  Without\nthe @option{no-exeext} option, this use will give a diagnostic.\n\n\n@node Other Objects\n@chapter Other Derived Objects\n\nAutomake can handle derived objects that are not C programs.  Sometimes\nthe support for actually building such objects must be explicitly\nsupplied, but Automake will still automatically handle installation and\ndistribution.\n\n@menu\n* Scripts::                     Executable scripts\n* Headers::                     Header files\n* Data::                        Architecture-independent data files\n* Sources::                     Derived sources\n@end menu\n\n\n@node Scripts\n@section Executable Scripts\n\n@cindex @code{_SCRIPTS} primary, defined\n@cindex @code{SCRIPTS} primary, defined\n@cindex Primary variable, @code{SCRIPTS}\n@vindex _SCRIPTS\n@cindex Installing scripts\n\nIt is possible to define and install programs that are scripts.  Such\nprograms are listed using the @code{SCRIPTS} primary name.  When the\nscript is distributed in its final, installable form, the\n@file{Makefile} usually looks as follows:\n@vindex SCRIPTS\n\n@example\n# Install my_script in $(bindir) and distribute it.\ndist_bin_SCRIPTS = my_script\n@end example\n\nScripts are not distributed by default; as we have just seen, those\nthat should be distributed can be specified using a @code{dist_}\nprefix as with other primaries.\n\n@cindex @code{SCRIPTS}, installation directories\n@vindex bin_SCRIPTS\n@vindex sbin_SCRIPTS\n@vindex libexec_SCRIPTS\n@vindex pkgdata_SCRIPTS\n@vindex pkglibexec_SCRIPTS\n@vindex noinst_SCRIPTS\n@vindex check_SCRIPTS\n\nScripts can be installed in @code{bindir}, @code{sbindir},\n@code{libexecdir}, @code{pkglibexecdir}, or @code{pkgdatadir}.\n\nScripts that need not be installed can be listed in\n@code{noinst_SCRIPTS}, and among them, those which are needed only by\n@samp{make check} should go in @code{check_SCRIPTS}.\n\nWhen a script needs to be built, the @file{Makefile.am} should include\nthe appropriate rules.  For instance the @command{automake} program\nitself is a Perl script that is generated from @file{automake.in}.\nHere is how this is handled:\n\n@example\nbin_SCRIPTS = automake\nCLEANFILES = $(bin_SCRIPTS)\nEXTRA_DIST = automake.in\n\ndo_subst = sed -e 's,[@@]datadir[@@],$(datadir),g' \\\n            -e 's,[@@]PERL[@@],$(PERL),g' \\\n            -e 's,[@@]PACKAGE[@@],$(PACKAGE),g' \\\n            -e 's,[@@]VERSION[@@],$(VERSION),g' \\\n            @dots{}\n\nautomake: automake.in Makefile\n        $(do_subst) < $(srcdir)/automake.in > automake\n        chmod +x automake\n@end example\n\nSuch scripts for which a build rule has been supplied need to be\ndeleted explicitly using @code{CLEANFILES} (@pxref{Clean}), and their\nsources have to be distributed, usually with @code{EXTRA_DIST}\n(@pxref{Basics of Distribution}).\n\nAnother common way to build scripts is to process them from\n@file{configure} with @code{AC_CONFIG_FILES}.  In this situation\nAutomake knows which files should be cleaned and distributed, and what\nthe rebuild rules should look like.\n\nFor instance if @file{configure.ac} contains\n\n@example\nAC_CONFIG_FILES([src/my_script], [chmod +x src/my_script])\n@end example\n\n@noindent\nto build @file{src/my_script} from @file{src/my_script.in}, then a\n@file{src/Makefile.am} to install this script in @code{$(bindir)} can\nbe as simple as\n\n@example\nbin_SCRIPTS = my_script\nCLEANFILES = $(bin_SCRIPTS)\n@end example\n\n@noindent\nThere is no need for @code{EXTRA_DIST} or any build rule: Automake\ninfers them from @code{AC_CONFIG_FILES} (@pxref{Requirements}).\n@code{CLEANFILES} is still useful, because by default Automake will\nclean targets of @code{AC_CONFIG_FILES} in @code{distclean}, not\n@code{clean}.\n\nAlthough this looks simpler, building scripts this way has one\ndrawback: directory variables such as @code{$(datadir)} are not fully\nexpanded and may refer to other directory variables.\n\n@node Headers\n@section Header files\n\n@cindex @code{_HEADERS} primary, defined\n@cindex @code{HEADERS} primary, defined\n@cindex Primary variable, @code{HEADERS}\n@vindex _HEADERS\n@vindex noinst_HEADERS\n@cindex @code{HEADERS}, installation directories\n@cindex Installing headers\n@vindex include_HEADERS\n@vindex oldinclude_HEADERS\n@vindex pkginclude_HEADERS\n\n\nHeader files that must be installed are specified by the\n@code{HEADERS} family of variables.  Headers can be installed in\n@code{includedir}, @code{oldincludedir}, @code{pkgincludedir} or any\nother directory you may have defined (@pxref{Uniform}).  For instance,\n\n@example\ninclude_HEADERS = foo.h bar/bar.h\n@end example\n\n@noindent\nwill install the two files as @file{$(includedir)/foo.h} and\n@file{$(includedir)/bar.h}.\n\nThe @code{nobase_} prefix is also supported:\n\n@example\nnobase_include_HEADERS = foo.h bar/bar.h\n@end example\n\n@noindent\nwill install the two files as @file{$(includedir)/foo.h} and\n@file{$(includedir)/bar/bar.h} (@pxref{Alternative}).\n\n@vindex noinst_HEADERS\nUsually, only header files that accompany installed libraries need to\nbe installed.  Headers used by programs or convenience libraries are\nnot installed.  The @code{noinst_HEADERS} variable can be used for\nsuch headers.  However when the header actually belongs to a single\nconvenience library or program, we recommend listing it in the\nprogram's or library's @code{_SOURCES} variable (@pxref{Program\nSources}) instead of in @code{noinst_HEADERS}.  This is clearer for\nthe @file{Makefile.am} reader.  @code{noinst_HEADERS} would be the\nright variable to use in a directory containing only headers and no\nassociated library or program.\n\nAll header files must be listed somewhere; in a @code{_SOURCES}\nvariable or in a @code{_HEADERS} variable.  Missing ones will not\nappear in the distribution.\n\nFor header files that are built and must not be distributed, use the\n@code{nodist_} prefix as in @code{nodist_include_HEADERS} or\n@code{nodist_prog_SOURCES}.  If these generated headers are needed\nduring the build, you must also ensure they exist before they are\nused (@pxref{Sources}).\n\n\n@node Data\n@section Architecture-independent data files\n\n@cindex @code{_DATA} primary, defined\n@cindex @code{DATA} primary, defined\n@cindex Primary variable, @code{DATA}\n@vindex _DATA\n\nAutomake supports the installation of miscellaneous data files using the\n@code{DATA} family of variables.\n@vindex DATA\n\n@vindex data_DATA\n@vindex sysconf_DATA\n@vindex sharedstate_DATA\n@vindex localstate_DATA\n@vindex pkgdata_DATA\n\nSuch data can be installed in the directories @code{datadir},\n@code{sysconfdir}, @code{sharedstatedir}, @code{localstatedir}, or\n@code{pkgdatadir}.\n\nBy default, data files are @emph{not} included in a distribution.  Of\ncourse, you can use the @code{dist_} prefix to change this on a\nper-variable basis.\n\nHere is how Automake declares its auxiliary data files:\n\n@example\ndist_pkgdata_DATA = clean-kr.am clean.am @dots{}\n@end example\n\n\n@node Sources\n@section Built Sources\n\nBecause Automake's automatic dependency tracking works as a side-effect\nof compilation (@pxref{Dependencies}) there is a bootstrap issue: a\ntarget should not be compiled before its dependencies are made, but\nthese dependencies are unknown until the target is first compiled.\n\nOrdinarily this is not a problem, because dependencies are distributed\nsources: they preexist and do not need to be built.  Suppose that\n@file{foo.c} includes @file{foo.h}.  When it first compiles\n@file{foo.o}, @command{make} only knows that @file{foo.o} depends on\n@file{foo.c}.  As a side-effect of this compilation @command{depcomp}\nrecords the @file{foo.h} dependency so that following invocations of\n@command{make} will honor it.  In these conditions, it's clear there is\nno problem: either @file{foo.o} doesn't exist and has to be built\n(regardless of the dependencies), or accurate dependencies exist and\nthey can be used to decide whether @file{foo.o} should be rebuilt.\n\nIt's a different story if @file{foo.h} doesn't exist by the first\n@command{make} run.  For instance, there might be a rule to build\n@file{foo.h}.  This time @file{file.o}'s build will fail because the\ncompiler can't find @file{foo.h}.  @command{make} failed to trigger the\nrule to build @file{foo.h} first by lack of dependency information.\n\n@vindex BUILT_SOURCES\n@cindex @code{BUILT_SOURCES}, defined\n\nThe @code{BUILT_SOURCES} variable is a workaround for this problem.  A\nsource file listed in @code{BUILT_SOURCES} is made when @samp{make\nall}, @samp{make check}, @samp{make install}, @samp{make install-exec}\n(or @code{make dist}) is run, before other targets are processed.\nHowever, such a source file is not @emph{compiled} unless explicitly\nrequested by mentioning it in some other @code{_SOURCES} variable.\n\nSo, to conclude our introductory example, we could use\n@samp{BUILT_SOURCES = foo.h} to ensure @file{foo.h} gets built before\nany other target (including @file{foo.o}) during @samp{make all} or\n@samp{make check}.\n\n@code{BUILT_SOURCES} is actually a bit of a misnomer, as any file which\nmust be created early in the build process can be listed in this\nvariable.  Moreover, all built sources do not necessarily have to be\nlisted in @code{BUILT_SOURCES}.  For instance, a generated @file{.c} file\ndoesn't need to appear in @code{BUILT_SOURCES} (unless it is included by\nanother source), because it's a known dependency of the associated\nobject.\n\nTo emphasize, @code{BUILT_SOURCES} is honored only by @samp{make all},\n@samp{make check}, @samp{make install}, and @code{make install-exec}\n(and @samp{make dist}).  This means you cannot build an arbitrary\ntarget (e.g., @samp{make foo}) in a clean tree if it depends on a\nbuilt source.  However it will succeed if you have run @samp{make all}\nearlier, because accurate dependencies are already available.\n\nThe next section illustrates and discusses the handling of built sources\non a toy example.\n\n@menu\n* Built Sources Example::       Several ways to handle built sources.\n@end menu\n\n@node Built Sources Example\n@subsection Built Sources Example\n\nSuppose that @file{foo.c} includes @file{bindir.h}, which is\ninstallation-dependent and not distributed: it needs to be built.  Here\n@file{bindir.h} defines the preprocessor macro @code{bindir} to the\nvalue of the @command{make} variable @code{bindir} (inherited from\n@file{configure}).\n\nWe suggest several implementations below.  It's not meant to be an\nexhaustive listing of all ways to handle built sources, but it will give\nyou a few ideas if you encounter this issue.\n\n@subsubheading First Try\n\nThis first implementation will illustrate the bootstrap issue mentioned\nin the previous section (@pxref{Sources}).\n\nHere is a tentative @file{Makefile.am}.\n\n@example\n# This won't work.\nbin_PROGRAMS = foo\nfoo_SOURCES = foo.c\nnodist_foo_SOURCES = bindir.h\nCLEANFILES = bindir.h\nbindir.h: Makefile\n        echo '#define bindir \"$(bindir)\"' >$@@\n@end example\n\nThis setup doesn't work, because Automake doesn't know that @file{foo.c}\nincludes @file{bindir.h}.  Remember, automatic dependency tracking works\nas a side-effect of compilation, so the dependencies of @file{foo.o} will\nbe known only after @file{foo.o} has been compiled (@pxref{Dependencies}).\nThe symptom is as follows.\n\n@example\n% make\nsource='foo.c' object='foo.o' libtool=no \\\ndepfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \\\ndepmode=gcc /bin/sh ./depcomp \\\ngcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c\nfoo.c:2: bindir.h: No such file or directory\nmake: *** [foo.o] Error 1\n@end example\n\nIn this example @file{bindir.h} is not distributed nor installed, and\nit is not even being built on-time.  One may wonder if the\n@samp{nodist_foo_SOURCES = bindir.h} line has any use at all.  This\nline simply states that @file{bindir.h} is a source of @code{foo}, so\nfor instance, it should be inspected while generating tags\n(@pxref{Tags}).  In other words, it does not help our present problem,\nand the build would fail identically without it.\n\n@subsubheading Using @code{BUILT_SOURCES}\n\nA solution is to require @file{bindir.h} to be built before anything\nelse.  This is what @code{BUILT_SOURCES} is meant for (@pxref{Sources}).\n\n@example\nbin_PROGRAMS = foo\nfoo_SOURCES = foo.c\nnodist_foo_SOURCES = bindir.h\nBUILT_SOURCES = bindir.h\nCLEANFILES = bindir.h\nbindir.h: Makefile\n        echo '#define bindir \"$(bindir)\"' >$@@\n@end example\n\nSee how @file{bindir.h} gets built first:\n\n@example\n% make\necho '#define bindir \"/usr/local/bin\"' >bindir.h\nmake  all-am\nmake[1]: Entering directory `/home/adl/tmp'\nsource='foo.c' object='foo.o' libtool=no \\\ndepfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \\\ndepmode=gcc /bin/sh ./depcomp \\\ngcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c\ngcc  -g -O2   -o foo  foo.o\nmake[1]: Leaving directory `/home/adl/tmp'\n@end example\n\nHowever, as said earlier, @code{BUILT_SOURCES} applies only to the\n@code{all}, @code{check}, and @code{install} targets.  It still fails\nif you try to run @samp{make foo} explicitly:\n\n@example\n% make clean\ntest -z \"bindir.h\" || rm -f bindir.h\ntest -z \"foo\" || rm -f foo\nrm -f *.o\n% : > .deps/foo.Po # Suppress previously recorded dependencies\n% make foo\nsource='foo.c' object='foo.o' libtool=no \\\ndepfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \\\ndepmode=gcc /bin/sh ./depcomp \\\ngcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c\nfoo.c:2: bindir.h: No such file or directory\nmake: *** [foo.o] Error 1\n@end example\n\n@subsubheading Recording Dependencies manually\n\nUsually people are happy enough with @code{BUILT_SOURCES} because they\nnever build targets such as @samp{make foo} before @samp{make all}, as\nin the previous example.  However if this matters to you, you can\navoid @code{BUILT_SOURCES} and record such dependencies explicitly in\nthe @file{Makefile.am}.\n\n@example\nbin_PROGRAMS = foo\nfoo_SOURCES = foo.c\nnodist_foo_SOURCES = bindir.h\nfoo.$(OBJEXT): bindir.h\nCLEANFILES = bindir.h\nbindir.h: Makefile\n        echo '#define bindir \"$(bindir)\"' >$@@\n@end example\n\nYou don't have to list @emph{all} the dependencies of @file{foo.o}\nexplicitly, only those that might need to be built.  If a dependency\nalready exists, it will not hinder the first compilation and will be\nrecorded by the normal dependency tracking code.  (Note that after\nthis first compilation the dependency tracking code will also have\nrecorded the dependency between @file{foo.o} and\n@file{bindir.h}, so our explicit dependency is really useful to\nthe first build only.)\n\nAdding explicit dependencies like this can be a bit dangerous if you are\nnot careful enough.  This is due to the way Automake tries not to\noverwrite your rules (it assumes you know better than it).\n@samp{foo.$(OBJEXT): bindir.h} supersedes any rule Automake may want to\noutput to build @samp{foo.$(OBJEXT)}.  It happens to work in this case\nbecause Automake doesn't have to output any @samp{foo.$(OBJEXT):}\ntarget: it relies on a suffix rule instead (i.e., @samp{.c.$(OBJEXT):}).\nAlways check the generated @file{Makefile.in} if you do this.\n\n@subsubheading Build @file{bindir.h} from @file{configure}\n\nIt's possible to define this preprocessor macro from @file{configure},\neither in @file{config.h} (@pxref{Defining Directories, , Defining\nDirectories, autoconf, The Autoconf Manual}), or by processing a\n@file{bindir.h.in} file using @code{AC_CONFIG_FILES}\n(@pxref{Configuration Actions, ,Configuration Actions, autoconf, The\nAutoconf Manual}).\n\nAt this point it should be clear that building @file{bindir.h} from\n@file{configure} works well for this example.  @file{bindir.h} will exist\nbefore you build any target, hence will not cause any dependency issue.\n\nThe Makefile can be shrunk as follows.  We do not even have to mention\n@file{bindir.h}.\n\n@example\nbin_PROGRAMS = foo\nfoo_SOURCES = foo.c\n@end example\n\nHowever, it's not always possible to build sources from\n@file{configure}, especially when these sources are generated by a tool\nthat needs to be built first.\n\n@subsubheading Build @file{bindir.c}, not @file{bindir.h}.\n\nAnother attractive idea is to define @code{bindir} as a variable or\nfunction exported from @file{bindir.o}, and build @file{bindir.c}\ninstead of @file{bindir.h}.\n\n@example\nnoinst_PROGRAMS = foo\nfoo_SOURCES = foo.c bindir.h\nnodist_foo_SOURCES = bindir.c\nCLEANFILES = bindir.c\nbindir.c: Makefile\n        echo 'const char bindir[] = \"$(bindir)\";' >$@@\n@end example\n\n@file{bindir.h} contains just the variable's declaration and doesn't\nneed to be built, so it won't cause any trouble.  @file{bindir.o} is\nalways dependent on @file{bindir.c}, so @file{bindir.c} will get built\nfirst.\n\n@subsubheading Which is best?\n\nThere is no panacea, of course.  Each solution has its merits and\ndrawbacks.\n\nYou cannot use @code{BUILT_SOURCES} if the ability to run @samp{make\nfoo} on a clean tree is important to you.\n\nYou won't add explicit dependencies if you are leery of overriding\nan Automake rule by mistake.\n\nBuilding files from @file{./configure} is not always possible, neither\nis converting @file{.h} files into @file{.c} files.\n\n\n@node Other GNU Tools\n@chapter Other GNU Tools\n\nSince Automake is primarily intended to generate @file{Makefile.in}s for\nuse in GNU programs, it tries hard to interoperate with other GNU tools.\n\n@menu\n* Emacs Lisp::                  Emacs Lisp\n* gettext::                     Gettext\n* Libtool::                     Libtool\n* Java::                        Java bytecode compilation (deprecated)\n* Python::                      Python\n@end menu\n\n\n@node Emacs Lisp\n@section Emacs Lisp\n\n@cindex @code{_LISP} primary, defined\n@cindex @code{LISP} primary, defined\n@cindex Primary variable, @code{LISP}\n\n@vindex _LISP\n@vindex lisp_LISP\n@vindex noinst_LISP\n\nAutomake provides some support for Emacs Lisp.  The @code{LISP} primary\nis used to hold a list of @file{.el} files.  Possible prefixes for this\nprimary are @code{lisp_} and @code{noinst_}.  Note that if\n@code{lisp_LISP} is defined, then @file{configure.ac} must run\n@code{AM_PATH_LISPDIR} (@pxref{Macros}).\n\n@vindex dist_lisp_LISP\n@vindex dist_noinst_LISP\nLisp sources are not distributed by default.  You can prefix the\n@code{LISP} primary with @code{dist_}, as in @code{dist_lisp_LISP} or\n@code{dist_noinst_LISP}, to indicate that these files should be\ndistributed.\n\nAutomake will byte-compile all Emacs Lisp source files using the Emacs\nfound by @code{AM_PATH_LISPDIR}, if any was found.  When performing such\nbyte-compilation, the flags specified in the (developer-reserved)\n@code{AM_ELCFLAGS} and (user-reserved) @code{ELCFLAGS} make variables\nwill be passed to the Emacs invocation.\n\nByte-compiled Emacs Lisp files are not portable among all versions of\nEmacs, so it makes sense to turn this off if you expect sites to have\nmore than one version of Emacs installed.  Furthermore, many packages\ndon't actually benefit from byte-compilation.  Still, we recommend\nthat you byte-compile your Emacs Lisp sources.  It is probably better\nfor sites with strange setups to cope for themselves than to make the\ninstallation less nice for everybody else.\n\nThere are two ways to avoid byte-compiling.  Historically, we have\nrecommended the following construct.\n\n@example\nlisp_LISP = file1.el file2.el\nELCFILES =\n@end example\n\n@noindent\n@code{ELCFILES} is an internal Automake variable that normally lists\nall @file{.elc} files that must be byte-compiled.  Automake defines\n@code{ELCFILES} automatically from @code{lisp_LISP}.  Emptying this\nvariable explicitly prevents byte-compilation.\n\nSince Automake 1.8, we now recommend using @code{lisp_DATA} instead:\n\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@example\nlisp_DATA = file1.el file2.el\n@end example\n\nNote that these two constructs are not equivalent.  @code{_LISP} will\nnot install a file if Emacs is not installed, while @code{_DATA} will\nalways install its files.\n\n@node gettext\n@section Gettext\n\n@cindex GNU Gettext support\n@cindex Gettext support\n@cindex Support for GNU Gettext\n\nIf @code{AM_GNU_GETTEXT} is seen in @file{configure.ac}, then Automake\nturns on support for GNU gettext, a message catalog system for\ninternationalization\n(@pxref{Top, , Introduction, gettext, GNU gettext utilities}).\n\nThe @code{gettext} support in Automake requires the addition of one or\ntwo subdirectories to the package: @file{po} and possibly also @file{intl}.\nThe latter is needed if @code{AM_GNU_GETTEXT} is not invoked with the\n@samp{external} argument, or if @code{AM_GNU_GETTEXT_INTL_SUBDIR} is used.\nAutomake ensures that these directories exist and are mentioned in\n@code{SUBDIRS}.\n\n@node Libtool\n@section Libtool\n\nAutomake provides support for GNU Libtool (@pxref{Top, , Introduction,\nlibtool, The Libtool Manual}) with the @code{LTLIBRARIES} primary.\n@xref{A Shared Library}.\n\n\n@node Java\n@section Java bytecode compilation (deprecated)\n\n@cindex @code{_JAVA} primary, defined\n@cindex @code{JAVA} primary, defined\n@cindex Primary variable, @code{JAVA}\n@cindex Java to bytecode, compilation\n@cindex Compilation of Java to bytecode\n\nAutomake provides some minimal support for Java bytecode compilation with\nthe @code{JAVA} primary (in addition to the support for compiling Java to\nnative machine code; @pxref{Java Support with gcj}).  Note however that\n@emph{the interface and most features described here are deprecated}.\nFuture Automake releases will strive to provide a better and cleaner\ninterface, which however @emph{won't be backward-compatible}; the present\ninterface will probably be removed altogether some time after the\nintroduction of the new interface (if that ever materializes).  In any\ncase, the current @code{JAVA} primary features are frozen and will no\nlonger be developed, not even to take bug fixes.\n\nAny @file{.java} files listed in a @code{_JAVA} variable will be\ncompiled with @code{JAVAC} at build time.  By default, @file{.java}\nfiles are not included in the distribution; you should use the\n@code{dist_} prefix to distribute them.\n\nHere is a typical setup for distributing @file{.java} files and\ninstalling the @file{.class} files resulting from their compilation.\n\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@example\njavadir = $(datadir)/java\ndist_java_JAVA = a.java b.java @dots{}\n@end example\n\n@cindex @code{JAVA} restrictions\n@cindex Restrictions for @code{JAVA}\n\nCurrently Automake enforces the restriction that only one @code{_JAVA}\nprimary can be used in a given @file{Makefile.am}.  The reason for this\nrestriction is that, in general, it isn't possible to know which\n@file{.class} files were generated from which @file{.java} files, so\nit would be impossible to know which files to install where.  For\ninstance, a @file{.java} file can define multiple classes; the resulting\n@file{.class} file names cannot be predicted without parsing the\n@file{.java} file.\n\nThere are a few variables that are used when compiling Java sources:\n\n@vtable @code\n@item JAVAC\nThe name of the Java compiler.  This defaults to @samp{javac}.\n\n@item JAVACFLAGS\nThe flags to pass to the compiler.  This is considered to be a user\nvariable (@pxref{User Variables}).\n\n@item AM_JAVACFLAGS\nMore flags to pass to the Java compiler.  This, and not\n@code{JAVACFLAGS}, should be used when it is necessary to put Java\ncompiler flags into @file{Makefile.am}.\n\n@item JAVAROOT\nThe value of this variable is passed to the @option{-d} option to\n@code{javac}.  It defaults to @samp{$(top_builddir)}.\n\n@item CLASSPATH_ENV\nThis variable is a shell expression that is used to set the\n@env{CLASSPATH} environment variable on the @code{javac} command line.\n(In the future we will probably handle class path setting differently.)\n@end vtable\n\n\n@node Python\n@section Python\n\n@cindex @code{_PYTHON} primary, defined\n@cindex @code{PYTHON} primary, defined\n@cindex Primary variable, @code{PYTHON}\n@vindex _PYTHON\n\nAutomake provides support for Python compilation with the\n@code{PYTHON} primary.  A typical setup is to call\n@code{AM_PATH_PYTHON} in @file{configure.ac} and use a line like the\nfollowing in @file{Makefile.am}:\n\n@example\npython_PYTHON = tree.py leave.py\n@end example\n\nAny files listed in a @code{_PYTHON} variable will be byte-compiled\nwith @command{py-compile} at install time.  @command{py-compile}\nactually creates both standard (@file{.pyc}) and optimized\n(@file{.pyo}) byte-compiled versions of the source files.  Note that\nbecause byte-compilation occurs at install time, any files listed in\n@code{noinst_PYTHON} will not be compiled.  Python source files are\nincluded in the distribution by default; prepend @code{nodist_} (as in\n@code{nodist_python_PYTHON}) to omit them.\n\nAutomake ships with an Autoconf macro called @code{AM_PATH_PYTHON}\nthat will determine some Python-related directory variables (see\nbelow).  If you have called @code{AM_PATH_PYTHON} from\n@file{configure.ac}, then you may use the variables\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@code{python_PYTHON} or @code{pkgpython_PYTHON} to list Python source\nfiles in your @file{Makefile.am}, depending on where you want your files\ninstalled (see the definitions of @code{pythondir} and\n@code{pkgpythondir} below).\n\n@defmac AM_PATH_PYTHON (@ovar{version}, @ovar{action-if-found},\n  @ovar{action-if-not-found})\n\nSearch for a Python interpreter on the system.  This macro takes three\noptional arguments.  The first argument, if present, is the minimum\nversion of Python required for this package: @code{AM_PATH_PYTHON}\nwill skip any Python interpreter that is older than @var{version}.\nIf an interpreter is found and satisfies @var{version}, then\n@var{action-if-found} is run.  Otherwise, @var{action-if-not-found} is\nrun.\n\nIf @var{action-if-not-found} is not specified, as in the following\nexample, the default is to abort @command{configure}.\n\n@example\nAM_PATH_PYTHON([2.2])\n@end example\n\n@noindent\nThis is fine when Python is an absolute requirement for the package.\nIf Python >= 2.5 was only @emph{optional} to the package,\n@code{AM_PATH_PYTHON} could be called as follows.\n\n@example\nAM_PATH_PYTHON([2.5],, [:])\n@end example\n\nIf the @env{PYTHON} variable is set when @code{AM_PATH_PYTHON} is\ncalled, then that will be the only Python interpreter that is tried.\n\n@code{AM_PATH_PYTHON} creates the following output variables based on\nthe Python installation found during configuration.\n@end defmac\n\n@vtable @code\n@item PYTHON\nThe name of the Python executable, or @samp{:} if no suitable\ninterpreter could be found.\n\nAssuming @var{action-if-not-found} is used (otherwise @file{./configure}\nwill abort if Python is absent), the value of @code{PYTHON} can be used\nto set up a conditional in order to disable the relevant part of a build\nas follows.\n\n@example\nAM_PATH_PYTHON(,, [:])\nAM_CONDITIONAL([HAVE_PYTHON], [test \"$PYTHON\" != :])\n@end example\n\n@item PYTHON_VERSION\nThe Python version number, in the form @var{major}.@var{minor}\n(e.g., @samp{2.5}).  This is currently the value of\n@samp{'%u.%u' % sys.version_info[:2]}.\n\n@item PYTHON_PREFIX\nThe string @samp{$@{prefix@}}.  This term may be used in future work\nthat needs the contents of Python's @samp{sys.prefix}, but general\nconsensus is to always use the value from @command{configure}.\n\n@item PYTHON_EXEC_PREFIX\nThe string @samp{$@{exec_prefix@}}.  This term may be used in future work\nthat needs the contents of Python's @samp{sys.exec_prefix}, but general\nconsensus is to always use the value from @command{configure}.\n\n@item PYTHON_PLATFORM\nThe canonical name used by Python to describe the operating system, as\ngiven by @samp{sys.platform}.  This value is sometimes needed when\nbuilding Python extensions.\n\n@item pythondir\nThe directory name for the @file{site-packages} subdirectory of the\nstandard Python install tree.\n\n@item pkgpythondir\nThis is the directory under @code{pythondir} that is named after the\npackage.  That is, it is @samp{$(pythondir)/$(PACKAGE)}.  It is provided\nas a convenience.\n\n@item pyexecdir\nThis is the directory where Python extension modules (shared libraries)\nshould be installed.  An extension module written in C could be declared\nas follows to Automake:\n\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@example\npyexec_LTLIBRARIES = quaternion.la\nquaternion_la_SOURCES = quaternion.c support.c support.h\nquaternion_la_LDFLAGS = -avoid-version -module\n@end example\n\n@item pkgpyexecdir\nThis is a convenience variable that is defined as\n@samp{$(pyexecdir)/$(PACKAGE)}.\n@end vtable\n\nAll of these directory variables have values that start with either\n@samp{$@{prefix@}} or @samp{$@{exec_prefix@}} unexpanded.  This works\nfine in @file{Makefiles}, but it makes these variables hard to use in\n@file{configure}.  This is mandated by the GNU coding standards, so\nthat the user can run @samp{make prefix=/foo install}.  The Autoconf\nmanual has a section with more details on this topic\n(@pxref{Installation Directory Variables, , Installation Directory\nVariables, autoconf, The Autoconf Manual}).  See also @ref{Hard-Coded\nInstall Paths}.\n\n\n@node Documentation\n@chapter Building documentation\n\nCurrently Automake provides support for Texinfo and man pages.\n\n@menu\n* Texinfo::                     Texinfo\n* Man Pages::                   Man pages\n@end menu\n\n\n@node Texinfo\n@section Texinfo\n\n@cindex @code{_TEXINFOS} primary, defined\n@cindex @code{TEXINFOS} primary, defined\n@cindex Primary variable, @code{TEXINFOS}\n@cindex HTML output using Texinfo\n@cindex PDF output using Texinfo\n@cindex PS output using Texinfo\n@cindex DVI output using Texinfo\n@vindex _TEXINFOS\n@vindex info_TEXINFOS\n\nIf the current directory contains Texinfo source, you must declare it\nwith the @code{TEXINFOS} primary.  Generally Texinfo files are converted\ninto info, and thus the @code{info_TEXINFOS} variable is most commonly used\nhere.  Any Texinfo source file should have the @file{.texi} extension.\nAutomake also accepts @file{.txi} or @file{.texinfo} extensions, but their\nuse is discouraged now, and will elicit runtime warnings.\n\nAutomake generates rules to build @file{.info}, @file{.dvi},\n@file{.ps}, @file{.pdf} and @file{.html} files from your Texinfo\nsources.  Following the GNU Coding Standards, only the @file{.info}\nfiles are built by @samp{make all} and installed by @samp{make\ninstall} (unless you use @option{no-installinfo}, see below).\nFurthermore, @file{.info} files are automatically distributed so that\nTexinfo is not a prerequisite for installing your package.\n\nIt is worth noting that, contrary to what happens with the other formats,\nthe generated @file{.info} files are by default placed in @code{srcdir}\nrather than in the @code{builddir}.  This can be changed with the\n@option{info-in-builddir} option.\n\n@trindex dvi\n@trindex html\n@trindex pdf\n@trindex ps\n@trindex install-dvi\n@trindex install-html\n@trindex install-pdf\n@trindex install-ps\nOther documentation formats can be built on request by @samp{make\ndvi}, @samp{make ps}, @samp{make pdf} and @samp{make html}, and they\ncan be installed with @samp{make install-dvi}, @samp{make install-ps},\n@samp{make install-pdf} and @samp{make install-html} explicitly.\n@samp{make uninstall} will remove everything: the Texinfo\ndocumentation installed by default as well as all the above optional\nformats.\n\nAll of these targets can be extended using @samp{-local} rules\n(@pxref{Extending}).\n\n@cindex Texinfo flag, @code{VERSION}\n@cindex Texinfo flag, @code{UPDATED}\n@cindex Texinfo flag, @code{EDITION}\n@cindex Texinfo flag, @code{UPDATED-MONTH}\n\n@cindex @code{VERSION} Texinfo flag\n@cindex @code{UPDATED} Texinfo flag\n@cindex @code{EDITION} Texinfo flag\n@cindex @code{UPDATED-MONTH} Texinfo flag\n\n@cindex @file{mdate-sh}\n\nIf the @file{.texi} file @code{@@include}s @file{version.texi}, then\nthat file will be automatically generated.  The file @file{version.texi}\ndefines four Texinfo flags you can reference using\n@code{@@value@{EDITION@}}, @code{@@value@{VERSION@}},\n@code{@@value@{UPDATED@}}, and @code{@@value@{UPDATED-MONTH@}}.\n\n@table @code\n@item EDITION\n@itemx VERSION\nBoth of these flags hold the version number of your program.  They are\nkept separate for clarity.\n\n@item UPDATED\nThis holds the date the primary @file{.texi} file was last modified.\n\n@item UPDATED-MONTH\nThis holds the name of the month in which the primary @file{.texi} file\nwas last modified.\n@end table\n\nThe @file{version.texi} support requires the @command{mdate-sh}\nscript; this script is supplied with Automake and automatically\nincluded when @command{automake} is invoked with the\n@option{--add-missing} option.\n\nIf you have multiple Texinfo files, and you want to use the\n@file{version.texi} feature, then you have to have a separate version\nfile for each Texinfo file.  Automake will treat any include in a\nTexinfo file that matches @file{vers*.texi} just as an automatically\ngenerated version file.\n\nSometimes an info file actually depends on more than one @file{.texi}\nfile.  For instance, in GNU Hello, @file{hello.texi} includes the file\n@file{fdl.texi}.  You can tell Automake about these dependencies using\nthe @code{@var{texi}_TEXINFOS} variable.  Here is how GNU Hello does it:\n@vindex TEXINFOS\n@vindex _TEXINFOS\n\n@example\ninfo_TEXINFOS = hello.texi\nhello_TEXINFOS = fdl.texi\n@end example\n\n@cindex @file{texinfo.tex}\n\nBy default, Automake requires the file @file{texinfo.tex} to appear in\nthe same directory as the @file{Makefile.am} file that lists the\n@file{.texi} files.  If you used @code{AC_CONFIG_AUX_DIR} in\n@file{configure.ac} (@pxref{Input, , Finding `configure' Input,\nautoconf, The Autoconf Manual}), then @file{texinfo.tex} is looked for\nthere.  In both cases, @command{automake} then supplies @file{texinfo.tex} if\n@option{--add-missing} is given, and takes care of its distribution.\nHowever, if you set the @code{TEXINFO_TEX} variable (see below),\nit overrides the location of the file and turns off its installation\ninto the source as well as its distribution.\n\nThe option @option{no-texinfo.tex} can be used to eliminate the\nrequirement for the file @file{texinfo.tex}.  Use of the variable\n@code{TEXINFO_TEX} is preferable, however, because that allows the\n@code{dvi}, @code{ps}, and @code{pdf} targets to still work.\n\n@cindex Option, @code{no-installinfo}\n@cindex Target, @code{install-info}\n@cindex @code{install-info} target\n@cindex @code{no-installinfo} option\n\n@opindex no-installinfo\n@trindex install-info\n\nAutomake generates an @code{install-info} rule; some people apparently\nuse this.  By default, info pages are installed by @samp{make\ninstall}, so running @code{make install-info} is pointless.  This can\nbe prevented via the @code{no-installinfo} option.  In this case,\n@file{.info} files are not installed by default, and user must\nrequest this explicitly using @samp{make install-info}.\n\n@vindex AM_UPDATE_INFO_DIR\nBy default, @code{make install-info} and @code{make uninstall-info}\nwill try to run the @command{install-info} program (if available) to\nupdate (or create/remove) the @file{@code{$@{infodir@}}/dir} index.\nIf this is undesired, it can be prevented by exporting the\n@code{AM_UPDATE_INFO_DIR} variable to \"@code{no}\".\n\nThe following variables are used by the Texinfo build rules.\n\n@vtable @code\n@item MAKEINFO\nThe name of the program invoked to build @file{.info} files.  This\nvariable is defined by Automake.  If the @command{makeinfo} program is\nfound on the system then it will be used by default; otherwise\n@command{missing} will be used instead.\n\n@item MAKEINFOHTML\nThe command invoked to build @file{.html} files.  Automake\ndefines this to @samp{$(MAKEINFO) --html}.\n\n@item MAKEINFOFLAGS\nUser flags passed to each invocation of @samp{$(MAKEINFO)} and\n@samp{$(MAKEINFOHTML)}.  This user variable (@pxref{User Variables}) is\nnot expected to be defined in any @file{Makefile}; it can be used by\nusers to pass extra flags to suit their needs.\n\n@item AM_MAKEINFOFLAGS\n@itemx AM_MAKEINFOHTMLFLAGS\nMaintainer flags passed to each @command{makeinfo} invocation.  Unlike\n@code{MAKEINFOFLAGS}, these variables are meant to be defined by\nmaintainers in @file{Makefile.am}.  @samp{$(AM_MAKEINFOFLAGS)} is\npassed to @code{makeinfo} when building @file{.info} files; and\n@samp{$(AM_MAKEINFOHTMLFLAGS)} is used when building @file{.html}\nfiles.\n\n@c Keep in sync with txinfo-many-output-formats.sh\nFor instance, the following setting can be used to obtain one single\n@file{.html} file per manual, without node separators.\n@example\nAM_MAKEINFOHTMLFLAGS = --no-headers --no-split\n@end example\n\n@code{AM_MAKEINFOHTMLFLAGS} defaults to @samp{$(AM_MAKEINFOFLAGS)}.\nThis means that defining @code{AM_MAKEINFOFLAGS} without defining\n@code{AM_MAKEINFOHTMLFLAGS} will impact builds of both @file{.info}\nand @file{.html} files.\n\n@item TEXI2DVI\nThe name of the command that converts a @file{.texi} file into a\n@file{.dvi} file.  This defaults to @samp{texi2dvi}, a script that ships\nwith the Texinfo package.\n\n@item TEXI2PDF\nThe name of the command that translates a @file{.texi} file into a\n@file{.pdf} file.  This defaults to @samp{$(TEXI2DVI) --pdf --batch}.\n\n@item DVIPS\nThe name of the command that builds a @file{.ps} file out of a\n@file{.dvi} file.  This defaults to @samp{dvips}.\n\n@item TEXINFO_TEX\nIf your package has Texinfo files in many directories, you can use the\nvariable @code{TEXINFO_TEX} to tell Automake where to find the canonical\n@file{texinfo.tex} for your package.  The value of this variable should\nbe the relative path from the current @file{Makefile.am} to\n@file{texinfo.tex}:\n\n@example\nTEXINFO_TEX = ../doc/texinfo.tex\n@end example\n@end vtable\n\n\n@node Man Pages\n@section Man Pages\n\n@cindex @code{_MANS} primary, defined\n@cindex @code{MANS} primary, defined\n@cindex Primary variable, @code{MANS}\n\n@vindex _MANS\n@vindex man_MANS\nA package can also include man pages (but see the GNU standards on this\nmatter, @ref{Man Pages, , , standards, The GNU Coding Standards}.)  Man\npages are declared using the @code{MANS} primary.  Generally the\n@code{man_MANS} variable is used.  Man pages are automatically installed in\nthe correct subdirectory of @code{mandir}, based on the file extension.\n\nFile extensions such as @file{.1c} are handled by looking for the valid\npart of the extension and using that to determine the correct\nsubdirectory of @code{mandir}.  Valid section names are the digits\n@samp{0} through @samp{9}, and the letters @samp{l} and @samp{n}.\n\nSometimes developers prefer to name a man page something like\n@file{foo.man} in the source, and then rename it to have the correct\nsuffix, for example @file{foo.1}, when installing the file.  Automake\nalso supports this mode.  For a valid section named @var{section},\nthere is a corresponding directory named @samp{man@var{section}dir},\nand a corresponding @code{_MANS} variable.  Files listed in such a\nvariable are installed in the indicated section.  If the file already\nhas a valid suffix, then it is installed as-is; otherwise the file\nsuffix is changed to match the section.\n\nFor instance, consider this example:\n@example\nman1_MANS = rename.man thesame.1 alsothesame.1c\n@end example\n\n@noindent\nIn this case, @file{rename.man} will be renamed to @file{rename.1} when\ninstalled, but the other files will keep their names.\n\n@cindex Target, @code{install-man}\n@cindex Option, @option{no-installman}\n@cindex @code{install-man} target\n@cindex @option{no-installman} option\n@opindex no-installman\n@trindex install-man\n\nBy default, man pages are installed by @samp{make install}.  However,\nsince the GNU project does not require man pages, many maintainers do\nnot expend effort to keep the man pages up to date.  In these cases, the\n@option{no-installman} option will prevent the man pages from being\ninstalled by default.  The user can still explicitly install them via\n@samp{make install-man}.\n\nFor fast installation, with many files it is preferable to use\n@samp{man@var{section}_MANS} over @samp{man_MANS} as well as files that\ndo not need to be renamed.\n\nMan pages are not currently considered to be source, because it is not\nuncommon for man pages to be automatically generated.  Therefore they\nare not automatically included in the distribution.  However, this can\nbe changed by use of the @code{dist_} prefix.  For instance here is\nhow to distribute and install the two man pages of GNU @command{cpio}\n(which includes both Texinfo documentation and man pages):\n\n@example\ndist_man_MANS = cpio.1 mt.1\n@end example\n\nThe @code{nobase_} prefix is meaningless for man pages and is\ndisallowed.\n\n@vindex notrans_\n@cindex @code{notrans_} prefix\n@cindex Man page renaming, avoiding\n@cindex Avoiding man page renaming\n\nExecutables and manpages may be renamed upon installation\n(@pxref{Renaming}).  For manpages this can be avoided by use of the\n@code{notrans_} prefix.  For instance, suppose an executable @samp{foo}\nallowing to access a library function @samp{foo} from the command line.\nThe way to avoid renaming of the @file{foo.3} manpage is:\n\n@example\nman_MANS = foo.1\nnotrans_man_MANS = foo.3\n@end example\n\n@cindex @code{notrans_} and @code{dist_} or @code{nodist_}\n@cindex @code{dist_} and @code{notrans_}\n@cindex @code{nodist_} and @code{notrans_}\n\n@samp{notrans_} must be specified first when used in conjunction with\neither @samp{dist_} or @samp{nodist_} (@pxref{Fine-grained Distribution\nControl}).  For instance:\n\n@example\nnotrans_dist_man3_MANS = bar.3\n@end example\n\n@node Install\n@chapter What Gets Installed\n\n@cindex Installation support\n@cindex @samp{make install} support\n\nNaturally, Automake handles the details of actually installing your\nprogram once it has been built.  All files named by the various\nprimaries are automatically installed in the appropriate places when the\nuser runs @samp{make install}.\n\n@menu\n* Basics of Installation::      What gets installed where\n* The Two Parts of Install::    Installing data and programs separately\n* Extending Installation::      Adding your own rules for installation\n* Staged Installs::             Installation in a temporary location\n* Install Rules for the User::  Useful additional rules\n@end menu\n\n@node Basics of Installation\n@section Basics of Installation\n\nA file named in a primary is installed by copying the built file into\nthe appropriate directory.  The base name of the file is used when\ninstalling.\n\n@example\nbin_PROGRAMS = hello subdir/goodbye\n@end example\n\nIn this example, both @samp{hello} and @samp{goodbye} will be installed\nin @samp{$(bindir)}.\n\nSometimes it is useful to avoid the basename step at install time.  For\ninstance, you might have a number of header files in subdirectories of\nthe source tree that are laid out precisely how you want to install\nthem.  In this situation you can use the @code{nobase_} prefix to\nsuppress the base name step.  For example:\n\n@example\nnobase_include_HEADERS = stdio.h sys/types.h\n@end example\n\n@noindent\nwill install @file{stdio.h} in @samp{$(includedir)} and @file{types.h}\nin @samp{$(includedir)/sys}.\n\nFor most file types, Automake will install multiple files at once, while\navoiding command line length issues (@pxref{Length Limitations}).  Since\nsome @command{install} programs will not install the same file twice in\none invocation, you may need to ensure that file lists are unique within\none variable such as @samp{nobase_include_HEADERS} above.\n\nYou should not rely on the order in which files listed in one variable\nare installed.  Likewise, to cater for parallel make, you should not\nrely on any particular file installation order even among different\nfile types (library dependencies are an exception here).\n\n\n@node The Two Parts of Install\n@section The Two Parts of Install\n\nAutomake generates separate @code{install-data} and @code{install-exec}\nrules, in case the installer is installing on multiple machines that\nshare directory structure---these targets allow the machine-independent\nparts to be installed only once.  @code{install-exec} installs\nplatform-dependent files, and @code{install-data} installs\nplatform-independent files.  The @code{install} target depends on both\nof these targets.  While Automake tries to automatically segregate\nobjects into the correct category, the @file{Makefile.am} author is, in\nthe end, responsible for making sure this is done correctly.\n@trindex install-data\n@trindex install-exec\n@trindex install\n@cindex Install, two parts of\n\nVariables using the standard directory prefixes @samp{data},\n@samp{info}, @samp{man}, @samp{include}, @samp{oldinclude},\n@samp{pkgdata}, or @samp{pkginclude} are installed by\n@code{install-data}.\n\nVariables using the standard directory prefixes @samp{bin},\n@samp{sbin}, @samp{libexec}, @samp{sysconf}, @samp{localstate},\n@samp{lib}, or @samp{pkglib} are installed by @code{install-exec}.\n\nFor instance, @code{data_DATA} files are installed by @code{install-data},\nwhile @code{bin_PROGRAMS} files are installed by @code{install-exec}.\n\nAny variable using a user-defined directory prefix with\n@samp{exec} in the name (e.g.,\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\n@code{myexecbin_PROGRAMS}) is installed by @code{install-exec}.  All\nother user-defined prefixes are installed by @code{install-data}.\n\n@node Extending Installation\n@section Extending Installation\n\nIt is possible to extend this mechanism by defining an\n@code{install-exec-local} or @code{install-data-local} rule.  If these\nrules exist, they will be run at @samp{make install} time.  These\nrules can do almost anything; care is required.\n@trindex install-exec-local\n@trindex install-data-local\n\nAutomake also supports two install hooks, @code{install-exec-hook} and\n@code{install-data-hook}.  These hooks are run after all other install\nrules of the appropriate type, exec or data, have completed.  So, for\ninstance, it is possible to perform post-installation modifications\nusing an install hook.  @xref{Extending}, for some examples.\n@cindex Install hook\n\n@node Staged Installs\n@section Staged Installs\n\n@vindex DESTDIR\nAutomake generates support for the @code{DESTDIR} variable in all\ninstall rules.  @code{DESTDIR} is used during the @samp{make install}\nstep to relocate install objects into a staging area.  Each object and\npath is prefixed with the value of @code{DESTDIR} before being copied\ninto the install area.  Here is an example of typical DESTDIR usage:\n\n@example\nmkdir /tmp/staging &&\nmake DESTDIR=/tmp/staging install\n@end example\n\nThe @command{mkdir} command avoids a security problem if the attacker\ncreates a symbolic link from @file{/tmp/staging} to a victim area;\nthen @command{make} places install objects in a directory tree built under\n@file{/tmp/staging}.  If @file{/gnu/bin/foo} and\n@file{/gnu/share/aclocal/foo.m4} are to be installed, the above command\nwould install @file{/tmp/staging/gnu/bin/foo} and\n@file{/tmp/staging/gnu/share/aclocal/foo.m4}.\n\nThis feature is commonly used to build install images and packages\n(@pxref{DESTDIR}).\n\nSupport for @code{DESTDIR} is implemented by coding it directly into\nthe install rules.  If your @file{Makefile.am} uses a local install\nrule (e.g., @code{install-exec-local}) or an install hook, then you\nmust write that code to respect @code{DESTDIR}.\n\n@xref{Makefile Conventions, , , standards, The GNU Coding Standards},\nfor another usage example.\n\n@node Install Rules for the User\n@section Install Rules for the User\n\nAutomake also generates rules for targets @code{uninstall},\n@code{installdirs}, and @code{install-strip}.\n@trindex uninstall\n@trindex installdirs\n@trindex install-strip\n\nAutomake supports @code{uninstall-local} and @code{uninstall-hook}.\nThere is no notion of separate uninstalls for ``exec'' and ``data'', as\nthese features would not provide additional functionality.\n\nNote that @code{uninstall} is not meant as a replacement for a real\npackaging tool.\n\n\n@node Clean\n@chapter What Gets Cleaned\n\n@cindex @samp{make clean} support\n\nThe GNU Makefile Standards specify a number of different clean rules.\n@xref{Standard Targets, , Standard Targets for Users, standards,\nThe GNU Coding Standards}.\n\nGenerally the files that can be cleaned are determined automatically by\nAutomake.  Of course, Automake also recognizes some variables that can\nbe defined to specify additional files to clean.  These variables are\n@code{MOSTLYCLEANFILES}, @code{CLEANFILES}, @code{DISTCLEANFILES}, and\n@code{MAINTAINERCLEANFILES}.\n@vindex MOSTLYCLEANFILES\n@vindex CLEANFILES\n@vindex DISTCLEANFILES\n@vindex MAINTAINERCLEANFILES\n\n@trindex mostlyclean-local\n@trindex clean-local\n@trindex distclean-local\n@trindex maintainer-clean-local\nWhen cleaning involves more than deleting some hard-coded list of\nfiles, it is also possible to supplement the cleaning rules with your\nown commands.  Simply define a rule for any of the\n@code{mostlyclean-local}, @code{clean-local}, @code{distclean-local},\nor @code{maintainer-clean-local} targets (@pxref{Extending}).  A common\ncase is deleting a directory, for instance, a directory created by the\ntest suite:\n\n@example\nclean-local:\n        -rm -rf testSubDir\n@end example\n\nSince @command{make} allows only one set of rules for a given target,\na more extensible way of writing this is to use a separate target\nlisted as a dependency:\n\n@example\nclean-local: clean-local-check\n.PHONY: clean-local-check\nclean-local-check:\n        -rm -rf testSubDir\n@end example\n\nAs the GNU Standards aren't always explicit as to which files should\nbe removed by which rule, we've adopted a heuristic that we believe\nwas first formulated by Fran@,{c}ois Pinard:\n\n@itemize @bullet\n@item\nIf @command{make} built it, and it is commonly something that one would\nwant to rebuild (for instance, a @file{.o} file), then\n@code{mostlyclean} should delete it.\n\n@item\nOtherwise, if @command{make} built it, then @code{clean} should delete it.\n\n@item\nIf @command{configure} built it, then @code{distclean} should delete it.\n\n@item\nIf the maintainer built it (for instance, a @file{.info} file), then\n@code{maintainer-clean} should delete it.  However\n@code{maintainer-clean} should not delete anything that needs to exist\nin order to run @samp{./configure && make}.\n@end itemize\n\nWe recommend that you follow this same set of heuristics in your\n@file{Makefile.am}.\n\n\n@node Dist\n@chapter What Goes in a Distribution\n\n@menu\n* Basics of Distribution::      Files distributed by default\n* Fine-grained Distribution Control::  @code{dist_} and @code{nodist_} prefixes\n* The dist Hook::               A target for last-minute distribution changes\n* Checking the Distribution::   @samp{make distcheck} explained\n* The Types of Distributions::  A variety of formats and compression methods\n@end menu\n\n@node Basics of Distribution\n@section Basics of Distribution\n\n@cindex @samp{make dist}\n\n@vindex PACKAGE\n@vindex VERSION\n@trindex dist\nThe @code{dist} rule in the generated @file{Makefile.in} can be used\nto generate a gzipped @code{tar} file and other flavors of archive for\ndistribution.  The file is named based on the @code{PACKAGE} and\n@code{VERSION} variables automatically defined by either the\n@code{AC_INIT} invocation or by a @emph{deprecated} two-arguments\ninvocation of the @code{AM_INIT_AUTOMAKE} macro (see @ref{Public Macros}\nfor how these variables get their values, from either defaults or explicit\nvalues---it's slightly trickier than one would expect).\nMore precisely the gzipped @code{tar} file is named\n@samp{$@{PACKAGE@}-$@{VERSION@}.tar.gz}.\n\n@vindex GZIP_ENV\nYou can use the @command{make} variable @code{GZIP_ENV} to control how gzip\nis run.  The default setting is @option{--best}.\n\n@c See automake #9822.\n@vindex TAR\nYou can set the environment variable @code{TAR} to override the tar\nprogram used; it defaults to @code{tar}.\n\n@cindex @code{m4_include}, distribution\n@cindex @code{include}, distribution\n@acindex m4_include\n@cmindex include\nFor the most part, the files to distribute are automatically found by\nAutomake: all source files are automatically included in a distribution,\nas are all @file{Makefile.am} and @file{Makefile.in} files.  Automake also\nhas a built-in list of commonly used files that are automatically\nincluded if they are found in the current directory (either physically,\nor as the target of a @file{Makefile.am} rule); this list is printed by\n@samp{automake --help}.  Note that some files in this list are actually\ndistributed only if other certain conditions hold (for example,\n@c Keep in sync with autodist-config-headers.sh\nthe @file{config.h.top} and @file{config.h.bot} files are automatically\ndistributed only if, e.g., @samp{AC_CONFIG_HEADERS([config.h])} is used\nin @file{configure.ac}).  Also, files that are read by @command{configure}\n(i.e.@: the source files corresponding to the files specified in various\nAutoconf macros such as @code{AC_CONFIG_FILES} and siblings) are\nautomatically distributed.  Files included in a @file{Makefile.am} (using\n@code{include}) or in @file{configure.ac} (using @code{m4_include}), and\nhelper scripts installed with @samp{automake --add-missing} are also\ndistributed.\n\n@vindex EXTRA_DIST\nStill, sometimes there are files that must be distributed, but which\nare not covered in the automatic rules.  These files should be listed in\nthe @code{EXTRA_DIST} variable.  You can mention files from\nsubdirectories in @code{EXTRA_DIST}.\n\nYou can also mention a directory in @code{EXTRA_DIST}; in this case the\nentire directory will be recursively copied into the distribution.\nPlease note that this will also copy @emph{everything} in the directory,\nincluding, e.g., Subversion's @file{.svn} private directories or CVS/RCS\nversion control files; thus we recommend against using this feature\nas-is.  However, you can use the @code{dist-hook} feature to\nameliorate the problem; @pxref{The dist Hook}.\n\n@vindex SUBDIRS\n@vindex DIST_SUBDIRS\nIf you define @code{SUBDIRS}, Automake will recursively include the\nsubdirectories in the distribution.  If @code{SUBDIRS} is defined\nconditionally (@pxref{Conditionals}), Automake will normally include\nall directories that could possibly appear in @code{SUBDIRS} in the\ndistribution.  If you need to specify the set of directories\nconditionally, you can set the variable @code{DIST_SUBDIRS} to the\nexact list of subdirectories to include in the distribution\n(@pxref{Conditional Subdirectories}).\n\n\n@node Fine-grained Distribution Control\n@section Fine-grained Distribution Control\n\n@vindex dist_\n@vindex nodist_\nSometimes you need tighter control over what does @emph{not} go into the\ndistribution; for instance, you might have source files that are\ngenerated and that you do not want to distribute.  In this case\nAutomake gives fine-grained control using the @code{dist} and\n@code{nodist} prefixes.  Any primary or @code{_SOURCES} variable can be\nprefixed with @code{dist_} to add the listed files to the distribution.\nSimilarly, @code{nodist_} can be used to omit the files from the\ndistribution.\n\nAs an example, here is how you would cause some data to be distributed\nwhile leaving some source code out of the distribution:\n\n@example\ndist_data_DATA = distribute-this\nbin_PROGRAMS = foo\nnodist_foo_SOURCES = do-not-distribute.c\n@end example\n\n@node The dist Hook\n@section The dist Hook\n\n@trindex dist-hook\n\nOccasionally it is useful to be able to change the distribution before\nit is packaged up.  If the @code{dist-hook} rule exists, it is run\nafter the distribution directory is filled, but before the actual\ndistribution archives are created.  One way to use this is for\nremoving unnecessary files that get recursively included by specifying\na directory in @code{EXTRA_DIST}:\n\n@example\nEXTRA_DIST = doc\ndist-hook:\n        chmod -R u+w $(distdir)/doc\n        rm -rf `find $(distdir)/doc -type d -name .svn`\n@end example\n\n@c The caveats described here should be documented in 'disthook.sh'.\n@noindent\nNote that the @code{dist-hook} recipe shouldn't assume that the regular\nfiles in the distribution directory are writable; this might not be the\ncase if one is packaging from a read-only source tree, or when a\n@code{make distcheck} is being done.  For similar reasons, the recipe\nshouldn't assume that the subdirectories put into the distribution\ndirectory as an effect of having them listed in @code{EXTRA_DIST} are\nwritable.  So, if the @code{dist-hook} recipe wants to modify the\ncontent of an existing file (or @code{EXTRA_DIST} subdirectory) in the\ndistribution directory, it should explicitly to make it writable first:\n\n@example\nEXTRA_DIST = README doc\ndist-hook:\n        chmod u+w $(distdir)/README $(distdir)/doc\n        echo \"Distribution date: `date`\" >> $(distdir)/README\n        rm -f $(distdir)/doc/HACKING\n@end example\n\n@vindex distdir\n@vindex top_distdir\nTwo variables that come handy when writing @code{dist-hook} rules are\n@samp{$(distdir)} and @samp{$(top_distdir)}.\n\n@samp{$(distdir)} points to the directory where the @code{dist} rule\nwill copy files from the current directory before creating the\ntarball.  If you are at the top-level directory, then @samp{distdir =\n$(PACKAGE)-$(VERSION)}.  When used from subdirectory named\n@file{foo/}, then @samp{distdir = ../$(PACKAGE)-$(VERSION)/foo}.\n@samp{$(distdir)} can be a relative or absolute path, do not assume\nany form.\n\n@samp{$(top_distdir)} always points to the root directory of the\ndistributed tree.  At the top-level it's equal to @samp{$(distdir)}.\nIn the @file{foo/} subdirectory\n@samp{top_distdir = ../$(PACKAGE)-$(VERSION)}.\n@samp{$(top_distdir)} too can be a relative or absolute path.\n\nNote that when packages are nested using @code{AC_CONFIG_SUBDIRS}\n(@pxref{Subpackages}), then @samp{$(distdir)} and\n@samp{$(top_distdir)} are relative to the package where @samp{make\ndist} was run, not to any sub-packages involved.\n\n@node Checking the Distribution\n@section Checking the Distribution\n\n@cindex @samp{make distcheck}\n@trindex distcheck\nAutomake also generates a @code{distcheck} rule that can be of help\nto ensure that a given distribution will actually work.  Simplifying\na bit, we can say this rule first makes a distribution, and then,\n@emph{operating from it}, takes the following steps (in this order):\n@itemize\n@item\ntries to do a @code{VPATH} build (@pxref{VPATH Builds}), with the\n@code{srcdir} and all its content made @emph{read-only};\n@item\ntries to make the printable documentation, if any (with @command{make dvi}),\n@item\nruns the test suite (with @command{make check}) on this fresh build;\n@item\ninstalls the package in a temporary directory (with @command{make\ninstall}), and runs the test suite on the resulting installation\n(with @command{make installcheck});\n@item\nchecks that the package can be correctly uninstalled (by @command{make\nuninstall}) and cleaned (by @code{make distclean});\n@item\nfinally, makes another tarball to ensure the distribution is\nself-contained.\n@end itemize\n\nAll of these actions are performed in a temporary directory.  The\nexact location and the exact structure of such a directory (where the\nread-only sources are placed, how the temporary build and install\ndirectories are named and how deeply they are nested, etc.) is to be\nconsidered an implementation detail, which can change at any time; so\ndo not rely on it.\n\n@vindex AM_DISTCHECK_CONFIGURE_FLAGS\n@vindex DISTCHECK_CONFIGURE_FLAGS\n@subheading DISTCHECK_CONFIGURE_FLAGS\nBuilding the package involves running @samp{./configure}.  If you need\nto supply additional flags to @command{configure}, define them in the\n@code{AM_DISTCHECK_CONFIGURE_FLAGS} variable in your top-level\n@file{Makefile.am}.  The user can still extend or override the flags\nprovided there by defining the @code{DISTCHECK_CONFIGURE_FLAGS} variable,\non the command line when invoking @command{make}.\n@c See automake bug#14991 for more details about how the following holds.\nIt's worth noting that @command{make distcheck} needs complete control\nover the @command{configure} options @option{--srcdir} and\n@option{--prefix}, so those options cannot be overridden by\n@code{AM_DISTCHECK_CONFIGURE_FLAGS} nor by\n@code{DISTCHECK_CONFIGURE_FLAGS}.\n\nAlso note that developers are encouraged to strive to make their code\nbuildable without requiring any special configure option; thus, in\ngeneral, you shouldn't define @code{AM_DISTCHECK_CONFIGURE_FLAGS}.\nHowever, there might be few scenarios in which the use of this variable\nis justified.\nGNU @command{m4} offers an example.  GNU @command{m4} configures by\ndefault with its experimental and seldom used \"changeword\" feature\ndisabled; so in this case it is useful to have @command{make distcheck}\nrun configure with the @option{--with-changeword} option, to ensure that\nthe code for changeword support still compiles correctly.\nGNU @command{m4} also employs the @code{AM_DISTCHECK_CONFIGURE_FLAGS}\nvariable to stress-test the use of @option{--program-prefix=g}, since at\none point the @command{m4} build system had a bug where @command{make\ninstallcheck} was wrongly assuming it could blindly test \"@command{m4}\",\nrather than the just-installed \"@command{gm4}\".\n\n@trindex dvi\n@subheading dvi and distcheck\n@cindex @code{eps} images\nOrdinarily, @command{make distcheck} runs @command{make dvi}.  It does\nnothing if the distribution contains no Texinfo sources.  If the\ndistribution does contain a Texinfo manual, by default the @code{dvi}\ntarget will run @TeX{} to make sure it can be successfully processed\n(@pxref{Texinfo}).\n\nHowever, you may wish to test the manual by producing @code{pdf}\n(e.g., if your manual uses images in formats other than @code{eps}),\n@code{html} (if you don't have @TeX{} at all), some other format, or\njust skip the test entirely (not recommended).  You can change the\ntarget that is run by setting the variable\n@code{AM_DISTCHECK_DVI_TARGET} in your @code{Makefile.am}; for\nexample,\n\n@example\nAM_DISTCHECK_DVI_TARGET = pdf\n@end example\n\nTo make @code{dvi} into a do-nothing target, see the example for\n@code{EMPTY_AUTOMAKE_TARGETS} in @ref{Third-Party Makefiles}.\n\n@trindex distcheck-hook\n@subheading distcheck-hook\nIf the @code{distcheck-hook} rule is defined in your top-level\n@file{Makefile.am}, then it will be invoked by @code{distcheck} after\nthe new distribution has been unpacked, but before the unpacked copy\nis configured and built.  Your @code{distcheck-hook} can do almost\nanything, though as always caution is advised.  Generally this hook is\nused to check for potential distribution errors not caught by the\nstandard mechanism.  Note that @code{distcheck-hook} as well as\n@code{AM_DISTCHECK_CONFIGURE_FLAGS} and @code{DISTCHECK_CONFIGURE_FLAGS}\nare not honored in a subpackage @file{Makefile.am}, but the flags from\n@code{AM_DISTCHECK_CONFIGURE_FLAGS} and @code{DISTCHECK_CONFIGURE_FLAGS}\nare passed down to the @command{configure} script of the subpackage.\n\n@cindex @samp{make distcleancheck}\n@trindex distcleancheck\n@vindex DISTCLEANFILES\n@vindex distcleancheck_listfiles\n\n@subheading distcleancheck\nSpeaking of potential distribution errors, @code{distcheck} also\nensures that the @code{distclean} rule actually removes all built\nfiles.  This is done by running @samp{make distcleancheck} at the end of\nthe @code{VPATH} build.  By default, @code{distcleancheck} will run\n@code{distclean} and then make sure the build tree has been emptied by\nrunning @samp{$(distcleancheck_listfiles)}.  Usually this check will\nfind generated files that you forgot to add to the @code{DISTCLEANFILES}\nvariable (@pxref{Clean}).\n\nThe @code{distcleancheck} behavior should be OK for most packages,\notherwise you have the possibility to override the definition of\neither the @code{distcleancheck} rule, or the\n@samp{$(distcleancheck_listfiles)} variable.  For instance, to disable\n@code{distcleancheck} completely, add the following rule to your\ntop-level @file{Makefile.am}:\n\n@example\ndistcleancheck:\n        @@:\n@end example\n\nIf you want @code{distcleancheck} to ignore built files that have not\nbeen cleaned because they are also part of the distribution, add the\nfollowing definition instead:\n\n@c Keep in sync with distcleancheck.sh\n@example\ndistcleancheck_listfiles = \\\n  find . -type f -exec sh -c 'test -f $(srcdir)/$$1 || echo $$1' \\\n       sh '@{@}' ';'\n@end example\n\nThe above definition is not the default because it's usually an error if\nyour Makefiles cause some distributed files to be rebuilt when the user\nbuilds the package.  (Think about the user missing the tool required to\nbuild the file; or if the required tool is built by your package,\nconsider the cross-compilation case where it can't be run.)  There is\nan entry in the FAQ about this (@pxref{Errors with distclean}); make\nsure you read it before playing with @code{distcleancheck_listfiles}.\n\n@cindex @samp{make distuninstallcheck}\n@trindex distuninstallcheck\n@vindex distuninstallcheck_listfiles\n\n@subheading distuninstallcheck\n@code{distcheck} also checks that the @code{uninstall} rule works\nproperly, both for ordinary and @code{DESTDIR} builds.  It does this\nby invoking @samp{make uninstall}, and then it checks the install tree\nto see if any files are left over.  This check will make sure that you\ncorrectly coded your @code{uninstall}-related rules.\n\nBy default, the checking is done by the @code{distuninstallcheck} rule,\nand the list of files in the install tree is generated by\n@samp{$(distuninstallcheck_listfiles)} (this is a variable whose value is\na shell command to run that prints the list of files to stdout).\n\nEither of these can be overridden to modify the behavior of\n@code{distcheck}.  For instance, to disable this check completely, you\nwould write:\n\n@example\ndistuninstallcheck:\n        @@:\n@end example\n\n@node The Types of Distributions\n@section The Types of Distributions\n\nAutomake generates rules to provide archives of the project for\ndistributions in various formats.  Their targets are:\n\n@table @asis\n@item @code{dist-gzip}\nGenerate a @samp{gzip} tar archive of the distribution.  This is the\nonly format enabled by default.\n@trindex dist-gzip\n\n@vindex BZIP2\n@item @code{dist-bzip2}\nGenerate a @samp{bzip2} tar archive of the distribution.  bzip2 archives\nare frequently smaller than gzipped archives.\nBy default, this rule makes @samp{bzip2} use a compression option of @option{-9}.\nTo make it use a different one, set the @env{BZIP2} environment variable.\nFor example, @samp{make dist-bzip2 BZIP2=-7}.\n@trindex dist-bzip2\n\n@item @code{dist-lzip}\nGenerate an @samp{lzip} tar archive of the distribution.  @command{lzip}\narchives are frequently smaller than @command{bzip2}-compressed archives.\n@trindex dist-lzip\n\n@vindex XZ_OPT\n@item @code{dist-xz}\nGenerate an @samp{xz} tar archive of the distribution.  @command{xz}\narchives are frequently smaller than @command{bzip2}-compressed archives.\nBy default, this rule makes @samp{xz} use a compression option of\n@option{-e}.  To make it use a different one, set the @env{XZ_OPT}\nenvironment variable.  For example, run this command to use the\ndefault compression ratio, but with a progress indicator:\n@samp{make dist-xz XZ_OPT=-ve}.\n@trindex dist-xz\n\n@item @code{dist-zip}\nGenerate a @samp{zip} archive of the distribution.\n@trindex dist-zip\n\n@item @code{dist-tarZ}\nGenerate a tar archive of the distribution, compressed with the\nhistorical (and obsolescent) program @command{compress}.  This\noption is deprecated, and it and the corresponding functionality\nwill be removed altogether in Automake 2.0.\n@trindex dist-tarZ\n\n@item @code{dist-shar}\nGenerate a @samp{shar} archive of the distribution.  This format\narchive is obsolescent, and use of this option is deprecated.\nIt and the corresponding functionality will be removed altogether\nin Automake 2.0.\n@trindex dist-shar\n\n@vindex ZSTD_OPT\n@vindex ZSTD_CLEVEL\n@item @code{dist-zstd}\nGenerate a @samp{zstd} tar archive of the distribution.  By default, this\nrule makes @samp{zstd} use a compression option of @option{-19}.  To\nmake it use a different one, set the @env{ZSTD_OPT} environment variable.\nFor example, run this command to use the default compression ratio,\nbut with a progress indicator: @samp{make dist-zstd ZSTD_OPT=-19v}.\nHowever, note that for compatibility with zstd itself, you may instead set the @env{ZSTD_CLEVEL} environment variable, in which case, any @env{ZSTD_OPT} setting is ignored.\n@trindex dist-zstd\n\n@end table\n\nThe rule @code{dist} (and its historical synonym @code{dist-all})\nwill create archives in all the enabled formats (@pxref{List of\nAutomake options} for how to change this list).  By default, only\nthe @code{dist-gzip} target is hooked to @code{dist}.\n\n\n@node Tests\n@chapter Support for test suites\n\n@cindex Test suites\n@cindex @code{make check}\n@trindex check\n\nAutomake can generate code to handle two kinds of test suites.  One is\nbased on integration with the @command{dejagnu} framework.  The other\n(and most used) form is based on the use of generic test scripts, and\nits activation is triggered by the definition of the special @code{TESTS}\nvariable.  This second form allows for various degrees of sophistication\nand customization; in particular, it allows for concurrent execution\nof test scripts, use of established test protocols such as TAP, and\ndefinition of custom test drivers and test runners.\n\n@noindent\nIn either case, the testsuite is invoked via @samp{make check}.\n\n@menu\n* Generalities about Testing::  Concepts and terminology about testing\n* Simple Tests::                Listing test scripts in @code{TESTS}\n* Custom Test Drivers::         Writing and using custom test drivers\n* Using the TAP test protocol:: Integrating test scripts that use the TAP protocol\n* DejaGnu Tests::               Interfacing with the @command{dejagnu} testing framework\n* Install Tests::               Running tests on installed packages\n@end menu\n\n@node Generalities about Testing\n@section Generalities about Testing\n\nThe purpose of testing is to determine whether a program or system behaves\nas expected (e.g., known inputs produce the expected outputs, error\nconditions are correctly handled or reported, and older bugs do not\nresurface).\n\n@cindex test case\nThe minimal unit of testing is usually called @emph{test case}, or simply\n@emph{test}.  How a test case is defined or delimited, and even what\nexactly @emph{constitutes} a test case, depends heavily on the testing\nparadigm and/or framework in use, so we won't attempt any more precise\ndefinition.  The set of the test cases for a given program or system\nconstitutes its @emph{testsuite}.\n\n@cindex test harness\n@cindex testsuite harness\nA @emph{test harness} (also @emph{testsuite harness}) is a program or\nsoftware component that executes all (or part of) the defined test cases,\nanalyzes their outcomes, and reports or registers these outcomes\nappropriately.  Again, the details of how this is accomplished (and how\nthe developer and user can influence it or interface with it) varies\nwildly, and we'll attempt no precise definition.\n\n@cindex test pass\n@cindex test failure\nA test is said to @emph{pass} when it can determine that the condition or\nbehaviour it means to verify holds, and is said to @emph{fail} when it can\ndetermine that such condition of behaviour does @emph{not} hold.\n\n@cindex test skip\nSometimes, tests can rely on non-portable tools or prerequisites, or\nsimply make no sense on a given system (for example, a test checking a\nWindows-specific feature makes no sense on a GNU/Linux system).  In this\ncase, accordingly to the definition above, the tests can neither be\nconsidered passed nor failed; instead, they are @emph{skipped}- --i.e.,\nthey are not run, or their result is anyway ignored for what concerns\nthe count of failures and successes.  Skips are usually explicitly\nreported though, so that the user will be aware that not all of the\ntestsuite has really run.\n\n@cindex xfail\n@cindex expected failure\n@cindex expected test failure\n@cindex xpass\n@cindex unexpected pass\n@cindex unexpected test pass\nIt's not uncommon, especially during early development stages, that some\ntests fail for known reasons, and that the developer doesn't want to\ntackle these failures immediately (this is especially true when the\nfailing tests deal with corner cases).  In this situation, the better\npolicy is to declare that each of those failures is an @emph{expected\nfailure} (or @emph{xfail}).  In case a test that is expected to fail ends\nup passing instead, many testing environments will flag the result as a\nspecial kind of failure called @emph{unexpected pass} (or @emph{xpass}).\n\n@cindex hard error\n@cindex Distinction between errors and failures in testsuites\nMany testing environments and frameworks distinguish between test failures\nand hard errors.  As we've seen, a test failure happens when some invariant\nor expected behaviour of the software under test is not met.  A @emph{hard\nerror} happens when e.g., the set-up of a test case scenario fails, or when\nsome other unexpected or highly undesirable condition is encountered (for\nexample, the program under test experiences a segmentation fault).\n\n@node Simple Tests\n@section Simple Tests\n\n@menu\n* Scripts-based Testsuites::    Automake-specific concepts and terminology\n* Serial Test Harness::         Older (and discouraged) serial test harness\n* Parallel Test Harness::       Generic concurrent test harness\n@end menu\n\n@node Scripts-based Testsuites\n@subsection Scripts-based Testsuites\n\nIf the special variable @code{TESTS} is defined, its value is taken to be\na list of programs or scripts to run in order to do the testing.  Under\nthe appropriate circumstances, it's possible for @code{TESTS} to list\nalso data files to be passed to one or more test scripts defined by\ndifferent means (the so-called ``log compilers'', @pxref{Parallel Test\nHarness}).\n\nTest scripts can be executed serially or concurrently.  Automake supports\nboth these kinds of test execution, with the parallel test harness being\nthe default.  The concurrent test harness relies on the concurrence\ncapabilities (if any) offered by the underlying @command{make}\nimplementation, and can thus only be as good as those are.\n\nBy default, only the exit statuses of the test scripts are considered when\ndetermining the testsuite outcome.  But Automake allows also the use of\nmore complex test protocols, either standard (@pxref{Using the TAP test\nprotocol}) or custom (@pxref{Custom Test Drivers}).  You can't\nenable such protocols when the serial harness is used, though.\nIn the rest of this section we are going to concentrate mostly on\nprotocol-less tests, since we cover test protocols in a later section\n(again, @pxref{Custom Test Drivers}).\n\n@cindex Exit status 77, special interpretation\n@cindex Exit status 99, special interpretation\nWhen no test protocol is in use, an exit status of 0 from a test script will\ndenote a success, an exit status of 77 a skipped test, an exit status of 99\na hard error, and any other exit status will denote a failure.\n\n@cindex Tests, expected failure\n@cindex Expected test failure\n@vindex XFAIL_TESTS\n@vindex DISABLE_HARD_ERRORS\n@cindex Disabling hard errors\nYou may define the variable @code{XFAIL_TESTS} to a list of tests\n(usually a subset of @code{TESTS}) that are expected to fail; this will\neffectively reverse the result of those tests (with the provision that\nskips and hard errors remain untouched).  You may also instruct the\ntestsuite harness to treat hard errors like simple failures, by defining\nthe @code{DISABLE_HARD_ERRORS} make variable to a nonempty value.\n\nNote however that, for tests based on more complex test protocols,\nthe exact effects of @code{XFAIL_TESTS} and @code{DISABLE_HARD_ERRORS}\nmight change, or they might even have no effect at all (for example,\n@c Keep this in sync with tap-no-disable-hard-errors.sh\nin tests using TAP, there is no way to disable hard errors, and the\n@code{DISABLE_HARD_ERRORS} variable has no effect on them).\n\n@anchor{Testsuite progress on console}\n@cindex Testsuite progress on console\nThe result of each test case run by the scripts in @code{TESTS} will be\nprinted on standard output, along with the test name.  For test protocols\nthat allow more test cases per test script (such as TAP), a number,\nidentifier and/or brief description specific for the single test case is\nexpected to be printed in addition to the name of the test script.  The\npossible results (whose meanings should be clear from the previous\n@ref{Generalities about Testing}) are @code{PASS}, @code{FAIL},\n@code{SKIP}, @code{XFAIL}, @code{XPASS} and @code{ERROR}.  Here is an\nexample of output from a hypothetical testsuite that uses both plain\nand TAP tests:\n@c Keep in sync with tap-doc.sh\n@example\nPASS: foo.sh\nPASS: zardoz.tap 1 - Daemon started\nPASS: zardoz.tap 2 - Daemon responding\nSKIP: zardoz.tap 3 - Daemon uses /proc # SKIP /proc is not mounted\nPASS: zardoz.tap 4 - Daemon stopped\nSKIP: bar.sh\nPASS: mu.tap 1\nXFAIL: mu.tap 2 # TODO frobnication not yet implemented\n@end example\n\n@noindent\nA testsuite summary (expected to report at least the number of run,\nskipped and failed tests) will be printed at the end of the testsuite\nrun.  By default, the first line of the summary has the form:\n\n@example\nTestsuite summary for @var{package-string}\n@end example\n\n@c See automake bug#11745.\n@vindex AM_TESTSUITE_SUMMARY_HEADER\n@noindent\nwhere @var{package-string} is the name and version of the package.  If\nyou have several independent test suites for different parts of the\npackage, though, it can be misleading for each suite to imply it is\nfor the whole package.  Or, in complex projects, you may wish to add\nthe current directory or other information to the testsuite header\nline.  So you can override the @samp{ for @var{package-string}} suffix\non that line by setting the @code{AM_TESTSUITE_SUMMARY_HEADER}\nvariable.  The value of this variable is used unquoted in a shell echo\ncommand, so you must include any necessary quotes.  For example, the\ndefault value is\n\n@example\nAM_TESTSUITE_SUMMARY_HEADER = ' for $(PACKAGE_STRING)'\n@end example\n\n@noindent\nincluding the double quotes (interpreted by the shell) and the leading\nspace (since the value is output directly after the @samp{Testsuite\nsummary}).  The @code{$(PACKAGE_STRING)} is substituted by @code{make}.\n\n@anchor{Simple tests and color-tests}\n@vindex AM_COLOR_TESTS\n@cindex Colorized testsuite output\nIf the standard output is connected to a capable terminal, then the test\nresults and the summary are colored appropriately.  The developer and the\nuser can disable colored output by setting the @command{make} variable\n@samp{AM_COLOR_TESTS=no}; the user can in addition force colored output\neven without a connecting terminal with @samp{AM_COLOR_TESTS=always}.\nIt's also worth noting that some @command{make} implementations,\nwhen used in parallel mode, have slightly different semantics\n(@pxref{Parallel make,,, autoconf, The Autoconf Manual}), which can\nbreak the automatic detection of a connection to a capable terminal.\nIf this is the case, the user will have to resort to the use of\n@samp{AM_COLOR_TESTS=always} in order to have the testsuite output\ncolorized.\n\nTest programs that need data files should look for them in @code{srcdir}\n(which is both a make variable and an environment variable made available\nto the tests), so that they work when building in a separate directory\n(@pxref{Build Directories, , Build Directories , autoconf,\nThe Autoconf Manual}), and in particular for the @code{distcheck} rule\n(@pxref{Checking the Distribution}).\n\n@vindex TESTS\n@vindex TESTS_ENVIRONMENT\n@vindex AM_TESTS_ENVIRONMENT\nThe @code{AM_TESTS_ENVIRONMENT} and @code{TESTS_ENVIRONMENT} variables can\nbe used to run initialization code and set environment variables for the\ntest scripts.  The former variable is developer-reserved, and can be\ndefined in the @file{Makefile.am}, while the latter is reserved for the\nuser, which can employ it to extend or override the settings in the\nformer; for this to work portably, however, the contents of a non-empty\n@code{AM_TESTS_ENVIRONMENT} @emph{must} be terminated by a semicolon.\n\n@vindex AM_TESTS_FD_REDIRECT\nThe @code{AM_TESTS_FD_REDIRECT} variable can be used to define file\ndescriptor redirections for the test scripts.  One might think that\n@code{AM_TESTS_ENVIRONMENT} could be used for this purpose, but experience\nhas shown that doing so portably is practically impossible.  The main\nhurdle is constituted by Korn shells, which usually set the close-on-exec\nflag on file descriptors opened with the @command{exec} builtin, thus\nrendering an idiom like @code{AM_TESTS_ENVIRONMENT = exec 9>&2;}\nineffectual.  This issue also affects some Bourne shells, such as the\nHP-UX's @command{/bin/sh},\n\n@c Keep in sync with tests-environment-backcompat.sh\n@example\nAM_TESTS_ENVIRONMENT = \\\n## Some environment initializations are kept in a separate shell\n## file 'tests-env.sh', which can make it easier to also run tests\n## from the command line.\n  . $(srcdir)/tests-env.sh; \\\n## On Solaris, prefer more POSIX-compliant versions of the standard\n## tools by default.\n  if test -d /usr/xpg4/bin; then \\\n    PATH=/usr/xpg4/bin:$$PATH; export PATH; \\\n  fi;\n@c $$ restore font-lock\n## With this, the test scripts will be able to print diagnostic\n## messages to the original standard error stream, even if the test\n## driver redirects the stderr of the test scripts to a log file\n## before executing them.\nAM_TESTS_FD_REDIRECT = 9>&2\n@end example\n\n@noindent\nNote however that @code{AM_TESTS_ENVIRONMENT} is, for historical and\nimplementation reasons, @emph{not} supported by the serial harness\n(@pxref{Serial Test Harness}).\n\nAutomake ensures that each file listed in @code{TESTS} is built before\nit is run; you can list both source and derived programs (or scripts)\nin @code{TESTS}; the generated rule will look both in @code{srcdir} and\n'@file{..}'.  For instance, you might want to run a C program as a test.\nTo do this you would list its name in @code{TESTS} and also in\n@code{check_PROGRAMS}, and then specify it as you would any other\nprogram.\n\nPrograms listed in @code{check_PROGRAMS} (and @code{check_LIBRARIES},\n@code{check_LTLIBRARIES}...) are only built during @code{make check},\nnot during @code{make all}.  You should list there any program needed\nby your tests that does not need to be built by @code{make all}.  Note\nthat @code{check_PROGRAMS} are @emph{not} automatically added to\n@code{TESTS} because @code{check_PROGRAMS} usually lists programs used\nby the tests, not the tests themselves.  Of course you can set\n@code{TESTS = $(check_PROGRAMS)} if all your programs are test cases.\n\n@node Serial Test Harness\n@subsection Older (and discouraged) serial test harness\n@cindex @option{serial-tests}, Using\n\nFirst, note that today the use of this harness is strongly discouraged in\nfavour of the parallel test harness (@pxref{Parallel Test Harness}).\nStill, there are a @emph{few} situations when the advantages offered by\nthe parallel harness are irrelevant, and when test concurrency can\neven cause tricky problems.  In those cases, it might make sense to\nstill use the serial harness, for simplicity and reliability (we still\nsuggest trying to give the parallel harness a shot though).\n\nThe serial test harness is enabled by the Automake option\n@option{serial-tests}. It operates by simply running the tests serially,\none at the time, without any I/O redirection.  It's up to the user to\nimplement logging of tests' output, if that's required or desired.\n\nFor historical and implementation reasons, the @code{AM_TESTS_ENVIRONMENT}\nvariable is @emph{not} supported by this harness (it will be silently\nignored if defined); only @code{TESTS_ENVIRONMENT} is, and it is to be\nconsidered a developer-reserved variable.  This is done so that, when\nusing the serial harness, @code{TESTS_ENVIRONMENT} can be defined to an\ninvocation of an interpreter through which the tests are to be run.\nFor instance, the following setup may be used to run tests with Perl:\n\n@example\nTESTS_ENVIRONMENT = $(PERL) -Mstrict -w\nTESTS = foo.pl bar.pl baz.pl\n@end example\n\n@noindent\nIt's important to note that the use of @code{TESTS_ENVIRONMENT} endorsed\nhere would be @emph{invalid} with the parallel harness.  That harness\nprovides a more elegant way to achieve the same effect, with the further\nbenefit of freeing the @code{TESTS_ENVIRONMENT} variable for the user\n(@pxref{Parallel Test Harness}).\n\nAnother, less serious limitation of the serial harness is that it doesn't\nreally distinguish between simple failures and hard errors; this is\ndue to historical reasons only, and might be fixed in future Automake\nversions.\n\n@node Parallel Test Harness\n@subsection Parallel Test Harness\n\nBy default, Automake generated a parallel (concurrent) test harness.  It\nfeatures automatic collection of the test scripts output in @file{.log}\nfiles, concurrent execution of tests with @code{make -j}, specification\nof inter-test dependencies, lazy reruns of tests that have not completed\nin a prior run, and hard errors for exceptional failures.\n\n@anchor{Basics of test metadata}\n@vindex TEST_SUITE_LOG\n@vindex TESTS\n@cindex @file{.log} files\n@cindex @file{.trs} files\n@cindex test metadata\nThe parallel test harness operates by defining a set of @command{make}\nrules that run the test scripts listed in @code{TESTS}, and, for each\nsuch script, save its output in a corresponding @file{.log} file and\nits results (and other ``metadata'', @pxref{API for Custom Test Drivers})\nin a corresponding @file{.trs} (as in @b{T}est @b{R}e@b{S}ults) file.\n@c We choose the '.trs' extension also because, at the time of writing,\n@c it isn't already used for other significant purposes; see e.g.:\n@c   - http://filext.com/file-extension/trs\n@c   - http://www.file-extensions.org/search/?searchstring=trs\nThe @file{.log} file will contain all the output emitted by the test on\nits standard output and its standard error.  The @file{.trs} file will\ncontain, among the other things, the results of the test cases run by\nthe script.\n\nThe parallel test harness will also create a summary log file,\n@code{TEST_SUITE_LOG}, which defaults to @file{test-suite.log} and requires\na @file{.log} suffix.  This file depends upon all the @file{.log} and\n@file{.trs} files created for the test scripts listed in @code{TESTS}.\n\n@vindex VERBOSE\nAs with the serial harness above, by default one status line is printed\nper completed test, and a short summary after the suite has completed.\nHowever, standard output and standard error of the test are redirected\nto a per-test log file, so that parallel execution does not produce\nintermingled output.  The output from failed tests is collected in the\n@file{test-suite.log} file.  If the variable @samp{VERBOSE} is set, this\nfile is output after the summary.\n\n@vindex TEST_EXTENSIONS\n@vindex TEST_LOGS\nEach couple of @file{.log} and @file{.trs} files is created when the\ncorresponding test has completed.  The set of log files is listed in\nthe read-only variable @code{TEST_LOGS}, and defaults to @code{TESTS},\nwith the executable extension if any (@pxref{EXEEXT}), as well as any\nsuffix listed in @code{TEST_EXTENSIONS} removed, and @file{.log} appended.\nResults are undefined if a test file name ends in several concatenated\nsuffixes.  @code{TEST_EXTENSIONS} defaults to @file{.test}; it can be\noverridden by the user, in which case any extension listed in it must be\nconstituted by a dot, followed by a non-digit alphabetic character,\nfollowed by any number of alphabetic characters.\n@c Keep in sync with test-extensions.sh\nFor example, @samp{.sh}, @samp{.T} and @samp{.t1} are valid extensions,\nwhile @samp{.x-y}, @samp{.6c} and @samp{.t.1} are not.\n\n@cindex Configure substitutions in @code{TESTS}\nIt is important to note that, due to current limitations (unlikely to be\nlifted), configure substitutions in the definition of @code{TESTS} can\nonly work if they will expand to a list of tests that have a suffix listed\nin @code{TEST_EXTENSIONS}.\n\n@vindex _LOG_COMPILE\n@vindex _LOG_COMPILER\n@vindex _LOG_FLAGS\n@vindex LOG_COMPILE\n@vindex LOG_COMPILER\n@vindex LOG_FLAGS\n@vindex @var{ext}_LOG_COMPILE\n@vindex @var{ext}_LOG_COMPILER\n@vindex @var{ext}_LOG_FLAGS\n@vindex AM_@var{ext}_LOG_FLAGS\n@vindex AM_LOG_FLAGS\nFor tests that match an extension @code{.@var{ext}} listed in\n@code{TEST_EXTENSIONS}, you can provide a custom ``test runner'' using\nthe variable @code{@var{ext}_LOG_COMPILER} (note the upper-case\nextension) and pass options in @code{AM_@var{ext}_LOG_FLAGS} and allow\nthe user to pass options in @code{@var{ext}_LOG_FLAGS}.  It will cause\nall tests with this extension to be called with this runner.  For all\ntests without a registered extension, the variables @code{LOG_COMPILER},\n@code{AM_LOG_FLAGS}, and @code{LOG_FLAGS} may be used.  For example,\n\n@c Keep in sync with parallel-tests-log-compiler-example.sh\n@example\nTESTS = foo.pl bar.py baz\nTEST_EXTENSIONS = .pl .py\nPL_LOG_COMPILER = $(PERL)\nAM_PL_LOG_FLAGS = -w\nPY_LOG_COMPILER = $(PYTHON)\nAM_PY_LOG_FLAGS = -v\nLOG_COMPILER = ./wrapper-script\nAM_LOG_FLAGS = -d\n@end example\n\n@noindent\nwill invoke @samp{$(PERL) -w foo.pl}, @samp{$(PYTHON) -v bar.py},\nand @samp{./wrapper-script -d baz} to produce @file{foo.log},\n@file{bar.log}, and @file{baz.log}, respectively.  The @file{foo.trs},\n@file{bar.trs} and @file{baz.trs} files will be automatically produced\nas a side-effect.\n\nIt's important to note that, differently from what we've seen for the\nserial test harness (@pxref{Serial Test Harness}), the\n@code{AM_TESTS_ENVIRONMENT} and @code{TESTS_ENVIRONMENT} variables\n@emph{cannot} be used to define a custom test runner; the\n@code{LOG_COMPILER} and @code{LOG_FLAGS} (or their extension-specific\ncounterparts) should be used instead:\n\n@example\n## This is WRONG!\nAM_TESTS_ENVIRONMENT = PERL5LIB='$(srcdir)/lib' $(PERL) -Mstrict -w\n@end example\n\n@example\n## Do this instead.\nAM_TESTS_ENVIRONMENT = PERL5LIB='$(srcdir)/lib'; export PERL5LIB;\nLOG_COMPILER = $(PERL)\nAM_LOG_FLAGS = -Mstrict -w\n@end example\n\nBy default, the test suite harness will run all tests, but there are\nseveral ways to limit the set of tests that are run:\n\n@itemize @bullet\n@item\nYou can set the @code{TESTS} variable.  For example, you can use a\ncommand like this to run only a subset of the tests:\n\n@example\nenv TESTS=\"foo.test bar.test\" make -e check\n@end example\n\nNote however that the command above will unconditionally overwrite the\n@file{test-suite.log} file, thus clobbering the recorded results\nof any previous testsuite run.  This might be undesirable for packages\nwhose testsuite takes a long time to execute.  Luckily, this problem can\neasily be avoided by also overriding @code{TEST_SUITE_LOG} at runtime;\nfor example,\n\n@c Keep in sync with parallel-tests-log-override-2.sh\n@example\nenv TEST_SUITE_LOG=partial.log TESTS=\"...\" make -e check\n@end example\n\nwill write the result of the partial testsuite runs to the\n@file{partial.log}, without touching @file{test-suite.log}.\n\n@item\nYou can set the @code{TEST_LOGS} variable.  By default, this variable is\ncomputed at @command{make} run time from the value of @code{TESTS} as\ndescribed above.  For example, you can use the following:\n\n@example\nset x subset*.log; shift\nenv TEST_LOGS=\"foo.log $*\" make -e check\n@end example\n\nThe comments made above about @code{TEST_SUITE_LOG} overriding applies\nhere too.\n\n@item\n@vindex RECHECK_LOGS\n@cindex lazy test execution\nBy default, the test harness removes all old per-test @file{.log} and\n@file{.trs} files before it starts running tests to regenerate them.  The\nvariable @code{RECHECK_LOGS} contains the set of @file{.log} (and, by\nimplication, @file{.trs}) files which are removed.  @code{RECHECK_LOGS}\ndefaults to @code{TEST_LOGS}, which means all tests need to be rechecked.\nBy overriding this variable, you can choose which tests need to be\nreconsidered.  For example, you can lazily rerun only those tests which\nare outdated, i.e., older than their prerequisite test files, by setting\nthis variable to the empty value:\n\n@example\nenv RECHECK_LOGS= make -e check\n@end example\n\n@item\n@trindex recheck\nYou can ensure that all tests are rerun which have failed or passed\nunexpectedly, by running @code{make recheck} in the test directory.\nThis convenience target will set @code{RECHECK_LOGS} appropriately\nbefore invoking the main test harness.\n@end itemize\n\n@noindent\nIn order to guarantee an ordering between tests even with @code{make\n-j@var{N}}, dependencies between the corresponding @file{.log} files\nmay be specified through usual @command{make} dependencies.  For example,\nthe following snippet lets the test named @file{foo-execute.test} depend\nupon completion of the test @file{foo-compile.test}:\n\n@example\nTESTS = foo-compile.test foo-execute.test\nfoo-execute.log: foo-compile.log\n@end example\n\n@noindent\nPlease note that this ordering ignores the @emph{results} of required\ntests, thus the test @file{foo-execute.test} is run even if the test\n@file{foo-compile.test} failed or was skipped beforehand.  Further,\nplease note that specifying such dependencies currently works only for\ntests that end in one of the suffixes listed in @code{TEST_EXTENSIONS}.\n\nTests without such specified dependencies may be run concurrently with\nparallel @command{make -j@var{N}}, so be sure they are prepared for\nconcurrent execution.\n\n@cindex Unit tests\n@c Keep in sync with 'parallel-tests-extra-programs.sh'.\nThe combination of lazy test execution and correct dependencies between\ntests and their sources may be exploited for efficient unit testing\nduring development.  To further speed up the edit-compile-test cycle, it\nmay even be useful to specify compiled programs in @code{EXTRA_PROGRAMS}\ninstead of with @code{check_PROGRAMS}, as the former allows intertwined\ncompilation and test execution (but note that @code{EXTRA_PROGRAMS} are\nnot cleaned automatically; @pxref{Uniform}).\n\nThe variables @code{TESTS} and @code{XFAIL_TESTS} may contain\nconditional parts as well as configure substitutions.  In the latter\ncase, however, certain restrictions apply: substituted test names\nmust end with a nonempty test suffix like @file{.test}, so that one of\nthe inference rules generated by @command{automake} can apply.  For\nliteral test names, @command{automake} can generate per-target rules\nto avoid this limitation.\n\nPlease note that it is currently not possible to use @code{$(srcdir)/}\nor @code{$(top_srcdir)/} in the @code{TESTS} variable.  This technical\nlimitation is necessary to avoid generating test logs in the source tree\nand has the unfortunate consequence that it is not possible to specify\ndistributed tests that are themselves generated by means of explicit\nrules, in a way that is portable to all @command{make} implementations\n(@pxref{Make Target Lookup,,, autoconf, The Autoconf Manual}, the\nsemantics of FreeBSD and OpenBSD @command{make} conflict with this).\nIn case of doubt you may want to require to use GNU @command{make},\nor work around the issue with inference rules to generate the tests.\n\n@node Custom Test Drivers\n@section Custom Test Drivers\n\n@menu\n* Overview of Custom Test Drivers Support::\n* Declaring Custom Test Drivers::\n* API for Custom Test Drivers::\n@end menu\n\n@node Overview of Custom Test Drivers Support\n@subsection Overview of Custom Test Drivers Support\n\nStarting from Automake version 1.12, the parallel test harness allows\nthe package authors to use third-party custom test drivers, in case the\ndefault ones are inadequate for their purposes, or do not support their\ntesting protocol of choice.\n\nA custom test driver is expected to properly run the test programs passed\nto it (including the command-line arguments passed to those programs, if\nany), to analyze their execution and outcome, to create the @file{.log}\nand @file{.trs} files associated to these test runs, and to display the test\nresults on the console. It is responsibility of the author of the test\ndriver to ensure that it implements all the above steps meaningfully and\ncorrectly; Automake isn't and can't be of any help here.  On the other\nhand, the Automake-provided code for testsuite summary generation offers\nsupport for test drivers allowing several test results per test script,\nif they take care to register such results properly (@pxref{Log files\ngeneration and test results recording}).\n\nThe exact details of how test scripts' results are to be determined and\nanalyzed is left to the individual drivers.  Some drivers might only\nconsider the test script exit status (this is done for example by the\ndefault test driver used by the parallel test harness, described\nin the previous section).  Other drivers might implement more complex and\nadvanced test protocols, which might require them to parse and interpret\nthe output emitted by the test script they're running (examples of such\nprotocols are TAP and SubUnit).\n\nIt's very important to note that, even when using custom test drivers,\nmost of the infrastructure described in the previous section about the\nparallel harness remains in place; this includes:\n\n@itemize\n@item\nlist of test scripts defined in @code{TESTS}, and overridable at\nruntime through the redefinition of @code{TESTS} or @code{TEST_LOGS};\n@item\nconcurrency through the use of @command{make}'s option @option{-j};\n@item\nper-test @file{.log} and @file{.trs} files, and generation of a summary\n@file{.log} file from them;\n@item\n@code{recheck} target, @code{RECHECK_LOGS} variable, and lazy reruns\nof tests;\n@item\ninter-test dependencies;\n@item\nsupport for @code{check_*} variables (@code{check_PROGRAMS},\n@code{check_LIBRARIES}, ...);\n@item\nuse of @code{VERBOSE} environment variable to get verbose output on\ntestsuite failures;\n@item\ndefinition and honoring of @code{TESTS_ENVIRONMENT},\n@code{AM_TESTS_ENVIRONMENT} and @code{AM_TESTS_FD_REDIRECT}\nvariables;\n@item\ndefinition of generic and extension-specific @code{LOG_COMPILER} and\n@code{LOG_FLAGS} variables.\n@end itemize\n\n@noindent\nOn the other hand, the exact semantics of how (and if) testsuite output\ncolorization, @code{XFAIL_TESTS}, and hard errors are supported and\nhandled is left to the individual test drivers.\n\n@c TODO: We should really add a working example in the doc/ directory,\n@c TODO: and reference if from here.\n\n@node Declaring Custom Test Drivers\n@subsection Declaring Custom Test Drivers\n\n@vindex _LOG_DRIVER\n@vindex _LOG_DRIVER_FLAGS\n@vindex LOG_DRIVER\n@vindex LOG_DRIVER_FLAGS\n@vindex @var{ext}_LOG_DRIVER\n@vindex @var{ext}_LOG_DRIVER_FLAGS\n@vindex AM_@var{ext}_LOG_DRIVER_FLAGS\n@vindex AM_LOG_DRIVER_FLAGS\nCustom testsuite drivers are declared by defining the make variables\n@code{LOG_DRIVER} or @code{@var{ext}_LOG_DRIVER} (where @var{ext} must\nbe declared in @code{TEST_EXTENSIONS}).  They must be defined to\nprograms or scripts that will be used to drive the execution, logging,\nand outcome report of the tests with corresponding extensions (or of\nthose with no registered extension in the case of @code{LOG_DRIVER}).\nClearly, multiple distinct test drivers can be declared in the same\n@file{Makefile.am}.  Note moreover that the @code{LOG_DRIVER} variables\nare @emph{not} a substitute for the @code{LOG_COMPILER} variables: the\ntwo sets of variables can, and often do, usefully and legitimately\ncoexist.\n\n@c TODO: We should really be able to point to a clarifying example here!\n\nThe developer-reserved variable @code{AM_LOG_DRIVER_FLAGS} and the\nuser-reserved variable @code{LOG_DRIVER_FLAGS} can be used to define\nflags that will be passed to each invocation of @code{LOG_DRIVER},\nwith the user-defined flags obviously taking precedence over the\ndeveloper-reserved ones.  Similarly, for each extension @var{ext}\ndeclared in @code{TEST_EXTENSIONS}, flags listed in\n@code{AM_@var{ext}_LOG_DRIVER_FLAGS} and\n@code{@var{ext}_LOG_DRIVER_FLAGS} will be passed to\ninvocations of @code{@var{ext}_LOG_DRIVER}.\n\n@node API for Custom Test Drivers\n@subsection API for Custom Test Drivers\n\nNote that @emph{the APIs described here are still highly experimental},\nand will very likely undergo tightenings and likely also extensive changes\nin the future, to accommodate for new features or to satisfy additional\nportability requirements.\n\nThe main characteristic of these APIs is that they are designed to share\nas much infrastructure, semantics, and implementation detail as possible\nwith the parallel test harness and its default driver.\n\n@menu\n* Command-line arguments for test drivers::\n* Log files generation and test results recording::\n* Testsuite progress output::\n@end menu\n\n@node Command-line arguments for test drivers\n@subsubsection Command-line arguments for test drivers\n\nA custom driver can rely on various command-line options and arguments\nbeing passed to it automatically by the Automake-generated test harness.\nIt is @emph{mandatory} that it understands all of them (even if the exact\ninterpretation of the associated semantics can legitimately change\nbetween a test driver and another, and even be a no-op in some drivers).\n\n@noindent\nHere is the list of options:\n\n@table @option\n@item --test-name=@var{NAME}\nThe name of the test, with VPATH prefix (if any) removed.  This can have a\nsuffix and a directory component (as in e.g., @file{sub/foo.test}), and is\nmostly meant to be used in console reports about testsuite advancements and\nresults (@pxref{Testsuite progress output}).\n@item --log-file=@file{@var{PATH}.log}\nThe @file{.log} file the test driver must create (@pxref{Basics of\ntest metadata}).  If it has a directory component (as in e.g.,\n@file{sub/foo.log}), the test harness will ensure that such directory\nexists @emph{before} the test driver is called.\n@item --trs-file=@file{@var{PATH}.trs}\nThe @file{.trs} file the test driver must create (@pxref{Basics of\ntest metadata}).  If it has a directory component (as in e.g.,\n@file{sub/foo.trs}), the test harness will ensure that such directory\nexists @emph{before} the test driver is called.\n@item --color-tests=@{yes|no@}\nWhether the console output should be colorized or not (@pxref{Simple\ntests and color-tests}, to learn when this option gets activated and\nwhen it doesn't).\n@item --expect-failure=@{yes|no@}\nWhether the tested program is expected to fail.\n@item --enable-hard-errors=@{yes|no@}\nWhether ``hard errors'' in the tested program should be treated differently\nfrom normal failures or not (the default should be @code{yes}).  The exact\nmeaning of ``hard error'' is highly dependent from the test protocols or\nconventions in use.\n@item --\nExplicitly terminate the list of options.\n@end table\n\n@noindent\nThe first non-option argument passed to the test driver is the program to\nbe run, and all the following ones are command-line options and arguments\nfor this program.\n\nNote that the exact semantics attached to the @option{--color-tests},\n@option{--expect-failure} and @option{--enable-hard-errors} options are\nleft up to the individual test drivers.  Still, having a behaviour\ncompatible or at least similar to that provided by the default driver\nis advised, as that would offer a better consistency and a more pleasant\nuser experience.\n\n@node Log files generation and test results recording\n@subsubsection Log files generation and test results recording\n\nThe test driver must correctly generate the files specified by the\n@option{--log-file} and @option{--trs-file} option (even when the tested\nprogram fails or crashes).\n\nThe @file{.log} file should ideally contain all the output produced by the\ntested program, plus optionally other information that might facilitate\ndebugging or analysis of bug reports.  Apart from that, its format is\nbasically free.\n\nThe @file{.trs} file is used to register some metadata through the use\nof custom reStructuredText fields.  This metadata is expected to be\nemployed in various ways by the parallel test harness; for example, to\ncount the test results when printing the testsuite summary, or to decide\nwhich tests to re-run upon @command{make recheck}.  Unrecognized metadata\nin a @file{.trs} file is currently ignored by the harness, but this might\nchange in the future. The list of currently recognized metadata follows.\n\n@table @code\n\n@item :test-result:\n@cindex Register test result\n@cindex Register test case result\n@cindex Test result, registering\n@cindex Test case result, registering\n@cindex @code{:test-result:}\n@cindex reStructuredText field, @code{:test-result:}\nThe test driver must use this field to register the results of @emph{each}\ntest case run by a test script file.  Several @code{:test-result:} fields\ncan be present in the same @file{.trs} file; this is done in order to\nsupport test protocols that allow a single test script to run more test\ncases.\n\n@c Keep this in sync with lib/am/check-am:$(TEST_SUITE_LOG).\nThe only recognized test results are currently @code{PASS}, @code{XFAIL},\n@code{SKIP}, @code{FAIL}, @code{XPASS} and @code{ERROR}.  These results,\nwhen declared with @code{:test-result:}, can be optionally followed by\ntext holding the name and/or a brief description of the corresponding\ntest; the harness will ignore such extra text when generating\n@file{test-suite.log} and preparing the testsuite summary.\n\n@c Keep in sync with 'test-metadata-recheck.sh'.\n@item @code{:recheck:}\n@cindex :recheck:\n@cindex reStructuredText field, @code{:recheck:}\nIf this field is present and defined to @code{no}, then the corresponding\ntest script will @emph{not} be run upon a @command{make recheck}.  What\nhappens when two or more @code{:recheck:} fields are present in the same\n@file{.trs} file is undefined behaviour.\n\n@c Keep in sync with 'test-metadata-global-log.sh'.\n@item @code{:copy-in-global-log:}\n@cindex :copy-in-global-log:\n@cindex reStructuredText field, @code{:copy-in-global-log:}\nIf this field is present and defined to @code{no}, then the content\nof the @file{.log} file will @emph{not} be copied into the global\n@file{test-suite.log}.  We allow to forsake such copying because, while\nit can be useful in debugging and analysis of bug report, it can also be\njust a waste of space in normal situations, e.g., when a test script is\nsuccessful.  What happens when two or more @code{:copy-in-global-log:}\nfields are present in the same @file{.trs} file is undefined behaviour.\n\n@c Keep in sync with 'test-metadata-global-result.sh'.\n@item @code{:test-global-result:}\n@cindex :test-global-result:\n@cindex reStructuredText field, @code{:test-global-result:}\nThis is used to declare the \"global result\" of the script.  Currently,\nthe value of this field is needed only to be reported (more or less\nverbatim) in the generated global log file @code{$(TEST_SUITE_LOG)},\nso it's quite free-form.  For example, a test script which runs 10 test\ncases, 6 of which pass and 4 of which are skipped, could reasonably have\na @code{PASS/SKIP} value for this field, while a test script which runs\n19 successful tests and one failed test could have an @code{ALMOST\nPASSED} value.  What happens when two or more @code{:test-global-result:}\nfields are present in the same @file{.trs} file is undefined behaviour.\n@end table\n\n@noindent\nLet's see a small example.  Assume a @file{.trs} file contains the\nfollowing lines:\n\n@example\n:test-result: PASS server starts\n:global-log-copy: no\n:test-result: PASS HTTP/1.1 request\n:test-result: FAIL HTTP/1.0 request\n:recheck: yes\n:test-result: SKIP HTTPS request (TLS library wasn't available)\n:test-result: PASS server stops\n@end example\n\n@noindent\nThen the corresponding test script will be re-run by @command{make check},\nwill contribute with @emph{five} test results to the testsuite summary\n(three of these tests being successful, one failed, and one skipped), and\nthe content of the corresponding @file{.log} file will @emph{not} be\ncopied into the global log file @file{test-suite.log}.\n\n@node Testsuite progress output\n@subsubsection Testsuite progress output\n\nA custom test driver also has the task of displaying, on the standard\noutput, the test results as soon as they become available.  Depending on\nthe protocol in use, it can also display the reasons for failures and\nskips, and, more generally, any useful diagnostic output (but remember\nthat each line on the screen is precious, so that cluttering the screen\nwith overly verbose information is bad idea).  The exact format of this\nprogress output is left up to the test driver; in fact, a custom test\ndriver might @emph{theoretically} even decide not to do any such report,\nleaving it all to the testsuite summary (that would be a very lousy idea,\nof course, and serves only to illustrate the flexibility that is\ngranted here).\n\nRemember that consistency is good; so, if possible, try to be consistent\nwith the output of the built-in Automake test drivers, providing a similar\n``look & feel''.  In particular, the testsuite progress output should be\ncolorized when the @option{--color-tests} is passed to the driver.  On the\nother end, if you are using a known and widespread test protocol with\nwell-established implementations, being consistent with those\nimplementations' output might be a good idea too.\n\n@node Using the TAP test protocol\n@section Using the TAP test protocol\n\n@menu\n* Introduction to TAP::\n* Use TAP with the Automake test harness::\n* Incompatibilities with other TAP parsers and drivers::\n* Links and external resources on TAP::\n@end menu\n\n@node Introduction to TAP\n@subsection Introduction to TAP\n\nTAP, the Test Anything Protocol, is a simple text-based interface between\ntesting modules or programs and a test harness.  The tests (also called\n``TAP producers'' in this context) write test results in a simple format\non standard output; a test harness (also called ``TAP consumer'') will\nparse and interpret these results, and properly present them to the user,\nand/or register them for later analysis.  The exact details of how this\nis accomplished can vary among different test harnesses.  The Automake\nharness will present the results on the console in the usual\nfashion (@pxref{Testsuite progress on console}), and will use the\n@file{.trs} files (@pxref{Basics of test metadata}) to store the test\nresults and related metadata.  Apart from that, it will try to remain\nas compatible as possible with pre-existing and widespread utilities,\nsuch as the\n@uref{https://metacpan.org/pod/distribution/Test-Harness/bin/prove,\n@command{prove} utility}, at least for the simpler usages.\n\nTAP started its life as part of the test harness for Perl, but today\nit has been (mostly) standardized, and has various independent\nimplementations in different languages; among them, C, C++, Perl,\nPython, PHP, and Java.  For a semi-official specification of the\nTAP protocol, please refer to the documentation of\n@uref{https://metacpan.org/pod/Test::Harness, @samp{Test::Harness}}.\n\nThe most relevant real-world usages of TAP are obviously in the testsuites\nof @command{perl} and of many Perl modules.  Still, other important\nthird-party packages, such as @uref{https://git-scm.com/, @command{git}},\nalso use TAP in their testsuite.\n\n@node Use TAP with the Automake test harness\n@subsection Use TAP with the Automake test harness\n\nCurrently, the TAP driver that comes with Automake requires some by-hand\nsteps on the developer's part (this situation should hopefully be improved\nin future Automake versions).  You'll have to grab the @file{tap-driver.sh}\nscript from the Automake distribution by hand, copy it in your source tree,\nand use the Automake support for third-party test drivers to instruct the\nharness to use the @file{tap-driver.sh} script and the awk program found\nby @code{AM_INIT_AUTOMAKE} to run your TAP-producing tests.  See the example\nbelow for clarification.\n\nApart from the options common to all the Automake test drivers\n(@pxref{Command-line arguments for test drivers}), @file{tap-driver.sh}\nsupports the following options, whose names are chosen for enhanced\ncompatibility with the @command{prove} utility.\n\n@table @option\n@c Keep in sync with 'tap-exit.sh' and 'tap-signal.tap'.\n@item --ignore-exit\nCauses the test driver to ignore the exit status of the test scripts;\nby default, the driver will report an error if the script exits with a\nnon-zero status.  This option has effect also on non-zero exit statuses\ndue to termination by a signal.\n@item --comments\nInstruct the test driver to display TAP diagnostics (i.e., lines beginning\nwith the @samp{#} character) in the testsuite progress output too; by\ndefault, TAP diagnostics are only copied to the @file{.log} file.\n@item --no-comments\nRevert the effects of @option{--comments}.\n@item --merge\nInstruct the test driver to merge the test scripts' standard error into\ntheir standard output.  This is necessary if you want to ensure that\ndiagnostics from the test scripts are displayed in the correct order\nrelative to test results; this can be of great help in debugging\n(especially if your test scripts are shell scripts run with shell\ntracing active).  As a downside, this option might cause the test\nharness to get confused if anything that appears on standard error\nlooks like a test result.\n@item --no-merge\nRevert the effects of @option{--merge}.\n@item --diagnostic-string=@var{STRING}\nChange the string that introduces TAP diagnostics from the default value\nof ``@code{#}'' to @code{@var{STRING}}.  This can be useful if your\nTAP-based test scripts produce verbose output on which they have limited\ncontrol (because, say, the output comes from other tools invoked in the\nscripts), and it might contain text that gets spuriously interpreted as\nTAP diagnostics: such an issue can be solved by redefining the string that\nactivates TAP diagnostics to a value you know won't appear by chance in\nthe tests' output.  Note however that this feature is non-standard, as\nthe ``official'' TAP protocol does not allow for such a customization; so\ndon't use it if you can avoid it.\n@end table\n\n@noindent\nHere is an example of how the TAP driver can be set up and used.\n\n@c Keep in sync with tap-doc2.sh\n@example\n% @kbd{cat configure.ac}\nAC_INIT([GNU Try Tap], [1.0], [bug-automake@@gnu.org])\nAC_CONFIG_AUX_DIR([build-aux])\nAM_INIT_AUTOMAKE([foreign -Wall -Werror])\nAC_CONFIG_FILES([Makefile])\nAC_REQUIRE_AUX_FILE([tap-driver.sh])\nAC_OUTPUT\n\n% @kbd{cat Makefile.am}\nTEST_LOG_DRIVER = env AM_TAP_AWK='$(AWK)' $(SHELL) \\\n                  $(top_srcdir)/build-aux/tap-driver.sh\nTESTS = foo.test bar.test baz.test\nEXTRA_DIST = $(TESTS)\n\n% @kbd{cat foo.test}\n#!/bin/sh\necho 1..4 # Number of tests to be executed.\necho 'ok 1 - Swallows fly'\necho 'not ok 2 - Caterpillars fly # TODO metamorphosis in progress'\necho 'ok 3 - Pigs fly # SKIP not enough acid'\necho '# I just love word plays ...'\necho 'ok 4 - Flies fly too :-)'\n\n% @kbd{cat bar.test}\n#!/bin/sh\necho 1..3\necho 'not ok 1 - Bummer, this test has failed.'\necho 'ok 2 - This passed though.'\necho 'Bail out! Ennui kicking in, sorry...'\necho 'ok 3 - This will not be seen.'\n\n% @kbd{cat baz.test}\n#!/bin/sh\necho 1..1\necho ok 1\n# Exit with error, even if all the tests have been successful.\nexit 7\n\n% @kbd{cp @var{PREFIX}/share/automake-@var{APIVERSION}/tap-driver.sh .}\n% @kbd{autoreconf -vi && ./configure && make check}\n...\nPASS: foo.test 1 - Swallows fly\nXFAIL: foo.test 2 - Caterpillars fly # TODO metamorphosis in progress\nSKIP: foo.test 3 - Pigs fly # SKIP not enough acid\nPASS: foo.test 4 - Flies fly too :-)\nFAIL: bar.test 1 - Bummer, this test has failed.\nPASS: bar.test 2 - This passed though.\nERROR: bar.test - Bail out! Ennui kicking in, sorry...\nPASS: baz.test 1\nERROR: baz.test - exited with status 7\n...\nPlease report to bug-automake@@gnu.org\n...\n% @kbd{echo exit status: $?}\nexit status: 1\n\n@c Keep the \"skewed\" indentation below, it produces pretty PDF output.\n% @kbd{env TEST_LOG_DRIVER_FLAGS='--comments --ignore-exit' \\\n      TESTS='foo.test baz.test' make -e check}\n...\nPASS: foo.test 1 - Swallows fly\nXFAIL: foo.test 2 - Caterpillars fly # TODO metamorphosis in progress\nSKIP: foo.test 3 - Pigs fly # SKIP not enough acid\n# foo.test: I just love word plays...\nPASS: foo.test 4 - Flies fly too :-)\nPASS: baz.test 1\n...\n% @kbd{echo exit status: $?}\nexit status: 0\n@end example\n\n@node Incompatibilities with other TAP parsers and drivers\n@subsection Incompatibilities with other TAP parsers and drivers\n\nFor implementation or historical reasons, the TAP driver and harness as\nimplemented by Automake have some minor incompatibilities with the\nmainstream versions, which you should be aware of.\n\n@itemize @bullet\n@item\nA @code{Bail out!} directive doesn't stop the whole testsuite, but only\nthe test script it occurs in.  This doesn't follow TAP specifications,\nbut on the other hand it maximizes compatibility (and code sharing) with\nthe ``hard error'' concept of the default testsuite driver.\n@item\nThe @code{version} and @code{pragma} directives are not supported.\n@item\nThe @option{--diagnostic-string} option of our driver allows modification of\nthe string that introduces TAP diagnostics from the default value\nof ``@code{#}''.  The standard TAP protocol currently has no way to\nallow this, so if you use it your diagnostic will be lost to more\ncompliant tools like @command{prove} and @code{Test::Harness}\n@item\nAnd there are probably some other small and yet undiscovered\nincompatibilities, especially in corner cases or with rare usages.\n@end itemize\n\n@node Links and external resources on TAP\n@subsection Links and external resources on TAP\n\n@noindent\nHere are some links to more extensive official or third-party\ndocumentation and resources about the TAP protocol and related\ntools and libraries.\n@itemize @bullet\n@item\n@uref{https://metacpan.org/pod/Test::Harness, @samp{Test::Harness}},\nthe (mostly) official documentation about the TAP format and protocol.\n@item\n@uref{https://metacpan.org/pod/distribution/Test-Harness/bin/prove,\n      @command{prove}},\nthe most famous command-line TAP test driver, included in the distribution\nof @command{perl} and\n@uref{https://metacpan.org/pod/distribution/Test-Harness/lib/Test/Harness.pm,\n      @samp{Test::Harness}}.\n@item\nThe @uref{https://testanything.org/,TAP wiki}.\n@item\nA ``gentle introduction'' to testing for Perl coders:\n@uref{https://metacpan.org/pod/distribution/Test-Simple/lib/Test/Tutorial.pod,\n      @samp{Test::Tutorial}}.\n@item\n@uref{https://metacpan.org/pod/distribution/Test-Simple/lib/Test/Simple.pm,\n      @samp{Test::Simple}}\nand\n@uref{https://metacpan.org/pod/distribution/Test-Simple/lib/Test/More.pm,\n      @samp{Test::More}},\nthe standard Perl testing libraries, which are based on TAP.\n@item\n@uref{https://www.eyrie.org/~eagle/software/c-tap-harness/,C TAP Harness},\na C-based project implementing both a TAP producer and a TAP consumer.\n@item\n@uref{https://tap4j.org/,tap4j},\na Java-based project implementing both a TAP producer and a TAP consumer.\n@end itemize\n\n@node DejaGnu Tests\n@section DejaGnu Tests\n\nIf @command{dejagnu} (@pxref{Top, , Introduction, dejagnu, DejaGnu})\nappears in @code{AUTOMAKE_OPTIONS}, then a @command{dejagnu}-based\ntest suite is assumed.  The variable @code{DEJATOOL} is a list of\nnames that are passed, one at a time, as the @option{--tool} argument\nto @command{runtest} invocations; it defaults to the name of the\npackage.\n\nThe variable @code{RUNTESTDEFAULTFLAGS} holds the @option{--tool} and\n@option{--srcdir} flags that are passed to dejagnu by default; this can be\noverridden if necessary.\n@vindex RUNTESTDEFAULTFLAGS\n\nThe variables @code{EXPECT} and @code{RUNTEST} can\nalso be overridden to provide project-specific values.  For instance,\nyou will need to do this if you are testing a compiler toolchain,\nbecause the default values do not take into account host and target\nnames.\n@opindex dejagnu\n@vindex DEJATOOL\n@vindex EXPECT\n@vindex RUNTEST\n\nThe contents of the variable @code{RUNTESTFLAGS} are passed to the\n@code{runtest} invocation.  This is considered a ``user variable''\n(@pxref{User Variables}).  If you need to set @command{runtest} flags in\n@file{Makefile.am}, you can use @code{AM_RUNTESTFLAGS} instead.\n@vindex RUNTESTFLAGS\n@vindex AM_RUNTESTFLAGS\n\n@cindex @file{site.exp}\nAutomake will generate rules to create a local @file{site.exp} file,\ndefining various variables detected by @command{configure}.  This file\nis automatically read by DejaGnu.  It is OK for the user of a package\nto edit this file in order to tune the test suite.  However this is\nnot the place where the test suite author should define new variables:\nthis should be done elsewhere in the real test suite code.\nEspecially, @file{site.exp} should not be distributed.\n\nStill, if the package author has legitimate reasons to extend\n@file{site.exp} at @command{make} time, he can do so by defining\nthe variable @code{EXTRA_DEJAGNU_SITE_CONFIG}; the files listed\nthere will be considered @file{site.exp} prerequisites, and their\ncontent will be appended to it (in the same order in which they\nappear in @code{EXTRA_DEJAGNU_SITE_CONFIG}).  Note that files are\n@emph{not} distributed by default.\n\nFor more information regarding DejaGnu test suites, see @ref{Top, , ,\ndejagnu, The DejaGnu Manual}.\n\n@node Install Tests\n@section Install Tests\n\nThe @code{installcheck} target is available to the user as a way to\nrun any tests after the package has been installed.  You can add tests\nto this by writing an @code{installcheck-local} rule.\n\n\n@node Rebuilding\n@chapter Rebuilding Makefiles\n@cindex rebuild rules\n\nAutomake generates rules to automatically rebuild @file{Makefile}s,\n@file{configure}, and other derived files like @file{Makefile.in}.\n\n@acindex AM_MAINTAINER_MODE\nIf you are using @code{AM_MAINTAINER_MODE} in @file{configure.ac}, then\nthese automatic rebuilding rules are only enabled in maintainer mode.\n\n@vindex CONFIG_STATUS_DEPENDENCIES\n@vindex CONFIGURE_DEPENDENCIES\n@cindex @file{version.sh}, example\n@cindex @file{version.m4}, example\n\nSometimes it is convenient to supplement the rebuild rules for\n@file{configure} or @file{config.status} with additional dependencies.\nThe variables @code{CONFIGURE_DEPENDENCIES} and\n@code{CONFIG_STATUS_DEPENDENCIES} can be used to list these extra\ndependencies.  These variables should be defined in all\n@file{Makefile}s of the tree (because these two rebuild rules are\noutput in all of them), so it is safer and easier to @code{AC_SUBST} them\nfrom @file{configure.ac}.  For instance, the following statement will\ncause @file{configure} to be rerun each time @file{version.sh} is\nchanged.\n\n@c Keep in sync with remake-config-status-dependencies.sh\n@example\nAC_SUBST([CONFIG_STATUS_DEPENDENCIES], ['$(top_srcdir)/version.sh'])\n@end example\n\n@noindent\nNote the @samp{$(top_srcdir)/} in the file name.  Since this variable\nis to be used in all @file{Makefile}s, its value must be sensible at\nany level in the build hierarchy.\n\nBeware not to mistake @code{CONFIGURE_DEPENDENCIES} for\n@code{CONFIG_STATUS_DEPENDENCIES}.\n\n@c Keep in sync with remake-configure-dependencies.sh\n@code{CONFIGURE_DEPENDENCIES} adds dependencies to the\n@file{configure} rule, whose effect is to run @command{autoconf}.  This\nvariable should be seldom used, because @command{automake} already tracks\n@code{m4_include}d files.  However it can be useful when playing\ntricky games with @code{m4_esyscmd} or similar non-recommendable\nmacros with side effects.  Be also aware that interactions of this\nvariable with the @ref{Autom4te Cache, , autom4te cache, autoconf,\nThe Autoconf Manual} are quite problematic and can cause subtle\nbreakage, so you might want to disable the cache if you want to use\n@code{CONFIGURE_DEPENDENCIES}.\n\n@code{CONFIG_STATUS_DEPENDENCIES} adds dependencies to the\n@file{config.status} rule, whose effect is to run @file{configure}.\nThis variable should therefore carry any non-standard source that may\nbe read as a side effect of running @command{configure}, like @file{version.sh}\nin the example above.\n\nSpeaking of @file{version.sh} scripts, we recommend against them\ntoday.  They are mainly used when the version of a package is updated\nautomatically by a script (e.g., in daily builds).  Here is what some\nold-style @file{configure.ac}s may look like:\n\n@example\nAC_INIT\n. $srcdir/version.sh\nAM_INIT_AUTOMAKE([name], $VERSION_NUMBER)\n@dots{}\n@end example\n\n@noindent\nHere, @file{version.sh} is a shell fragment that sets\n@code{VERSION_NUMBER}.  The problem with this example is that\n@command{automake} cannot track dependencies (listing @file{version.sh}\nin @command{CONFIG_STATUS_DEPENDENCIES}, and distributing this file is up\nto the user), and that it uses the obsolete form of @code{AC_INIT} and\n@code{AM_INIT_AUTOMAKE}.  Upgrading to the new syntax is not\nstraightforward, because shell variables are not allowed in\n@code{AC_INIT}'s arguments.  We recommend that @file{version.sh} be\nreplaced by an M4 file that is included by @file{configure.ac}:\n\n@example\nm4_include([version.m4])\nAC_INIT([name], VERSION_NUMBER)\nAM_INIT_AUTOMAKE\n@dots{}\n@end example\n\n@noindent\nHere @file{version.m4} could contain something like\n@samp{m4_define([VERSION_NUMBER], [1.2])}.  The advantage of this\nsecond form is that @command{automake} will take care of the\ndependencies when defining the rebuild rule, and will also distribute\nthe file automatically.  An inconvenience is that @command{autoconf}\nwill now be rerun each time the version number is bumped, when only\n@file{configure} had to be rerun in the previous setup.\n\n\n@node Options\n@chapter Changing Automake's Behavior\n\n@menu\n* Options generalities::        Semantics of Automake option\n* List of Automake options::    A comprehensive list of Automake options\n@end menu\n\n@node Options generalities\n@section Options generalities\n\nVarious features of Automake can be controlled by options.  Except where\nnoted otherwise, options can be specified in one of several ways.  Most\noptions can be applied on a per-@file{Makefile} basis when listed in a\nspecial @file{Makefile} variable named @code{AUTOMAKE_OPTIONS}.  Some\nof these options only make sense when specified in the toplevel\n@file{Makefile.am} file.  Options are applied globally to all processed\n@file{Makefile} files when listed in the first argument of\n@code{AM_INIT_AUTOMAKE} in @file{configure.ac}, and some options which\nrequire changes to the @command{configure} script can only be specified\nthere.  These are annotated below.\n\nAs a general rule, options specified in @code{AUTOMAKE_OPTIONS} take\nprecedence over those specified in @code{AM_INIT_AUTOMAKE}, which in\nturn take precedence over those specified on the command line.\n\nAlso, some care must be taken about the interactions among strictness\nlevel and warning categories.  As a general rule, strictness-implied\nwarnings are overridden by those specified by explicit options.  For\nexample, even if @samp{portability} warnings are disabled by default\nin @option{foreign} strictness, a usage like this will end up enabling\nthem:\n\n@example\nAUTOMAKE_OPTIONS = -Wportability foreign\n@end example\n\nHowever, a strictness level specified in a higher-priority context\nwill override all the explicit warnings specified in a lower-priority\ncontext.  For example, if @file{configure.ac} contains:\n\n@example\nAM_INIT_AUTOMAKE([-Wportability])\n@end example\n\n@noindent\nand @file{Makefile.am} contains:\n\n@example\nAUTOMAKE_OPTIONS = foreign\n@end example\n\n@noindent\nthen @samp{portability} warnings will be @emph{disabled} in\n@file{Makefile.am}.\n\n@node List of Automake options\n@section List of Automake options\n\n@vindex AUTOMAKE_OPTIONS\n\n@table @asis\n@item @option{gnits}\n@itemx @option{gnu}\n@itemx @option{foreign}\n@cindex Option, @option{gnits}\n@cindex Option, @option{gnu}\n@cindex Option, @option{foreign}\n@opindex gnits\n@opindex gnu\n@opindex foreign\n\nSet the strictness as appropriate.  @xref{Strictness}.\nThe @option{gnits} option also implies options @option{readme-alpha} and\n@option{check-news}.\n\n@item @option{check-news}\n@cindex Option, @option{check-news}\n@opindex check-news\nCause @samp{make dist} to fail unless the current version number appears\nin the first few lines of the @file{NEWS} file.\n\n@item @option{dejagnu}\n@cindex Option, @option{dejagnu}\n@opindex dejagnu\nCause @command{dejagnu}-specific rules to be generated.  @xref{DejaGnu Tests}.\n\n@item @option{dist-bzip2}\n@cindex Option, @option{dist-bzip2}\n@opindex dist-bzip2\nHook @code{dist-bzip2} to @code{dist}.\n@trindex dist-bzip2\n\n@item @option{dist-lzip}\n@cindex Option, @option{dist-lzip}\n@opindex dist-lzip\nHook @code{dist-lzip} to @code{dist}.\n@trindex dist-lzip\n\n@item @option{dist-xz}\n@cindex Option, @option{dist-xz}\n@opindex dist-xz\nHook @code{dist-xz} to @code{dist}.\n@trindex dist-xz\n\n@item @option{dist-zip}\n@cindex Option, @option{dist-zip}\n@opindex dist-zip\nHook @code{dist-zip} to @code{dist}.\n@trindex dist-zip\n\n@item @option{dist-zstd}\n@cindex Option, @option{dist-zstd}\n@opindex dist-zstd\nHook @code{dist-zstd} to @code{dist}.\n@trindex dist-zstd\n\n@item @option{dist-shar}\n@cindex Option, @option{dist-shar}\n@opindex dist-shar\nHook @code{dist-shar} to @code{dist}.  Use of this option\nis deprecated, as the @samp{shar} format is obsolescent and\nproblematic.  Support for it will be removed altogether in\nAutomake 2.0.\n@trindex dist-shar\n\n@item @option{dist-tarZ}\n@cindex Option, @option{dist-tarZ}\n@opindex dist-tarZ\nHook @code{dist-tarZ} to @code{dist}.  Use of this option\nis deprecated, as the @samp{compress} program is obsolete.\nSupport for it will be removed altogether in Automake 2.0.\n@trindex dist-tarZ\n\n@item @option{filename-length-max=99}\n@cindex Option, @option{filename-length-max=99}\n@opindex filename-length-max=99\nAbort if file names longer than 99 characters are found during\n@samp{make dist}.  Such long file names are generally considered not to\nbe portable in tarballs.  See the @option{tar-v7} and @option{tar-ustar}\noptions below.  This option should be used in the top-level\n@file{Makefile.am} or as an argument of @code{AM_INIT_AUTOMAKE} in\n@file{configure.ac}; it will be ignored otherwise.  It will also be\nignored in sub-packages of nested packages (@pxref{Subpackages}).\n\n@item @option{info-in-builddir}\n@cindex Option, @option{info-in-builddir}\n@opindex info-in-builddir\nInstruct Automake to place the generated @file{.info} files in the\n@code{builddir} rather than in the @code{srcdir}.  Note that this\nmight make VPATH builds with some non-GNU make implementations more\nbrittle.\n\n@item @option{no-define}\n@cindex Option, @option{no-define}\n@opindex no-define\nThis option is meaningful only when passed as an argument to\n@code{AM_INIT_AUTOMAKE}.  It will prevent the @code{PACKAGE} and\n@code{VERSION} variables from being @code{AC_DEFINE}d.  But notice\nthat they will remain defined as shell variables in the generated\n@code{configure}, and as make variables in the generated\n@code{Makefile}; this is deliberate, and required for backward\ncompatibility.\n\n@item @option{no-dependencies}\n@cindex Option, @option{no-dependencies}\n@opindex no-dependencies\nThis is similar to using @option{--ignore-deps} on the command line,\nbut is useful for those situations where you don't have the necessary\nbits to make automatic dependency tracking work\n(@pxref{Dependencies}).  In this case the effect is to effectively\ndisable automatic dependency tracking.\n\n@item @option{no-dist}\n@cindex Option, @option{no-dist}\n@opindex no-dist\nDon't emit any code related to @code{dist} target.  This is useful\nwhen a package has its own method for making distributions.\n\n@item @option{no-dist-gzip}\n@cindex Option, @option{no-dist-gzip}\n@opindex no-dist-gzip\nDo not hook @code{dist-gzip} to @code{dist}.\n@trindex no-dist-gzip\n\n@item @option{no-exeext}\n@cindex Option, @option{no-exeext}\n@opindex no-exeext\nIf your @file{Makefile.am} defines a rule for target @code{foo}, it\nwill override a rule for a target named @samp{foo$(EXEEXT)}.  This is\nnecessary when @code{EXEEXT} is found to be empty.  However, by\ndefault @command{automake} will generate an error for this use.  The\n@option{no-exeext} option will disable this error.  This is intended for\nuse only where it is known in advance that the package will not be\nported to Windows, or any other operating system using extensions on\nexecutables.\n\n@item @option{no-installinfo}\n@cindex Option, @option{no-installinfo}\n@opindex no-installinfo\nThe generated @file{Makefile.in} will not cause info pages to be built\nor installed by default.  However, @code{info} and @code{install-info}\ntargets will still be available.  This option is disallowed at\n@option{gnu} strictness and above.\n@trindex info\n@trindex install-info\n\n@item @option{no-installman}\n@cindex Option, @option{no-installman}\n@opindex no-installman\nThe generated @file{Makefile.in} will not cause man pages to be\ninstalled by default.  However, an @code{install-man} target will still\nbe available for optional installation.  This option is disallowed at\n@option{gnu} strictness and above.\n@trindex install-man\n\n@item @option{nostdinc}\n@cindex Option, @option{nostdinc}\n@opindex nostdinc\nThis option can be used to disable the standard @option{-I} options that\nare ordinarily automatically provided by Automake.\n\n@item @option{no-texinfo.tex}\n@cindex Option, @option{no-texinfo.tex}\n@opindex no-texinfo.tex\nDon't require @file{texinfo.tex}, even if there are texinfo files in\nthis directory.\n\n@item @option{serial-tests}\n@cindex Option, @option{serial-tests}\n@opindex serial-tests\nEnable the older serial test suite harness for @code{TESTS} (@pxref{Serial\nTest Harness}, for more information).\n\n@item @option{parallel-tests}\n@cindex Option, @option{parallel-tests}\n@opindex parallel-tests\nEnable test suite harness for @code{TESTS} that can run tests in parallel\n(@pxref{Parallel Test Harness}, for more information).  This option is\nonly kept for backward-compatibility, since the parallel test harness is\nthe default now.\n\n@item @option{readme-alpha}\n@cindex Option, @option{readme-alpha}\n@opindex readme-alpha\nIf this release is an alpha release, and the file @file{README-alpha}\nexists, then it will be added to the distribution.  If this option is\ngiven, version numbers are expected to follow one of two forms.  The\nfirst form is @samp{@var{major}.@var{minor}.@var{alpha}}, where each\nelement is a number; the final period and number should be left off for\nnon-alpha releases.  The second form is\n@samp{@var{major}.@var{minor}@var{alpha}}, where @var{alpha} is a\nletter; it should be omitted for non-alpha releases.\n\n@item @option{std-options}\n@cindex Options, @option{std-options}\n@cindex @samp{make installcheck}, testing @option{--help} and @option{--version}\n@cindex @option{--help} check\n@cindex @option{--version} check\n@opindex std-options\n\nMake the @code{installcheck} rule check that installed scripts and\nprograms support the @option{--help} and @option{--version} options.\nThis also provides a basic check that the program's\nrun-time dependencies are satisfied after installation.\n\n@vindex AM_INSTALLCHECK_STD_OPTIONS_EXEMPT\nIn a few situations, programs (or scripts) have to be exempted from this\ntest.  For instance, @command{false} (from GNU coreutils) is never\nsuccessful, even for @option{--help} or @option{--version}.  You can list\nsuch programs in the variable @code{AM_INSTALLCHECK_STD_OPTIONS_EXEMPT}.\nPrograms (not scripts) listed in this variable should be suffixed by\n@samp{$(EXEEXT)} for the sake of Windows or OS/2.  For instance, suppose we\nbuild @file{false} as a program but @file{true.sh} as a script, and that\nneither of them support @option{--help} or @option{--version}:\n\n@example\nAUTOMAKE_OPTIONS = std-options\nbin_PROGRAMS = false ...\nbin_SCRIPTS = true.sh ...\nAM_INSTALLCHECK_STD_OPTIONS_EXEMPT = false$(EXEEXT) true.sh\n@end example\n\n@item @option{subdir-objects}\n@cindex Options, @option{subdir-objects}\n@opindex subdir-objects\nIf this option is specified, then objects are placed into the\nsubdirectory of the build directory corresponding to the subdirectory of\nthe source file.  For instance, if the source file is\n@file{subdir/file.cxx}, then the output file would be\n@file{subdir/file.o}.\n\n@anchor{tar-formats}\n@item @option{tar-v7}\n@itemx @option{tar-ustar}\n@itemx @option{tar-pax}\n@cindex Option, @option{tar-v7}\n@cindex Option, @option{tar-ustar}\n@cindex Option, @option{tar-pax}\n@cindex @command{tar} formats\n@cindex v7 @command{tar} format\n@cindex ustar format\n@cindex pax format\n@opindex tar-v7\n@opindex tar-ustar\n@opindex tar-pax\n\nThese three mutually exclusive options select the tar format to use\nwhen generating tarballs with @samp{make dist}.  (The tar file created\nis then compressed according to the set of @option{no-dist-gzip},\n@option{dist-bzip2}, @option{dist-lzip}, @option{dist-xz},\n@option{dist-zstd} and @option{dist-tarZ} options in use.)\n\nThese options must be passed as arguments to @code{AM_INIT_AUTOMAKE}\n(@pxref{Macros}) because they can require additional configure checks.\nAutomake will complain if it sees such options in an\n@code{AUTOMAKE_OPTIONS} variable.\n\n@option{tar-v7} selects the old V7 tar format.  This is the historical\ndefault.  This antiquated format is understood by all tar\nimplementations and supports file names with up to 99 characters.  When\ngiven longer file names some tar implementations will diagnose the\nproblem while others will generate broken tarballs or use non-portable\nextensions.  Furthermore, the V7 format cannot store empty\ndirectories.  When using this format, consider using the\n@option{filename-length-max=99} option to catch file names too long.\n\n@option{tar-ustar} selects the ustar format defined by POSIX\n1003.1-1988.  This format is old enough to be portable:\nAs of 2018, it is supported by the native @code{tar} command on\nGNU, FreeBSD, NetBSD, OpenBSD, AIX, HP-UX, and Solaris, at least.\nIt fully supports empty directories.  It can store file names with up\nto 256 characters, provided that the file name can be split at\ndirectory separator in two parts, first of them being at most 155\nbytes long.  So, in most cases the maximum file name length will be\nshorter than 256 characters.\n\n@option{tar-pax} selects the new pax interchange format defined by POSIX\n1003.1-2001.  It does not limit the length of file names.  However,\nthis format is very young and should probably be restricted to\npackages that target only very modern platforms.\nAs of 2018, this format is supported by the native @code{tar} command only\non GNU, FreeBSD, and OpenBSD systems; it is not supported by the native\n@code{tar} command on NetBSD, AIX, HP-UX, or Solaris.\nThere are moves to\nchange the pax format in an upward-compatible way, so this option may\nrefer to a more recent version in the future.\n\n@xref{Formats, , Controlling the Archive Format, tar, GNU Tar}, for\nfurther discussion about tar formats.\n\n@command{configure} knows several ways to construct these formats.  It\nwill not abort if it cannot find a tool up to the task (so that the\npackage can still be built), but @samp{make dist} will fail.\n\n@item @var{version}\n@cindex Option, @var{version}\nA version number (e.g., @samp{0.30}) can be specified.  If Automake is not\nthe same version or\nnewer than the version specified, creation of the @file{Makefile.in}\nwill be suppressed.\n\n@item @option{-W@var{category}} or @option{--warnings=@var{category}}\n@cindex Option, warnings\n@cindex Option, @option{-W@var{category}}\n@cindex Option, @option{--warnings=@var{category}}\nThese options behave exactly like their command-line counterpart\n(@pxref{automake Invocation}).  This allows you to enable or disable some\nwarning categories on a per-file basis.  You can also setup some warnings\nfor your entire project; for instance, try @samp{AM_INIT_AUTOMAKE([-Wall])}\nin your @file{configure.ac}.\n\n@end table\n\nUnrecognized options are diagnosed by @command{automake}.\n\nIf you want an option to apply to all the files in the tree, you can use\nthe @code{AM_INIT_AUTOMAKE} macro in @file{configure.ac}.\n@xref{Macros}.\n\n\n@node Miscellaneous\n@chapter Miscellaneous Rules\n\nThere are a few rules and variables that didn't fit anywhere else.\n\n@menu\n* Tags::                        Interfacing to cscope, etags and mkid\n* Suffixes::                    Handling new file extensions\n@end menu\n\n\n@node Tags\n@section Interfacing to @command{etags}\n\n@cindex @file{TAGS} support\n\nAutomake will generate rules to generate @file{TAGS} files for use with\nGNU Emacs under some circumstances.\n\n@trindex tags\nIf any C, C++ or Fortran 77 source code or headers are present, then\n@code{tags} and @code{TAGS} rules will be generated for the directory.\nAll files listed using the @code{_SOURCES}, @code{_HEADERS}, and\n@code{_LISP} primaries will be used to generate tags.  Note that\ngenerated source files that are not distributed must be declared in\nvariables like @code{nodist_noinst_HEADERS} or\n@code{nodist_@var{prog}_SOURCES} or they will be ignored.\n\nA @code{tags} rule will be output at the topmost directory of a\nmulti-directory package.  When run from this topmost directory,\n@samp{make tags} will generate a @file{TAGS} file that includes by\nreference all @file{TAGS} files from subdirectories.\n\nThe @code{tags} rule will also be generated if the variable\n@code{ETAGS_ARGS} is defined.  This variable is intended for use in\ndirectories that contain taggable source that @command{etags} does\nnot understand.  The user can use the @code{ETAGSFLAGS} to pass\nadditional flags to @command{etags}; @code{AM_ETAGSFLAGS} is also\navailable for use in @file{Makefile.am}.\n@vindex ETAGS_ARGS\n@vindex ETAGSFLAGS\n@vindex AM_ETAGSFLAGS\n\nHere is how Automake generates tags for its source, and for nodes in its\nTexinfo file:\n\n@example\nETAGS_ARGS = automake.in --lang=none \\\n --regex='/^@@node[ \\t]+\\([^,]+\\)/\\1/' automake.texi\n@end example\n\nIf you add file names to @code{ETAGS_ARGS}, you will probably also\nwant to define @code{TAGS_DEPENDENCIES}.  The contents of this variable\nare added directly to the dependencies for the @code{tags} rule.\n@vindex TAGS_DEPENDENCIES\n\nAutomake also generates a @code{ctags} rule that can be used to\nbuild @command{vi}-style @file{tags} files.  The variable @code{CTAGS}\nis the name of the program to invoke (by default @command{ctags});\n@code{CTAGSFLAGS} can be used by the user to pass additional flags,\nand @code{AM_CTAGSFLAGS} can be used by the @file{Makefile.am}.\n\n@trindex id\nAutomake will also generate an @code{ID} rule that will run\n@command{mkid} on the source.  This is only supported on a\ndirectory-by-directory basis.\n\nSimilarly, the @code{cscope} rule will create a list of all the source\nfiles in the tree and run @command{cscope} to build an inverted index\ndatabase.  The variable @code{CSCOPE} is the name of the program to invoke\n(by default @command{cscope}); @code{CSCOPEFLAGS} and\n@code{CSCOPE_ARGS} can be used by the user to pass additional flags and\nfile names respectively, while @code{AM_CSCOPEFLAGS} can be used by the\n@file{Makefile.am}.  Note that, currently, the Automake-provided\n@code{cscope} support, when used in a VPATH build, might not work well\nwith non-GNU make implementations (especially with make implementations\nperforming @ref{Automatic Rule Rewriting, , VPATH rewrites, autoconf,\nThe Autoconf Manual}).\n\nFinally, Automake also emits rules to support the\n@uref{https://www.gnu.org/software/global/, GNU Global Tags program}.\nThe @code{GTAGS} rule runs Global Tags and puts the\nresult in the top build directory.  The variable @code{GTAGS_ARGS}\nholds arguments that are passed to @command{gtags}.\n@vindex GTAGS_ARGS\n\n\n@node Suffixes\n@section Handling new file extensions\n\n@cindex Adding new @code{SUFFIXES}\n@cindex @code{SUFFIXES}, adding\n@vindex SUFFIXES\n\nIt is sometimes useful to introduce a new implicit rule to handle a file\ntype that Automake does not know about.\n\nFor instance, suppose you had a compiler that could compile @file{.foo}\nfiles to @file{.o} files.  You would simply define a suffix rule for\nyour language:\n\n@example\n.foo.o:\n        foocc -c -o $@@ $<\n@end example\n\nThen you could directly use a @file{.foo} file in a @code{_SOURCES}\nvariable and expect the correct results:\n\n@example\nbin_PROGRAMS = doit\ndoit_SOURCES = doit.foo\n@end example\n\nThis was the simpler and more common case.  In other cases, you will\nhave to help Automake to figure out which extensions you are defining your\nsuffix rule for.  This usually happens when your extension does not\nstart with a dot.  Then, all you have to do is to put a list of new\nsuffixes in the @code{SUFFIXES} variable @strong{before} you define your\nimplicit rule.\n\nFor instance, the following definition prevents Automake from misinterpreting\nthe @samp{.idlC.cpp:} rule as an attempt to transform @file{.idlC} files into\n@file{.cpp} files.\n\n@c Keep in sync with suffix7.sh\n@example\nSUFFIXES = .idl C.cpp\n.idlC.cpp:\n        # whatever\n@end example\n\nAs you may have noted, the @code{SUFFIXES} variable behaves like the\n@code{.SUFFIXES} special target of @command{make}.  You should not touch\n@code{.SUFFIXES} yourself, but use @code{SUFFIXES} instead and let\nAutomake generate the suffix list for @code{.SUFFIXES}.  Any given\n@code{SUFFIXES} go at the start of the generated suffixes list, followed\nby Automake generated suffixes not already in the list.\n\n@node Include\n@chapter Include\n\n@cmindex include\n@cindex Including @file{Makefile} fragment\n@cindex @file{Makefile} fragment, including\n\nAutomake supports an @code{include} directive that  can be used to\ninclude other @file{Makefile} fragments when @command{automake} is run.\nNote that these fragments are read and interpreted by @command{automake},\nnot by @command{make}.  As with conditionals, @command{make} has no idea that\n@code{include} is in use.\n\nThere are two forms of @code{include}:\n\n@table @code\n@item include $(srcdir)/file\nInclude a fragment that is found relative to the current source\ndirectory.\n\n@item include $(top_srcdir)/file\nInclude a fragment that is found relative to the top source directory.\n@end table\n\nNote that if a fragment is included inside a conditional, then the\ncondition applies to the entire contents of that fragment.\n\nMakefile fragments included this way are always distributed because\nthey are needed to rebuild @file{Makefile.in}.\n\nInside a fragment, the construct @code{%reldir%} is replaced with the\ndirectory of the fragment relative to the base @file{Makefile.am}.\nSimilarly, @code{%canon_reldir%} is replaced with the canonicalized\n(@pxref{Canonicalization}) form of @code{%reldir%}.  As a convenience,\n@code{%D%} is a synonym for @code{%reldir%}, and @code{%C%}\nis a synonym for @code{%canon_reldir%}.\n\nA special feature is that if the fragment is in the same directory as\nthe base @file{Makefile.am} (i.e., @code{%reldir%} is @code{.}), then\n@code{%reldir%} and @code{%canon_reldir%} will expand to the empty\nstring as well as eat, if present, a following slash or underscore\nrespectively.\n\nThus, a makefile fragment might look like this:\n\n@example\nbin_PROGRAMS += %reldir%/mumble\n%canon_reldir%_mumble_SOURCES = %reldir%/one.c\n@end example\n\n@node Conditionals\n@chapter Conditionals\n\n@cindex Conditionals\n\nAutomake supports a simple type of conditional.\n\nThese conditionals are not the same as conditionals in\nGNU Make.  Automake conditionals are checked at configure time by the\n@file{configure} script, and affect the translation from\n@file{Makefile.in} to @file{Makefile}.  They are based on options passed\nto @file{configure} and on results that @file{configure} has discovered\nabout the host system.  GNU Make conditionals are checked at @command{make}\ntime, and are based on variables passed to the make program or defined\nin the @file{Makefile}.\n\nAutomake conditionals will work with any make program.\n\n@menu\n* Usage of Conditionals::       Declaring conditional content\n* Limits of Conditionals::      Enclosing complete statements\n@end menu\n\n@node Usage of Conditionals\n@section Usage of Conditionals\n\n@acindex AM_CONDITIONAL\nBefore using a conditional, you must define it by using\n@code{AM_CONDITIONAL} in the @file{configure.ac} file (@pxref{Macros}).\n\n@defmac AM_CONDITIONAL (@var{conditional}, @var{condition})\nThe conditional name, @var{conditional}, should be a simple string\nstarting with a letter and containing only letters, digits, and\nunderscores.  It must be different from @samp{TRUE} and @samp{FALSE},\nwhich are reserved by Automake.\n\nThe shell @var{condition} (suitable for use in a shell @code{if}\nstatement) is evaluated when @command{configure} is run.  Note that you\nmust arrange for @emph{every} @code{AM_CONDITIONAL} to be invoked every\ntime @command{configure} is run.  If @code{AM_CONDITIONAL} is run\nconditionally (e.g., in a shell @code{if} statement), then the result\nwill confuse @command{automake}.\n@end defmac\n\n@cindex @option{--enable-debug}, example\n@cindex Example conditional @option{--enable-debug}\n@cindex Conditional example, @option{--enable-debug}\n\nConditionals typically depend upon options that the user provides to\nthe @command{configure} script.  Here is an example of how to write a\nconditional that is true if the user uses the @option{--enable-debug}\noption.\n\n@example\nAC_ARG_ENABLE([debug],\n[  --enable-debug    Turn on debugging],\n[case \"$@{enableval@}\" in\n  yes) debug=true ;;\n  no)  debug=false ;;\n  *) AC_MSG_ERROR([bad value $@{enableval@} for --enable-debug]) ;;\nesac],[debug=false])\nAM_CONDITIONAL([DEBUG], [test x$debug = xtrue])\n@end example\n\nHere is an example of how to use that conditional in @file{Makefile.am}:\n\n@cmindex if\n@cmindex endif\n@cmindex else\n\n@example\nif DEBUG\nDBG = debug\nelse\nDBG =\nendif\nnoinst_PROGRAMS = $(DBG)\n@end example\n\nThis trivial example could also be handled using @code{EXTRA_PROGRAMS}\n(@pxref{Conditional Programs}).\n\nYou may only test a single variable in an @code{if} statement, possibly\nnegated using @samp{!}.  The @code{else} statement may be omitted.\nConditionals may be nested to any depth.  You may specify an argument to\n@code{else} in which case it must be the negation of the condition used\nfor the current @code{if}.  Similarly you may specify the condition\nthat is closed on the @code{endif} line:\n\n@example\nif DEBUG\nDBG = debug\nelse !DEBUG\nDBG =\nendif !DEBUG\n@end example\n\n@noindent\nUnbalanced conditions are errors.  The @code{if}, @code{else}, and\n@code{endif} statements should not be indented, i.e., start on column\none.\n\nThe @code{else} branch of the above two examples could be omitted,\nsince assigning the empty string to an otherwise undefined variable\nmakes no difference.\n\n@acindex AM_COND_IF\nIn order to allow access to the condition registered by\n@code{AM_CONDITIONAL} inside @file{configure.ac}, and to allow\nconditional @code{AC_CONFIG_FILES}, @code{AM_COND_IF} may be used:\n\n@defmac AM_COND_IF (@var{conditional}, @ovar{if-true}, @ovar{if-false})\nIf @var{conditional} is fulfilled, execute @var{if-true}, otherwise\nexecute @var{if-false}.  If either branch contains @code{AC_CONFIG_FILES},\nit will cause @command{automake} to output the rules for the respective\nfiles only for the given condition.\n@end defmac\n\n@code{AM_COND_IF} macros may be nested when m4 quotation is used\nproperly (@pxref{M4 Quotation, ,, autoconf, The Autoconf Manual}).\n\n@cindex Example conditional @code{AC_CONFIG_FILES}\n@cindex @code{AC_CONFIG_FILES}, conditional\n\nHere is an example of how to define a conditional config file:\n\n@example\nAM_CONDITIONAL([SHELL_WRAPPER], [test \"x$with_wrapper\" = xtrue])\nAM_COND_IF([SHELL_WRAPPER],\n           [AC_CONFIG_FILES([wrapper:wrapper.in])])\n@end example\n\n@node Limits of Conditionals\n@section Limits of Conditionals\n\nConditionals should enclose complete statements like variables or\nrules definitions.  Automake cannot deal with conditionals used inside\na variable definition, for instance, and is not even able to diagnose\nthis situation.  The following example would not work:\n\n@example\n# This syntax is not understood by Automake\nAM_CPPFLAGS = \\\n  -DFEATURE_A \\\nif WANT_DEBUG\n  -DDEBUG \\\nendif\n  -DFEATURE_B\n@end example\n\nHowever the intended definition of @code{AM_CPPFLAGS} can be achieved\nwith\n\n@example\nif WANT_DEBUG\n  DEBUGFLAGS = -DDEBUG\nendif\nAM_CPPFLAGS = -DFEATURE_A $(DEBUGFLAGS) -DFEATURE_B\n@end example\n\n@noindent\nor\n\n@example\nAM_CPPFLAGS = -DFEATURE_A\nif WANT_DEBUG\nAM_CPPFLAGS += -DDEBUG\nendif\nAM_CPPFLAGS += -DFEATURE_B\n@end example\n\nMore details and examples of conditionals are described alongside\nvarious Automake features in this manual (@pxref{Conditional\nSubdirectories}, @pxref{Conditional Sources}, @pxref{Conditional\nPrograms}, @pxref{Conditional Libtool Libraries}, @pxref{Conditional\nLibtool Sources}).\n\n@node Silencing Make\n@chapter Silencing @command{make}\n\n@cindex Silent @command{make}\n@cindex Silencing @command{make}\n@cindex Silent rules\n@cindex Silent @command{make} rules\n\n@menu\n* Make verbosity::              Make is verbose by default\n* Tricks For Silencing Make::   Standard and generic ways to silence make\n* Automake Silent Rules::       How Automake can help in silencing make\n@end menu\n\n@node Make verbosity\n@section Make is verbose by default\n\nNormally, when executing the set of rules associated with a target,\n@command{make} prints each rule before it is executed.  This behaviour,\nwhile having been in place for a long time, and being even mandated by\nthe POSIX standard, starkly violates the ``silence is golden'' UNIX\nprinciple@footnote{See also\n@uref{http://catb.org/~esr/writings/taoup/html/ch11s09.html}.}:\n\n@quotation\nWhen a program has nothing interesting or surprising to say, it should\nsay nothing.  Well-behaved Unix programs do their jobs unobtrusively,\nwith a minimum of fuss and bother.  Silence is golden.\n@end quotation\n\nIn fact, while such verbosity of @command{make} can theoretically be\nuseful to track bugs and understand reasons of failures right away, it\ncan also hide warning and error messages from @command{make}-invoked\ntools, drowning them in a flood of uninteresting and seldom useful\nmessages, and thus allowing them to go easily undetected.\n\nThis problem can be very annoying, especially for developers, who usually\nknow quite well what's going on behind the scenes, and for whom the\nverbose output from @command{make} ends up being mostly noise that hampers\nthe easy detection of potentially important warning messages.\n\n@node Tricks For Silencing Make\n@section Standard and generic ways to silence make\n\nHere we describe some common idioms/tricks to obtain a quieter make\noutput, with their relative advantages and drawbacks.  In the next\nsection (@ref{Automake Silent Rules}) we'll see how Automake can help\nin this respect, providing more elaborate and flexible idioms.\n\n@itemize @bullet\n\n@item @command{make -s}\n\nThis simply causes @command{make} not to print @emph{any} rule before\nexecuting it.\n\nThe @option{-s} flag is mandated by POSIX, universally supported, and\nits purpose and function are easy to understand.\n\nBut it also has its serious limitations too.  First of all, it embodies\nan ``all or nothing'' strategy, i.e., either everything is silenced, or\nnothing is; this lack of granularity can sometimes be a fatal flaw.\nMoreover, when the @option{-s} flag is used, the @command{make} output\nmight turn out to be too terse; in case of errors, the user won't\nbe able to easily see what rule or command have caused them, or even,\nin case of tools with poor error reporting, what the errors were!\n\n@item @command{make >/dev/null || make}\n\nApparently, this perfectly obeys the ``silence is golden'' rule: warnings\nfrom stderr are passed through, output reporting is done only in case of\nerror, and in that case it should provide a verbose-enough report to allow\nan easy determination of the error location and causes.\n\nHowever, calling @command{make} two times in a row might hide errors\n(especially intermittent ones), or subtly change the expected semantics\nof the @command{make} calls --- these things can clearly make\ndebugging and error assessment very difficult.\n\n@item @command{make --no-print-directory}\n\nThis is GNU @command{make} specific.  When called with the\n@option{--no-print-directory} option, GNU @command{make} will disable\nprinting of the working directory by invoked sub-@command{make}s (the\nwell-known ``@i{Entering/Leaving directory ...}'' messages).  This helps\nto decrease the verbosity of the output, but experience has shown that\nit can also often render debugging considerably harder in projects using\ndeeply-nested @command{make} recursion.\n\nAs an aside, notice that the @option{--no-print-directory} option is\nautomatically activated if the @option{-s} flag is used.\n\n@c TODO: Other tricks?\n@c TODO: Maybe speak about the @code{.SILENT} target?\n@c TODO:  - Pros: More granularity on what to silence.\n@c TODO:  - Cons: No easy way to temporarily override.\n\n@end itemize\n\n@node Automake Silent Rules\n@section How Automake can help in silencing make\n\nThe tricks and idioms for silencing @command{make} described in the\nprevious section can be useful from time to time, but we've seen that\nthey all have their serious drawbacks and limitations.  That's why\nautomake provides support for a more advanced and flexible way of\nobtaining quieter output from @command{make} (for most rules at least).\n\nTo give the gist of what Automake can do in this respect, here is a simple\ncomparison between a typical @command{make} output (where silent rules\nare disabled) and one with silent rules enabled:\n\n@example\n% @kbd{cat Makefile.am}\nbin_PROGRAMS = foo\nfoo_SOURCES = main.c func.c\n% @kbd{cat main.c}\nint main (void) @{ return func (); @}  /* func used undeclared */\n% @kbd{cat func.c}\nint func (void) @{ int i; return i; @} /* i used uninitialized */\n\n@i{The make output is by default very verbose.  This causes warnings\nfrom the compiler to be somewhat hidden, and not immediate to spot.}\n% @kbd{make CFLAGS=-Wall}\ngcc -DPACKAGE_NAME=\\\"foo\\\" -DPACKAGE_TARNAME=\\\"foo\\\" ...\n-DPACKAGE_STRING=\\\"foo\\ 1.0\\\" -DPACKAGE_BUGREPORT=\\\"\\\" ...\n-DPACKAGE=\\\"foo\\\" -DVERSION=\\\"1.0\\\" -I. -Wall -MT main.o\n-MD -MP -MF .deps/main.Tpo -c -o main.o main.c\nmain.c: In function \u2018main\u2019:\nmain.c:3:3: warning: implicit declaration of function \u2018func\u2019\nmv -f .deps/main.Tpo .deps/main.Po\ngcc -DPACKAGE_NAME=\\\"foo\\\" -DPACKAGE_TARNAME=\\\"foo\\\" ...\n-DPACKAGE_STRING=\\\"foo\\ 1.0\\\" -DPACKAGE_BUGREPORT=\\\"\\\" ...\n-DPACKAGE=\\\"foo\\\" -DVERSION=\\\"1.0\\\" -I. -Wall -MT func.o\n-MD -MP -MF .deps/func.Tpo -c -o func.o func.c\nfunc.c: In function \u2018func\u2019:\nfunc.c:4:3: warning: \u2018i\u2019 used uninitialized in this function\nmv -f .deps/func.Tpo .deps/func.Po\ngcc -Wall -o foo main.o func.o\n\n@i{Clean up, so that we we can rebuild everything from scratch.}\n% @kbd{make clean}\ntest -z \"foo\" || rm -f foo\nrm -f *.o\n\n@i{Silent rules enabled: the output is minimal but informative.  In\nparticular, the warnings from the compiler stick out very clearly.}\n% @kbd{make V=0 CFLAGS=-Wall}\n  CC     main.o\nmain.c: In function \u2018main\u2019:\nmain.c:3:3: warning: implicit declaration of function \u2018func\u2019\n  CC     func.o\nfunc.c: In function \u2018func\u2019:\nfunc.c:4:3: warning: \u2018i\u2019 used uninitialized in this function\n  CCLD   foo\n@end example\n\n@cindex silent rules and libtool\nAlso, in projects using @command{libtool}, the use of silent rules can\nautomatically enable the @command{libtool}'s @option{--silent} option:\n\n@example\n% @kbd{cat Makefile.am}\nlib_LTLIBRARIES = libx.la\n\n% @kbd{make # Both make and libtool are verbose by default.}\n...\nlibtool: compile: gcc -DPACKAGE_NAME=\\\"foo\\\" ... -DLT_OBJDIR=\\\".libs/\\\"\n  -I. -g -O2 -MT libx.lo -MD -MP -MF .deps/libx.Tpo -c libx.c -fPIC\n  -DPIC -o .libs/libx.o\nmv -f .deps/libx.Tpo .deps/libx.Plo\n/bin/sh ./libtool --tag=CC --mode=link gcc -g -O2 -o libx.la -rpath\n  /usr/local/lib libx.lo\nlibtool: link: gcc -shared .libs/libx.o -Wl,-soname -Wl,libx.so.0\n  -o .libs/libx.so.0.0.0\nlibtool: link: cd .libs && rm -f libx.so && ln -s libx.so.0.0.0 libx.so\n...\n\n% @kbd{make V=0}\n  CC     libx.lo\n  CCLD   libx.la\n@end example\n\nFor Automake-generated @file{Makefile}s, the user may influence the\nverbosity at @command{configure} run time as well as at @command{make}\nrun time:\n\n@itemize @bullet\n@item\n@opindex --enable-silent-rules\n@opindex --disable-silent-rules\nPassing @option{--enable-silent-rules} to @command{configure} will cause\nbuild rules to be less verbose; the option @option{--disable-silent-rules}\nwill cause normal verbose output.\n@item\n@vindex @code{V}\nAt @command{make} run time, the default chosen at @command{configure}\ntime may be overridden: @code{make V=1} will produce verbose output,\n@code{make V=0} less verbose output.\n@end itemize\n\n@cindex default verbosity for silent rules\nNote that silent rules are @emph{disabled} by default; the user must\nenable them explicitly at either @command{configure} run time or at\n@command{make} run time.  We think that this is a good policy, since\nit provides the casual user with enough information to prepare a good\nbug report in case anything breaks.\n\nStill, notwithstanding the rationales above, a developer who really\nwants to make silent rules enabled by default in his own package can\ndo so by calling @code{AM_SILENT_RULES([yes])} in @file{configure.ac}.\n\n@c Keep in sync with silent-configsite.sh\nUsers who prefer to have silent rules enabled by default can edit their\n@file{config.site} file to make the variable @code{enable_silent_rules}\ndefault to @samp{yes}.  This should still allow disabling silent rules\nat @command{configure} time and at @command{make} time.\n\n@c FIXME: there's really a need to specify this explicitly?\nFor portability to different @command{make} implementations, package authors\nare advised to not set the variable @code{V} inside the @file{Makefile.am}\nfile, to allow the user to override the value for subdirectories as well.\n\nTo work at its best, the current implementation of this feature normally\nuses nested variable expansion @samp{$(@var{var1}$(V))}, a @file{Makefile}\nfeature that is not required by POSIX 2008 but is widely supported in\npractice.  On the rare @command{make} implementations that do not support\nnested variable expansion, whether rules are silent is always determined at\nconfigure time, and cannot be overridden at make time.  Future versions of\nPOSIX are likely to require nested variable expansion, so this minor\nlimitation should go away with time.\n\n@vindex @code{AM_V_GEN}\n@vindex @code{AM_V_at}\n@vindex @code{AM_DEFAULT_VERBOSITY}\n@vindex @code{AM_V}\n@vindex @code{AM_DEFAULT_V}\nTo extend the silent mode to your own rules, you have a few choices:\n\n@itemize @bullet\n\n@item\nYou can use the predefined variable @code{AM_V_GEN} as a prefix to\ncommands that should output a status line in silent mode, and\n@code{AM_V_at} as a prefix to commands that should not output anything\nin silent mode.  When output is to be verbose, both of these variables\nwill expand to the empty string.\n\n@item\nYou can silence a recipe unconditionally with @code{@@}, and then use\nthe predefined variable @code{AM_V_P} to know whether make is being run\nin silent or verbose mode; adjust the verbose information your recipe\ndisplays accordingly:\n\n@example\ngenerate-headers:\n        @set -e; \\\n        ... [commands defining a shell variable '$headers'] ...; \\\n        if $(AM_V_P); then set -x; else echo \" GEN   [headers]\"; fi; \\\n        rm -f $$headers && generate-header --flags $$headers\n@end example\n\n@item\nYou can add your own variables, so strings of your own choice are shown.\nThe following snippet shows how you would define your own equivalent of\n@code{AM_V_GEN}:\n\n@example\npkg_verbose = $(pkg_verbose_@@AM_V@@)\npkg_verbose_ = $(pkg_verbose_@@AM_DEFAULT_V@@)\npkg_verbose_0 = @@echo PKG-GEN $@@;\n\nfoo: foo.in\n        $(pkg_verbose)cp $(srcdir)/foo.in $@@\n@end example\n\n@end itemize\n\nAs a final note, observe that, even when silent rules are enabled,\nthe @option{--no-print-directory} option is still required with GNU\n@command{make} if the ``@i{Entering/Leaving directory ...}'' messages\nare to be disabled.\n\n@node Not Enough\n@chapter When Automake Isn't Enough\n\nIn some situations, where Automake is not up to one task, one has to\nresort to handwritten rules or even handwritten @file{Makefile}s.\n\n@menu\n* Extending::                   Adding new rules or overriding existing ones.\n* Third-Party Makefiles::       Integrating Non-Automake @file{Makefile}s.\n@end menu\n\n@node Extending\n@section Extending Automake Rules\n\nWith some minor exceptions (for example @code{_PROGRAMS} variables,\n@code{TESTS}, or @code{XFAIL_TESTS}) being rewritten to append\n@samp{$(EXEEXT)}), the contents of a @file{Makefile.am} is copied to\n@file{Makefile.in} verbatim.\n\n@cindex copying semantics\n\nThese copying semantics mean that many problems can be worked around\nby simply adding some @command{make} variables and rules to\n@file{Makefile.am}.  Automake will ignore these additions.\n\n@cindex conflicting definitions\n@cindex rules, conflicting\n@cindex variables, conflicting\n@cindex definitions, conflicts\n\nSince a @file{Makefile.in} is built from data gathered from three\ndifferent places (@file{Makefile.am}, @file{configure.ac}, and\n@command{automake} itself), it is possible to have conflicting\ndefinitions of rules or variables.  When building @file{Makefile.in}\nthe following priorities are respected by @command{automake} to ensure\nthe user always has the last word:\n\n@itemize\n@item\nUser defined variables in @file{Makefile.am} have priority over\nvariables @code{AC_SUBST}ed from @file{configure.ac}, and\n@code{AC_SUBST}ed variables have priority over\n@command{automake}-defined variables.\n@item\nAs far as rules are concerned, a user-defined rule overrides any\n@command{automake}-defined rule for the same target.\n@end itemize\n\n@cindex overriding rules\n@cindex overriding semantics\n@cindex rules, overriding\n\nThese overriding semantics make it possible to fine tune some default\nsettings of Automake, or replace some of its rules.  Overriding\nAutomake rules is often inadvisable, particularly in the topmost\ndirectory of a package with subdirectories.  The @option{-Woverride}\noption (@pxref{automake Invocation}) comes in handy to catch overridden\ndefinitions.\n\nNote that Automake does not make any distinction between rules with\ncommands and rules that only specify dependencies.  So it is not\npossible to append new dependencies to an @command{automake}-defined\ntarget without redefining the entire rule.\n\n@cindex @option{-local} targets\n@cindex local targets\n\nHowever, various useful targets have a @samp{-local} version you can\nspecify in your @file{Makefile.am}.  Automake will supplement the\nstandard target with these user-supplied targets.\n\n@trindex  all\n@trindex  all-local\n@trindex  info\n@trindex  info-local\n@trindex  dvi\n@trindex  dvi-local\n@trindex  ps\n@trindex  ps-local\n@trindex  pdf\n@trindex  pdf-local\n@trindex  html\n@trindex  html-local\n@trindex  check\n@trindex  check-local\n@trindex  install\n@trindex  install-data\n@trindex  install-data-local\n@trindex  install-dvi\n@trindex  install-dvi-local\n@trindex  install-exec\n@trindex  install-exec-local\n@trindex  install-html\n@trindex  install-html-local\n@trindex  install-info\n@trindex  install-info-local\n@trindex  install-pdf\n@trindex  install-pdf-local\n@trindex  install-ps\n@trindex  install-ps-local\n@trindex  uninstall\n@trindex  uninstall-local\n@trindex  mostlyclean\n@trindex  mostlyclean-local\n@trindex  clean\n@trindex  clean-local\n@trindex  distclean\n@trindex  distclean-local\n@trindex  installdirs\n@trindex  installdirs-local\n@trindex  installcheck\n@trindex  installcheck-local\n\nThe targets that support a local version are @code{all}, @code{info},\n@code{dvi}, @code{ps}, @code{pdf}, @code{html}, @code{check},\n@code{install-data}, @code{install-dvi}, @code{install-exec},\n@code{install-html}, @code{install-info}, @code{install-pdf},\n@code{install-ps}, @code{uninstall}, @code{installdirs},\n@code{installcheck} and the various @code{clean} targets\n(@code{mostlyclean}, @code{clean}, @code{distclean}, and\n@code{maintainer-clean}).\n\nNote that there are no @code{uninstall-exec-local} or\n@code{uninstall-data-local} targets; just use @code{uninstall-local}.\nIt doesn't make sense to uninstall just data or just executables.\n\nFor instance, here is one way to erase a subdirectory during\n@samp{make clean} (@pxref{Clean}).\n\n@example\nclean-local:\n        -rm -rf testSubDir\n@end example\n\nYou may be tempted to use @code{install-data-local} to install a file\nto some hard-coded location, but you should avoid this\n(@pxref{Hard-Coded Install Paths}).\n\nWith the @code{-local} targets, there is no particular guarantee of\nexecution order; typically, they are run early, but with parallel\nmake, there is no way to be sure of that.\n\n@cindex @option{-hook} targets\n@cindex hook targets\n@trindex install-data-hook\n@trindex install-exec-hook\n@trindex uninstall-hook\n@trindex dist-hook\n\nIn contrast, some rules also have a way to run another rule, called a\n@dfn{hook}; hooks are always executed after the main rule's work is done.\nThe hook is named after the principal target, with @samp{-hook} appended.\nThe targets allowing hooks are @code{install-data},\n@code{install-exec}, @code{uninstall}, @code{dist}, and\n@code{distcheck}.\n\nFor instance, here is how to create a hard link to an installed program:\n\n@example\ninstall-exec-hook:\n        ln $(DESTDIR)$(bindir)/program$(EXEEXT) \\\n           $(DESTDIR)$(bindir)/proglink$(EXEEXT)\n@end example\n\nAlthough cheaper and more portable than symbolic links, hard links\nwill not work everywhere (for instance, OS/2 does not have\n@command{ln}).  Ideally you should fall back to @samp{cp -p} when\n@command{ln} does not work.  An easy way, if symbolic links are\nacceptable to you, is to add @code{AC_PROG_LN_S} to\n@file{configure.ac} (@pxref{Particular Programs, , Particular Program\nChecks, autoconf, The Autoconf Manual}) and use @samp{$(LN_S)} in\n@file{Makefile.am}.\n\n@cindex versioned binaries, installing\n@cindex installing versioned binaries\n@cindex @code{LN_S} example\nFor instance, here is how you could install a versioned copy of a\nprogram using @samp{$(LN_S)}:\n\n@c Keep in sync with insthook.sh\n@example\ninstall-exec-hook:\n        cd $(DESTDIR)$(bindir) && \\\n          mv -f prog$(EXEEXT) prog-$(VERSION)$(EXEEXT) && \\\n          $(LN_S) prog-$(VERSION)$(EXEEXT) prog$(EXEEXT)\n@end example\n\nNote that we rename the program so that a new version will erase the\nsymbolic link, not the real binary.  Also we @command{cd} into the\ndestination directory in order to create relative links.\n\nWhen writing @code{install-exec-hook} or @code{install-data-hook},\nplease bear in mind that the exec/data distinction is based on the\ninstallation directory, not on the primary used (@pxref{The Two Parts of\nInstall}).\n@c Keep in sync with primary-prefix-couples-documented-valid.sh\nSo a @code{foo_SCRIPTS} will be installed by\n@code{install-data}, and a @code{barexec_SCRIPTS} will be installed by\n@code{install-exec}.  You should define your hooks accordingly.\n\n@c FIXME should include discussion of variables you can use in these\n@c rules\n\n@node Third-Party Makefiles\n@section Third-Party @file{Makefile}s\n\n@cindex Third-party packages, interfacing with\n@cindex Interfacing with third-party packages\n\nIn most projects all @file{Makefile}s are generated by Automake.  In\nsome cases, however, projects need to embed subdirectories with\nhandwritten @file{Makefile}s.  For instance, one subdirectory could be\na third-party project with its own build system, not using Automake.\n\nIt is possible to list arbitrary directories in @code{SUBDIRS} or\n@code{DIST_SUBDIRS} provided each of these directories has a\n@file{Makefile} that recognizes all the following recursive targets.\n\n@cindex recursive targets and third-party @file{Makefile}s\nWhen a user runs one of these targets, that target is run recursively\nin all subdirectories.  This is why it is important that even\nthird-party @file{Makefile}s support them.\n\n@table @code\n@item all\nCompile the entire package.  This is the default target in\nAutomake-generated @file{Makefile}s, but it does not need to be the\ndefault in third-party @file{Makefile}s.\n\n@item distdir\n@trindex distdir\n@vindex distdir\n@vindex top_distdir\nCopy files to distribute into @samp{$(distdir)}, before a tarball is\nconstructed.  Of course this target is not required if the\n@option{no-dist} option (@pxref{Options}) is used.\n\nThe variables @samp{$(top_distdir)} and @samp{$(distdir)}\n(@pxref{The dist Hook}) will be passed from the outer package to the subpackage\nwhen the @code{distdir} target is invoked.  These two variables have\nbeen adjusted for the directory that is being recursed into, so they\nare ready to use.\n\n@item install\n@itemx install-data\n@itemx install-exec\n@itemx uninstall\nInstall or uninstall files (@pxref{Install}).\n\n@item install-dvi\n@itemx install-html\n@itemx install-info\n@itemx install-ps\n@itemx install-pdf\nInstall only some specific documentation format (@pxref{Texinfo}).\n\n@item installdirs\nCreate install directories, but do not install any files.\n\n@item check\n@itemx installcheck\nCheck the package (@pxref{Tests}).\n\n@item mostlyclean\n@itemx clean\n@itemx distclean\n@itemx maintainer-clean\nCleaning rules (@pxref{Clean}).\n\n@item dvi\n@itemx pdf\n@itemx ps\n@itemx info\n@itemx html\nBuild the documentation in various formats (@pxref{Texinfo}).\n\n@item tags\n@itemx ctags\nBuild @file{TAGS} and @file{CTAGS} (@pxref{Tags}).\n@end table\n\nIf you have ever used Gettext in a project, this is a good example of\nhow third-party @file{Makefile}s can be used with Automake.  The\n@file{Makefile}s that @command{gettextize} puts in the @file{po/} and\n@file{intl/} directories are handwritten @file{Makefile}s that\nimplement all of these targets.  That way they can be added to\n@code{SUBDIRS} in Automake packages.\n\nDirectories that are only listed in @code{DIST_SUBDIRS} but not in\n@code{SUBDIRS} need only the @code{distclean},\n@code{maintainer-clean}, and @code{distdir} rules (@pxref{Conditional\nSubdirectories}).\n\nUsually, many of these rules are irrelevant to the third-party\nsubproject, but they are required for the whole package to work.  It's\nOK to have a rule that does nothing, so if you are integrating a\nthird-party project with no documentation or tag support, you could\nsimply augment its @file{Makefile} as follows:\n\n@vindex EMPTY_AUTOMAKE_TARGETS\n@cindex Automake targets, no-op\n@cindex do-nothing Automake targets\n@cindex empty Automake targets\n@cindex no-op Automake targets\n@cindex targets, making into no-op\n@example\nEMPTY_AUTOMAKE_TARGETS = dvi pdf ps info html tags ctags\n.PHONY: $(EMPTY_AUTOMAKE_TARGETS)\n$(EMPTY_AUTOMAKE_TARGETS):\n@end example\n\nTo be clear, there is nothing special about the variable name\n@code{EMPTY_AUTOMAKE_TARGETS}; the name could be anything.\n\nAnother aspect of integrating third-party build systems is whether\nthey support VPATH builds (@pxref{VPATH Builds}).  Obviously if the\nsubpackage does not support VPATH builds the whole package will not\nsupport VPATH builds.  This in turns means that @samp{make distcheck}\nwill not work, because it relies on VPATH builds.  Some people can\nlive without this (actually, many Automake users have never heard of\n@samp{make distcheck}).  Other people may prefer to revamp the\nexisting @file{Makefile}s to support VPATH@.  Doing so does not\nnecessarily require Automake; only Autoconf is needed (@pxref{Build\nDirectories, , Build Directories, autoconf, The Autoconf Manual}).\nThe necessary substitutions: @samp{@@srcdir@@}, @samp{@@top_srcdir@@},\nand @samp{@@top_builddir@@} are defined by @file{configure} when it\nprocesses a @file{Makefile} (@pxref{Preset Output Variables, , Preset\nOutput Variables, autoconf, The Autoconf Manual}); they are not\ncomputed by the Makefile like the aforementioned @samp{$(distdir)} and\n@samp{$(top_distdir)} variables.\n\nIt is sometimes inconvenient to modify a third-party @file{Makefile}\nto introduce the above required targets.  For instance, one may want to\nkeep the third-party sources untouched to ease upgrades to new\nversions.\n\n@cindex @file{GNUmakefile} including @file{Makefile}\nHere are two other ideas.  If GNU make is assumed, one possibility is\nto add to that subdirectory a @file{GNUmakefile} that defines the\nrequired targets and includes the third-party @file{Makefile}.  For\nthis to work in VPATH builds, @file{GNUmakefile} must lie in the build\ndirectory; the easiest way to do this is to write a\n@file{GNUmakefile.in} instead, and have it processed with\n@code{AC_CONFIG_FILES} from the outer package.  For example if we\nassume @file{Makefile} defines all targets except the documentation\ntargets, and that the @code{check} target is actually called\n@code{test}, we could write @file{GNUmakefile} (or\n@file{GNUmakefile.in}) like this:\n\n@example\n# First, include the real Makefile\ninclude Makefile\n# Then, define the other targets needed by Automake Makefiles.\n.PHONY: dvi pdf ps info html check\ndvi pdf ps info html:\ncheck: test\n@end example\n\n@cindex Proxy @file{Makefile} for third-party packages\nA similar idea that does not use @code{include} is to write a proxy\n@file{Makefile} that dispatches rules to the real @file{Makefile},\neither with @samp{$(MAKE) -f Makefile.real $(AM_MAKEFLAGS) target} (if\nit's OK to rename the original @file{Makefile}) or with @samp{cd\nsubdir && $(MAKE) $(AM_MAKEFLAGS) target} (if it's OK to store the\nsubdirectory project one directory deeper).  The good news is that\nthis proxy @file{Makefile} can be generated with Automake.  All we\nneed are @option{-local} targets (@pxref{Extending}) that perform the\ndispatch.  Of course the other Automake features are available, so you\ncould decide to let Automake perform distribution or installation.\nHere is a possible @file{Makefile.am}:\n\n@example\nall-local:\n        cd subdir && $(MAKE) $(AM_MAKEFLAGS) all\ncheck-local:\n        cd subdir && $(MAKE) $(AM_MAKEFLAGS) test\nclean-local:\n        cd subdir && $(MAKE) $(AM_MAKEFLAGS) clean\n\n# Assuming the package knows how to install itself\ninstall-data-local:\n        cd subdir && $(MAKE) $(AM_MAKEFLAGS) install-data\ninstall-exec-local:\n        cd subdir && $(MAKE) $(AM_MAKEFLAGS) install-exec\nuninstall-local:\n        cd subdir && $(MAKE) $(AM_MAKEFLAGS) uninstall\n\n# Distribute files from here.\nEXTRA_DIST = subdir/Makefile subdir/program.c ...\n@end example\n\nPushing this idea to the extreme, it is also possible to ignore the\nsubproject build system and build everything from this proxy\n@file{Makefile.am}.  This might sound very sensible if you need VPATH\nbuilds but the subproject does not support them.\n\n@node Distributing\n@chapter Distributing @file{Makefile.in}s\n\nAutomake places no restrictions on the distribution of the resulting\n@file{Makefile.in}s.  We still encourage software authors to\ndistribute their work under terms like those of the GPL, but doing so\nis not required to use Automake.\n\nSome of the files that can be automatically installed via the\n@option{--add-missing} switch do fall under the GPL@.  However, these also\nhave a special exception allowing you to distribute them with your\npackage, regardless of the licensing you choose.\n\n\n@node API Versioning\n@chapter Automake API Versioning\n\nNew Automake releases usually include bug fixes and new features.\nUnfortunately they may also introduce new bugs and incompatibilities.\nThis makes four reasons why a package may require a particular Automake\nversion.\n\nThings get worse when maintaining a large tree of packages, each one\nrequiring a different version of Automake.  In the past, this meant that\nany developer (and sometimes users) had to install several versions of\nAutomake in different places, and switch @samp{$PATH} appropriately for\neach package.\n\nStarting with version 1.6, Automake installs versioned binaries.  This\nmeans you can install several versions of Automake in the same\n@samp{$prefix}, and can select an arbitrary Automake version by running\n@command{automake-1.6} or @command{automake-1.7} without juggling with\n@samp{$PATH}.  Furthermore, @file{Makefile}s generated by Automake 1.6\nwill use @command{automake-1.6} explicitly in their rebuild rules.\n\nThe number @samp{1.6} in @command{automake-1.6} is Automake's API version,\nnot Automake's version.  If a bug fix release is made, for instance\nAutomake 1.6.1, the API version will remain 1.6.  This means that a\npackage that works with Automake 1.6 should also work with 1.6.1; after\nall, this is what people expect from bug fix releases.\n\nIf your package relies on a feature or a bug fix introduced in\na release, you can pass this version as an option to Automake to ensure\nolder releases will not be used.  For instance, use this in your\n@file{configure.ac}:\n\n@example\n  AM_INIT_AUTOMAKE([1.6.1])    dnl Require Automake 1.6.1 or better.\n@end example\n\n@noindent\nor, in a particular @file{Makefile.am}:\n\n@example\n  AUTOMAKE_OPTIONS = 1.6.1   # Require Automake 1.6.1 or better.\n@end example\n\n@noindent\nAutomake will print an error message if its version is\nolder than the requested version.\n\n\n@heading What is in the API\n\nAutomake's programming interface is not easy to define.  Basically it\nshould include at least all @strong{documented} variables and targets\nthat a @file{Makefile.am} author can use, any behavior associated with\nthem (e.g., the places where @samp{-hook}'s are run), the command line\ninterface of @command{automake} and @command{aclocal}, @dots{}\n\n@heading What is not in the API\n\nEvery undocumented variable, target, or command line option is not part\nof the API@.  You should avoid using them, as they could change from one\nversion to the other (even in bug fix releases, if this helps to fix a\nbug).\n\nIf it turns out you need to use such an undocumented feature, contact\n@email{automake@@gnu.org} and try to get it documented and exercised by\nthe test-suite.\n\n@node Upgrading\n@chapter Upgrading a Package to a Newer Automake Version\n\nAutomake maintains three kinds of files in a package.\n\n@itemize\n@item @file{aclocal.m4}\n@item @file{Makefile.in}s\n@item auxiliary tools like @file{install-sh} or @file{py-compile}\n@end itemize\n\n@file{aclocal.m4} is generated by @command{aclocal} and contains some\nAutomake-supplied M4 macros.  Auxiliary tools are installed by\n@samp{automake --add-missing} when needed.  @file{Makefile.in}s are\nbuilt from @file{Makefile.am} by @command{automake}, and rely on the\ndefinitions of the M4 macros put in @file{aclocal.m4} as well as the\nbehavior of the auxiliary tools installed.\n\nBecause all of these files are closely related, it is important to\nregenerate all of them when upgrading to a newer Automake release.\nThe usual way to do that is\n\n@example\naclocal # with any option needed (such as -I m4)\nautoconf\nautomake --add-missing --force-missing\n@end example\n\n@noindent\nor more conveniently:\n\n@example\nautoreconf -vfi\n@end example\n\nThe use of @option{--force-missing} ensures that auxiliary tools will be\noverridden by new versions (@pxref{automake Invocation}).\n\nIt is important to regenerate all of these files each time Automake is\nupgraded, even between bug fix releases.  For instance, it is not\nunusual for a bug fix to involve changes to both the rules generated\nin @file{Makefile.in} and the supporting M4 macros copied to\n@file{aclocal.m4}.\n\nPresently @command{automake} is able to diagnose situations where\n@file{aclocal.m4} has been generated with another version of\n@command{aclocal}.  However it never checks whether auxiliary scripts\nare up-to-date.  In other words, @command{automake} will tell you when\n@command{aclocal} needs to be rerun, but it will never diagnose a\nmissing @option{--force-missing}.\n\nBefore upgrading to a new major release, it is a good idea to read the\nfile @file{NEWS}.  This file lists all changes between releases: new\nfeatures, obsolete constructs, known incompatibilities, and\nworkarounds.\n\n@node FAQ\n@chapter Frequently Asked Questions about Automake\n\nThis chapter covers some questions that often come up on the mailing\nlists.\n\n@menu\n* CVS::                         CVS and generated files\n* maintainer-mode::             missing and AM_MAINTAINER_MODE\n* Wildcards::                   Why doesn't Automake support wildcards?\n* Limitations on File Names::   Limitations on source and installed file names\n* Errors with distclean::       Files left in build directory after distclean\n* Flag Variables Ordering::     CFLAGS vs.@: AM_CFLAGS vs.@: mumble_CFLAGS\n* Renamed Objects::             Why are object files sometimes renamed?\n* Per-Object Flags::            How to simulate per-object flags?\n* Multiple Outputs::            Writing rules for tools with many output files\n* Hard-Coded Install Paths::    Installing to hard-coded locations\n* Debugging Make Rules::        Strategies when things don't work as expected\n* Reporting Bugs::              Feedback on bugs and feature requests\n@end menu\n\n@node CVS\n@section CVS and generated files\n\n@subheading Background: distributed generated Files\n@cindex generated files, distributed\n@cindex rebuild rules\n\nPackages made with Autoconf and Automake ship with some generated\nfiles like @file{configure} or @file{Makefile.in}.  These files were\ngenerated on the developer's machine and are distributed so that\nend-users do not have to install the maintainer tools required to\nrebuild them.  Other generated files like Lex scanners, Yacc parsers,\nor Info documentation are usually distributed on similar grounds.\n\nAutomake output generates rules in @file{Makefile}s to rebuild these files.\nFor instance, @command{make} will run @command{autoconf} to rebuild\n@file{configure} whenever @file{configure.ac} is changed.  This makes\ndevelopment safer by ensuring a @file{configure} is never out-of-date\nwith respect to @file{configure.ac}.\n\nAs generated files shipped in packages are up-to-date, and because\n@command{tar} preserves times-tamps, these rebuild rules are not\ntriggered when a user unpacks and builds a package.\n\n@subheading Background: CVS and Timestamps\n@cindex timestamps and CVS\n@cindex CVS and timestamps\n\nUnless you use CVS keywords (in which case files must be updated at\ncommit time), CVS preserves timestamp during @samp{cvs commit} and\n@samp{cvs import -d} operations.\n\nWhen you check out a file using @samp{cvs checkout} its timestamp is\nset to that of the revision that is being checked out.\n\nHowever, during @command{cvs update}, files will have the date of the\nupdate, not the original timestamp of this revision.  This is meant to\nmake sure that @command{make} notices that sources files have been updated.\n\nThis timestamp shift is troublesome when both sources and generated\nfiles are kept under CVS@.  Because CVS processes files in lexical\norder, @file{configure.ac} will appear newer than @file{configure}\nafter a @command{cvs update} that updates both files, even if\n@file{configure} was newer than @file{configure.ac} when it was\nchecked in.  Calling @command{make} will then trigger a spurious rebuild\nof @file{configure}.\n\n@subheading Living with CVS in Autoconfiscated Projects\n@cindex CVS and generated files\n@cindex generated files and CVS\n\nThere are basically two clans amongst maintainers: those who keep all\ndistributed files under CVS, including generated files, and those who\nkeep generated files @emph{out} of CVS.\n\n@subsubheading All Files in CVS\n\n@itemize @bullet\n@item\nThe CVS repository contains all distributed files so you know exactly\nwhat is distributed, and you can check out any prior version entirely.\n\n@item\nMaintainers can see how generated files evolve (for instance, you can\nsee what happens to your @file{Makefile.in}s when you upgrade Automake\nand make sure they look OK).\n\n@item\nUsers do not need Autotools to build a check-out of the project; it\nworks just like a released tarball.\n\n@item\nIf users use @command{cvs update} to update their copy, instead of\n@command{cvs checkout} to fetch a fresh one, timestamps will be\ninaccurate.  Some rebuild rules will be triggered and attempt to\nrun developer tools such as @command{autoconf} or @command{automake}.\n\nCalls to such tools are all wrapped into a call to the @command{missing}\nscript discussed later (@pxref{maintainer-mode}), so that the user will\nsee more descriptive warnings about missing or out-of-date tools, and\npossible suggestions about how to obtain them, rather than just some\n``command not found'' error, or (worse) some obscure message from some\nolder version of the required tool they happen to have installed.\n\nMaintainers interested in keeping their package buildable from a CVS\ncheckout even for those users that lack maintainer-specific tools might\nwant to provide a helper script (or to enhance their existing bootstrap\nscript) to fix the timestamps after a\n@command{cvs update} or a @command{git checkout}, to prevent spurious\nrebuilds.  In case of a project committing the Autotools-generated\nfiles, as well as the generated @file{.info} files, such a script might\nlook something like this:\n\n@smallexample\n#!/bin/sh\n# fix-timestamp.sh: prevents useless rebuilds after \"cvs update\"\nsleep 1\n# aclocal-generated aclocal.m4 depends on locally-installed\n# '.m4' macro files, as well as on 'configure.ac'\ntouch aclocal.m4\nsleep 1\n# autoconf-generated configure depends on aclocal.m4 and on\n# configure.ac\ntouch configure\n# so does autoheader-generated config.h.in\ntouch config.h.in\n# and all the automake-generated Makefile.in files\ntouch `find . -name Makefile.in -print`\n# finally, the makeinfo-generated '.info' files depend on the\n# corresponding '.texi' files\ntouch doc/*.info\n@end smallexample\n\n@item\nIn distributed development, developers are likely to have different\nversions of the maintainer tools installed.  In this case rebuilds\ntriggered by timestamp lossage will lead to spurious changes\nto generated files.  There are several solutions to this:\n\n@itemize\n@item\nAll developers should use the same versions, so that the rebuilt files\nare identical to files in CVS@.  (This starts to be difficult when each\nproject you work on uses different versions.)\n@item\nOr people use a script to fix the timestamp after a checkout (the GCC\nfolks have such a script).\n@item\nOr @file{configure.ac} uses @code{AM_MAINTAINER_MODE}, which will\ndisable all of these rebuild rules by default.  This is further discussed\nin @ref{maintainer-mode}.\n@end itemize\n\n@item\nAlthough we focused on spurious rebuilds, the converse can also\nhappen.  CVS's timestamp handling can also let you think an\nout-of-date file is up-to-date.\n\nFor instance, suppose a developer has modified @file{Makefile.am} and\nhas rebuilt @file{Makefile.in}, and then decides to do a last-minute\nchange to @file{Makefile.am} right before checking in both files\n(without rebuilding @file{Makefile.in} to account for the change).\n\nThis last change to @file{Makefile.am} makes the copy of\n@file{Makefile.in} out-of-date.  Since CVS processes files\nalphabetically, when another developer @samp{cvs update}s his or her\ntree, @file{Makefile.in} will happen to be newer than\n@file{Makefile.am}.  This other developer will not see that\n@file{Makefile.in} is out-of-date.\n\n@end itemize\n\n@subsubheading Generated Files out of CVS\n\nOne way to get CVS and @command{make} working peacefully is to never\nstore generated files in CVS, i.e., do not CVS-control files that\nare @file{Makefile} targets (also called @emph{derived} files).\n\nThis way developers are not annoyed by changes to generated files.  It\ndoes not matter if they all have different versions (assuming they are\ncompatible, of course).  And finally, timestamps are not lost; changes\nto sources files can't be missed as in the\n@file{Makefile.am}/@file{Makefile.in} example discussed earlier.\n\nThe drawback is that the CVS repository is not an exact copy of what\nis distributed and that users now need to install various development\ntools (maybe even specific versions) before they can build a checkout.\nBut, after all, CVS's job is versioning, not distribution.\n\nAllowing developers to use different versions of their tools can also\nhide bugs during distributed development.  Indeed, developers will be\nusing (hence testing) their own generated files, instead of the\ngenerated files that will be actually released.  The developer who\nprepares the tarball might be using a version of the tool that\nproduces bogus output (for instance a non-portable C file), something\nother developers could have noticed if they weren't using their own\nversions of this tool.\n\n@subheading Third-party Files\n@cindex CVS and third-party files\n@cindex third-party files and CVS\n\nAnother class of files not discussed here (because they do not cause\ntimestamp issues) are files that are shipped with a package, but\nmaintained elsewhere.  For instance, tools like @command{gettextize}\nand @command{autopoint} (from Gettext) or @command{libtoolize} (from\nLibtool), will install or update files in your package.\n\nThese files, whether they are kept under CVS or not, raise similar\nconcerns about version mismatch between developers' tools.  The\nGettext manual has a section about this; see @ref{Version Control Issues,,\nIntegrating with Version Control Systems, gettext, GNU gettext tools}.\n\n@node maintainer-mode\n@section @command{missing} and @code{AM_MAINTAINER_MODE}\n\n@subheading @command{missing}\n@cindex @command{missing}, purpose\n\nThe @command{missing} script is a wrapper around several maintainer\ntools, designed to warn users if a maintainer tool is required but\nmissing.  Typical maintainer tools are @command{autoconf},\n@command{automake}, @command{bison}, etc.  Because files generated by\nthese tools are shipped with the other sources of a package, these\ntools shouldn't be required during a user build and they are not\nchecked for in @file{configure}.\n\nHowever, if for some reason a rebuild rule is triggered and involves a\nmissing tool, @command{missing} will notice it and warn the user, even\nsuggesting how to obtain such a tool (at least in case it is a well-known\none, like @command{makeinfo} or @command{bison}).  This is more helpful\nand user-friendly than just having the rebuild rules spewing out a terse\nerror message like @samp{sh: @var{tool}: command not found}.  Similarly,\n@command{missing} will warn the user if it detects that a maintainer\ntool it attempted to use seems too old (be warned that diagnosing this\ncorrectly is typically more difficult than detecting missing tools, and\nrequires cooperation from the tool itself, so it won't always work).\n\nIf the required tool is installed, @command{missing} will run it and\nwon't attempt to continue after failures.  This is correct behavior during\ndevelopment: developers love fixing failures.  However, users with\nmissing or too old maintainer tools may get an error when the rebuild\nrule is spuriously triggered, halting the build.  This failure to let\nthe build continue is one of the arguments of the\n@code{AM_MAINTAINER_MODE} advocates.\n\n@subheading @code{AM_MAINTAINER_MODE}\n@cindex @code{AM_MAINTAINER_MODE}, purpose\n@acindex AM_MAINTAINER_MODE\n\n@code{AM_MAINTAINER_MODE} allows you to choose whether the so called\n\"rebuild rules\" should be enabled or disabled.  With\n@code{AM_MAINTAINER_MODE([enable])}, they are enabled by default;\notherwise they are disabled by default.  In the latter case, if\nyou have @code{AM_MAINTAINER_MODE} in @file{configure.ac}, and run\n@samp{./configure && make}, then @command{make} will *never* attempt to\nrebuild @file{configure}, @file{Makefile.in}s, Lex or Yacc outputs, etc.\nI.e., this disables build rules for files that are usually distributed\nand that users should normally not have to update.\n\nThe user can override the default setting by passing either\n@samp{--enable-maintainer-mode} or @samp{--disable-maintainer-mode}\nto @command{configure}.\n\nPeople use @code{AM_MAINTAINER_MODE} either because they do not want their\nusers (or themselves) annoyed by timestamp lossage (@pxref{CVS}), or\nbecause they simply can't stand the rebuild rules and prefer running\nmaintainer tools explicitly.\n\n@code{AM_MAINTAINER_MODE} also allows you to disable some custom build\nrules conditionally.  Some developers use this feature to disable\nrules that need exotic tools that users may not have available.\n\nSeveral years ago Fran@,{c}ois Pinard pointed out several arguments\nagainst this @code{AM_MAINTAINER_MODE} macro.  Most of them relate to\ninsecurity.  By removing dependencies you get non-dependable builds:\nchanges to source files can have no effect on generated files and this\ncan be very confusing when unnoticed.  He adds that security shouldn't\nbe reserved to maintainers (what @option{--enable-maintainer-mode}\nsuggests), on the contrary.  If one user has to modify a\n@file{Makefile.am}, then either @file{Makefile.in} should be updated\nor a warning should be output (this is what Automake uses\n@command{missing} for) but the last thing you want is that nothing\nhappens and the user doesn't notice it (this is what happens when\nrebuild rules are disabled by @code{AM_MAINTAINER_MODE}).\n\nJim Meyering, the inventor of the @code{AM_MAINTAINER_MODE} macro, was\nswayed by Fran@,{c}ois' arguments, and got rid of\n@code{AM_MAINTAINER_MODE} in all of his packages.\n\nStill many people continue to use @code{AM_MAINTAINER_MODE}, because\nit helps them working on projects where all files are kept under version\ncontrol, and because @command{missing} isn't enough if you have the\nwrong version of the tools.\n\n\n@node Wildcards\n@section Why doesn't Automake support wildcards?\n@cindex wildcards\n\nDevelopers are lazy.  They would often like to use wildcards in\n@file{Makefile.am}s, so that they would not need to remember to\nupdate @file{Makefile.am}s every time they add, delete, or rename\na file.\n\nThere are several objections to this:\n@itemize\n@item\nWhen using CVS (or similar) developers need to remember they have to\nrun @samp{cvs add} or @samp{cvs rm} anyway.  Updating\n@file{Makefile.am} accordingly quickly becomes a reflex.\n\nConversely, if your application doesn't compile\nbecause you forgot to add a file in @file{Makefile.am}, it will help\nyou remember to @samp{cvs add} it.\n\n@item\nUsing wildcards makes it easy to distribute files by mistake.  For\ninstance, some code a developer is experimenting with (a test case,\nsay) that should not be part of the distribution.\n\n@item\nUsing wildcards it's easy to omit some files by mistake.  For\ninstance, one developer creates a new file, uses it in many places,\nbut forgets to commit it.  Another developer then checks out the\nincomplete project and is able to run @samp{make dist} successfully,\neven though a file is missing. By listing files, @samp{make dist}\n@emph{will} complain.\n\n@item\nWildcards are not portable to some non-GNU @command{make} implementations,\ne.g., NetBSD @command{make} will not expand globs such as @samp{*} in\nprerequisites of a target.\n\n@item\nFinally, it's really hard to @emph{forget} to add a file to\n@file{Makefile.am}: files that are not listed in @file{Makefile.am} are\nnot compiled or installed, so you can't even test them.\n@end itemize\n\nStill, these are philosophical objections, and as such you may disagree,\nor find enough value in wildcards to dismiss all of them.  Before you\nstart writing a patch against Automake to teach it about wildcards,\nlet's see the main technical issue: portability.\n\nAlthough @samp{$(wildcard ...)} works with GNU @command{make}, it is\nnot portable to other @command{make} implementations.\n\nThe only way Automake could support @command{$(wildcard ...)} is by\nexpanding @command{$(wildcard ...)} when @command{automake} is run.\nThe resulting @file{Makefile.in}s would be portable since they would\nlist all files and not use @samp{$(wildcard ...)}.  However that\nmeans developers would need to remember to run @command{automake} each\ntime they add, delete, or rename files.\n\nCompared to editing @file{Makefile.am}, this is a very small gain.  Sure,\nit's easier and faster to type @samp{automake; make} than to type\n@samp{emacs Makefile.am; make}.  But nobody bothered enough to write a\npatch to add support for this syntax.  Some people use scripts to\ngenerate file lists in @file{Makefile.am} or in separate\n@file{Makefile} fragments.\n\nEven if you don't care about portability, and are tempted to use\n@samp{$(wildcard ...)} anyway because you target only GNU Make, you\nshould know there are many places where Automake needs to know exactly\nwhich files should be processed.  As Automake doesn't know how to\nexpand @samp{$(wildcard ...)}, you cannot use it in these places.\n@samp{$(wildcard ...)} is a black box comparable to @code{AC_SUBST}ed\nvariables as far Automake is concerned.\n\nYou can get warnings about @samp{$(wildcard ...}) constructs using the\n@option{-Wportability} flag.\n\n@node Limitations on File Names\n@section Limitations on File Names\n@cindex file names, limitations on\n\nAutomake attempts to support all kinds of file names, even those that\ncontain unusual characters or are unusually long.  However, some\nlimitations are imposed by the underlying operating system and tools.\n\nMost operating systems prohibit the use of the null byte in file\nnames, and reserve @samp{/} as a directory separator.  Also, they\nrequire that file names are properly encoded for the user's locale.\nAutomake is subject to these limits.\n\nPortable packages should limit themselves to POSIX file\nnames.  These can contain ASCII letters and digits,\n@samp{_}, @samp{.}, and @samp{-}.  File names consist of components\nseparated by @samp{/}.  File name components cannot begin with\n@samp{-}.\n\nPortable POSIX file names cannot contain components that exceed a\n14-byte limit, but nowadays it's normally safe to assume the\nmore-generous XOPEN limit of 255 bytes.  POSIX\nlimits file names to 255 bytes (XOPEN allows 1023 bytes),\nbut you may want to limit a source tarball to file names of 99 bytes\nto avoid interoperability problems with old versions of @command{tar}.\n\nIf you depart from these rules (e.g., by using non-ASCII\ncharacters in file names, or by using lengthy file names), your\ninstallers may have problems for reasons unrelated to Automake.\nHowever, if this does not concern you, you should know about the\nlimitations imposed by Automake itself.  These limitations are\nundesirable, but some of them seem to be inherent to underlying tools\nlike Autoconf, Make, M4, and the shell.  They fall into three\ncategories: install directories, build directories, and file names.\n\nThe following characters:\n\n@example\n@r{newline} \" # $ ' `\n@end example\n\nshould not appear in the names of install directories.  For example,\nthe operand of @command{configure}'s @option{--prefix} option should\nnot contain these characters.\n\nBuild directories suffer the same limitations as install directories,\nand in addition should not contain the following characters:\n\n@example\n& @@ \\\n@end example\n\nFor example, the full name of the directory containing the source\nfiles should not contain these characters.\n\nSource and installation file names like @file{main.c} are limited even\nfurther: they should conform to the POSIX/XOPEN\nrules described above.  In addition, if you plan to port to\nnon-POSIX environments, you should avoid file names that\ndiffer only in case (e.g., @file{makefile} and @file{Makefile}).\nNowadays it is no longer worth worrying about the 8.3 limits of\nDOS file systems.\n\n@c FIXME This should probably be moved to the \"Checking the Distribution\"\n@c FIXME section...\n@node Errors with distclean\n@section Errors with distclean\n@cindex @code{distclean}, diagnostic\n@cindex @samp{make distclean}, diagnostic\n@cindex dependencies and distributed files\n@trindex distclean\n\nThis is a diagnostic you might encounter while running @samp{make\ndistcheck}.\n\nAs explained in @ref{Checking the Distribution}, @samp{make distcheck}\nattempts to build and check your package for errors like this one.\n\n@samp{make distcheck} will perform a @code{VPATH} build of your\npackage (@pxref{VPATH Builds}), and then call @samp{make distclean}.\nFiles left in the build directory after @samp{make distclean} has run\nare listed after this error.\n\nThis diagnostic really covers two kinds of errors:\n\n@itemize @bullet\n@item\nfiles that are forgotten by distclean;\n@item\ndistributed files that are erroneously rebuilt.\n@end itemize\n\nThe former left-over files are not distributed, so the fix is to mark\nthem for cleaning (@pxref{Clean}); this is obvious and doesn't deserve\nmore explanation.\n\nThe latter bug is not always easy to understand and fix, so let's\nproceed with an example.  Suppose our package contains a program for\nwhich we want to build a man page using @command{help2man}.  GNU\n@command{help2man} produces simple manual pages from the @option{--help}\nand @option{--version} output of other commands (@pxref{Top, , Overview,\nhelp2man, The Help2man Manual}).  Because we don't want to force our\nusers to install @command{help2man}, we decide to distribute the\ngenerated man page using the following setup.\n\n@example\n# This Makefile.am is bogus.\nbin_PROGRAMS = foo\nfoo_SOURCES = foo.c\ndist_man_MANS = foo.1\n\nfoo.1: foo$(EXEEXT)\n        help2man --output=foo.1 ./foo$(EXEEXT)\n@end example\n\nThis will effectively distribute the man page.  However,\n@samp{make distcheck} will fail with:\n\n@example\nERROR: files left in build directory after distclean:\n./foo.1\n@end example\n\nWhy was @file{foo.1} rebuilt?  Because although distributed,\n@file{foo.1} depends on a non-distributed built file:\n@file{foo$(EXEEXT)}.  @file{foo$(EXEEXT)} is built by the user, so it\nwill always appear to be newer than the distributed @file{foo.1}.\n\n@samp{make distcheck} caught an inconsistency in our package.  Our\nintent was to distribute @file{foo.1} so users do not need to install\n@command{help2man}, however since this rule causes this file to be\nalways rebuilt, users @emph{do} need @command{help2man}.  Either we\nshould ensure that @file{foo.1} is not rebuilt by users, or there is\nno point in distributing @file{foo.1}.\n\nMore generally, the rule is that distributed files should never depend\non non-distributed built files.  If you distribute something\ngenerated, distribute its sources.\n\nOne way to fix the above example, while still distributing\n@file{foo.1}, is to not depend on @file{foo$(EXEEXT)}.  For instance,\nassuming @command{foo --version} and @command{foo --help} do not\nchange unless @file{foo.c} or @file{configure.ac} change, we could\nwrite the following @file{Makefile.am}:\n\n@example\nbin_PROGRAMS = foo\nfoo_SOURCES = foo.c\ndist_man_MANS = foo.1\n\nfoo.1: foo.c $(top_srcdir)/configure.ac\n        $(MAKE) $(AM_MAKEFLAGS) foo$(EXEEXT)\n        help2man --output=foo.1 ./foo$(EXEEXT)\n@end example\n\nThis way, @file{foo.1} will not get rebuilt every time\n@file{foo$(EXEEXT)} changes.  The @command{make} call makes sure\n@file{foo$(EXEEXT)} is up-to-date before @command{help2man}.  Another\nway to ensure this would be to use separate directories for binaries\nand man pages, and set @code{SUBDIRS} so that binaries are built\nbefore man pages.\n\nWe could also decide not to distribute @file{foo.1}.  In\nthis case it's fine to have @file{foo.1} dependent upon\n@file{foo$(EXEEXT)}, since both will have to be rebuilt.\nHowever, it would be impossible to build the package in a\ncross-compilation, because building @file{foo.1} involves\nan @emph{execution} of @file{foo$(EXEEXT)}.\n\nAnother context where such errors are common is when distributed files\nare built by tools that are built by the package.  The pattern is\nsimilar:\n\n@example\ndistributed-file: built-tools distributed-sources\n        build-command\n@end example\n\n@noindent\nshould be changed to\n\n@example\ndistributed-file: distributed-sources\n        $(MAKE) $(AM_MAKEFLAGS) built-tools\n        build-command\n@end example\n\n@noindent\nor you could choose not to distribute @file{distributed-file}, if\ncross-compilation does not matter.\n\nThe points made through these examples are worth a summary:\n\n@cartouche\n@itemize\n@item\nDistributed files should never depend upon non-distributed built\nfiles.\n@item\nDistributed files should be distributed with all their dependencies.\n@item\nIf a file is @emph{intended} to be rebuilt by users, then there is no point\nin distributing it.\n@end itemize\n@end cartouche\n\n@vrindex distcleancheck_listfiles\nFor desperate cases, it's always possible to disable this check by\nsetting @code{distcleancheck_listfiles} as documented in @ref{Checking\nthe Distribution}.\nMake sure you do understand the reason why @samp{make distcheck}\ncomplains before you do this.  @code{distcleancheck_listfiles} is a\nway to @emph{hide} errors, not to fix them.  You can always do better.\n\n@node Flag Variables Ordering\n@section Flag Variables Ordering\n@cindex Ordering flag variables\n@cindex Flag variables, ordering\n\n@display\nWhat is the difference between @code{AM_CFLAGS}, @code{CFLAGS}, and\n@code{mumble_CFLAGS}?\n@end display\n\n@display\nWhy does @command{automake} output @code{CPPFLAGS} after\n@code{AM_CPPFLAGS} on compile lines?  Shouldn't it be the converse?\n@end display\n\n@display\nMy @file{configure} adds some warning flags into @code{CXXFLAGS}.  In\none @file{Makefile.am} I would like to append a new flag, however if I\nput the flag into @code{AM_CXXFLAGS} it is prepended to the other\nflags, not appended.\n@end display\n\n@subheading Compile Flag Variables\n@cindex Flag Variables, Ordering\n@cindex Compile Flag Variables\n@cindex @code{AM_CCASFLAGS} and @code{CCASFLAGS}\n@cindex @code{AM_CFLAGS} and @code{CFLAGS}\n@cindex @code{AM_CPPFLAGS} and @code{CPPFLAGS}\n@cindex @code{AM_CXXFLAGS} and @code{CXXFLAGS}\n@cindex @code{AM_FCFLAGS} and @code{FCFLAGS}\n@cindex @code{AM_FFLAGS} and @code{FFLAGS}\n@cindex @code{AM_GCJFLAGS} and @code{GCJFLAGS}\n@cindex @code{AM_LDFLAGS} and @code{LDFLAGS}\n@cindex @code{AM_LFLAGS} and @code{LFLAGS}\n@cindex @code{AM_LIBTOOLFLAGS} and @code{LIBTOOLFLAGS}\n@cindex @code{AM_OBJCFLAGS} and @code{OBJCFLAGS}\n@cindex @code{AM_OBJCXXFLAGS} and @code{OBJXXCFLAGS}\n@cindex @code{AM_RFLAGS} and @code{RFLAGS}\n@cindex @code{AM_UPCFLAGS} and @code{UPCFLAGS}\n@cindex @code{AM_YFLAGS} and @code{YFLAGS}\n@cindex @code{CCASFLAGS} and @code{AM_CCASFLAGS}\n@cindex @code{CFLAGS} and @code{AM_CFLAGS}\n@cindex @code{CPPFLAGS} and @code{AM_CPPFLAGS}\n@cindex @code{CXXFLAGS} and @code{AM_CXXFLAGS}\n@cindex @code{FCFLAGS} and @code{AM_FCFLAGS}\n@cindex @code{FFLAGS} and @code{AM_FFLAGS}\n@cindex @code{GCJFLAGS} and @code{AM_GCJFLAGS}\n@cindex @code{LDFLAGS} and @code{AM_LDFLAGS}\n@cindex @code{LFLAGS} and @code{AM_LFLAGS}\n@cindex @code{LIBTOOLFLAGS} and @code{AM_LIBTOOLFLAGS}\n@cindex @code{OBJCFLAGS} and @code{AM_OBJCFLAGS}\n@cindex @code{OBJCXXFLAGS} and @code{AM_OBJCXXFLAGS}\n@cindex @code{RFLAGS} and @code{AM_RFLAGS}\n@cindex @code{UPCFLAGS} and @code{AM_UPCFLAGS}\n@cindex @code{YFLAGS} and @code{AM_YFLAGS}\n\nThis section attempts to answer all the above questions.  We will\nmostly discuss @code{CPPFLAGS} in our examples, but actually the\nanswer holds for all the compile flags used in Automake:\n@code{CCASFLAGS}, @code{CFLAGS}, @code{CPPFLAGS}, @code{CXXFLAGS},\n@code{FCFLAGS}, @code{FFLAGS}, @code{GCJFLAGS}, @code{LDFLAGS},\n@code{LFLAGS}, @code{LIBTOOLFLAGS}, @code{OBJCFLAGS}, @code{OBJCXXFLAGS},\n@code{RFLAGS}, @code{UPCFLAGS}, and @code{YFLAGS}.\n\n@code{CPPFLAGS}, @code{AM_CPPFLAGS}, and @code{mumble_CPPFLAGS} are\nthree variables that can be used to pass flags to the C preprocessor\n(actually these variables are also used for other languages like C++\nor preprocessed Fortran).  @code{CPPFLAGS} is the user variable\n(@pxref{User Variables}), @code{AM_CPPFLAGS} is the Automake variable,\nand @code{mumble_CPPFLAGS} is the variable specific to the\n@code{mumble} target (we call this a per-target variable,\n@pxref{Program and Library Variables}).\n\nAutomake always uses two of these variables when compiling C sources\nfiles.  When compiling an object file for the @code{mumble} target,\nthe first variable will be @code{mumble_CPPFLAGS} if it is defined, or\n@code{AM_CPPFLAGS} otherwise.  The second variable is always\n@code{CPPFLAGS}.\n\nIn the following example,\n\n@example\nbin_PROGRAMS = foo bar\nfoo_SOURCES = xyz.c\nbar_SOURCES = main.c\nfoo_CPPFLAGS = -DFOO\nAM_CPPFLAGS = -DBAZ\n@end example\n\n@noindent\n@file{xyz.o} will be compiled with @samp{$(foo_CPPFLAGS) $(CPPFLAGS)},\n(because @file{xyz.o} is part of the @code{foo} target), while\n@file{main.o} will be compiled with @samp{$(AM_CPPFLAGS) $(CPPFLAGS)}\n(because there is no per-target variable for target @code{bar}).\n\nThe difference between @code{mumble_CPPFLAGS} and @code{AM_CPPFLAGS}\nbeing clear enough, let's focus on @code{CPPFLAGS}.  @code{CPPFLAGS}\nis a user variable, i.e., a variable that users are entitled to modify\nin order to compile the package.  This variable, like many others,\nis documented at the end of the output of @samp{configure --help}.\n\nFor instance, someone who needs to add @file{/home/my/usr/include} to\nthe C compiler's search path would configure a package with\n\n@example\n./configure CPPFLAGS='-I /home/my/usr/include'\n@end example\n\n@noindent\nand this flag would be propagated to the compile rules of all\n@file{Makefile}s.\n\nIt is also not uncommon to override a user variable at\n@command{make}-time.  Many installers do this with @code{prefix}, but\nthis can be useful with compiler flags too.  For instance, if, while\ndebugging a C++ project, you need to disable optimization in one\nspecific object file, you can run something like\n\n@example\nrm file.o\nmake CXXFLAGS=-O0 file.o\nmake\n@end example\n\nThe reason @samp{$(CPPFLAGS)} appears after @samp{$(AM_CPPFLAGS)} or\n@samp{$(mumble_CPPFLAGS)} in the compile command is that users\nshould always have the last say.  It probably makes more sense if you\nthink about it while looking at the @samp{CXXFLAGS=-O0} above, which\nshould supersede any other switch from @code{AM_CXXFLAGS} or\n@code{mumble_CXXFLAGS} (and this of course replaces the previous value\nof @code{CXXFLAGS}).\n\nYou should never redefine a user variable such as @code{CPPFLAGS} in\n@file{Makefile.am}.  Use @samp{automake -Woverride} to diagnose such\nmistakes.  Even something like\n\n@example\nCPPFLAGS = -DDATADIR=\\\"$(datadir)\\\" @@CPPFLAGS@@\n@end example\n\n@noindent\nis erroneous.  Although this preserves @file{configure}'s value of\n@code{CPPFLAGS}, the definition of @code{DATADIR} will disappear if a\nuser attempts to override @code{CPPFLAGS} from the @command{make}\ncommand line.\n\n@example\nAM_CPPFLAGS = -DDATADIR=\\\"$(datadir)\\\"\n@end example\n\n@noindent\nis all that is needed here if no per-target flags are used.\n\nYou should not add options to these user variables within\n@file{configure} either, for the same reason.  Occasionally you need\nto modify these variables to perform a test, but you should reset\ntheir values afterwards.  In contrast, it is OK to modify the\n@samp{AM_} variables within @file{configure} if you @code{AC_SUBST}\nthem, but it is rather rare that you need to do this, unless you\nreally want to change the default definitions of the @samp{AM_}\nvariables in all @file{Makefile}s.\n\nWhat we recommend is that you define extra flags in separate\nvariables.  For instance, you may write an Autoconf macro that computes\na set of warning options for the C compiler, and @code{AC_SUBST} them\nin @code{WARNINGCFLAGS}; you may also have an Autoconf macro that\ndetermines which compiler and which linker flags should be used to\nlink with library @file{libfoo}, and @code{AC_SUBST} these in\n@code{LIBFOOCFLAGS} and @code{LIBFOOLDFLAGS}.  Then, a\n@file{Makefile.am} could use these variables as follows:\n\n@example\nAM_CFLAGS = $(WARNINGCFLAGS)\nbin_PROGRAMS = prog1 prog2\nprog1_SOURCES = @dots{}\nprog2_SOURCES = @dots{}\nprog2_CFLAGS = $(LIBFOOCFLAGS) $(AM_CFLAGS)\nprog2_LDFLAGS = $(LIBFOOLDFLAGS)\n@end example\n\nIn this example both programs will be compiled with the flags\nsubstituted into @samp{$(WARNINGCFLAGS)}, and @code{prog2} will\nadditionally be compiled with the flags required to link with\n@file{libfoo}.\n\nNote that listing @code{AM_CFLAGS} in a per-target @code{CFLAGS}\nvariable is a common idiom to ensure that @code{AM_CFLAGS} applies to\nevery target in a @file{Makefile.in}.\n\nUsing variables like this gives you full control over the ordering of\nthe flags.  For instance, if there is a flag in $(WARNINGCFLAGS) that\nyou want to negate for a particular target, you can use something like\n@samp{prog1_CFLAGS = $(AM_CFLAGS) -no-flag}.  If all of these flags had\nbeen forcefully appended to @code{CFLAGS}, there would be no way to\ndisable one flag.  Yet another reason to leave user variables to\nusers.\n\nFinally, we have avoided naming the variable of the example\n@code{LIBFOO_LDFLAGS} (with an underscore) because that would cause\nAutomake to think that this is actually a per-target variable (like\n@code{mumble_LDFLAGS}) for some non-declared @code{LIBFOO} target.\n\n@subheading Other Variables\n\nThere are other variables in Automake that follow similar principles\nto allow user options.  For instance, Texinfo rules (@pxref{Texinfo})\nuse @code{MAKEINFOFLAGS} and @code{AM_MAKEINFOFLAGS}.  Similarly,\nDejaGnu tests (@pxref{DejaGnu Tests}) use @code{RUNTESTDEFAULTFLAGS} and\n@code{AM_RUNTESTDEFAULTFLAGS}.  The tags and ctags rules\n(@pxref{Tags}) use @code{ETAGSFLAGS}, @code{AM_ETAGSFLAGS},\n@code{CTAGSFLAGS}, and @code{AM_CTAGSFLAGS}.  Java rules\n(@pxref{Java}) use @code{JAVACFLAGS} and @code{AM_JAVACFLAGS}.  None\nof these rules support per-target flags (yet).\n\nTo some extent, even @code{AM_MAKEFLAGS} (@pxref{Subdirectories})\nobeys this naming scheme.  The slight difference is that\n@code{MAKEFLAGS} is passed to sub-@command{make}s implicitly by\n@command{make} itself.\n\n@code{ARFLAGS} (@pxref{A Library}) is usually defined by Automake and\nhas neither an @code{AM_} nor a per-target cousin.\n\nFinally you should not think that the existence of a per-target\nvariable implies the existence of an @code{AM_} variable or of a user\nvariable.  For instance, the @code{mumble_LDADD} per-target variable\noverrides the makefile-wide @code{LDADD} variable (which is not a user\nvariable), and @code{mumble_LIBADD} exists only as a per-target\nvariable.  @xref{Program and Library Variables}.\n\n\n@node Renamed Objects\n@section Why are object files sometimes renamed?\n\nThis happens when per-target compilation flags are used.  Object\nfiles need to be renamed just in case they would clash with object\nfiles compiled from the same sources, but with different flags.\nConsider the following example.\n\n@example\nbin_PROGRAMS = true false\ntrue_SOURCES = generic.c\ntrue_CPPFLAGS = -DEXIT_CODE=0\nfalse_SOURCES = generic.c\nfalse_CPPFLAGS = -DEXIT_CODE=1\n@end example\n\n@noindent\nObviously the two programs are built from the same source, but it\nwould be bad if they shared the same object, because @file{generic.o}\ncannot be built with both @samp{-DEXIT_CODE=0} @emph{and}\n@samp{-DEXIT_CODE=1}.  Therefore @command{automake} outputs rules to\nbuild two different objects: @file{true-generic.o} and\n@file{false-generic.o}.\n\n@command{automake} doesn't actually look whether source files are\nshared to decide if it must rename objects.  It will just rename all\nobjects of a target as soon as it sees per-target compilation flags\nused.\n\nIt's OK to share object files when per-target compilation flags are not\nused.  For instance, @file{true} and @file{false} will both use\n@file{version.o} in the following example.\n\n@example\nAM_CPPFLAGS = -DVERSION=1.0\nbin_PROGRAMS = true false\ntrue_SOURCES = true.c version.c\nfalse_SOURCES = false.c version.c\n@end example\n\nNote that the renaming of objects is also affected by the\n@code{_SHORTNAME} variable (@pxref{Program and Library Variables}).\n\n\n@node Per-Object Flags\n@section Per-Object Flags Emulation\n@cindex Per-object flags, emulated\n\n@display\nOne of my source files needs to be compiled with different flags.  How\ndo I do that?\n@end display\n\nAutomake supports per-program and per-library compilation flags (see\n@ref{Program and Library Variables} and @ref{Flag Variables\nOrdering}).  With this you can define compilation flags that apply to\nall files compiled for a target.  For instance, in\n\n@example\nbin_PROGRAMS = foo\nfoo_SOURCES = foo.c foo.h bar.c bar.h main.c\nfoo_CFLAGS = -some -flags\n@end example\n\n@noindent\n@file{foo-foo.o}, @file{foo-bar.o}, and @file{foo-main.o} will all be\ncompiled with @samp{-some -flags}.  (If you wonder about the names of\nthese object files, see @ref{Renamed Objects}.)  Note that\n@code{foo_CFLAGS} gives the flags to use when compiling all the C\nsources of the @emph{program} @code{foo}; it has nothing to do with\n@file{foo.c} or @file{foo-foo.o} specifically.\n\nWhat if @file{foo.c} needs to be compiled into @file{foo.o} using some\nspecific flags, that none of the other files requires?  Obviously\nper-program flags are not directly applicable here.  Something like\nper-object flags are expected, i.e., flags that would be used only\nwhen creating @file{foo-foo.o}.  Automake does not support that;\nhowever this is easy to simulate using a library that contains only\nthat object, and compiling this library with per-library flags.\n\n@example\nbin_PROGRAMS = foo\nfoo_SOURCES = bar.c bar.h main.c\nfoo_CFLAGS = -some -flags\nfoo_LDADD = libfoo.a\nnoinst_LIBRARIES = libfoo.a\nlibfoo_a_SOURCES = foo.c foo.h\nlibfoo_a_CFLAGS = -some -other -flags\n@end example\n\nHere @file{foo-bar.o} and @file{foo-main.o} will all be\ncompiled with @samp{-some -flags}, while @file{libfoo_a-foo.o} will\nbe compiled using @samp{-some -other -flags}.  Eventually, all\nthree objects will be linked to form @file{foo}.\n\nThis trick can also be achieved using Libtool convenience libraries,\nfor instance @samp{noinst_LTLIBRARIES = libfoo.la} (@pxref{Libtool\nConvenience Libraries}).\n\nAnother tempting idea to implement per-object flags is to override the\ncompile rules @command{automake} would output for these files.\nAutomake will not define a rule for a target you have defined, so you\ncould think about defining the @samp{foo-foo.o: foo.c} rule yourself.\nWe recommend against this, because this is error prone.  For instance,\nif you add such a rule to the first example, it will break the day you\ndecide to remove @code{foo_CFLAGS} (because @file{foo.c} will then be\ncompiled as @file{foo.o} instead of @file{foo-foo.o}, @pxref{Renamed\nObjects}).  Also in order to support dependency tracking, the two\n@file{.o}/@file{.obj} extensions, and all the other flags variables\ninvolved in a compilation, you will end up modifying a copy of the\nrule previously output by @command{automake} for this file.  If a new\nrelease of Automake generates a different rule, your copy will need to\nbe updated by hand.\n\n@node Multiple Outputs\n@section Handling Tools that Produce Many Outputs\n@cindex multiple outputs, rules with\n@cindex many outputs, rules with\n@cindex rules with multiple outputs\n\nThis section describes a @command{make} idiom that can be used when a\ntool produces multiple output files.  It is not specific to Automake\nand can be used in ordinary @file{Makefile}s.\n\nSuppose we have a program called @command{foo} that will read one file\ncalled @file{data.foo} and produce two files named @file{data.c} and\n@file{data.h}.  We want to write a @file{Makefile} rule that captures\nthis one-to-two dependency.\n\nThe naive rule is incorrect:\n\n@example\n# This is incorrect.\ndata.c data.h: data.foo\n        foo data.foo\n@end example\n\n@noindent\nWhat the above rule really says is that @file{data.c} and\n@file{data.h} each depend on @file{data.foo}, and can each be built by\nrunning @samp{foo data.foo}.  In other words it is equivalent to:\n\n@example\n# We do not want this.\ndata.c: data.foo\n        foo data.foo\ndata.h: data.foo\n        foo data.foo\n@end example\n\n@noindent\nwhich means that @command{foo} can be run twice.  Usually it will not\nbe run twice, because @command{make} implementations are smart enough\nto check for the existence of the second file after the first one has\nbeen built; they will therefore detect that it already exists.\nHowever there are a few situations where it can run twice anyway:\n\n@itemize\n@item\nThe most worrying case is when running a parallel @command{make}.  If\n@file{data.c} and @file{data.h} are built in parallel, two @samp{foo\ndata.foo} commands will run concurrently.  This is harmful.\n@item\nAnother case is when the dependency (here @file{data.foo}) is\n(or depends upon) a phony target.\n@end itemize\n\nA solution that works with parallel @command{make} but not with\nphony dependencies is the following:\n\n@example\ndata.c data.h: data.foo\n        foo data.foo\ndata.h: data.c\n@end example\n\n@noindent\nThe above rules are equivalent to\n\n@example\ndata.c: data.foo\n        foo data.foo\ndata.h: data.foo data.c\n        foo data.foo\n@end example\n\n@noindent\ntherefore a parallel @command{make} will have to serialize the builds\nof @file{data.c} and @file{data.h}, and will detect that the second is\nno longer needed once the first is over.\n\nUsing this pattern is probably enough for most cases.  However it does\nnot scale easily to more output files (in this scheme all output files\nmust be totally ordered by the dependency relation), so we will\nexplore a more complicated solution.\n\nAnother idea is to write the following:\n\n@example\n# There is still a problem with this one.\ndata.c: data.foo\n        foo data.foo\ndata.h: data.c\n@end example\n\n@noindent\nThe idea is that @samp{foo data.foo} is run only when @file{data.c}\nneeds to be updated, but we further state that @file{data.h} depends\nupon @file{data.c}.  That way, if @file{data.h} is required and\n@file{data.foo} is out of date, the dependency on @file{data.c} will\ntrigger the build.\n\nThis is almost perfect, but suppose we have built @file{data.h} and\n@file{data.c}, and then we erase @file{data.h}.  Then, running\n@samp{make data.h} will not rebuild @file{data.h}.  The above rules\njust state that @file{data.c} must be up-to-date with respect to\n@file{data.foo}, and this is already the case.\n\nWhat we need is a rule that forces a rebuild when @file{data.h} is\nmissing.  Here it is:\n\n@example\ndata.c: data.foo\n        foo data.foo\ndata.h: data.c\n## Recover from the removal of $@@\n        @@test -f $@@ || rm -f data.c\n        @@test -f $@@ || $(MAKE) $(AM_MAKEFLAGS) data.c\n@end example\n\nIt is tempting to use a single test as follows:\n\n@example\ndata.h: data.c\n## Recover from the removal of $@@\n        @@if test -f $@@; then :; else \\\n          rm -f data.c; \\\n          $(MAKE) $(AM_MAKEFLAGS) data.c; \\\n        fi\n@end example\n\n@noindent\nbut that would break @samp{make -n}: at least GNU @command{make} and\nSolaris @command{make} execute recipes containing the @samp{$(MAKE)}\nstring even when they are running in dry mode.  So if we didn't break\nthe recipe above in two invocations, the file @file{data.c} would be\nremoved even upon @samp{make -n}.  Not nice.\n\n\nThe above scheme can be extended to handle more outputs and more\ninputs.  One of the outputs is selected to serve as a witness to the\nsuccessful completion of the command, it depends upon all inputs, and\nall other outputs depend upon it.  For instance, if @command{foo}\nshould additionally read @file{data.bar} and also produce\n@file{data.w} and @file{data.x}, we would write:\n\n@example\ndata.c: data.foo data.bar\n        foo data.foo data.bar\ndata.h data.w data.x: data.c\n## Recover from the removal of $@@\n        @@test -f $@@ || rm -f data.c\n        @@test -f $@@ || $(MAKE) $(AM_MAKEFLAGS) data.c\n@end example\n\nHowever there are now three minor problems in this setup.  One is related\nto the timestamp ordering of @file{data.h}, @file{data.w},\n@file{data.x}, and @file{data.c}.  Another one is a race condition\nif a parallel @command{make} attempts to run multiple instances of the\nrecover block at once.  Finally, the recursive rule breaks @samp{make -n}\nwhen run with GNU @command{make} (as well as some other @command{make}\nimplementations), as it may remove @file{data.h} even when it should not\n(@pxref{MAKE Variable, , How the @code{MAKE} Variable Works, make,\nThe GNU Make Manual}).\n\nLet us deal with the first problem.  @command{foo} outputs four files,\nbut we do not know in which order these files are created.  Suppose\nthat @file{data.h} is created before @file{data.c}.  Then we have a\nweird situation.  The next time @command{make} is run, @file{data.h}\nwill appear older than @file{data.c}, the second rule will be\ntriggered, a shell will be started to execute the @samp{if@dots{}fi}\ncommand, but actually it will just execute the @code{then} branch,\nthat is: nothing.  In other words, because the witness we selected is\nnot the first file created by @command{foo}, @command{make} will start\na shell to do nothing each time it is run.\n\nA simple riposte is to fix the timestamps when this happens.\n\n@example\ndata.c: data.foo data.bar\n        foo data.foo data.bar\ndata.h data.w data.x: data.c\n        @@test ! -f $@@ || touch $@@\n## Recover from the removal of $@@\n        @@test -f $@@ || rm -f data.c\n        @@test -f $@@ || $(MAKE) $(AM_MAKEFLAGS) data.c\n@end example\n\nAnother solution is to use a different and dedicated file as witness,\nrather than using any of @command{foo}'s outputs.\n\n@example\ndata.stamp: data.foo data.bar\n        @@rm -f data.tmp\n        @@touch data.tmp\n        foo data.foo data.bar\n        @@mv -f data.tmp $@@\ndata.c data.h data.w data.x: data.stamp\n## Recover from the removal of $@@\n        @@test -f $@@ || rm -f data.stamp\n        @@test -f $@@ || $(MAKE) $(AM_MAKEFLAGS) data.stamp\n@end example\n\n@file{data.tmp} is created before @command{foo} is run, so it has a\ntimestamp older than output files output by @command{foo}.  It is then\nrenamed to @file{data.stamp} after @command{foo} has run, because we\ndo not want to update @file{data.stamp} if @command{foo} fails.\n\nThis solution still suffers from the second problem: the race\ncondition in the recover rule.  If, after a successful build, a user\nerases @file{data.c} and @file{data.h}, and runs @samp{make -j}, then\n@command{make} may start both recover rules in parallel.  If the two\ninstances of the rule execute @samp{$(MAKE) $(AM_MAKEFLAGS)\ndata.stamp} concurrently the build is likely to fail (for instance, the\ntwo rules will create @file{data.tmp}, but only one can rename it).\n\nAdmittedly, such a weird situation does not arise during ordinary\nbuilds.  It occurs only when the build tree is mutilated.  Here\n@file{data.c} and @file{data.h} have been explicitly removed without\nalso removing @file{data.stamp} and the other output files.\n@code{make clean; make} will always recover from these situations even\nwith parallel makes, so you may decide that the recover rule is solely\nto help non-parallel make users and leave things as-is.  Fixing this\nrequires some locking mechanism to ensure only one instance of the\nrecover rule rebuilds @file{data.stamp}.  One could imagine something\nalong the following lines.\n\n@example\ndata.c data.h data.w data.x: data.stamp\n## Recover from the removal of $@@\n        @@if test -f $@@; then :; else \\\n          trap 'rm -rf data.lock data.stamp' 1 2 13 15; \\\n## mkdir is a portable test-and-set\n          if mkdir data.lock 2>/dev/null; then \\\n## This code is being executed by the first process.\n            rm -f data.stamp; \\\n            $(MAKE) $(AM_MAKEFLAGS) data.stamp; \\\n            result=$$?; rm -rf data.lock; exit $$result; \\\n          else \\\n## This code is being executed by the follower processes.\n## Wait until the first process is done.\n            while test -d data.lock; do sleep 1; done; \\\n## Succeed if and only if the first process succeeded.\n            test -f data.stamp; \\\n          fi; \\\n        fi\n@end example\n\nUsing a dedicated witness, like @file{data.stamp}, is very handy when\nthe list of output files is not known beforehand.  As an illustration,\nconsider the following rules to compile many @file{*.el} files into\n@file{*.elc} files in a single command.  It does not matter how\n@code{ELFILES} is defined (as long as it is not empty: empty targets\nare not accepted by POSIX).\n\n@example\nELFILES = one.el two.el three.el @dots{}\nELCFILES = $(ELFILES:=c)\n\nelc-stamp: $(ELFILES)\n        @@rm -f elc-temp\n        @@touch elc-temp\n        $(elisp_comp) $(ELFILES)\n        @@mv -f elc-temp $@@\n\n$(ELCFILES): elc-stamp\n        @@if test -f $@@; then :; else \\\n## Recover from the removal of $@@\n          trap 'rm -rf elc-lock elc-stamp' 1 2 13 15; \\\n          if mkdir elc-lock 2>/dev/null; then \\\n## This code is being executed by the first process.\n            rm -f elc-stamp; \\\n            $(MAKE) $(AM_MAKEFLAGS) elc-stamp; \\\n            rmdir elc-lock; \\\n          else \\\n## This code is being executed by the follower processes.\n## Wait until the first process is done.\n            while test -d elc-lock; do sleep 1; done; \\\n## Succeed if and only if the first process succeeded.\n            test -f elc-stamp; exit $$?; \\\n@c $$\n          fi; \\\n        fi\n@end example\n\nThese solutions all still suffer from the third problem, namely that\nthey break the promise that @samp{make -n} should not cause any actual\nchanges to the tree.  For those solutions that do not create lock files,\nit is possible to split the recover rules into two separate recipe\ncommands, one of which does all work but the recursion, and the\nother invokes the recursive @samp{$(MAKE)}.  The solutions involving\nlocking could act upon the contents of the @samp{MAKEFLAGS} variable,\nbut parsing that portably is not easy (@pxref{The Make Macro MAKEFLAGS,,,\nautoconf, The Autoconf Manual}).  Here is an example:\n\n@example\nELFILES = one.el two.el three.el @dots{}\nELCFILES = $(ELFILES:=c)\n\nelc-stamp: $(ELFILES)\n        @@rm -f elc-temp\n        @@touch elc-temp\n        $(elisp_comp) $(ELFILES)\n        @@mv -f elc-temp $@@\n\n$(ELCFILES): elc-stamp\n## Recover from the removal of $@@\n        @@dry=; for f in x $$MAKEFLAGS; do \\\n          case $$f in \\\n            *=*|--*);; \\\n            *n*) dry=:;; \\\n          esac; \\\n        done; \\\n        if test -f $@@; then :; else \\\n          $$dry trap 'rm -rf elc-lock elc-stamp' 1 2 13 15; \\\n          if $$dry mkdir elc-lock 2>/dev/null; then \\\n## This code is being executed by the first process.\n            $$dry rm -f elc-stamp; \\\n            $(MAKE) $(AM_MAKEFLAGS) elc-stamp; \\\n            $$dry rmdir elc-lock; \\\n          else \\\n## This code is being executed by the follower processes.\n## Wait until the first process is done.\n            while test -d elc-lock && test -z \"$$dry\"; do \\\n@c $$\n              sleep 1; \\\n            done; \\\n## Succeed if and only if the first process succeeded.\n            $$dry test -f elc-stamp; exit $$?; \\\n          fi; \\\n        fi\n@end example\n\nFor completeness it should be noted that GNU @command{make} is able to\nexpress rules with multiple output files using pattern rules\n(@pxref{Pattern Examples, , Pattern Rule Examples, make, The GNU Make\nManual}).  We do not discuss pattern rules here because they are not\nportable, but they can be convenient in packages that assume GNU\n@command{make}.\n\n\n@node Hard-Coded Install Paths\n@section Installing to Hard-Coded Locations\n\n@display\nMy package needs to install some configuration file.  I tried to use\nthe following rule, but @samp{make distcheck} fails.  Why?\n\n@example\n# Do not do this.\ninstall-data-local:\n        $(INSTALL_DATA) $(srcdir)/afile $(DESTDIR)/etc/afile\n@end example\n@end display\n\n@display\nMy package needs to populate the installation directory of another\npackage at install-time.  I can easily compute that installation\ndirectory in @file{configure}, but if I install files therein,\n@samp{make distcheck} fails.  How else should I do it?\n@end display\n\nThese two setups share their symptoms: @samp{make distcheck} fails\nbecause they are installing files to hard-coded paths.  In the latter\ncase the path is not really hard-coded in the package, but we can\nconsider it to be hard-coded in the system (or in whichever tool that\nsupplies the path).  As long as the path does not use any of the\nstandard directory variables (@samp{$(prefix)}, @samp{$(bindir)},\n@samp{$(datadir)}, etc.), the effect will be the same:\nuser-installations are impossible.\n\nAs a (non-root) user who wants to install a package, you usually have no\nright to install anything in @file{/usr} or @file{/usr/local}.  So you\ndo something like @samp{./configure --prefix ~/usr} to install a\npackage in your own @file{~/usr} tree.\n\nIf a package attempts to install something to some hard-coded path\n(e.g., @file{/etc/afile}), regardless of this @option{--prefix} setting,\nthen the installation will fail.  @samp{make distcheck} performs such\na @option{--prefix} installation, hence it will fail too.\n\nNow, there are some easy solutions.\n\nThe above @code{install-data-local} example for installing\n@file{/etc/afile} would be better replaced by\n\n@example\nsysconf_DATA = afile\n@end example\n\n@noindent\nBy default @code{sysconfdir} will be @samp{$(prefix)/etc}, because\nthis is what the GNU Standards require.  When such a package is\ninstalled on an FHS compliant system, the installer will have to set\n@samp{--sysconfdir=/etc}.  As the maintainer of the package you\nshould not be concerned by such site policies: use the appropriate\nstandard directory variable to install your files so that the installer\ncan easily redefine these variables to match their site conventions.\n\nInstalling files that should be used by another package is slightly\nmore involved.  Let's take an example and assume you want to install\na shared library that is a Python extension module.  If you ask Python\nwhere to install the library, it will answer something like this:\n\n@example\n% @kbd{python -c 'from distutils import sysconfig;\n             print sysconfig.get_python_lib(1,0)'}\n/usr/lib/python2.5/site-packages\n@end example\n\nIf you indeed use this absolute path to install your shared library,\nnon-root users will not be able to install the package; hence\ndistcheck fails.\n\nLet's do better.  The @samp{sysconfig.get_python_lib()} function\nactually accepts a third argument that will replace Python's\ninstallation prefix.\n\n@example\n% @kbd{python -c 'from distutils import sysconfig;\n             print sysconfig.get_python_lib(1,0,\"$@{exec_prefix@}\")'}\n$@{exec_prefix@}/lib/python2.5/site-packages\n@end example\n\nYou can also use this new path.  If you do\n@itemize @bullet\n@item\nroot users can install your package with the same @option{--prefix}\nas Python (you get the behavior of the previous attempt)\n\n@item\nnon-root users can install your package too; they will have the\nextension module in a place that is not searched by Python but they\ncan work around this using environment variables (and if you installed\nscripts that use this shared library, it's easy to tell Python where to\nlook in the beginning of your script, so the script works in both\ncases).\n@end itemize\n\nThe @code{AM_PATH_PYTHON} macro uses similar commands to define\n@samp{$(pythondir)} and @samp{$(pyexecdir)} (@pxref{Python}).\n\nOf course not all tools are as advanced as Python regarding that\nsubstitution of @var{prefix}.  So another strategy is to figure out the\npart of the installation directory that must be preserved.  For\ninstance, here is how @code{AM_PATH_LISPDIR} (@pxref{Emacs Lisp})\ncomputes @samp{$(lispdir)}:\n\n@example\n$EMACS -batch -Q -eval '(while load-path\n  (princ (concat (car load-path) \"\\n\"))\n  (setq load-path (cdr load-path)))' >conftest.out\nlispdir=`sed -n\n  -e 's,/$,,'\n  -e '/.*\\/lib\\/x*emacs\\/site-lisp$/@{\n        s,.*/lib/\\(x*emacs/site-lisp\\)$,$@{libdir@}/\\1,;p;q;\n      @}'\n  -e '/.*\\/share\\/x*emacs\\/site-lisp$/@{\n        s,.*/share/\\(x*emacs/site-lisp\\),$@{datarootdir@}/\\1,;p;q;\n      @}'\n  conftest.out`\n@end example\n\nI.e., it just picks the first directory that looks like\n@file{*/lib/*emacs/site-lisp} or @file{*/share/*emacs/site-lisp} in\nthe search path of emacs, and then substitutes @samp{$@{libdir@}} or\n@samp{$@{datadir@}} appropriately.\n\nThe emacs case looks complicated because it processes a list and\nexpects two possible layouts; otherwise it's easy, and the benefits for\nnon-root users are really worth the extra @command{sed} invocation.\n\n\n@node Debugging Make Rules\n@section Debugging Make Rules\n@cindex debugging rules\n@cindex rules, debugging\n\nThe rules and dependency trees generated by @command{automake} can get\nrather complex, and leave the developer head-scratching when things\ndon't work as expected.  Besides the debug options provided by the\n@command{make} command (@pxref{Options Summary,,, make, The GNU Make\nManual}), here's a couple of further hints for debugging makefiles\ngenerated by @command{automake} effectively:\n\n@itemize\n@item\nIf less verbose output has been enabled in the package with the use\nof silent rules (@pxref{Automake Silent Rules}), you can use\n@code{make V=1} to see the commands being executed.\n@item\n@code{make -n} can help show what would be done without actually doing\nit.  Note however, that this will @emph{still execute} commands prefixed\nwith @samp{+}, and, when using GNU @command{make}, commands that contain\nthe strings @samp{$(MAKE)} or @samp{$@{MAKE@}} (@pxref{Instead of\nExecution,,, make, The GNU Make Manual}).\nTypically, this is helpful to show what recursive rules would do, but it\nmeans that, in your own rules, you should not mix such recursion with\nactions that change any files.@footnote{Automake's @samp{dist} and\n@samp{distcheck} rules had a bug in this regard in that they created\ndirectories even with @option{-n}, but this has been fixed in Automake\n1.11.}  Furthermore, note that GNU @command{make} will update\nprerequisites for the @file{Makefile} file itself even with @option{-n}\n(@pxref{Remaking Makefiles,,, make, The GNU Make Manual}).\n@item\n@code{make SHELL=\"/bin/bash -vx\"} can help debug complex rules.\n@xref{The Make Macro SHELL,,, autoconf, The Autoconf Manual}, for some\nportability quirks associated with this construct.\n@item\n@code{echo 'print: ; @@echo \"$(VAR)\"' | make -f Makefile -f - print}\ncan be handy to examine the expanded value of variables.  You may need\nto use a target other than @samp{print} if that is already used or a\nfile with that name exists.\n@item\n@url{http://bashdb.sourceforge.net/@/remake/} provides a modified\nGNU @command{make} command called @command{remake} that copes with\ncomplex GNU @command{make}-specific Makefiles and allows tracing\nexecution, examining variables, and calling rules interactively, much like\na debugger.\n@end itemize\n\n\n@node Reporting Bugs\n@section Reporting Bugs\n\nMost nontrivial software has bugs.  Automake is no exception.  Although\nwe cannot promise we can or will fix a bug, and we might not even agree\nthat it is a bug, we want to hear about problems you encounter. Often we\nagree they are bugs and want to fix them.\n\nTo make it possible for us to fix a bug, please report it. In order to\ndo so effectively, it helps to know when and how to do it.\n\nBefore reporting a bug, it is a good idea to see if it is already known.\nYou can look at the @uref{https://debbugs.gnu.org/, GNU Bug Tracker}\nand the @uref{https://lists.gnu.org/@/archive/@/html/@/bug-automake/,\nbug-automake mailing list archives} for previous bug reports.  We\npreviously used a Gnats database for bug tracking, but it is no longer\nonline.\n\nIf the bug is not already known, it should be reported.  It is very\nimportant to report bugs in a way that is useful and efficient.  For\nthis, please familiarize yourself with\n@uref{https://www.chiark.greenend.org.uk/@/~sgtatham/@/bugs.html, How to\nReport Bugs Effectively} and\n@uref{http://catb.org/@/~esr/@/faqs/@/smart-questions.html, How to Ask\nQuestions the Smart Way}.  This helps you and developers to save time,\nwhich can then be spent on fixing more bugs and implementing more\nfeatures.\n\nFor a bug report, a feature request or other suggestions, please send\nemail to @email{@value{PACKAGE_BUGREPORT}}.  This will then open a new\nbug in the @uref{https://debbugs.gnu.org/@/automake, bug tracker}.  Be\nsure to include the versions of Autoconf and Automake that you use.\nIdeally, post a minimal @file{Makefile.am} and @file{configure.ac} that\nreproduces the problem you encounter.  If you have encountered test\nsuite failures, please attach the @file{test-suite.log} file.\n\n@c ========================================================== Appendices\n\n@page\n@node Copying This Manual\n@appendix Copying This Manual\n\n@menu\n* GNU Free Documentation License::  License for copying this manual\n@end menu\n\n@node GNU Free Documentation License\n@appendixsec GNU Free Documentation License\n@include fdl.texi\n\n@page\n@node Indices\n@appendix Indices\n\n@menu\n* Macro Index::                 Index of Autoconf macros\n* Variable Index::              Index of Makefile variables\n* General Index::               General index\n@end menu\n\n@node Macro Index\n@appendixsec Macro Index\n\n@printindex fn\n\n@node Variable Index\n@appendixsec Variable Index\n\n@printindex vr\n\n@node General Index\n@appendixsec General Index\n\n@printindex cp\n\n\n@bye\n\n@c  LocalWords:  texinfo setfilename settitle setchapternewpage texi direntry\n@c  LocalWords:  dircategory in's aclocal ifinfo titlepage Tromey vskip pt sp\n@c  LocalWords:  filll defcodeindex ov cv op tr syncodeindex fn cp vr ifnottex\n@c  LocalWords:  dir Automake's ac Dist Gnits gnits dfn Autoconf's pxref\n@c  LocalWords:  cindex Autoconf autoconf perl samp cvs dist trindex SUBST foo\n@c  LocalWords:  xs emph FIXME ref vindex pkglibdir pkgincludedir pkgdatadir mt\n@c  LocalWords:  pkg libdir cpio bindir sbindir rmt pax sbin zar zardir acindex\n@c  LocalWords:  HTML htmldir html noinst TEXINFOS nodist nobase strudel CFLAGS\n@c  LocalWords:  libmumble CC YFLAGS itemx de fication config url comp\n@c  LocalWords:  depcomp elisp sh mdate mkinstalldirs mkdir py tex dvi ps pdf\n@c  LocalWords:  ylwrap zardoz INIT gettext acinclude mv FUNCS LIBOBJS LDADD fr\n@c  LocalWords:  uref featureful dnl src LINGUAS es ko nl pl sl sv PROG ISC doc\n@c  LocalWords:  POSIX STDC fcntl FUNC ALLOCA blksize struct stat intl po chmod\n@c  LocalWords:  ChangeLog SUBDIRS gettextize gpl testdata getopt INTLLIBS cpp\n@c  LocalWords:  localedir datadir DLOCALEDIR DEXIT CPPFLAGS autoreconf opindex\n@c  LocalWords:  AUX var symlink deps Wno Wnone package's aclocal's distclean\n@c  LocalWords:  ltmain xref LIBSOURCE LIBSOURCES LIBOBJ MEMCMP vs RANLIB CXX\n@c  LocalWords:  LDFLAGS LIBTOOL libtool XTRA LIBS gettext's acdir APIVERSION\n@c  LocalWords:  dirlist noindent usr TIOCGWINSZ sc\n@c  LocalWords:  GWINSZ termios SRCDIR tarball bzip LISPDIR lispdir XEmacs CCAS\n@c  LocalWords:  emacsen MicroEmacs CCASFLAGS UX GCJ gcj GCJFLAGS posix DMALLOC\n@c  LocalWords:  dmalloc ldmalloc REGEX regex DEPDIR DEP DEFUN aclocaldir fi\n@c  LocalWords:  mymacro myothermacro AMFLAGS autopoint autogen libtoolize yum\n@c  LocalWords:  autoheader README MAKEFLAGS subdir Inetutils sync COND endif\n@c  LocalWords:  Miller's installable includedir inc pkgdata EXEEXT libexec bsd\n@c  LocalWords:  pkglib libexecdir prog libcpio cpio's dlopen dlpreopen linux\n@c  LocalWords:  subsubsection OBJEXT esac lib LTLIBRARIES liblob LIBADD AR ar\n@c  LocalWords:  ARFLAGS cru ing maude libgettext lo LTLIBOBJS rpath SGI PRE yy\n@c  LocalWords:  libmaude CCLD CXXFLAGS FFLAGS LFLAGS OBJCFLAGS RFLAGS DEFS cc\n@c  LocalWords:  OBJCXXFLAGS\n@c  LocalWords:  SHORTNAME vtable srcdir nostdinc basename yxx cxx ll lxx gdb\n@c  LocalWords:  lexers yymaxdepth maxdepth yyparse yylex yyerror yylval lval\n@c  LocalWords:  yychar yydebug yypact yyr yydef def yychk chk yypgo pgo yyact\n@c  LocalWords:  yyexca exca yyerrflag errflag yynerrs nerrs yyps yypv pv yys\n@c  LocalWords:  yystate yytmp tmp yyv yyval val yylloc lloc yyreds yytoks toks\n@c  LocalWords:  yylhs yylen yydefred yydgoto yysindex yyrindex yygindex yyname\n@c  LocalWords:  yytable yycheck yyrule byacc CXXCOMPILE CXXLINK FLINK cfortran\n@c  LocalWords:  Catalogue preprocessable FLIBS libfoo baz JAVACFLAGS java exe\n@c  LocalWords:  SunOS fying basenames exeext uninstalled oldinclude kr FSF's\n@c  LocalWords:  pkginclude oldincludedir sysconf sharedstate localstate gcc rm\n@c  LocalWords:  sysconfdir sharedstatedir localstatedir preexist CLEANFILES gz\n@c  LocalWords:  depfile tmpdepfile depmode const interoperate\n@c  LocalWords:  JAVAC javac JAVAROOT builddir CLASSPATH ENV pyc pyo pkgpython\n@c  LocalWords:  pyexecdir pkgpyexecdir Python's pythondir pkgpythondir txi ois\n@c  LocalWords:  installinfo vers MAKEINFO makeinfo MAKEINFOFLAGS noinstall rf\n@c  LocalWords:  mandir thesame alsothesame installman myexecbin DESTDIR Pinard\n@c  LocalWords:  uninstall installdirs uninstalls MOSTLYCLEANFILES mostlyclean\n@c  LocalWords:  DISTCLEANFILES MAINTAINERCLEANFILES GZIP gzip shar exp\n@c  LocalWords:  distdir distcheck distcleancheck listfiles distuninstallcheck\n@c  LocalWords:  VPATH tarfile stdout XFAIL DejaGnu dejagnu DEJATOOL runtest ln\n@c  LocalWords:  RUNTESTDEFAULTFLAGS toolchain RUNTESTFLAGS asis readme DVIPS\n@c  LocalWords:  installcheck gzipped tarZ std utils etags mkid cd\n@c  LocalWords:  ARGS taggable ETAGSFLAGS lang ctags CTAGSFLAGS GTAGS gtags idl\n@c  LocalWords:  foocc doit idlC multilibs ABIs cmindex defmac ARG enableval FC\n@c  LocalWords:  MSG xtrue DBG pathchk CYGWIN afile proglink versioned CVS's TE\n@c  LocalWords:  wildcards Autoconfiscated subsubheading autotools Meyering API\n@c  LocalWords:  ois's wildcard Wportability cartouche vrindex printindex Duret\n@c  LocalWords:  DSOMEFLAG DVERSION automake Lutz insertcopying versioning FAQ\n@c  LocalWords:  LTLIBOBJ Libtool's libtool's libltdl dlopening itutions libbar\n@c  LocalWords:  WANTEDLIBS libhello sublibraries libtop libsub dlopened Ratfor\n@c  LocalWords:  mymodule timestamps timestamp underquoted MAKEINFOHTMLFLAGS te\n@c  LocalWords:  GNUmakefile Subpackages subpackage's subpackages aux\n@c  LocalWords:  detailmenu Timeline pwd reldir AUTOM autom PREREQ FOOBAR libc\n@c  LocalWords:  libhand subpackage moduleN libmain libmisc FCFLAGS FCCOMPILE\n@c  LocalWords:  FCLINK subst sed ELCFILES elc MAKEINFOHTML dvips esyscmd ustar\n@c  LocalWords:  tarballs Woverride vfi ELFILES djm AutoMake honkin FSF\n@c  LocalWords:  fileutils precanned MacKenzie's reimplement termutils Tromey's\n@c  LocalWords:  cois gnitsians LIBPROGRAMS progs LIBLIBRARIES Textutils Ulrich\n@c  LocalWords:  Matzigkeit Drepper's Gord Matzigkeit's jm Dalley Debian org\n@c  LocalWords:  Administrivia ILU CORBA Sourceware Molenda sourceware Elliston\n@c  LocalWords:  dep Oliva Akim Demaille Aiieeee Demaillator Akim's sourcequake\n@c  LocalWords:  grep backported screenshots libgcj KB unnumberedsubsubsec pre\n@c  LocalWords:  precomputing hacky makedepend inline clearmake LD PRELOAD Rel\n@c  LocalWords:  syscalls perlhist acl pm multitable headitem fdl appendixsec\n@c  LocalWords:  LTALLOCA MALLOC malloc memcmp strdup alloca libcompat xyz DFOO\n@c  LocalWords:  unprefixed buildable preprocessed DBAZ DDATADIR WARNINGCFLAGS\n@c  LocalWords:  LIBFOOCFLAGS LIBFOOLDFLAGS ftable testSubDir obj LIBTOOLFLAGS\n@c  LocalWords:  barexec Pinard's automatize initialize lzip xz zstd cscope\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/doc/automake.info-1": "This is automake.info, produced by makeinfo version 6.7 from\nautomake.texi.\n\nThis manual is for GNU Automake (version 1.16.3, 19 November 2020), a\nprogram that creates GNU standards-compliant Makefiles from template\nfiles.\n\n   Copyright \u00a9 1995\u20132020 Free Software Foundation, Inc.\n\n     Permission is granted to copy, distribute and/or modify this\n     document under the terms of the GNU Free Documentation License,\n     Version 1.3 or any later version published by the Free Software\n     Foundation; with no Invariant Sections, with no Front-Cover texts,\n     and with no Back-Cover Texts.  A copy of the license is included in\n     the section entitled \u201cGNU Free Documentation License.\u201d\n\nINFO-DIR-SECTION Software development\nSTART-INFO-DIR-ENTRY\n* Automake: (automake).         Making GNU standards-compliant Makefiles.\nEND-INFO-DIR-ENTRY\n\nINFO-DIR-SECTION Individual utilities\nSTART-INFO-DIR-ENTRY\n* aclocal-invocation: (automake)aclocal Invocation.   Generating aclocal.m4.\n* automake-invocation: (automake)automake Invocation. Generating Makefile.in.\nEND-INFO-DIR-ENTRY\n\n\u001f\nFile: automake.info,  Node: Top,  Next: Introduction,  Up: (dir)\n\nGNU Automake\n************\n\nThis manual is for GNU Automake (version 1.16.3, 19 November 2020), a\nprogram that creates GNU standards-compliant Makefiles from template\nfiles.\n\n   Copyright \u00a9 1995\u20132020 Free Software Foundation, Inc.\n\n     Permission is granted to copy, distribute and/or modify this\n     document under the terms of the GNU Free Documentation License,\n     Version 1.3 or any later version published by the Free Software\n     Foundation; with no Invariant Sections, with no Front-Cover texts,\n     and with no Back-Cover Texts.  A copy of the license is included in\n     the section entitled \u201cGNU Free Documentation License.\u201d\n\n* Menu:\n\n* Introduction::                Automake\u2019s purpose\n* Autotools Introduction::      An Introduction to the Autotools\n* Generalities::                General ideas\n* Examples::                    Some example packages\n* automake Invocation::         Creating a Makefile.in\n* configure::                   Scanning configure.ac, using aclocal\n* Directories::                 Declaring subdirectories\n* Programs::                    Building programs and libraries\n* Other Objects::               Other derived objects\n* Other GNU Tools::             Other GNU Tools\n* Documentation::               Building documentation\n* Install::                     What gets installed\n* Clean::                       What gets cleaned\n* Dist::                        What goes in a distribution\n* Tests::                       Support for test suites\n* Rebuilding::                  Automatic rebuilding of Makefile\n* Options::                     Changing Automake\u2019s behavior\n* Miscellaneous::               Miscellaneous rules\n* Include::                     Including extra files in an Automake template\n* Conditionals::                Conditionals\n* Silencing Make::              Obtain less verbose output from \u2018make\u2019\n* Not Enough::                  When Automake is not Enough\n* Distributing::                Distributing the Makefile.in\n* API Versioning::              About compatibility between Automake versions\n* Upgrading::                   Upgrading to a Newer Automake Version\n* FAQ::                         Frequently Asked Questions\n* Copying This Manual::         How to make copies of this manual\n* Indices::                     Indices of variables, macros, and concepts\n\n \u2014 The Detailed Node Listing \u2014\n\nAn Introduction to the Autotools\n\n* GNU Build System::            Introducing the GNU Build System\n* Use Cases::                   Use Cases for the GNU Build System\n* Why Autotools::               How Autotools Help\n* Hello World::                 A Small Hello World Package\n\nUse Cases for the GNU Build System\n\n* Basic Installation::          Common installation procedure\n* Standard Targets::            A list of standard Makefile targets\n* Standard Directory Variables::  A list of standard directory variables\n* Standard Configuration Variables::  Using configuration variables\n* config.site::                 Using a config.site file\n* VPATH Builds::                Parallel build trees\n* Two-Part Install::            Installing data and programs separately\n* Cross-Compilation::           Building for other architectures\n* Renaming::                    Renaming programs at install time\n* DESTDIR::                     Building binary packages with DESTDIR\n* Preparing Distributions::     Rolling out tarballs\n* Dependency Tracking::         Automatic dependency tracking\n* Nested Packages::             The GNU Build Systems can be nested\n\nA Small Hello World\n\n* Creating amhello::            Create \u2018amhello-1.0.tar.gz\u2019 from scratch\n* amhello's configure.ac Setup Explained::\n* amhello's Makefile.am Setup Explained::\n\nGeneral ideas\n\n* General Operation::           General operation of Automake\n* Strictness::                  Standards conformance checking\n* Uniform::                     The Uniform Naming Scheme\n* Length Limitations::          Staying below the command line length limit\n* Canonicalization::            How derived variables are named\n* User Variables::              Variables reserved for the user\n* Auxiliary Programs::          Programs automake might require\n\nSome example packages\n\n* Complete::                    A simple example, start to finish\n* true::                        Building true and false\n\nScanning \u2018configure.ac\u2019, using \u2018aclocal\u2019\n\n* Requirements::                Configuration requirements\n* Optional::                    Other things Automake recognizes\n* aclocal Invocation::          Auto-generating aclocal.m4\n* Macros::                      Autoconf macros supplied with Automake\n\nAuto-generating aclocal.m4\n\n* aclocal Options::             Options supported by aclocal\n* Macro Search Path::           How aclocal finds .m4 files\n* Extending aclocal::           Writing your own aclocal macros\n* Local Macros::                Organizing local macros\n* Serials::                     Serial lines in Autoconf macros\n* Future of aclocal::           aclocal\u2019s scheduled death\n\nAutoconf macros supplied with Automake\n\n* Public Macros::               Macros that you can use.\n* Private Macros::              Macros that you should not use.\n\nDirectories\n\n* Subdirectories::              Building subdirectories recursively\n* Conditional Subdirectories::  Conditionally not building directories\n* Alternative::                 Subdirectories without recursion\n* Subpackages::                 Nesting packages\n\nConditional Subdirectories\n\n* SUBDIRS vs DIST_SUBDIRS::     Two sets of directories\n* Subdirectories with AM_CONDITIONAL::  Specifying conditional subdirectories\n* Subdirectories with AC_SUBST::  Another way for conditional recursion\n* Unconfigured Subdirectories::  Not even creating a \u2018Makefile\u2019\n\nBuilding Programs and Libraries\n\n* A Program::                   Building a program\n* A Library::                   Building a library\n* A Shared Library::            Building a Libtool library\n* Program and Library Variables::  Variables controlling program and\n                                library builds\n* Default _SOURCES::            Default source files\n* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA\n* Program Variables::           Variables used when building a program\n* Yacc and Lex::                Yacc and Lex support\n* C++ Support::                 Compiling C++ sources\n* Objective C Support::         Compiling Objective C sources\n* Objective C++ Support::       Compiling Objective C++ sources\n* Unified Parallel C Support::  Compiling Unified Parallel C sources\n* Assembly Support::            Compiling assembly sources\n* Fortran 77 Support::          Compiling Fortran 77 sources\n* Fortran 9x Support::          Compiling Fortran 9x sources\n* Java Support with gcj::       Compiling Java sources using gcj\n* Vala Support::                Compiling Vala sources\n* Support for Other Languages::  Compiling other languages\n* Dependencies::                Automatic dependency tracking\n* EXEEXT::                      Support for executable extensions\n\nBuilding a program\n\n* Program Sources::             Defining program sources\n* Linking::                     Linking with libraries or extra objects\n* Conditional Sources::         Handling conditional sources\n* Conditional Programs::        Building a program conditionally\n\nBuilding a Shared Library\n\n* Libtool Concept::             Introducing Libtool\n* Libtool Libraries::           Declaring Libtool Libraries\n* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally\n* Conditional Libtool Sources::  Choosing Library Sources Conditionally\n* Libtool Convenience Libraries::  Building Convenience Libtool Libraries\n* Libtool Modules::             Building Libtool Modules\n* Libtool Flags::               Using _LIBADD, _LDFLAGS, and _LIBTOOLFLAGS\n* LTLIBOBJS::                   Using $(LTLIBOBJS) and $(LTALLOCA)\n* Libtool Issues::              Common Issues Related to Libtool\u2019s Use\n\nCommon Issues Related to Libtool\u2019s Use\n\n* Error required file ltmain.sh not found::  The need to run libtoolize\n* Objects created both with libtool and without::  Avoid a specific build race\n\nFortran 77 Support\n\n* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources\n* Compiling Fortran 77 Files::  Compiling Fortran 77 sources\n* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++\n\nMixing Fortran 77 With C and C++\n\n* How the Linker is Chosen::    Automatic linker selection\n\nFortran 9x Support\n\n* Compiling Fortran 9x Files::  Compiling Fortran 9x sources\n\nOther Derived Objects\n\n* Scripts::                     Executable scripts\n* Headers::                     Header files\n* Data::                        Architecture-independent data files\n* Sources::                     Derived sources\n\nBuilt Sources\n\n* Built Sources Example::       Several ways to handle built sources.\n\nOther GNU Tools\n\n* Emacs Lisp::                  Emacs Lisp\n* gettext::                     Gettext\n* Libtool::                     Libtool\n* Java::                        Java bytecode compilation (deprecated)\n* Python::                      Python\n\nBuilding documentation\n\n* Texinfo::                     Texinfo\n* Man Pages::                   Man pages\n\nWhat Gets Installed\n\n* Basics of Installation::      What gets installed where\n* The Two Parts of Install::    Installing data and programs separately\n* Extending Installation::      Adding your own rules for installation\n* Staged Installs::             Installation in a temporary location\n* Install Rules for the User::  Useful additional rules\n\nWhat Goes in a Distribution\n\n* Basics of Distribution::      Files distributed by default\n* Fine-grained Distribution Control::  \u2018dist_\u2019 and \u2018nodist_\u2019 prefixes\n* The dist Hook::               A target for last-minute distribution changes\n* Checking the Distribution::   \u2018make distcheck\u2019 explained\n* The Types of Distributions::  A variety of formats and compression methods\n\nSupport for test suites\n\n* Generalities about Testing::  Generic concepts and terminology about testing\n* Simple Tests::                Listing test scripts in \u2018TESTS\u2019\n* Custom Test Drivers::         Writing and using custom test drivers\n* Using the TAP test protocol:: Integrating test scripts that use the TAP protocol\n* DejaGnu Tests::               Interfacing with the \u2018dejagnu\u2019 testing framework\n* Install Tests::               Running tests on installed packages\n\nSimple Tests\n\n* Scripts-based Testsuites::    Automake-specific concepts and terminology\n* Serial Test Harness::         Older (and discouraged) serial test harness\n* Parallel Test Harness::       Generic concurrent test harness\n\nUsing the TAP test protocol\n\n* Introduction to TAP::\n* Use TAP with the Automake test harness::\n* Incompatibilities with other TAP parsers and drivers::\n* Links and external resources on TAP::\n\nCustom Test Drivers\n\n* Overview of Custom Test Drivers Support::\n* Declaring Custom Test Drivers::\n* API for Custom Test Drivers::\n\nAPI for Custom Test Drivers\n\n* Command-line arguments for test drivers::\n* Log files generation and test results recording::\n* Testsuite progress output::\n\nChanging Automake\u2019s Behavior\n\n* Options generalities::        Semantics of Automake option\n* List of Automake options::    A comprehensive list of Automake options\n\nMiscellaneous Rules\n\n* Tags::                        Interfacing to cscope, etags and mkid\n* Suffixes::                    Handling new file extensions\n\nConditionals\n\n* Usage of Conditionals::       Declaring conditional content\n* Limits of Conditionals::      Enclosing complete statements\n\nSilencing Make\n\n* Make verbosity::              Make is verbose by default\n* Tricks For Silencing Make::   Standard and generic ways to silence make\n* Automake Silent Rules::       How Automake can help in silencing make\n\nWhen Automake Isn\u2019t Enough\n\n* Extending::                   Adding new rules or overriding existing ones.\n* Third-Party Makefiles::       Integrating Non-Automake \u2018Makefile\u2019s.\n\nFrequently Asked Questions about Automake\n\n* CVS::                         CVS and generated files\n* maintainer-mode::             missing and AM_MAINTAINER_MODE\n* Wildcards::                   Why doesn\u2019t Automake support wildcards?\n* Limitations on File Names::   Limitations on source and installed file names\n* Errors with distclean::       Files left in build directory after distclean\n* Flag Variables Ordering::     CFLAGS vs. AM_CFLAGS vs. mumble_CFLAGS\n* Renamed Objects::             Why are object files sometimes renamed?\n* Per-Object Flags::            How to simulate per-object flags?\n* Multiple Outputs::            Writing rules for tools with many output files\n* Hard-Coded Install Paths::    Installing to hard-coded locations\n* Debugging Make Rules::        Strategies when things don\u2019t work as expected\n* Reporting Bugs::              Feedback on bugs and feature requests\n\nCopying This Manual\n\n* GNU Free Documentation License::  License for copying this manual\n\nIndices\n\n* Macro Index::                 Index of Autoconf macros\n* Variable Index::              Index of Makefile variables\n* General Index::               General index\n\n\n\u001f\nFile: automake.info,  Node: Introduction,  Next: Autotools Introduction,  Prev: Top,  Up: Top\n\n1 Introduction\n**************\n\nAutomake is a tool for automatically generating \u2018Makefile.in\u2019s from\nfiles called \u2018Makefile.am\u2019.  Each \u2018Makefile.am\u2019 is basically a series of\n\u2018make\u2019 variable definitions(1), with rules being thrown in occasionally.\nThe generated \u2018Makefile.in\u2019s are compliant with the GNU Makefile\nstandards.\n\n   The GNU Makefile Standards Document (*note (standards)Makefile\nConventions::) is long, complicated, and subject to change.  The goal of\nAutomake is to remove the burden of Makefile maintenance from the back\nof the individual GNU maintainer (and put it on the back of the Automake\nmaintainers).\n\n   The typical Automake input file is simply a series of variable\ndefinitions.  Each such file is processed to create a \u2018Makefile.in\u2019.\n\n   Automake does constrain a project in certain ways; for instance, it\nassumes that the project uses Autoconf (*note Introduction:\n(autoconf)Top.), and enforces certain restrictions on the \u2018configure.ac\u2019\ncontents.\n\n   Automake requires \u2018perl\u2019 in order to generate the \u2018Makefile.in\u2019s.\nHowever, the distributions created by Automake are fully GNU\nstandards-compliant, and do not require \u2018perl\u2019 in order to be built.\n\n   For more information on bug reports, *Note Reporting Bugs::.\n\n   ---------- Footnotes ----------\n\n   (1) These variables are also called \u201cmake macros\u201d in Make\nterminology, however in this manual we reserve the term \u201cmacro\u201d for\nAutoconf\u2019s macros.\n\n\u001f\nFile: automake.info,  Node: Autotools Introduction,  Next: Generalities,  Prev: Introduction,  Up: Top\n\n2 An Introduction to the Autotools\n**********************************\n\nIf you are new to Automake, maybe you know that it is part of a set of\ntools called _The Autotools_.  Maybe you\u2019ve already delved into a\npackage full of files named \u2018configure\u2019, \u2018configure.ac\u2019, \u2018Makefile.in\u2019,\n\u2018Makefile.am\u2019, \u2018aclocal.m4\u2019, ..., some of them claiming to be _generated\nby_ Autoconf or Automake.  But the exact purpose of these files and\ntheir relations is probably fuzzy.  The goal of this chapter is to\nintroduce you to this machinery, to show you how it works and how\npowerful it is.  If you\u2019ve never installed or seen such a package, do\nnot worry: this chapter will walk you through it.\n\n   If you need some teaching material, more illustrations, or a less\n\u2018automake\u2019-centered continuation, some slides for this introduction are\navailable in Alexandre Duret-Lutz\u2019s Autotools Tutorial\n(https://www.lrde.epita.fr/~adl/autotools.html).  This chapter is the\nwritten version of the first part of his tutorial.\n\n* Menu:\n\n* GNU Build System::            Introducing the GNU Build System\n* Use Cases::                   Use Cases for the GNU Build System\n* Why Autotools::               How Autotools Help\n* Hello World::                 A Small Hello World Package\n\n\u001f\nFile: automake.info,  Node: GNU Build System,  Next: Use Cases,  Up: Autotools Introduction\n\n2.1 Introducing the GNU Build System\n====================================\n\nIt is a truth universally acknowledged, that as a developer in\npossession of a new package, you must be in want of a build system.\n\n   In the Unix world, such a build system is traditionally achieved\nusing the command \u2018make\u2019 (*note Overview: (make)Top.).  You express the\nrecipe to build your package in a \u2018Makefile\u2019.  This file is a set of\nrules to build the files in the package.  For instance the program\n\u2018prog\u2019 may be built by running the linker on the files \u2018main.o\u2019,\n\u2018foo.o\u2019, and \u2018bar.o\u2019; the file \u2018main.o\u2019 may be built by running the\ncompiler on \u2018main.c\u2019; etc.  Each time \u2018make\u2019 is run, it reads\n\u2018Makefile\u2019, checks the existence and modification time of the files\nmentioned, decides what files need to be built (or rebuilt), and runs\nthe associated commands.\n\n   When a package needs to be built on a different platform than the one\nit was developed on, its \u2018Makefile\u2019 usually needs to be adjusted.  For\ninstance the compiler may have another name or require more options.  In\n1991, David J. MacKenzie got tired of customizing \u2018Makefile\u2019 for the 20\nplatforms he had to deal with.  Instead, he handcrafted a little shell\nscript called \u2018configure\u2019 to automatically adjust the \u2018Makefile\u2019 (*note\nGenesis: (autoconf)Genesis.).  Compiling his package was now as simple\nas running \u2018./configure && make\u2019.\n\n   Today this process has been standardized in the GNU project.  The GNU\nCoding Standards (*note The Release Process: (standards)Managing\nReleases.) explains how each package of the GNU project should have a\n\u2018configure\u2019 script, and the minimal interface it should have.  The\n\u2018Makefile\u2019 too should follow some established conventions.  The result?\nA unified build system that makes all packages almost indistinguishable\nby the installer.  In its simplest scenario, all the installer has to do\nis to unpack the package, run \u2018./configure && make && make install\u2019, and\nrepeat with the next package to install.\n\n   We call this build system the \u201cGNU Build System\u201d, since it was grown\nout of the GNU project.  However it is used by a vast number of other\npackages: following any existing convention has its advantages.\n\n   The Autotools are tools that will create a GNU Build System for your\npackage.  Autoconf mostly focuses on \u2018configure\u2019 and Automake on\n\u2018Makefile\u2019s.  It is entirely possible to create a GNU Build System\nwithout the help of these tools.  However it is rather burdensome and\nerror-prone.  We will discuss this again after some illustration of the\nGNU Build System in action.\n\n\u001f\nFile: automake.info,  Node: Use Cases,  Next: Why Autotools,  Prev: GNU Build System,  Up: Autotools Introduction\n\n2.2 Use Cases for the GNU Build System\n======================================\n\nIn this section we explore several use cases for the GNU Build System.\nYou can replay all of these examples on the \u2018amhello-1.0.tar.gz\u2019 package\ndistributed with Automake.  If Automake is installed on your system, you\nshould find a copy of this file in\n\u2018PREFIX/share/doc/automake/amhello-1.0.tar.gz\u2019, where PREFIX is the\ninstallation prefix specified during configuration (PREFIX defaults to\n\u2018/usr/local\u2019, however if Automake was installed by some GNU/Linux\ndistribution it most likely has been set to \u2018/usr\u2019).  If you do not have\na copy of Automake installed, you can find a copy of this file inside\nthe \u2018doc/\u2019 directory of the Automake package.\n\n   Some of the following use cases present features that are in fact\nextensions to the GNU Build System.  Read: they are not specified by the\nGNU Coding Standards, but they are nonetheless part of the build system\ncreated by the Autotools.  To keep things simple, we do not point out\nthe difference.  Our objective is to show you many of the features that\nthe build system created by the Autotools will offer to you.\n\n* Menu:\n\n* Basic Installation::          Common installation procedure\n* Standard Targets::            A list of standard Makefile targets\n* Standard Directory Variables::  A list of standard directory variables\n* Standard Configuration Variables::  Using configuration variables\n* config.site::                 Using a config.site file\n* VPATH Builds::                Parallel build trees\n* Two-Part Install::            Installing data and programs separately\n* Cross-Compilation::           Building for other architectures\n* Renaming::                    Renaming programs at install time\n* DESTDIR::                     Building binary packages with DESTDIR\n* Preparing Distributions::     Rolling out tarballs\n* Dependency Tracking::         Automatic dependency tracking\n* Nested Packages::             The GNU Build Systems can be nested\n\n\u001f\nFile: automake.info,  Node: Basic Installation,  Next: Standard Targets,  Up: Use Cases\n\n2.2.1 Basic Installation\n------------------------\n\nThe most common installation procedure looks as follows.\n\n     ~ % tar zxf amhello-1.0.tar.gz\n     ~ % cd amhello-1.0\n     ~/amhello-1.0 % ./configure\n     ...\n     config.status: creating Makefile\n     config.status: creating src/Makefile\n     ...\n     ~/amhello-1.0 % make\n     ...\n     ~/amhello-1.0 % make check\n     ...\n     ~/amhello-1.0 % su\n     Password:\n     /home/adl/amhello-1.0 # make install\n     ...\n     /home/adl/amhello-1.0 # exit\n     ~/amhello-1.0 % make installcheck\n     ...\n\n   The user first unpacks the package.  Here, and in the following\nexamples, we will use the non-portable \u2018tar zxf\u2019 command for simplicity.\nOn a system without GNU \u2018tar\u2019 installed, this command should read\n\u2018gunzip -c amhello-1.0.tar.gz | tar xf -\u2019.\n\n   The user then enters the newly created directory to run the\n\u2018configure\u2019 script.  This script probes the system for various features,\nand finally creates the \u2018Makefile\u2019s.  In this toy example there are only\ntwo \u2018Makefile\u2019s, but in real-world projects, there may be many more,\nusually one \u2018Makefile\u2019 per directory.\n\n   It is now possible to run \u2018make\u2019.  This will construct all the\nprograms, libraries, and scripts that need to be constructed for the\npackage.  In our example, this compiles the \u2018hello\u2019 program.  All files\nare constructed in place, in the source tree; we will see later how this\ncan be changed.\n\n   \u2018make check\u2019 causes the package\u2019s tests to be run.  This step is not\nmandatory, but it is often good to make sure the programs that have been\nbuilt behave as they should, before you decide to install them.  Our\nexample does not contain any tests, so running \u2018make check\u2019 is a no-op.\n\n   After everything has been built, and maybe tested, it is time to\ninstall it on the system.  That means copying the programs, libraries,\nheader files, scripts, and other data files from the source directory to\ntheir final destination on the system.  The command \u2018make install\u2019 will\ndo that.  However, by default everything will be installed in\nsubdirectories of \u2018/usr/local\u2019: binaries will go into \u2018/usr/local/bin\u2019,\nlibraries will end up in \u2018/usr/local/lib\u2019, etc.  This destination is\nusually not writable by any user, so we assume that we have to become\nroot before we can run \u2018make install\u2019.  In our example, running \u2018make\ninstall\u2019 will copy the program \u2018hello\u2019 into \u2018/usr/local/bin\u2019 and\n\u2018README\u2019 into \u2018/usr/local/share/doc/amhello\u2019.\n\n   A last and optional step is to run \u2018make installcheck\u2019.  This command\nmay run tests on the installed files.  \u2018make check\u2019 tests the files in\nthe source tree, while \u2018make installcheck\u2019 tests their installed copies.\nThe tests run by the latter can be different from those run by the\nformer.  For instance, there are tests that cannot be run in the source\ntree.  Conversely, some packages are set up so that \u2018make installcheck\u2019\nwill run the very same tests as \u2018make check\u2019, only on different files\n(non-installed vs. installed).  It can make a difference, for instance\nwhen the source tree\u2019s layout is different from that of the\ninstallation.  Furthermore it may help to diagnose an incomplete\ninstallation.\n\n   Presently most packages do not have any \u2018installcheck\u2019 tests because\nthe existence of \u2018installcheck\u2019 is little known, and its usefulness is\nneglected.  Our little toy package is no better: \u2018make installcheck\u2019\ndoes nothing.\n\n\u001f\nFile: automake.info,  Node: Standard Targets,  Next: Standard Directory Variables,  Prev: Basic Installation,  Up: Use Cases\n\n2.2.2 Standard \u2018Makefile\u2019 Targets\n---------------------------------\n\nSo far we have come across four ways to run \u2018make\u2019 in the GNU Build\nSystem: \u2018make\u2019, \u2018make check\u2019, \u2018make install\u2019, and \u2018make installcheck\u2019.\nThe words \u2018check\u2019, \u2018install\u2019, and \u2018installcheck\u2019, passed as arguments to\n\u2018make\u2019, are called \u201ctargets\u201d.  \u2018make\u2019 is a shorthand for \u2018make all\u2019,\n\u2018all\u2019 being the default target in the GNU Build System.\n\n   Here is a list of the most useful targets that the GNU Coding\nStandards specify.\n\n\u2018make all\u2019\n     Build programs, libraries, documentation, etc. (same as \u2018make\u2019).\n\u2018make install\u2019\n     Install what needs to be installed, copying the files from the\n     package\u2019s tree to system-wide directories.\n\u2018make install-strip\u2019\n     Same as \u2018make install\u2019, then strip debugging symbols.  Some users\n     like to trade space for useful bug reports...\n\u2018make uninstall\u2019\n     The opposite of \u2018make install\u2019: erase the installed files.  (This\n     needs to be run from the same build tree that was installed.)\n\u2018make clean\u2019\n     Erase from the build tree the files built by \u2018make all\u2019.\n\u2018make distclean\u2019\n     Additionally erase anything \u2018./configure\u2019 created.\n\u2018make check\u2019\n     Run the test suite, if any.\n\u2018make installcheck\u2019\n     Check the installed programs or libraries, if supported.\n\u2018make dist\u2019\n     Recreate \u2018PACKAGE-VERSION.tar.gz\u2019 from all the source files.\n\n\u001f\nFile: automake.info,  Node: Standard Directory Variables,  Next: Standard Configuration Variables,  Prev: Standard Targets,  Up: Use Cases\n\n2.2.3 Standard Directory Variables\n----------------------------------\n\nThe GNU Coding Standards also specify a hierarchy of variables to denote\ninstallation directories.  Some of these are:\n\nDirectory variable   Default value\n-------------------------------------------------------\n\u2018prefix\u2019             \u2018/usr/local\u2019\n  \u2018exec_prefix\u2019      \u2018${prefix}\u2019\n    \u2018bindir\u2019         \u2018${exec_prefix}/bin\u2019\n    \u2018libdir\u2019         \u2018${exec_prefix}/lib\u2019\n    ...\n  \u2018includedir\u2019       \u2018${prefix}/include\u2019\n  \u2018datarootdir\u2019      \u2018${prefix}/share\u2019\n    \u2018datadir\u2019        \u2018${datarootdir}\u2019\n    \u2018mandir\u2019         \u2018${datarootdir}/man\u2019\n    \u2018infodir\u2019        \u2018${datarootdir}/info\u2019\n    \u2018docdir\u2019         \u2018${datarootdir}/doc/${PACKAGE}\u2019\n  ...\n\n   Each of these directories has a role which is often obvious from its\nname.  In a package, any installable file will be installed in one of\nthese directories.  For instance in \u2018amhello-1.0\u2019, the program \u2018hello\u2019\nis to be installed in BINDIR, the directory for binaries.  The default\nvalue for this directory is \u2018/usr/local/bin\u2019, but the user can supply a\ndifferent value when calling \u2018configure\u2019.  Also the file \u2018README\u2019 will\nbe installed into DOCDIR, which defaults to\n\u2018/usr/local/share/doc/amhello\u2019.\n\n   As a user, if you wish to install a package on your own account, you\ncould proceed as follows:\n\n     ~/amhello-1.0 % ./configure --prefix ~/usr\n     ...\n     ~/amhello-1.0 % make\n     ...\n     ~/amhello-1.0 % make install\n     ...\n\n   This would install \u2018~/usr/bin/hello\u2019 and\n\u2018~/usr/share/doc/amhello/README\u2019.\n\n   The list of all such directory options is shown by \u2018./configure\n--help\u2019.\n\n\u001f\nFile: automake.info,  Node: Standard Configuration Variables,  Next: config.site,  Prev: Standard Directory Variables,  Up: Use Cases\n\n2.2.4 Standard Configuration Variables\n--------------------------------------\n\nThe GNU Coding Standards also define a set of standard configuration\nvariables used during the build.  Here are some:\n\n\u2018CC\u2019\n     C compiler command\n\u2018CFLAGS\u2019\n     C compiler flags\n\u2018CXX\u2019\n     C++ compiler command\n\u2018CXXFLAGS\u2019\n     C++ compiler flags\n\u2018LDFLAGS\u2019\n     linker flags\n\u2018CPPFLAGS\u2019\n     C/C++ preprocessor flags\n...\n\n   \u2018configure\u2019 usually does a good job at setting appropriate values for\nthese variables, but there are cases where you may want to override\nthem.  For instance you may have several versions of a compiler\ninstalled and would like to use another one, you may have header files\ninstalled outside the default search path of the compiler, or even\nlibraries out of the way of the linker.\n\n   Here is how one would call \u2018configure\u2019 to force it to use \u2018gcc-3\u2019 as\nC compiler, use header files from \u2018~/usr/include\u2019 when compiling, and\nlibraries from \u2018~/usr/lib\u2019 when linking.\n\n     ~/amhello-1.0 % ./configure --prefix ~/usr CC=gcc-3 \\\n     CPPFLAGS=-I$HOME/usr/include LDFLAGS=-L$HOME/usr/lib\n\n   Again, a full list of these variables appears in the output of\n\u2018./configure --help\u2019.\n\n\u001f\nFile: automake.info,  Node: config.site,  Next: VPATH Builds,  Prev: Standard Configuration Variables,  Up: Use Cases\n\n2.2.5 Overriding Default Configuration Setting with \u2018config.site\u2019\n-----------------------------------------------------------------\n\nWhen installing several packages using the same setup, it can be\nconvenient to create a file to capture common settings.  If a file named\n\u2018PREFIX/share/config.site\u2019 exists, \u2018configure\u2019 will source it at the\nbeginning of its execution.\n\n   Recall the command from the previous section:\n\n     ~/amhello-1.0 % ./configure --prefix ~/usr CC=gcc-3 \\\n     CPPFLAGS=-I$HOME/usr/include LDFLAGS=-L$HOME/usr/lib\n\n   Assuming we are installing many package in \u2018~/usr\u2019, and will always\nwant to use these definitions of \u2018CC\u2019, \u2018CPPFLAGS\u2019, and \u2018LDFLAGS\u2019, we can\nautomate this by creating the following \u2018~/usr/share/config.site\u2019 file:\n\n     test -z \"$CC\" && CC=gcc-3\n     test -z \"$CPPFLAGS\" && CPPFLAGS=-I$HOME/usr/include\n     test -z \"$LDFLAGS\" && LDFLAGS=-L$HOME/usr/lib\n\n   Now, any time a \u2018configure\u2019 script is using the \u2018~/usr\u2019 prefix, it\nwill execute the above \u2018config.site\u2019 and define these three variables.\n\n     ~/amhello-1.0 % ./configure --prefix ~/usr\n     configure: loading site script /home/adl/usr/share/config.site\n     ...\n\n   *Note Setting Site Defaults: (autoconf)Site Defaults, for more\ninformation about this feature.\n\n\u001f\nFile: automake.info,  Node: VPATH Builds,  Next: Two-Part Install,  Prev: config.site,  Up: Use Cases\n\n2.2.6 Parallel Build Trees (a.k.a. VPATH Builds)\n------------------------------------------------\n\nThe GNU Build System distinguishes two trees: the source tree, and the\nbuild tree.  These are two directories that may be the same, or\ndifferent.\n\n   The source tree is rooted in the directory containing the \u2018configure\u2019\nscript.  It contains all the source files (those that are distributed),\nand may be arranged using several subdirectories.\n\n   The build tree is rooted in the current directory at the time\n\u2018configure\u2019 was run, and is populated with all object files, programs,\nlibraries, and other derived files built from the sources (and hence not\ndistributed).  The build tree usually has the same subdirectory layout\nas the source tree; its subdirectories are created automatically by the\nbuild system.\n\n   If \u2018configure\u2019 is executed in its own directory, the source and build\ntrees are combined: derived files are constructed in the same\ndirectories as their sources.  This was the case in our first\ninstallation example (*note Basic Installation::).\n\n   A common request from users is that they want to confine all derived\nfiles to a single directory, to keep their source directories\nuncluttered.  Here is how we could run \u2018configure\u2019 to create everything\nin a build tree (that is, subdirectory) called \u2018build/\u2019.\n\n     ~ % tar zxf ~/amhello-1.0.tar.gz\n     ~ % cd amhello-1.0\n     ~/amhello-1.0 % mkdir build && cd build\n     ~/amhello-1.0/build % ../configure\n     ...\n     ~/amhello-1.0/build % make\n     ...\n\n   These setups, where source and build trees are different, are often\ncalled \u201cparallel builds\u201d or \u201cVPATH builds\u201d.  The expression _parallel\nbuild_ is misleading: the word _parallel_ is a reference to the way the\nbuild tree shadows the source tree, it is not about some concurrency in\nthe way build commands are run.  For this reason we refer to such setups\nusing the name _VPATH builds_ in the following.  _VPATH_ is the name of\nthe \u2018make\u2019 feature used by the \u2018Makefile\u2019s to allow these builds (*note\n\u2018VPATH\u2019 Search Path for All Prerequisites: (make)General Search.).\n\n   VPATH builds have other interesting uses.  One is to build the same\nsources with multiple configurations.  For instance:\n\n     ~ % tar zxf ~/amhello-1.0.tar.gz\n     ~ % cd amhello-1.0\n     ~/amhello-1.0 % mkdir debug optim && cd debug\n     ~/amhello-1.0/debug % ../configure CFLAGS='-g -O0'\n     ...\n     ~/amhello-1.0/debug % make\n     ...\n     ~/amhello-1.0/debug % cd ../optim\n     ~/amhello-1.0/optim % ../configure CFLAGS='-O3 -fomit-frame-pointer'\n     ...\n     ~/amhello-1.0/optim % make\n     ...\n\n   With network file systems, a similar approach can be used to build\nthe same sources on different machines.  For instance, suppose that the\nsources are installed on a directory shared by two hosts: \u2018HOST1\u2019 and\n\u2018HOST2\u2019, which may be different platforms.\n\n     ~ % cd /nfs/src\n     /nfs/src % tar zxf ~/amhello-1.0.tar.gz\n\n   On the first host, you could create a local build directory:\n     [HOST1] ~ % mkdir /tmp/amh && cd /tmp/amh\n     [HOST1] /tmp/amh % /nfs/src/amhello-1.0/configure\n     ...\n     [HOST1] /tmp/amh % make && sudo make install\n     ...\n\n(Here we assume that the installer has configured \u2018sudo\u2019 so it can\nexecute \u2018make install\u2019 with root privileges; it is more convenient than\nusing \u2018su\u2019 like in *note Basic Installation::).\n\n   On the second host, you would do exactly the same, possibly at the\nsame time:\n     [HOST2] ~ % mkdir /tmp/amh && cd /tmp/amh\n     [HOST2] /tmp/amh % /nfs/src/amhello-1.0/configure\n     ...\n     [HOST2] /tmp/amh % make && sudo make install\n     ...\n\n   In this scenario, nothing forbids the \u2018/nfs/src/amhello-1.0\u2019\ndirectory from being read-only.  In fact VPATH builds are also a means\nof building packages from a read-only medium such as a CD-ROM. (The FSF\nused to sell CD-ROMs with unpacked source code, before the GNU project\ngrew so big.)\n\n\u001f\nFile: automake.info,  Node: Two-Part Install,  Next: Cross-Compilation,  Prev: VPATH Builds,  Up: Use Cases\n\n2.2.7 Two-Part Installation\n---------------------------\n\nIn our last example (*note VPATH Builds::), a source tree was shared by\ntwo hosts, but compilation and installation were done separately on each\nhost.\n\n   The GNU Build System also supports networked setups where part of the\ninstalled files should be shared amongst multiple hosts.  It does so by\ndistinguishing architecture-dependent files from\narchitecture-independent files, and providing two \u2018Makefile\u2019 targets to\ninstall each of these classes of files.\n\n   These targets are \u2018install-exec\u2019 for architecture-dependent files and\n\u2018install-data\u2019 for architecture-independent files.  The command we used\nup to now, \u2018make install\u2019, can be thought of as a shorthand for \u2018make\ninstall-exec install-data\u2019.\n\n   From the GNU Build System point of view, the distinction between\narchitecture-dependent files and architecture-independent files is based\nexclusively on the directory variable used to specify their installation\ndestination.  In the list of directory variables we provided earlier\n(*note Standard Directory Variables::), all the variables based on\nEXEC-PREFIX designate architecture-dependent directories whose files\nwill be installed by \u2018make install-exec\u2019.  The others designate\narchitecture-independent directories and will serve files installed by\n\u2018make install-data\u2019.  *Note The Two Parts of Install::, for more\ndetails.\n\n   Here is how we could revisit our two-host installation example,\nassuming that (1) we want to install the package directly in \u2018/usr\u2019, and\n(2) the directory \u2018/usr/share\u2019 is shared by the two hosts.\n\n   On the first host we would run\n     [HOST1] ~ % mkdir /tmp/amh && cd /tmp/amh\n     [HOST1] /tmp/amh % /nfs/src/amhello-1.0/configure --prefix /usr\n     ...\n     [HOST1] /tmp/amh % make && sudo make install\n     ...\n\n   On the second host, however, we need only install the\narchitecture-specific files.\n     [HOST2] ~ % mkdir /tmp/amh && cd /tmp/amh\n     [HOST2] /tmp/amh % /nfs/src/amhello-1.0/configure --prefix /usr\n     ...\n     [HOST2] /tmp/amh % make && sudo make install-exec\n     ...\n\n   In packages that have installation checks, it would make sense to run\n\u2018make installcheck\u2019 (*note Basic Installation::) to verify that the\npackage works correctly despite the apparent partial installation.\n\n\u001f\nFile: automake.info,  Node: Cross-Compilation,  Next: Renaming,  Prev: Two-Part Install,  Up: Use Cases\n\n2.2.8 Cross-Compilation\n-----------------------\n\nTo \u201ccross-compile\u201d is to build on one platform a binary that will run on\nanother platform.  When speaking of cross-compilation, it is important\nto distinguish between the \u201cbuild platform\u201d on which the compilation is\nperformed, and the \u201chost platform\u201d on which the resulting executable is\nexpected to run.  The following \u2018configure\u2019 options are used to specify\neach of them:\n\n\u2018--build=BUILD\u2019\n     The system on which the package is built.\n\u2018--host=HOST\u2019\n     The system where built programs and libraries will run.\n\n   When the \u2018--host\u2019 is used, \u2018configure\u2019 will search for the\ncross-compiling suite for this platform.  Cross-compilation tools\ncommonly have their target architecture as prefix of their name.  For\ninstance my cross-compiler for MinGW32 has its binaries called\n\u2018i586-mingw32msvc-gcc\u2019, \u2018i586-mingw32msvc-ld\u2019, \u2018i586-mingw32msvc-as\u2019,\netc.\n\n   Here is how we could build \u2018amhello-1.0\u2019 for \u2018i586-mingw32msvc\u2019 on a\nGNU/Linux PC.\n\n     ~/amhello-1.0 % ./configure --build i686-pc-linux-gnu --host i586-mingw32msvc\n     checking for a BSD-compatible install... /usr/bin/install -c\n     checking whether build environment is sane... yes\n     checking for gawk... gawk\n     checking whether make sets $(MAKE)... yes\n     checking for i586-mingw32msvc-strip... i586-mingw32msvc-strip\n     checking for i586-mingw32msvc-gcc... i586-mingw32msvc-gcc\n     checking for C compiler default output file name... a.exe\n     checking whether the C compiler works... yes\n     checking whether we are cross compiling... yes\n     checking for suffix of executables... .exe\n     checking for suffix of object files... o\n     checking whether we are using the GNU C compiler... yes\n     checking whether i586-mingw32msvc-gcc accepts -g... yes\n     checking for i586-mingw32msvc-gcc option to accept ANSI C...\n     ...\n     ~/amhello-1.0 % make\n     ...\n     ~/amhello-1.0 % cd src; file hello.exe\n     hello.exe: MS Windows PE 32-bit Intel 80386 console executable not relocatable\n\n   The \u2018--host\u2019 and \u2018--build\u2019 options are usually all we need for\ncross-compiling.  The only exception is if the package being built is\nitself a cross-compiler: we need a third option to specify its target\narchitecture.\n\n\u2018--target=TARGET\u2019\n     When building compiler tools: the system for which the tools will\n     create output.\n\n   For instance when installing GCC, the GNU Compiler Collection, we can\nuse \u2018--target=TARGET\u2019 to specify that we want to build GCC as a\ncross-compiler for TARGET.  Mixing \u2018--build\u2019 and \u2018--target\u2019, we can\nactually cross-compile a cross-compiler; such a three-way\ncross-compilation is known as a \u201cCanadian cross\u201d.\n\n   *Note Specifying the System Type: (autoconf)Specifying Names, for\nmore information about these \u2018configure\u2019 options.\n\n\u001f\nFile: automake.info,  Node: Renaming,  Next: DESTDIR,  Prev: Cross-Compilation,  Up: Use Cases\n\n2.2.9 Renaming Programs at Install Time\n---------------------------------------\n\nThe GNU Build System provides means to automatically rename executables\nand manpages before they are installed (*note Man Pages::).  This is\nespecially convenient when installing a GNU package on a system that\nalready has a proprietary implementation you do not want to overwrite.\nFor instance, you may want to install GNU \u2018tar\u2019 as \u2018gtar\u2019 so you can\ndistinguish it from your vendor\u2019s \u2018tar\u2019.\n\n   This can be done using one of these three \u2018configure\u2019 options.\n\n\u2018--program-prefix=PREFIX\u2019\n     Prepend PREFIX to installed program names.\n\u2018--program-suffix=SUFFIX\u2019\n     Append SUFFIX to installed program names.\n\u2018--program-transform-name=PROGRAM\u2019\n     Run \u2018sed PROGRAM\u2019 on installed program names.\n\n   The following commands would install \u2018hello\u2019 as\n\u2018/usr/local/bin/test-hello\u2019, for instance.\n\n     ~/amhello-1.0 % ./configure --program-prefix test-\n     ...\n     ~/amhello-1.0 % make\n     ...\n     ~/amhello-1.0 % sudo make install\n     ...\n\n\u001f\nFile: automake.info,  Node: DESTDIR,  Next: Preparing Distributions,  Prev: Renaming,  Up: Use Cases\n\n2.2.10 Building Binary Packages Using DESTDIR\n---------------------------------------------\n\nThe GNU Build System\u2019s \u2018make install\u2019 and \u2018make uninstall\u2019 interface\ndoes not exactly fit the needs of a system administrator who has to\ndeploy and upgrade packages on lots of hosts.  In other words, the GNU\nBuild System does not replace a package manager.\n\n   Such package managers usually need to know which files have been\ninstalled by a package, so a mere \u2018make install\u2019 is inappropriate.\n\n   The \u2018DESTDIR\u2019 variable can be used to perform a staged installation.\nThe package should be configured as if it was going to be installed in\nits final location (e.g., \u2018--prefix /usr\u2019), but when running \u2018make\ninstall\u2019, the \u2018DESTDIR\u2019 should be set to the absolute name of a\ndirectory into which the installation will be diverted.  From this\ndirectory it is easy to review which files are being installed where,\nand finally copy them to their final location by some means.\n\n   For instance here is how we could create a binary package containing\na snapshot of all the files to be installed.\n\n     ~/amhello-1.0 % ./configure --prefix /usr\n     ...\n     ~/amhello-1.0 % make\n     ...\n     ~/amhello-1.0 % make DESTDIR=$HOME/inst install\n     ...\n     ~/amhello-1.0 % cd ~/inst\n     ~/inst % find . -type f -print > ../files.lst\n     ~/inst % tar zcvf ~/amhello-1.0-i686.tar.gz `cat ../files.lst`\n     ./usr/bin/hello\n     ./usr/share/doc/amhello/README\n\n   After this example, \u2018amhello-1.0-i686.tar.gz\u2019 is ready to be\nuncompressed in \u2018/\u2019 on many hosts.  (Using \u2018`cat ../files.lst`\u2019 instead\nof \u2018.\u2019 as argument for \u2018tar\u2019 avoids entries for each subdirectory in the\narchive: we would not like \u2018tar\u2019 to restore the modification time of\n\u2018/\u2019, \u2018/usr/\u2019, etc.)\n\n   Note that when building packages for several architectures, it might\nbe convenient to use \u2018make install-data\u2019 and \u2018make install-exec\u2019 (*note\nTwo-Part Install::) to gather architecture-independent files in a single\npackage.\n\n   *Note Install::, for more information.\n\n\u001f\nFile: automake.info,  Node: Preparing Distributions,  Next: Dependency Tracking,  Prev: DESTDIR,  Up: Use Cases\n\n2.2.11 Preparing Distributions\n------------------------------\n\nWe have already mentioned \u2018make dist\u2019.  This target collects all your\nsource files and the necessary parts of the build system to create a\ntarball named \u2018PACKAGE-VERSION.tar.gz\u2019.\n\n   Another, more useful command is \u2018make distcheck\u2019.  The \u2018distcheck\u2019\ntarget constructs \u2018PACKAGE-VERSION.tar.gz\u2019 just as well as \u2018dist\u2019, but\nit additionally ensures most of the use cases presented so far work:\n\n   \u2022 It attempts a full compilation of the package (*note Basic\n     Installation::): unpacking the newly constructed tarball, running\n     \u2018make\u2019, \u2018make dvi\u2019, \u2018make check\u2019, \u2018make install\u2019, as well as \u2018make\n     installcheck\u2019, and even \u2018make dist\u2019,\n   \u2022 it tests VPATH builds with read-only source tree (*note VPATH\n     Builds::),\n   \u2022 it makes sure \u2018make clean\u2019, \u2018make distclean\u2019, and \u2018make uninstall\u2019\n     do not omit any file (*note Standard Targets::),\n   \u2022 and it checks that \u2018DESTDIR\u2019 installations work (*note DESTDIR::).\n\n   All of these actions are performed in a temporary directory, so that\nno root privileges are required.  The exact location and the exact\nstructure of such a subdirectory (where the extracted sources are\nplaced, how the temporary build and install directories are named and\nhow deeply they are nested, etc.)  is to be considered an implementation\ndetail, which can change at any time; so do not rely on it.\n\n   Releasing a package that fails \u2018make distcheck\u2019 means that one of the\nscenarios we presented will not work and some users will be\ndisappointed.  Therefore it is a good practice to release a package only\nafter a successful \u2018make distcheck\u2019.  This of course does not imply that\nthe package will be flawless, but at least it will prevent some of the\nembarrassing errors you may find in packages released by people who have\nnever heard about \u2018distcheck\u2019 (like \u2018DESTDIR\u2019 not working because of a\ntypo, or a distributed file being erased by \u2018make clean\u2019, or even\n\u2018VPATH\u2019 builds not working).\n\n   *Note Creating amhello::, to recreate \u2018amhello-1.0.tar.gz\u2019 using\n\u2018make distcheck\u2019.  *Note Checking the Distribution::, for more\ninformation about \u2018distcheck\u2019.\n\n\u001f\nFile: automake.info,  Node: Dependency Tracking,  Next: Nested Packages,  Prev: Preparing Distributions,  Up: Use Cases\n\n2.2.12 Automatic Dependency Tracking\n------------------------------------\n\nDependency tracking is performed as a side-effect of compilation.  Each\ntime the build system compiles a source file, it computes its list of\ndependencies (in C these are the header files included by the source\nbeing compiled).  Later, any time \u2018make\u2019 is run and a dependency appears\nto have changed, the dependent files will be rebuilt.\n\n   Automake generates code for automatic dependency tracking by default,\nunless the developer chooses to override it; for more information, *note\nDependencies::.\n\n   When \u2018configure\u2019 is executed, you can see it probing each compiler\nfor the dependency mechanism it supports (several mechanisms can be\nused):\n\n     ~/amhello-1.0 % ./configure --prefix /usr\n     ...\n     checking dependency style of gcc... gcc3\n     ...\n\n   Because dependencies are only computed as a side-effect of the\ncompilation, no dependency information exists the first time a package\nis built.  This is OK because all the files need to be built anyway:\n\u2018make\u2019 does not have to decide which files need to be rebuilt.  In fact,\ndependency tracking is completely useless for one-time builds and there\nis a \u2018configure\u2019 option to disable this:\n\n\u2018--disable-dependency-tracking\u2019\n     Speed up one-time builds.\n\n   Some compilers do not offer any practical way to derive the list of\ndependencies as a side-effect of the compilation, requiring a separate\nrun (maybe of another tool) to compute these dependencies.  The\nperformance penalty implied by these methods is important enough to\ndisable them by default.  The option \u2018--enable-dependency-tracking\u2019 must\nbe passed to \u2018configure\u2019 to activate them.\n\n\u2018--enable-dependency-tracking\u2019\n     Do not reject slow dependency extractors.\n\n   *Note Dependency Tracking Evolution: (automake-history)Dependency\nTracking Evolution, for some discussion about the different dependency\ntracking schemes used by Automake over the years.\n\n\u001f\nFile: automake.info,  Node: Nested Packages,  Prev: Dependency Tracking,  Up: Use Cases\n\n2.2.13 Nested Packages\n----------------------\n\nAlthough nesting packages isn\u2019t something we would recommend to someone\nwho is discovering the Autotools, it is a nice feature worthy of mention\nin this small advertising tour.\n\n   Autoconfiscated packages (that means packages whose build system have\nbeen created by Autoconf and friends) can be nested to arbitrary depth.\n\n   A typical setup is that package A will distribute one of the\nlibraries it needs in a subdirectory.  This library B is a complete\npackage with its own GNU Build System.  The \u2018configure\u2019 script of A will\nrun the \u2018configure\u2019 script of B as part of its execution; building and\ninstalling A will also build and install B. Generating a distribution\nfor A will also include B.\n\n   It is possible to gather several packages like this.  GCC is a heavy\nuser of this feature.  This gives installers a single package to\nconfigure, build and install, while it allows developers to work on\nsubpackages independently.\n\n   When configuring nested packages, the \u2018configure\u2019 options given to\nthe top-level \u2018configure\u2019 are passed recursively to nested \u2018configure\u2019s.\nA package that does not understand an option will ignore it, assuming it\nis meaningful to some other package.\n\n   The command \u2018configure --help=recursive\u2019 can be used to display the\noptions supported by all the included packages.\n\n   *Note Subpackages::, for an example setup.\n\n\u001f\nFile: automake.info,  Node: Why Autotools,  Next: Hello World,  Prev: Use Cases,  Up: Autotools Introduction\n\n2.3 How Autotools Help\n======================\n\nThere are several reasons why you may not want to implement the GNU\nBuild System yourself (read: write a \u2018configure\u2019 script and \u2018Makefile\u2019s\nyourself).\n\n   \u2022 As we have seen, the GNU Build System has a lot of features (*note\n     Use Cases::).  Some users may expect features you have not\n     implemented because you did not need them.\n   \u2022 Implementing these features portably is difficult and exhausting.\n     Think of writing portable shell scripts, and portable \u2018Makefile\u2019s,\n     for systems you may not have handy.  *Note Portable Shell\n     Programming: (autoconf)Portable Shell, to convince yourself.\n   \u2022 You will have to upgrade your setup to follow changes to the GNU\n     Coding Standards.\n\n   The GNU Autotools take all this burden off your back and provide:\n\n   \u2022 Tools to create a portable, complete, and self-contained GNU Build\n     System, from simple instructions.  _Self-contained_ meaning the\n     resulting build system does not require the GNU Autotools.\n   \u2022 A central place where fixes and improvements are made: a bug-fix\n     for a portability issue will benefit every package.\n\n   Yet there also exist reasons why you may want NOT to use the\nAutotools...  For instance you may be already using (or used to) another\nincompatible build system.  Autotools will only be useful if you do\naccept the concepts of the GNU Build System.  People who have their own\nidea of how a build system should work will feel frustrated by the\nAutotools.\n\n\u001f\nFile: automake.info,  Node: Hello World,  Prev: Why Autotools,  Up: Autotools Introduction\n\n2.4 A Small Hello World\n=======================\n\nIn this section we recreate the \u2018amhello-1.0\u2019 package from scratch.  The\nfirst subsection shows how to call the Autotools to instantiate the GNU\nBuild System, while the second explains the meaning of the\n\u2018configure.ac\u2019 and \u2018Makefile.am\u2019 files read by the Autotools.\n\n* Menu:\n\n* Creating amhello::            Create \u2018amhello-1.0.tar.gz\u2019 from scratch\n* amhello's configure.ac Setup Explained::\n* amhello's Makefile.am Setup Explained::\n\n\u001f\nFile: automake.info,  Node: Creating amhello,  Next: amhello's configure.ac Setup Explained,  Up: Hello World\n\n2.4.1 Creating \u2018amhello-1.0.tar.gz\u2019\n-----------------------------------\n\nHere is how we can recreate \u2018amhello-1.0.tar.gz\u2019 from scratch.  The\npackage is simple enough so that we will only need to write 5 files.\n(You may copy them from the final \u2018amhello-1.0.tar.gz\u2019 that is\ndistributed with Automake if you do not want to write them.)\n\n   Create the following files in an empty directory.\n\n   \u2022 \u2018src/main.c\u2019 is the source file for the \u2018hello\u2019 program.  We store\n     it in the \u2018src/\u2019 subdirectory, because later, when the package\n     evolves, it will ease the addition of a \u2018man/\u2019 directory for man\n     pages, a \u2018data/\u2019 directory for data files, etc.\n          ~/amhello % cat src/main.c\n          #include <config.h>\n          #include <stdio.h>\n\n          int\n          main (void)\n          {\n            puts (\"Hello World!\");\n            puts (\"This is \" PACKAGE_STRING \".\");\n            return 0;\n          }\n\n   \u2022 \u2018README\u2019 contains some very limited documentation for our little\n     package.\n          ~/amhello % cat README\n          This is a demonstration package for GNU Automake.\n          Type 'info Automake' to read the Automake manual.\n\n   \u2022 \u2018Makefile.am\u2019 and \u2018src/Makefile.am\u2019 contain Automake instructions\n     for these two directories.\n\n          ~/amhello % cat src/Makefile.am\n          bin_PROGRAMS = hello\n          hello_SOURCES = main.c\n          ~/amhello % cat Makefile.am\n          SUBDIRS = src\n          dist_doc_DATA = README\n\n   \u2022 Finally, \u2018configure.ac\u2019 contains Autoconf instructions to create\n     the \u2018configure\u2019 script.\n\n          ~/amhello % cat configure.ac\n          AC_INIT([amhello], [1.0], [bug-automake@gnu.org])\n          AM_INIT_AUTOMAKE([-Wall -Werror foreign])\n          AC_PROG_CC\n          AC_CONFIG_HEADERS([config.h])\n          AC_CONFIG_FILES([\n           Makefile\n           src/Makefile\n          ])\n          AC_OUTPUT\n\n   Once you have these five files, it is time to run the Autotools to\ninstantiate the build system.  Do this using the \u2018autoreconf\u2019 command as\nfollows:\n\n     ~/amhello % autoreconf --install\n     configure.ac: installing './install-sh'\n     configure.ac: installing './missing'\n     configure.ac: installing './compile'\n     src/Makefile.am: installing './depcomp'\n\n   At this point the build system is complete.\n\n   In addition to the three scripts mentioned in its output, you can see\nthat \u2018autoreconf\u2019 created four other files: \u2018configure\u2019, \u2018config.h.in\u2019,\n\u2018Makefile.in\u2019, and \u2018src/Makefile.in\u2019.  The latter three files are\ntemplates that will be adapted to the system by \u2018configure\u2019 under the\nnames \u2018config.h\u2019, \u2018Makefile\u2019, and \u2018src/Makefile\u2019.  Let\u2019s do this:\n\n     ~/amhello % ./configure\n     checking for a BSD-compatible install... /usr/bin/install -c\n     checking whether build environment is sane... yes\n     checking for gawk... no\n     checking for mawk... mawk\n     checking whether make sets $(MAKE)... yes\n     checking for gcc... gcc\n     checking for C compiler default output file name... a.out\n     checking whether the C compiler works... yes\n     checking whether we are cross compiling... no\n     checking for suffix of executables...\n     checking for suffix of object files... o\n     checking whether we are using the GNU C compiler... yes\n     checking whether gcc accepts -g... yes\n     checking for gcc option to accept ISO C89... none needed\n     checking for style of include used by make... GNU\n     checking dependency style of gcc... gcc3\n     configure: creating ./config.status\n     config.status: creating Makefile\n     config.status: creating src/Makefile\n     config.status: creating config.h\n     config.status: executing depfiles commands\n\n   You can see \u2018Makefile\u2019, \u2018src/Makefile\u2019, and \u2018config.h\u2019 being created\nat the end after \u2018configure\u2019 has probed the system.  It is now possible\nto run all the targets we wish (*note Standard Targets::).  For\ninstance:\n\n     ~/amhello % make\n     ...\n     ~/amhello % src/hello\n     Hello World!\n     This is amhello 1.0.\n     ~/amhello % make distcheck\n     ...\n     =============================================\n     amhello-1.0 archives ready for distribution:\n     amhello-1.0.tar.gz\n     =============================================\n\n   Note that running \u2018autoreconf\u2019 is only needed initially when the GNU\nBuild System does not exist.  When you later change some instructions in\na \u2018Makefile.am\u2019 or \u2018configure.ac\u2019, the relevant part of the build system\nwill be regenerated automatically when you execute \u2018make\u2019.\n\n   \u2018autoreconf\u2019 is a script that calls \u2018autoconf\u2019, \u2018automake\u2019, and a\nbunch of other commands in the right order.  If you are beginning with\nthese tools, it is not important to figure out in which order all of\nthese tools should be invoked and why.  However, because Autoconf and\nAutomake have separate manuals, the important point to understand is\nthat \u2018autoconf\u2019 is in charge of creating \u2018configure\u2019 from\n\u2018configure.ac\u2019, while \u2018automake\u2019 is in charge of creating \u2018Makefile.in\u2019s\nfrom \u2018Makefile.am\u2019s and \u2018configure.ac\u2019.  This should at least direct you\nto the right manual when seeking answers.\n\n\u001f\nFile: automake.info,  Node: amhello's configure.ac Setup Explained,  Next: amhello's Makefile.am Setup Explained,  Prev: Creating amhello,  Up: Hello World\n\n2.4.2 \u2018amhello\u2019\u2019s \u2018configure.ac\u2019 Setup Explained\n------------------------------------------------\n\nLet us begin with the contents of \u2018configure.ac\u2019.\n\n     AC_INIT([amhello], [1.0], [bug-automake@gnu.org])\n     AM_INIT_AUTOMAKE([-Wall -Werror foreign])\n     AC_PROG_CC\n     AC_CONFIG_HEADERS([config.h])\n     AC_CONFIG_FILES([\n      Makefile\n      src/Makefile\n     ])\n     AC_OUTPUT\n\n   This file is read by both \u2018autoconf\u2019 (to create \u2018configure\u2019) and\n\u2018automake\u2019 (to create the various \u2018Makefile.in\u2019s).  It contains a series\nof M4 macros that will be expanded as shell code to finally form the\n\u2018configure\u2019 script.  We will not elaborate on the syntax of this file,\nbecause the Autoconf manual has a whole section about it (*note Writing\n\u2018configure.ac\u2019: (autoconf)Writing Autoconf Input.).\n\n   The macros prefixed with \u2018AC_\u2019 are Autoconf macros, documented in the\nAutoconf manual (*note Autoconf Macro Index: (autoconf)Autoconf Macro\nIndex.).  The macros that start with \u2018AM_\u2019 are Automake macros,\ndocumented later in this manual (*note Macro Index::).\n\n   The first two lines of \u2018configure.ac\u2019 initialize Autoconf and\nAutomake.  \u2018AC_INIT\u2019 takes in as parameters the name of the package, its\nversion number, and a contact address for bug-reports about the package\n(this address is output at the end of \u2018./configure --help\u2019, for\ninstance).  When adapting this setup to your own package, by all means\nplease do not blindly copy Automake\u2019s address: use the mailing list of\nyour package, or your own mail address.\n\n   The argument to \u2018AM_INIT_AUTOMAKE\u2019 is a list of options for\n\u2018automake\u2019 (*note Options::).  \u2018-Wall\u2019 and \u2018-Werror\u2019 ask \u2018automake\u2019 to\nturn on all warnings and report them as errors.  We are speaking of\n*Automake* warnings here, such as dubious instructions in \u2018Makefile.am\u2019.\nThis has absolutely nothing to do with how the compiler will be called,\neven though it may support options with similar names.  Using \u2018-Wall\n-Werror\u2019 is a safe setting when starting to work on a package: you do\nnot want to miss any issues.  Later you may decide to relax things a\nbit.  The \u2018foreign\u2019 option tells Automake that this package will not\nfollow the GNU Standards.  GNU packages should always distribute\nadditional files such as \u2018ChangeLog\u2019, \u2018AUTHORS\u2019, etc.  We do not want\n\u2018automake\u2019 to complain about these missing files in our small example.\n\n   The \u2018AC_PROG_CC\u2019 line causes the \u2018configure\u2019 script to search for a C\ncompiler and define the variable \u2018CC\u2019 with its name.  The\n\u2018src/Makefile.in\u2019 file generated by Automake uses the variable \u2018CC\u2019 to\nbuild \u2018hello\u2019, so when \u2018configure\u2019 creates \u2018src/Makefile\u2019 from\n\u2018src/Makefile.in\u2019, it will define \u2018CC\u2019 with the value it has found.  If\nAutomake is asked to create a \u2018Makefile.in\u2019 that uses \u2018CC\u2019 but\n\u2018configure.ac\u2019 does not define it, it will suggest you add a call to\n\u2018AC_PROG_CC\u2019.\n\n   The \u2018AC_CONFIG_HEADERS([config.h])\u2019 invocation causes the \u2018configure\u2019\nscript to create a \u2018config.h\u2019 file gathering \u2018#define\u2019s defined by other\nmacros in \u2018configure.ac\u2019.  In our case, the \u2018AC_INIT\u2019 macro already\ndefined a few of them.  Here is an excerpt of \u2018config.h\u2019 after\n\u2018configure\u2019 has run:\n\n     ...\n     /* Define to the address where bug reports for this package should be sent. */\n     #define PACKAGE_BUGREPORT \"bug-automake@gnu.org\"\n\n     /* Define to the full name and version of this package. */\n     #define PACKAGE_STRING \"amhello 1.0\"\n     ...\n\n   As you probably noticed, \u2018src/main.c\u2019 includes \u2018config.h\u2019 so it can\nuse \u2018PACKAGE_STRING\u2019.  In a real-world project, \u2018config.h\u2019 can grow\nreally big, with one \u2018#define\u2019 per feature probed on the system.\n\n   The \u2018AC_CONFIG_FILES\u2019 macro declares the list of files that\n\u2018configure\u2019 should create from their \u2018*.in\u2019 templates.  Automake also\nscans this list to find the \u2018Makefile.am\u2019 files it must process.  (This\nis important to remember: when adding a new directory to your project,\nyou should add its \u2018Makefile\u2019 to this list, otherwise Automake will\nnever process the new \u2018Makefile.am\u2019 you wrote in that directory.)\n\n   Finally, the \u2018AC_OUTPUT\u2019 line is a closing command that actually\nproduces the part of the script in charge of creating the files\nregistered with \u2018AC_CONFIG_HEADERS\u2019 and \u2018AC_CONFIG_FILES\u2019.\n\n   When starting a new project, we suggest you start with such a simple\n\u2018configure.ac\u2019, and gradually add the other tests it requires.  The\ncommand \u2018autoscan\u2019 can also suggest a few of the tests your package may\nneed (*note Using \u2018autoscan\u2019 to Create \u2018configure.ac\u2019:\n(autoconf)autoscan Invocation.).\n\n\u001f\nFile: automake.info,  Node: amhello's Makefile.am Setup Explained,  Prev: amhello's configure.ac Setup Explained,  Up: Hello World\n\n2.4.3 \u2018amhello\u2019\u2019s \u2018Makefile.am\u2019 Setup Explained\n-----------------------------------------------\n\nWe now turn to \u2018src/Makefile.am\u2019.  This file contains Automake\ninstructions to build and install \u2018hello\u2019.\n\n     bin_PROGRAMS = hello\n     hello_SOURCES = main.c\n\n   A \u2018Makefile.am\u2019 has the same syntax as an ordinary \u2018Makefile\u2019.  When\n\u2018automake\u2019 processes a \u2018Makefile.am\u2019 it copies the entire file into the\noutput \u2018Makefile.in\u2019 (that will be later turned into \u2018Makefile\u2019 by\n\u2018configure\u2019) but will react to certain variable definitions by\ngenerating some build rules and other variables.  Often \u2018Makefile.am\u2019s\ncontain only a list of variable definitions as above, but they can also\ncontain other variable and rule definitions that \u2018automake\u2019 will pass\nalong without interpretation.\n\n   Variables that end with \u2018_PROGRAMS\u2019 are special variables that list\nprograms that the resulting \u2018Makefile\u2019 should build.  In Automake speak,\nthis \u2018_PROGRAMS\u2019 suffix is called a \u201cprimary\u201d; Automake recognizes other\nprimaries such as \u2018_SCRIPTS\u2019, \u2018_DATA\u2019, \u2018_LIBRARIES\u2019, etc. corresponding\nto different types of files.\n\n   The \u2018bin\u2019 part of the \u2018bin_PROGRAMS\u2019 tells \u2018automake\u2019 that the\nresulting programs should be installed in BINDIR.  Recall that the GNU\nBuild System uses a set of variables to denote destination directories\nand allow users to customize these locations (*note Standard Directory\nVariables::).  Any such directory variable can be put in front of a\nprimary (omitting the \u2018dir\u2019 suffix) to tell \u2018automake\u2019 where to install\nthe listed files.\n\n   Programs need to be built from source files, so for each program\n\u2018PROG\u2019 listed in a \u2018_PROGRAMS\u2019 variable, \u2018automake\u2019 will look for\nanother variable named \u2018PROG_SOURCES\u2019 listing its source files.  There\nmay be more than one source file: they will all be compiled and linked\ntogether.\n\n   Automake also knows that source files need to be distributed when\ncreating a tarball (unlike built programs).  So a side-effect of this\n\u2018hello_SOURCES\u2019 declaration is that \u2018main.c\u2019 will be part of the tarball\ncreated by \u2018make dist\u2019.\n\n   Finally here are some explanations regarding the top-level\n\u2018Makefile.am\u2019.\n\n     SUBDIRS = src\n     dist_doc_DATA = README\n\n   \u2018SUBDIRS\u2019 is a special variable listing all directories that \u2018make\u2019\nshould recurse into before processing the current directory.  So this\nline is responsible for \u2018make\u2019 building \u2018src/hello\u2019 even though we run\nit from the top-level.  This line also causes \u2018make install\u2019 to install\n\u2018src/hello\u2019 before installing \u2018README\u2019 (not that this order matters).\n\n   The line \u2018dist_doc_DATA = README\u2019 causes \u2018README\u2019 to be distributed\nand installed in DOCDIR.  Files listed with the \u2018_DATA\u2019 primary are not\nautomatically part of the tarball built with \u2018make dist\u2019, so we add the\n\u2018dist_\u2019 prefix so they get distributed.  However, for \u2018README\u2019 it would\nnot have been necessary: \u2018automake\u2019 automatically distributes any\n\u2018README\u2019 file it encounters (the list of other files automatically\ndistributed is presented by \u2018automake --help\u2019).  The only important\neffect of this second line is therefore to install \u2018README\u2019 during \u2018make\ninstall\u2019.\n\n   One thing not covered in this example is accessing the installation\ndirectory values (*note Standard Directory Variables::) from your\nprogram code, that is, converting them into defined macros.  For this,\n*note (autoconf)Defining Directories::.\n\n\u001f\nFile: automake.info,  Node: Generalities,  Next: Examples,  Prev: Autotools Introduction,  Up: Top\n\n3 General ideas\n***************\n\nThe following sections cover a few basic ideas that will help you\nunderstand how Automake works.\n\n* Menu:\n\n* General Operation::           General operation of Automake\n* Strictness::                  Standards conformance checking\n* Uniform::                     The Uniform Naming Scheme\n* Length Limitations::          Staying below the command line length limit\n* Canonicalization::            How derived variables are named\n* User Variables::              Variables reserved for the user\n* Auxiliary Programs::          Programs automake might require\n\n\u001f\nFile: automake.info,  Node: General Operation,  Next: Strictness,  Up: Generalities\n\n3.1 General Operation\n=====================\n\nAutomake works by reading a \u2018Makefile.am\u2019 and generating a\n\u2018Makefile.in\u2019.  Certain variables and rules defined in the \u2018Makefile.am\u2019\ninstruct Automake to generate more specialized code; for instance, a\n\u2018bin_PROGRAMS\u2019 variable definition will cause rules for compiling and\nlinking programs to be generated.\n\n   The variable definitions and rules in the \u2018Makefile.am\u2019 are copied\nmostly verbatim into the generated file, with all variable definitions\npreceding all rules.  This allows you to add almost arbitrary code into\nthe generated \u2018Makefile.in\u2019.  For instance, the Automake distribution\nincludes a non-standard rule for the \u2018git-dist\u2019 target, which the\nAutomake maintainer uses to make distributions from the source control\nsystem.\n\n   Note that most GNU make extensions are not recognized by Automake.\nUsing such extensions in a \u2018Makefile.am\u2019 will lead to errors or\nconfusing behavior.\n\n   A special exception is that the GNU make append operator, \u2018+=\u2019, is\nsupported.  This operator appends its right hand argument to the\nvariable specified on the left.  Automake will translate the operator\ninto an ordinary \u2018=\u2019 operator; \u2018+=\u2019 will thus work with any make\nprogram.\n\n   Automake tries to keep comments grouped with any adjoining rules or\nvariable definitions.\n\n   Generally, Automake is not particularly smart in the parsing of\nunusual Makefile constructs, so you\u2019re advised to avoid fancy constructs\nor \u201ccreative\u201d use of whitespace.  For example, <TAB> characters cannot\nbe used between a target name and the following \u201c\u2018:\u2019\u201d character, and\nvariable assignments shouldn\u2019t be indented with <TAB> characters.  Also,\nusing more complex macros in target names can cause trouble:\n\n     % cat Makefile.am\n     $(FOO:=x): bar\n     % automake\n     Makefile.am:1: bad characters in variable name '$(FOO'\n     Makefile.am:1: ':='-style assignments are not portable\n\n   A rule defined in \u2018Makefile.am\u2019 generally overrides any such rule of\na similar name that would be automatically generated by \u2018automake\u2019.\nAlthough this is a supported feature, it is generally best to avoid\nmaking use of it, as sometimes the generated rules are very particular.\n\n   Similarly, a variable defined in \u2018Makefile.am\u2019 or \u2018AC_SUBST\u2019ed from\n\u2018configure.ac\u2019 will override any definition of the variable that\n\u2018automake\u2019 would ordinarily create.  This feature is often more useful\nthan the ability to override a rule.  Be warned that many of the\nvariables generated by \u2018automake\u2019 are considered to be for internal use\nonly, and their names might change in future releases.\n\n   When examining a variable definition, Automake will recursively\nexamine variables referenced in the definition.  For example, if\nAutomake is looking at the content of \u2018foo_SOURCES\u2019 in this snippet\n\n     xs = a.c b.c\n     foo_SOURCES = c.c $(xs)\n\n   it would use the files \u2018a.c\u2019, \u2018b.c\u2019, and \u2018c.c\u2019 as the contents of\n\u2018foo_SOURCES\u2019.\n\n   Automake also allows a form of comment that is _not_ copied into the\noutput; all lines beginning with \u2018##\u2019 (leading spaces allowed) are\ncompletely ignored by Automake.\n\n   It is customary to make the first line of \u2018Makefile.am\u2019 read:\n\n     ## Process this file with automake to produce Makefile.in\n\n\u001f\nFile: automake.info,  Node: Strictness,  Next: Uniform,  Prev: General Operation,  Up: Generalities\n\n3.2 Strictness\n==============\n\nWhile Automake is intended to be used by maintainers of GNU packages, it\ndoes make some effort to accommodate those who wish to use it, but do\nnot want to use all the GNU conventions.\n\n   To this end, Automake supports three levels of \u201cstrictness\u201d\u2014how\nstringently Automake should enforce conformance with GNU conventions.\nEach strictness level can be selected using an option of the same name;\nsee *note Options::.\n\n   The strictness levels are:\n\n\u2018gnu\u2019\n     This is the default level of strictness.  Automake will check for\n     basic compliance with the GNU standards for software packaging.\n     *Note (standards)Top:: for full details of these standards.\n     Currently the following checks are made:\n\n        \u2022 The files \u2018INSTALL\u2019, \u2018NEWS\u2019, \u2018README\u2019, \u2018AUTHORS\u2019, and\n          \u2018ChangeLog\u2019, plus one of \u2018COPYING.LIB\u2019, \u2018COPYING.LESSER\u2019 or\n          \u2018COPYING\u2019, are required at the topmost directory of the\n          package.\n\n          If the \u2018--add-missing\u2019 option is given, \u2018automake\u2019 will add a\n          generic version of the \u2018INSTALL\u2019 file as well as the \u2018COPYING\u2019\n          file containing the text of the current version of the GNU\n          General Public License existing at the time of this Automake\n          release (version 3 as this is written,\n          <https://www.gnu.org/copyleft/gpl.html>).  However, an\n          existing \u2018COPYING\u2019 file will never be overwritten by\n          \u2018automake\u2019.\n\n        \u2022 The options \u2018no-installman\u2019 and \u2018no-installinfo\u2019 are\n          prohibited.\n\n     Future versions of Automake will add more checks at this level of\n     strictness; it is advisable to be familiar with the precise\n     requirements of the GNU standards.\n\n     Future versions of Automake may, at this level of strictness,\n     require certain non-standard GNU tools to be available to\n     maintainer-only Makefile rules.  For instance, in the future\n     \u2018pathchk\u2019 (*note (coreutils)pathchk invocation::) may be required\n     to run \u2018make dist\u2019.\n\n\u2018foreign\u2019\n     Automake will check for only those things that are absolutely\n     required for proper operation.  For instance, whereas GNU standards\n     dictate the existence of a \u2018NEWS\u2019 file, it will not be required in\n     this mode.  This strictness will also turn off some warnings by\n     default (among them, portability warnings).\n\n\u2018gnits\u2019\n     Automake will check for compliance to the as-yet-unwritten \u201cGnits\n     standards\u201d.  These are based on the GNU standards, but are even\n     more detailed.  Unless you are a Gnits standards contributor, it is\n     recommended that you avoid this option until such time as the Gnits\n     standard is actually published (which may never happen).\n\n     Currently, \u2018--gnits\u2019 does all the checks that \u2018--gnu\u2019 does, and\n     checks the following as well:\n\n        \u2022 \u2018make installcheck\u2019 will check to make sure that the \u2018--help\u2019\n          and \u2018--version\u2019 really print a usage message and a version\n          string, respectively.  This is the \u2018std-options\u2019 option (*note\n          Options::).\n\n        \u2022 \u2018make dist\u2019 will check to make sure the \u2018NEWS\u2019 file has been\n          updated to the current version.\n\n        \u2022 \u2018VERSION\u2019 is checked to make sure its format complies with\n          Gnits standards.\n\n        \u2022 If \u2018VERSION\u2019 indicates that this is an alpha release, and the\n          file \u2018README-alpha\u2019 appears in the topmost directory of a\n          package, then it is included in the distribution.  This is\n          done in \u2018--gnits\u2019 mode, and no other, because this mode is the\n          only one where version number formats are constrained, and\n          hence the only mode where Automake can automatically determine\n          whether \u2018README-alpha\u2019 should be included.\n\n        \u2022 The file \u2018THANKS\u2019 is required.\n\n\u001f\nFile: automake.info,  Node: Uniform,  Next: Length Limitations,  Prev: Strictness,  Up: Generalities\n\n3.3 The Uniform Naming Scheme\n=============================\n\nAutomake variables generally follow a \u201cuniform naming scheme\u201d that makes\nit easy to decide how programs (and other derived objects) are built,\nand how they are installed.  This scheme also supports \u2018configure\u2019 time\ndetermination of what should be built.\n\n   At \u2018make\u2019 time, certain variables are used to determine which objects\nare to be built.  The variable names are made of several pieces that are\nconcatenated together.\n\n   The piece that tells \u2018automake\u2019 what is being built is commonly\ncalled the \u201cprimary\u201d.  For instance, the primary \u2018PROGRAMS\u2019 holds a list\nof programs that are to be compiled and linked.\n\n   A different set of names is used to decide where the built objects\nshould be installed.  These names are prefixes to the primary, and they\nindicate which standard directory should be used as the installation\ndirectory.  The standard directory names are given in the GNU standards\n(*note (standards)Directory Variables::).  Automake extends this list\nwith \u2018pkgdatadir\u2019, \u2018pkgincludedir\u2019, \u2018pkglibdir\u2019, and \u2018pkglibexecdir\u2019;\nthese are the same as the non-\u2018pkg\u2019 versions, but with \u2018$(PACKAGE)\u2019\nappended.  For instance, \u2018pkglibdir\u2019 is defined as\n\u2018$(libdir)/$(PACKAGE)\u2019.\n\n   For each primary, there is one additional variable named by\nprepending \u2018EXTRA_\u2019 to the primary name.  This variable is used to list\nobjects that may or may not be built, depending on what \u2018configure\u2019\ndecides.  This variable is required because Automake must statically\nknow the entire list of objects that may be built in order to generate a\n\u2018Makefile.in\u2019 that will work in all cases.\n\n   For instance, \u2018cpio\u2019 decides at configure time which programs should\nbe built.  Some of the programs are installed in \u2018bindir\u2019, and some are\ninstalled in \u2018sbindir\u2019:\n\n     EXTRA_PROGRAMS = mt rmt\n     bin_PROGRAMS = cpio pax\n     sbin_PROGRAMS = $(MORE_PROGRAMS)\n\n   Defining a primary without a prefix as a variable, e.g., \u2018PROGRAMS\u2019,\nis an error.\n\n   Note that the common \u2018dir\u2019 suffix is left off when constructing the\nvariable names; thus one writes \u2018bin_PROGRAMS\u2019 and not\n\u2018bindir_PROGRAMS\u2019.\n\n   Not every sort of object can be installed in every directory.\nAutomake will flag those attempts it finds in error (but see below how\nto override the check if you really need to).  Automake will also\ndiagnose obvious misspellings in directory names.\n\n   Sometimes the standard directories\u2014even as augmented by Automake\u2014are\nnot enough.  In particular it is sometimes useful, for clarity, to\ninstall objects in a subdirectory of some predefined directory.  To this\nend, Automake allows you to extend the list of possible installation\ndirectories.  A given prefix (e.g., \u2018zar\u2019) is valid if a variable of the\nsame name with \u2018dir\u2019 appended is defined (e.g., \u2018zardir\u2019).\n\n   For instance, the following snippet will install \u2018file.xml\u2019 into\n\u2018$(datadir)/xml\u2019.\n\n     xmldir = $(datadir)/xml\n     xml_DATA = file.xml\n\n   This feature can also be used to override the sanity checks Automake\nperforms to diagnose suspicious directory/primary couples (in the\nunlikely case these checks are undesirable, and you really know what\nyou\u2019re doing).  For example, Automake would error out on this input:\n\n     # Forbidden directory combinations, automake will error out on this.\n     pkglib_PROGRAMS = foo\n     doc_LIBRARIES = libquux.a\n\nbut it will succeed with this:\n\n     # Work around forbidden directory combinations.  Do not use this\n     # without a very good reason!\n     my_execbindir = $(pkglibdir)\n     my_doclibdir = $(docdir)\n     my_execbin_PROGRAMS = foo\n     my_doclib_LIBRARIES = libquux.a\n\n   The \u2018exec\u2019 substring of the \u2018my_execbindir\u2019 variable lets the files\nbe installed at the right time (*note The Two Parts of Install::).\n\n   The special prefix \u2018noinst_\u2019 indicates that the objects in question\nshould be built but not installed at all.  This is usually used for\nobjects required to build the rest of your package, for instance static\nlibraries (*note A Library::), or helper scripts.\n\n   The special prefix \u2018check_\u2019 indicates that the objects in question\nshould not be built until the \u2018make check\u2019 command is run.  Those\nobjects are not installed either.\n\n   The current primary names are \u2018PROGRAMS\u2019, \u2018LIBRARIES\u2019, \u2018LTLIBRARIES\u2019,\n\u2018LISP\u2019, \u2018PYTHON\u2019, \u2018JAVA\u2019, \u2018SCRIPTS\u2019, \u2018DATA\u2019, \u2018HEADERS\u2019, \u2018MANS\u2019, and\n\u2018TEXINFOS\u2019.\n\n   Some primaries also allow additional prefixes that control other\naspects of \u2018automake\u2019\u2019s behavior.  The currently defined prefixes are\n\u2018dist_\u2019, \u2018nodist_\u2019, \u2018nobase_\u2019, and \u2018notrans_\u2019.  These prefixes are\nexplained later (*note Program and Library Variables::) (*note Man\nPages::).\n\n\u001f\nFile: automake.info,  Node: Length Limitations,  Next: Canonicalization,  Prev: Uniform,  Up: Generalities\n\n3.4 Staying below the command line length limit\n===============================================\n\nTraditionally, most unix-like systems have a length limitation for the\ncommand line arguments and environment contents when creating new\nprocesses (see for example\n<https://www.in-ulm.de/~mascheck/various/argmax/> for an overview on\nthis issue), which of course also applies to commands spawned by \u2018make\u2019.\nPOSIX requires this limit to be at least 4096 bytes, and most modern\nsystems have quite high limits (or are unlimited).\n\n   In order to create portable Makefiles that do not trip over these\nlimits, it is necessary to keep the length of file lists bounded.\nUnfortunately, it is not possible to do so fully transparently within\nAutomake, so your help may be needed.  Typically, you can split long\nfile lists manually and use different installation directory names for\neach list.  For example,\n\n     data_DATA = file1 ... fileN fileN+1 ... file2N\n\nmay also be written as\n\n     data_DATA = file1 ... fileN\n     data2dir = $(datadir)\n     data2_DATA = fileN+1 ... file2N\n\nand will cause Automake to treat the two lists separately during \u2018make\ninstall\u2019.  See *note The Two Parts of Install:: for choosing directory\nnames that will keep the ordering of the two parts of installation Note\nthat \u2018make dist\u2019 may still only work on a host with a higher length\nlimit in this example.\n\n   Automake itself employs a couple of strategies to avoid long command\nlines.  For example, when \u2018${srcdir}/\u2019 is prepended to file names, as\ncan happen with above \u2018$(data_DATA)\u2019 lists, it limits the amount of\narguments passed to external commands.\n\n   Unfortunately, some systems\u2019 \u2018make\u2019 commands may prepend \u2018VPATH\u2019\nprefixes like \u2018${srcdir}/\u2019 to file names from the source tree\nautomatically (*note Automatic Rule Rewriting: (autoconf)Automatic Rule\nRewriting.).  In this case, the user may have to switch to use GNU Make,\nor refrain from using VPATH builds, in order to stay below the length\nlimit.\n\n   For libraries and programs built from many sources, convenience\narchives may be used as intermediates in order to limit the object list\nlength (*note Libtool Convenience Libraries::).\n\n\u001f\nFile: automake.info,  Node: Canonicalization,  Next: User Variables,  Prev: Length Limitations,  Up: Generalities\n\n3.5 How derived variables are named\n===================================\n\nSometimes a Makefile variable name is derived from some text the\nmaintainer supplies.  For instance, a program name listed in \u2018_PROGRAMS\u2019\nis rewritten into the name of a \u2018_SOURCES\u2019 variable.  In cases like\nthis, Automake canonicalizes the text, so that program names and the\nlike do not have to follow Makefile variable naming rules.  All\ncharacters in the name except for letters, numbers, the strudel (@), and\nthe underscore are turned into underscores when making variable\nreferences.\n\n   For example, if your program is named \u2018sniff-glue\u2019, the derived\nvariable name would be \u2018sniff_glue_SOURCES\u2019, not \u2018sniff-glue_SOURCES\u2019.\nSimilarly the sources for a library named \u2018libmumble++.a\u2019 should be\nlisted in the \u2018libmumble___a_SOURCES\u2019 variable.\n\n   The strudel is an addition, to make the use of Autoconf substitutions\nin variable names less obfuscating.\n\n\u001f\nFile: automake.info,  Node: User Variables,  Next: Auxiliary Programs,  Prev: Canonicalization,  Up: Generalities\n\n3.6 Variables reserved for the user\n===================================\n\nSome \u2018Makefile\u2019 variables are reserved by the GNU Coding Standards for\nthe use of the \u201cuser\u201d\u2014the person building the package.  For instance,\n\u2018CFLAGS\u2019 is one such variable.\n\n   Sometimes package developers are tempted to set user variables such\nas \u2018CFLAGS\u2019 because it appears to make their job easier.  However, the\npackage itself should never set a user variable, particularly not to\ninclude switches that are required for proper compilation of the\npackage.  Since these variables are documented as being for the package\nbuilder, that person rightfully expects to be able to override any of\nthese variables at build time.\n\n   To get around this problem, Automake introduces an automake-specific\nshadow variable for each user flag variable.  (Shadow variables are not\nintroduced for variables like \u2018CC\u2019, where they would make no sense.)\nThe shadow variable is named by prepending \u2018AM_\u2019 to the user variable\u2019s\nname.  For instance, the shadow variable for \u2018YFLAGS\u2019 is \u2018AM_YFLAGS\u2019.\nThe package maintainer\u2014that is, the author(s) of the \u2018Makefile.am\u2019 and\n\u2018configure.ac\u2019 files\u2014may adjust these shadow variables however\nnecessary.\n\n   *Note Flag Variables Ordering::, for more discussion about these\nvariables and how they interact with per-target variables.\n\n\u001f\nFile: automake.info,  Node: Auxiliary Programs,  Prev: User Variables,  Up: Generalities\n\n3.7 Programs automake might require\n===================================\n\nAutomake sometimes requires helper programs so that the generated\n\u2018Makefile\u2019 can do its work properly.  There are a fairly large number of\nthem, and we list them here.\n\n   Although all of these files are distributed and installed with\nAutomake, a couple of them are maintained separately.  The Automake\ncopies are updated before each release, but we mention the original\nsource in case you need more recent versions.\n\n\u2018ar-lib\u2019\n     This is a wrapper primarily for the Microsoft lib archiver, to make\n     it more POSIX-like.\n\n\u2018compile\u2019\n     This is a wrapper for compilers that do not accept options \u2018-c\u2019 and\n     \u2018-o\u2019 at the same time.  It is only used when absolutely required.\n     Such compilers are rare, with the Microsoft C/C++ Compiler as the\n     most notable exception.  This wrapper also makes the following\n     common options available for that compiler, while performing file\n     name translation where needed: \u2018-I\u2019, \u2018-L\u2019, \u2018-l\u2019, \u2018-Wl,\u2019 and\n     \u2018-Xlinker\u2019.\n\n\u2018config.guess\u2019\n\u2018config.sub\u2019\n     These two programs compute the canonical triplets for the given\n     build, host, or target architecture.  These programs are updated\n     regularly to support new architectures and fix probes broken by\n     changes in new kernel versions.  Each new release of Automake comes\n     with up-to-date copies of these programs.  If your copy of Automake\n     is getting old, you are encouraged to fetch the latest versions of\n     these files from <https://savannah.gnu.org/git/?group=config>\n     before making a release.\n\n\u2018depcomp\u2019\n     This program understands how to run a compiler so that it will\n     generate not only the desired output but also dependency\n     information that is then used by the automatic dependency tracking\n     feature (*note Dependencies::).\n\n\u2018install-sh\u2019\n     This is a replacement for the \u2018install\u2019 program that works on\n     platforms where \u2018install\u2019 is unavailable or unusable.\n\n\u2018mdate-sh\u2019\n     This script is used to generate a \u2018version.texi\u2019 file.  It examines\n     a file and prints some date information about it.\n\n\u2018missing\u2019\n     This wraps a number of programs that are typically only required by\n     maintainers.  If the program in question doesn\u2019t exist, or seems\n     too old, \u2018missing\u2019 will print an informative warning before failing\n     out, to provide the user with more context and information.\n\n\u2018mkinstalldirs\u2019\n     This script used to be a wrapper around \u2018mkdir -p\u2019, which is not\n     portable.  Now we prefer to use \u2018install-sh -d\u2019 when \u2018configure\u2019\n     finds that \u2018mkdir -p\u2019 does not work, this makes one less script to\n     distribute.\n\n     For backward compatibility \u2018mkinstalldirs\u2019 is still used and\n     distributed when \u2018automake\u2019 finds it in a package.  But it is no\n     longer installed automatically, and it should be safe to remove it.\n\n\u2018py-compile\u2019\n     This is used to byte-compile Python scripts.\n\n\u2018test-driver\u2019\n     This implements the default test driver offered by the parallel\n     testsuite harness.\n\n\u2018texinfo.tex\u2019\n     When Texinfo sources are in the package, this file is required for\n     \u2018make dvi\u2019, \u2018make ps\u2019 and \u2018make pdf\u2019.  The latest version can be\n     downloaded from <https://www.gnu.org/software/texinfo/>.  A working\n     TeX distribution, or at least a \u2018tex\u2019 program, is also required.\n     Furthermore, \u2018make dist\u2019 invokes \u2018make dvi\u2019, so these become\n     requirements for making a distribution with Texinfo sources.\n\n\u2018ylwrap\u2019\n     This program wraps \u2018lex\u2019 and \u2018yacc\u2019 to rename their output files.\n     It also ensures that, for instance, multiple \u2018yacc\u2019 instances can\n     be invoked in a single directory in parallel.\n\n\u001f\nFile: automake.info,  Node: Examples,  Next: automake Invocation,  Prev: Generalities,  Up: Top\n\n4 Some example packages\n***********************\n\nThis section contains two small examples.\n\n   The first example (*note Complete::) assumes you have an existing\nproject already using Autoconf, with handcrafted \u2018Makefile\u2019s, and that\nyou want to convert it to using Automake.  If you are discovering both\ntools, it is probably better that you look at the Hello World example\npresented earlier (*note Hello World::).\n\n   The second example (*note true::) shows how two programs can be built\nfrom the same file, using different compilation parameters.  It contains\nsome technical digressions that are probably best skipped on first read.\n\n* Menu:\n\n* Complete::                    A simple example, start to finish\n* true::                        Building true and false\n\n\u001f\nFile: automake.info,  Node: Complete,  Next: true,  Up: Examples\n\n4.1 A simple example, start to finish\n=====================================\n\nLet\u2019s suppose you just finished writing \u2018zardoz\u2019, a program to make your\nhead float from vortex to vortex.  You\u2019ve been using Autoconf to provide\na portability framework, but your \u2018Makefile.in\u2019s have been ad-hoc.  You\nwant to make them bulletproof, so you turn to Automake.\n\n   The first step is to update your \u2018configure.ac\u2019 to include the\ncommands that \u2018automake\u2019 needs.  The way to do this is to add an\n\u2018AM_INIT_AUTOMAKE\u2019 call just after \u2018AC_INIT\u2019:\n\n     AC_INIT([zardoz], [1.0])\n     AM_INIT_AUTOMAKE\n     ...\n\n   Since your program doesn\u2019t have any complicating factors (e.g., it\ndoesn\u2019t use \u2018gettext\u2019, it doesn\u2019t want to build a shared library),\nyou\u2019re done with this part.  That was easy!\n\n   Now you must regenerate \u2018configure\u2019.  But to do that, you\u2019ll need to\ntell \u2018autoconf\u2019 how to find the new macro you\u2019ve used.  The easiest way\nto do this is to use the \u2018aclocal\u2019 program to generate your \u2018aclocal.m4\u2019\nfor you.  But wait... maybe you already have an \u2018aclocal.m4\u2019, because\nyou had to write some hairy macros for your program.  The \u2018aclocal\u2019\nprogram lets you put your own macros into \u2018acinclude.m4\u2019, so simply\nrename and then run:\n\n     mv aclocal.m4 acinclude.m4\n     aclocal\n     autoconf\n\n   Now it is time to write your \u2018Makefile.am\u2019 for \u2018zardoz\u2019.  Since\n\u2018zardoz\u2019 is a user program, you want to install it where the rest of the\nuser programs go: \u2018bindir\u2019.  Additionally, \u2018zardoz\u2019 has some Texinfo\ndocumentation.  Your \u2018configure.ac\u2019 script uses \u2018AC_REPLACE_FUNCS\u2019, so\nyou need to link against \u2018$(LIBOBJS)\u2019.  So here\u2019s what you\u2019d write:\n\n     bin_PROGRAMS = zardoz\n     zardoz_SOURCES = main.c head.c float.c vortex9.c gun.c\n     zardoz_LDADD = $(LIBOBJS)\n\n     info_TEXINFOS = zardoz.texi\n\n   Now you can run \u2018automake --add-missing\u2019 to generate your\n\u2018Makefile.in\u2019 and grab any auxiliary files you might need, and you\u2019re\ndone!\n\n\u001f\nFile: automake.info,  Node: true,  Prev: Complete,  Up: Examples\n\n4.2 Building true and false\n===========================\n\nHere is another, trickier example.  It shows how to generate two\nprograms (\u2018true\u2019 and \u2018false\u2019) from the same source file (\u2018true.c\u2019).  The\ndifficult part is that each compilation of \u2018true.c\u2019 requires different\n\u2018cpp\u2019 flags.\n\n     bin_PROGRAMS = true false\n     false_SOURCES =\n     false_LDADD = false.o\n\n     true.o: true.c\n             $(COMPILE) -DEXIT_CODE=0 -c true.c\n\n     false.o: true.c\n             $(COMPILE) -DEXIT_CODE=1 -o false.o -c true.c\n\n   Note that there is no \u2018true_SOURCES\u2019 definition.  Automake will\nimplicitly assume that there is a source file named \u2018true.c\u2019 (*note\nDefault _SOURCES::), and define rules to compile \u2018true.o\u2019 and link\n\u2018true\u2019.  The \u2018true.o: true.c\u2019 rule supplied by the above \u2018Makefile.am\u2019,\nwill override the Automake generated rule to build \u2018true.o\u2019.\n\n   \u2018false_SOURCES\u2019 is defined to be empty\u2014that way no implicit value is\nsubstituted.  Because we have not listed the source of \u2018false\u2019, we have\nto tell Automake how to link the program.  This is the purpose of the\n\u2018false_LDADD\u2019 line.  A \u2018false_DEPENDENCIES\u2019 variable, holding the\ndependencies of the \u2018false\u2019 target will be automatically generated by\nAutomake from the content of \u2018false_LDADD\u2019.\n\n   The above rules won\u2019t work if your compiler doesn\u2019t accept both \u2018-c\u2019\nand \u2018-o\u2019.  The simplest fix for this is to introduce a bogus dependency\n(to avoid problems with a parallel \u2018make\u2019):\n\n     true.o: true.c false.o\n             $(COMPILE) -DEXIT_CODE=0 -c true.c\n\n     false.o: true.c\n             $(COMPILE) -DEXIT_CODE=1 -c true.c && mv true.o false.o\n\n   As it turns out, there is also a much easier way to do this same\ntask.  Some of the above technique is useful enough that we\u2019ve kept the\nexample in the manual.  However if you were to build \u2018true\u2019 and \u2018false\u2019\nin real life, you would probably use per-program compilation flags, like\nso:\n\n     bin_PROGRAMS = false true\n\n     false_SOURCES = true.c\n     false_CPPFLAGS = -DEXIT_CODE=1\n\n     true_SOURCES = true.c\n     true_CPPFLAGS = -DEXIT_CODE=0\n\n   In this case Automake will cause \u2018true.c\u2019 to be compiled twice, with\ndifferent flags.  In this instance, the names of the object files would\nbe chosen by automake; they would be \u2018false-true.o\u2019 and \u2018true-true.o\u2019.\n(The name of the object files rarely matters.)\n\n\u001f\nFile: automake.info,  Node: automake Invocation,  Next: configure,  Prev: Examples,  Up: Top\n\n5 Creating a \u2018Makefile.in\u2019\n**************************\n\nTo create all the \u2018Makefile.in\u2019s for a package, run the \u2018automake\u2019\nprogram in the top level directory, with no arguments.  \u2018automake\u2019 will\nautomatically find each appropriate \u2018Makefile.am\u2019 (by scanning\n\u2018configure.ac\u2019; *note configure::) and generate the corresponding\n\u2018Makefile.in\u2019.  Note that \u2018automake\u2019 has a rather simplistic view of\nwhat constitutes a package; it assumes that a package has only one\n\u2018configure.ac\u2019, at the top.  If your package has multiple\n\u2018configure.ac\u2019s, then you must run \u2018automake\u2019 in each directory holding\na \u2018configure.ac\u2019.  (Alternatively, you may rely on Autoconf\u2019s\n\u2018autoreconf\u2019, which is able to recurse your package tree and run\n\u2018automake\u2019 where appropriate.)\n\n   You can optionally give \u2018automake\u2019 an argument; \u2018.am\u2019 is appended to\nthe argument and the result is used as the name of the input file.  This\nfeature is generally only used to automatically rebuild an out-of-date\n\u2018Makefile.in\u2019.  Note that \u2018automake\u2019 must always be run from the topmost\ndirectory of a project, even if being used to regenerate the\n\u2018Makefile.in\u2019 in some subdirectory.  This is necessary because\n\u2018automake\u2019 must scan \u2018configure.ac\u2019, and because \u2018automake\u2019 uses the\nknowledge that a \u2018Makefile.in\u2019 is in a subdirectory to change its\nbehavior in some cases.\n\n   Automake will run \u2018autoconf\u2019 to scan \u2018configure.ac\u2019 and its\ndependencies (i.e., \u2018aclocal.m4\u2019 and any included file), therefore\n\u2018autoconf\u2019 must be in your \u2018PATH\u2019.  If there is an \u2018AUTOCONF\u2019 variable\nin your environment it will be used instead of \u2018autoconf\u2019; this allows\nyou to select a particular version of Autoconf.  By the way, don\u2019t\nmisunderstand this paragraph: \u2018automake\u2019 runs \u2018autoconf\u2019 to *scan* your\n\u2018configure.ac\u2019; this won\u2019t build \u2018configure\u2019 and you still have to run\n\u2018autoconf\u2019 yourself for this purpose.\n\n   \u2018automake\u2019 accepts the following options:\n\n\u2018-a\u2019\n\u2018--add-missing\u2019\n     Automake requires certain common files to exist in certain\n     situations; for instance, \u2018config.guess\u2019 is required if\n     \u2018configure.ac\u2019 invokes \u2018AC_CANONICAL_HOST\u2019.  Automake is\n     distributed with several of these files (*note Auxiliary\n     Programs::); this option will cause the missing ones to be\n     automatically added to the package, whenever possible.  In general\n     if Automake tells you a file is missing, try using this option.  By\n     default Automake tries to make a symbolic link pointing to its own\n     copy of the missing file; this can be changed with \u2018--copy\u2019.\n\n     Many of the potentially-missing files are common scripts whose\n     location may be specified via the \u2018AC_CONFIG_AUX_DIR\u2019 macro.\n     Therefore, \u2018AC_CONFIG_AUX_DIR\u2019\u2019s setting affects whether a file is\n     considered missing, and where the missing file is added (*note\n     Optional::).\n\n     In some strictness modes, additional files are installed, see *note\n     Gnits:: for more information.\n\n\u2018--libdir=DIR\u2019\n     Look for Automake data files in directory DIR instead of in the\n     installation directory.  This is typically used for debugging.\n\n     The environment variable \u2018AUTOMAKE_LIBDIR\u2019 provides another way to\n     set the directory containing Automake data files.  However\n     \u2018--libdir\u2019 takes precedence over it.\n\n\u2018--print-libdir\u2019\n     Print the path of the installation directory containing\n     Automake-provided scripts and data files (e.g., \u2018texinfo.texi\u2019 and\n     \u2018install-sh\u2019).\n\n\u2018-c\u2019\n\u2018--copy\u2019\n     When used with \u2018--add-missing\u2019, causes installed files to be\n     copied.  The default is to make a symbolic link.\n\n\u2018-f\u2019\n\u2018--force-missing\u2019\n     When used with \u2018--add-missing\u2019, causes standard files to be\n     reinstalled even if they already exist in the source tree.  This\n     involves removing the file from the source tree before creating the\n     new symlink (or, with \u2018--copy\u2019, copying the new file).\n\n\u2018--foreign\u2019\n     Set the global strictness to \u2018foreign\u2019.  For more information, see\n     *note Strictness::.\n\n\u2018--gnits\u2019\n     Set the global strictness to \u2018gnits\u2019.  For more information, see\n     *note Strictness::.\n\n\u2018--gnu\u2019\n     Set the global strictness to \u2018gnu\u2019.  For more information, see\n     *note Strictness::.  This is the default strictness.\n\n\u2018--help\u2019\n     Print a summary of the command line options and exit.\n\n\u2018-i\u2019\n\u2018--ignore-deps\u2019\n     This disables the dependency tracking feature in generated\n     \u2018Makefile\u2019s; see *note Dependencies::.\n\n\u2018--include-deps\u2019\n     This enables the dependency tracking feature.  This feature is\n     enabled by default.  This option is provided for historical reasons\n     only and probably should not be used.\n\n\u2018--no-force\u2019\n     Ordinarily \u2018automake\u2019 creates all \u2018Makefile.in\u2019s mentioned in\n     \u2018configure.ac\u2019.  This option causes it to only update those\n     \u2018Makefile.in\u2019s that are out of date with respect to one of their\n     dependents.\n\n\u2018-o DIR\u2019\n\u2018--output-dir=DIR\u2019\n     Put the generated \u2018Makefile.in\u2019 in the directory DIR.  Ordinarily\n     each \u2018Makefile.in\u2019 is created in the directory of the corresponding\n     \u2018Makefile.am\u2019.  This option is deprecated and will be removed in a\n     future release.\n\n\u2018-v\u2019\n\u2018--verbose\u2019\n     Cause Automake to print information about which files are being\n     read or created.\n\n\u2018--version\u2019\n     Print the version number of Automake and exit.\n\n\u2018-W CATEGORY[,CATEGORY...]\u2019\n\u2018--warnings=CATEGORY[,CATEGORY...]\u2019\n     Output warnings about a CATEGORY of potential problems with the\n     package.  CATEGORY can be any of:\n\n     \u2018cross\u2019\n          Constructs compromising the ability to cross-compile the\n          package.\n     \u2018gnu\u2019\n          Minor deviations from the GNU Coding Standards (*note\n          (standards)Top::).\n     \u2018obsolete\u2019\n          Obsolete features or constructions.\n     \u2018override\u2019\n          Redefinitions of Automake rules or variables.\n     \u2018portability\u2019\n          Portability issues (e.g., use of \u2018make\u2019 features that are\n          known to be not portable).\n     \u2018portability-recursive\u2019\n          Recursive, or nested, Make variable expansions (\u2018$(foo$(x))\u2019).\n          These are not universally supported, but are more portable\n          than the other non-portable constructs diagnosed by\n          \u2018-Wportability\u2019.  These warnings are turned on by\n          \u2018-Wportability\u2019 but can then be turned off specifically by\n          \u2018-Wno-portability-recursive\u2019.\n     \u2018extra-portability\u2019\n          Extra portability issues, related to rarely-used tools such as\n          the Microsoft \u2018lib\u2019 archiver.\n     \u2018syntax\u2019\n          Questionable syntax, unused variables, typos, etc.\n     \u2018unsupported\u2019\n          Unsupported or incomplete features.\n     \u2018all\u2019\n          Turn on all the above categories of warnings.\n     \u2018none\u2019\n          Turn off all the above categories of warnings.\n     \u2018error\u2019\n          Treat warnings as errors.\n\n     A category can be turned off by prefixing its name with \u2018no-\u2019.  For\n     instance, \u2018-Wno-syntax\u2019 will hide the warnings about unused\n     variables.\n\n     Warnings in the \u2018gnu\u2019, \u2018obsolete\u2019, \u2018portability\u2019, \u2018syntax\u2019, and\n     \u2018unsupported\u2019 categories are turned on by default.  The \u2018gnu\u2019 and\n     \u2018portability\u2019 categories are turned off in \u2018--foreign\u2019 strictness.\n\n     Turning off \u2018portability\u2019 will also turn off \u2018extra-portability\u2019,\n     and similarly turning on \u2018extra-portability\u2019 will also turn on\n     \u2018portability\u2019.  However, turning on \u2018portability\u2019 or turning off\n     \u2018extra-portability\u2019 will not affect the other category.\n\n     Unknown warning categories supplied as an argument to \u2018-W\u2019 will\n     themselves produce a warning, in the \u2018unsupported\u2019 category.  This\n     warning is never treated as an error.\n\n     The environment variable \u2018WARNINGS\u2019 can contain a comma separated\n     list of categories to enable.  \u2018-W\u2019 settings on the command line\n     take precedence; for instance, \u2018-Wnone\u2019 also turns off any warning\n     categories enabled by \u2018WARNINGS\u2019.\n\n     Unknown warning categories named in \u2018WARNINGS\u2019 are silently\n     ignored.\n\n   If the environment variable \u2018AUTOMAKE_JOBS\u2019 contains a positive\nnumber, it is taken as the maximum number of Perl threads to use in\n\u2018automake\u2019 for generating multiple \u2018Makefile.in\u2019 files concurrently.\nThis is an experimental feature.\n\n\u001f\nFile: automake.info,  Node: configure,  Next: Directories,  Prev: automake Invocation,  Up: Top\n\n6 Scanning \u2018configure.ac\u2019, using \u2018aclocal\u2019\n******************************************\n\nAutomake scans the package\u2019s \u2018configure.ac\u2019 to determine certain\ninformation about the package.  Some \u2018autoconf\u2019 macros are required and\nsome variables must be defined in \u2018configure.ac\u2019.  Automake will also\nuse information from \u2018configure.ac\u2019 to further tailor its output.\n\n   Automake also supplies some Autoconf macros to make the maintenance\neasier.  These macros can automatically be put into your \u2018aclocal.m4\u2019\nusing the \u2018aclocal\u2019 program.\n\n* Menu:\n\n* Requirements::                Configuration requirements\n* Optional::                    Other things Automake recognizes\n* aclocal Invocation::          Auto-generating aclocal.m4\n* Macros::                      Autoconf macros supplied with Automake\n\n\u001f\nFile: automake.info,  Node: Requirements,  Next: Optional,  Up: configure\n\n6.1 Configuration requirements\n==============================\n\nThe one real requirement of Automake is that your \u2018configure.ac\u2019 call\n\u2018AM_INIT_AUTOMAKE\u2019.  This macro does several things that are required\nfor proper Automake operation (*note Macros::).\n\n   Here are the other macros that Automake requires but which are not\nrun by \u2018AM_INIT_AUTOMAKE\u2019:\n\n\u2018AC_CONFIG_FILES\u2019\n\u2018AC_OUTPUT\u2019\n     These two macros are usually invoked as follows near the end of\n     \u2018configure.ac\u2019.\n\n          ...\n          AC_CONFIG_FILES([\n            Makefile\n            doc/Makefile\n            src/Makefile\n            src/lib/Makefile\n            ...\n          ])\n          AC_OUTPUT\n\n     Automake uses these to determine which files to create (*note\n     Creating Output Files: (autoconf)Output.).  A listed file is\n     considered to be an Automake generated \u2018Makefile\u2019 if there exists a\n     file with the same name and the \u2018.am\u2019 extension appended.\n     Typically, \u2018AC_CONFIG_FILES([foo/Makefile])\u2019 will cause Automake to\n     generate \u2018foo/Makefile.in\u2019 if \u2018foo/Makefile.am\u2019 exists.\n\n     When using \u2018AC_CONFIG_FILES\u2019 with multiple input files, as in\n\n          AC_CONFIG_FILES([Makefile:top.in:Makefile.in:bot.in])\n\n     \u2018automake\u2019 will generate the first \u2018.in\u2019 input file for which a\n     \u2018.am\u2019 file exists.  If no such file exists the output file is not\n     considered to be generated by Automake.\n\n     Files created by \u2018AC_CONFIG_FILES\u2019, be they Automake \u2018Makefile\u2019s or\n     not, are all removed by \u2018make distclean\u2019.  Their inputs are\n     automatically distributed, unless they are the output of prior\n     \u2018AC_CONFIG_FILES\u2019 commands.  Finally, rebuild rules are generated\n     in the Automake \u2018Makefile\u2019 existing in the subdirectory of the\n     output file, if there is one, or in the top-level \u2018Makefile\u2019\n     otherwise.\n\n     The above machinery (cleaning, distributing, and rebuilding) works\n     fine if the \u2018AC_CONFIG_FILES\u2019 specifications contain only literals.\n     If part of the specification uses shell variables, \u2018automake\u2019 will\n     not be able to fulfill this setup, and you will have to complete\n     the missing bits by hand.  For instance, on\n\n          file=input\n          ...\n          AC_CONFIG_FILES([output:$file],, [file=$file])\n\n     \u2018automake\u2019 will output rules to clean \u2018output\u2019, and rebuild it.\n     However the rebuild rule will not depend on \u2018input\u2019, and this file\n     will not be distributed either.  (You must add \u2018EXTRA_DIST = input\u2019\n     to your \u2018Makefile.am\u2019 if \u2018input\u2019 is a source file.)\n\n     Similarly\n\n          file=output\n          file2=out:in\n          ...\n          AC_CONFIG_FILES([$file:input],, [file=$file])\n          AC_CONFIG_FILES([$file2],, [file2=$file2])\n\n     will only cause \u2018input\u2019 to be distributed.  No file will be cleaned\n     automatically (add \u2018DISTCLEANFILES = output out\u2019 yourself), and no\n     rebuild rule will be output.\n\n     Obviously \u2018automake\u2019 cannot guess what value \u2018$file\u2019 is going to\n     hold later when \u2018configure\u2019 is run, and it cannot use the shell\n     variable \u2018$file\u2019 in a \u2018Makefile\u2019.  However, if you make reference\n     to \u2018$file\u2019 as \u2018${file}\u2019 (i.e., in a way that is compatible with\n     \u2018make\u2019\u2019s syntax) and furthermore use \u2018AC_SUBST\u2019 to ensure that\n     \u2018${file}\u2019 is meaningful in a \u2018Makefile\u2019, then \u2018automake\u2019 will be\n     able to use \u2018${file}\u2019 to generate all of these rules.  For\n     instance, here is how the Automake package itself generates\n     versioned scripts for its test suite:\n\n          AC_SUBST([APIVERSION], ...)\n          ...\n          AC_CONFIG_FILES(\n            [tests/aclocal-${APIVERSION}:tests/aclocal.in],\n            [chmod +x tests/aclocal-${APIVERSION}],\n            [APIVERSION=$APIVERSION])\n          AC_CONFIG_FILES(\n            [tests/automake-${APIVERSION}:tests/automake.in],\n            [chmod +x tests/automake-${APIVERSION}])\n\n     Here cleaning, distributing, and rebuilding are done automatically,\n     because \u2018${APIVERSION}\u2019 is known at \u2018make\u2019-time.\n\n     Note that you should not use shell variables to declare \u2018Makefile\u2019\n     files for which \u2018automake\u2019 must create \u2018Makefile.in\u2019.  Even\n     \u2018AC_SUBST\u2019 does not help here, because \u2018automake\u2019 needs to know the\n     file name when it runs in order to check whether \u2018Makefile.am\u2019\n     exists.  (In the very hairy case that your setup requires such use\n     of variables, you will have to tell Automake which \u2018Makefile.in\u2019s\n     to generate on the command-line.)\n\n     It is possible to let \u2018automake\u2019 emit conditional rules for\n     \u2018AC_CONFIG_FILES\u2019 with the help of \u2018AM_COND_IF\u2019 (*note Optional::).\n\n     To summarize:\n        \u2022 Use literals for \u2018Makefile\u2019s, and for other files whenever\n          possible.\n        \u2022 Use \u2018$file\u2019 (or \u2018${file}\u2019 without \u2018AC_SUBST([file])\u2019) for\n          files that \u2018automake\u2019 should ignore.\n        \u2022 Use \u2018${file}\u2019 and \u2018AC_SUBST([file])\u2019 for files that \u2018automake\u2019\n          should not ignore.\n\n\u001f\nFile: automake.info,  Node: Optional,  Next: aclocal Invocation,  Prev: Requirements,  Up: configure\n\n6.2 Other things Automake recognizes\n====================================\n\nEvery time Automake is run it calls Autoconf to trace \u2018configure.ac\u2019.\nThis way it can recognize the use of certain macros and tailor the\ngenerated \u2018Makefile.in\u2019 appropriately.  Currently recognized macros and\ntheir effects are:\n\n\u2018AC_CANONICAL_BUILD\u2019\n\u2018AC_CANONICAL_HOST\u2019\n\u2018AC_CANONICAL_TARGET\u2019\n     Automake will ensure that \u2018config.guess\u2019 and \u2018config.sub\u2019 exist.\n     Also, the \u2018Makefile\u2019 variables \u2018build_triplet\u2019, \u2018host_triplet\u2019 and\n     \u2018target_triplet\u2019 are introduced.  See *note Getting the Canonical\n     System Type: (autoconf)Canonicalizing.\n\n\u2018AC_CONFIG_AUX_DIR\u2019\n     Automake will look for various helper scripts, such as\n     \u2018install-sh\u2019, in the directory named in this macro invocation.\n     (The full list of scripts is: \u2018ar-lib\u2019, \u2018config.guess\u2019,\n     \u2018config.sub\u2019, \u2018depcomp\u2019, \u2018compile\u2019, \u2018install-sh\u2019, \u2018ltmain.sh\u2019,\n     \u2018mdate-sh\u2019, \u2018missing\u2019, \u2018mkinstalldirs\u2019, \u2018py-compile\u2019,\n     \u2018test-driver\u2019, \u2018texinfo.tex\u2019, \u2018ylwrap\u2019.)  Not all scripts are\n     always searched for; some scripts will only be sought if the\n     generated \u2018Makefile.in\u2019 requires them.\n\n     If \u2018AC_CONFIG_AUX_DIR\u2019 is not given, the scripts are looked for in\n     their standard locations.  For \u2018mdate-sh\u2019, \u2018texinfo.tex\u2019, and\n     \u2018ylwrap\u2019, the standard location is the source directory\n     corresponding to the current \u2018Makefile.am\u2019.  For the rest, the\n     standard location is the first one of \u2018.\u2019, \u2018..\u2019, or \u2018../..\u2019\n     (relative to the top source directory) that provides any one of the\n     helper scripts.  *Note Finding \u2018configure\u2019 Input: (autoconf)Input.\n\n     Required files from \u2018AC_CONFIG_AUX_DIR\u2019 are automatically\n     distributed, even if there is no \u2018Makefile.am\u2019 in this directory.\n\n\u2018AC_CONFIG_LIBOBJ_DIR\u2019\n     Automake will require the sources file declared with \u2018AC_LIBSOURCE\u2019\n     (see below) in the directory specified by this macro.\n\n\u2018AC_CONFIG_HEADERS\u2019\n     Automake will generate rules to rebuild these headers from the\n     corresponding templates (usually, the template for a \u2018foo.h\u2019 header\n     being \u2018foo.h.in\u2019).  Older versions of Automake required the use of\n     \u2018AM_CONFIG_HEADER\u2019; this is no longer the case, and that macro has\n     indeed been removed.\n\n     As with \u2018AC_CONFIG_FILES\u2019 (*note Requirements::), parts of the\n     specification using shell variables will be ignored as far as\n     cleaning, distributing, and rebuilding is concerned.\n\n\u2018AC_CONFIG_LINKS\u2019\n     Automake will generate rules to remove \u2018configure\u2019 generated links\n     on \u2018make distclean\u2019 and to distribute named source files as part of\n     \u2018make dist\u2019.\n\n     As for \u2018AC_CONFIG_FILES\u2019 (*note Requirements::), parts of the\n     specification using shell variables will be ignored as far as\n     cleaning and distributing is concerned.  (There are no rebuild\n     rules for links.)\n\n\u2018AC_LIBOBJ\u2019\n\u2018AC_LIBSOURCE\u2019\n\u2018AC_LIBSOURCES\u2019\n     Automake will automatically distribute any file listed in\n     \u2018AC_LIBSOURCE\u2019 or \u2018AC_LIBSOURCES\u2019.\n\n     Note that the \u2018AC_LIBOBJ\u2019 macro calls \u2018AC_LIBSOURCE\u2019.  So if an\n     Autoconf macro is documented to call \u2018AC_LIBOBJ([file])\u2019, then\n     \u2018file.c\u2019 will be distributed automatically by Automake.  This\n     encompasses many macros like \u2018AC_FUNC_ALLOCA\u2019, \u2018AC_FUNC_MEMCMP\u2019,\n     \u2018AC_REPLACE_FUNCS\u2019, and others.\n\n     By the way, direct assignments to \u2018LIBOBJS\u2019 are no longer\n     supported.  You should always use \u2018AC_LIBOBJ\u2019 for this purpose.\n     *Note \u2018AC_LIBOBJ\u2019 vs. \u2018LIBOBJS\u2019: (autoconf)AC_LIBOBJ vs LIBOBJS.\n\n\u2018AC_PROG_RANLIB\u2019\n     This is required if any libraries are built in the package.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n\n\u2018AC_PROG_CXX\u2019\n     This is required if any C++ source is included.  *Note Particular\n     Program Checks: (autoconf)Particular Programs.\n\n\u2018AC_PROG_OBJC\u2019\n     This is required if any Objective C source is included.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n\n\u2018AC_PROG_OBJCXX\u2019\n     This is required if any Objective C++ source is included.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n\n\u2018AC_PROG_F77\u2019\n     This is required if any Fortran 77 source is included.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n\n\u2018AC_F77_LIBRARY_LDFLAGS\u2019\n     This is required for programs and shared libraries that are a\n     mixture of languages that include Fortran 77 (*note Mixing Fortran\n     77 With C and C++::).  *Note Autoconf macros supplied with\n     Automake: Macros.\n\n\u2018AC_FC_SRCEXT\u2019\n     Automake will add the flags computed by \u2018AC_FC_SRCEXT\u2019 to\n     compilation of files with the respective source extension (*note\n     Fortran Compiler Characteristics: (autoconf)Fortran Compiler.).\n\n\u2018AC_PROG_FC\u2019\n     This is required if any Fortran 90/95 source is included.  This\n     macro is distributed with Autoconf version 2.58 and later.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n\n\u2018AC_PROG_LIBTOOL\u2019\n     Automake will turn on processing for \u2018libtool\u2019 (*note Introduction:\n     (libtool)Top.).\n\n\u2018AC_PROG_YACC\u2019\n     If a Yacc source file is seen, then you must either use this macro\n     or define the variable \u2018YACC\u2019 in \u2018configure.ac\u2019.  The former is\n     preferred (*note Particular Program Checks: (autoconf)Particular\n     Programs.).\n\n\u2018AC_PROG_LEX\u2019\n     If a Lex source file is seen, then this macro must be used.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n\n\u2018AC_REQUIRE_AUX_FILE\u2019\n     For each \u2018AC_REQUIRE_AUX_FILE([FILE])\u2019, \u2018automake\u2019 will ensure that\n     \u2018FILE\u2019 exists in the aux directory, and will complain otherwise.\n     It will also automatically distribute the file.  This macro should\n     be used by third-party Autoconf macros that require some supporting\n     files in the aux directory specified with \u2018AC_CONFIG_AUX_DIR\u2019\n     above.  *Note Finding \u2018configure\u2019 Input: (autoconf)Input.\n\n\u2018AC_SUBST\u2019\n     The first argument is automatically defined as a variable in each\n     generated \u2018Makefile.in\u2019, unless \u2018AM_SUBST_NOTMAKE\u2019 is also used for\n     this variable.  *Note Setting Output Variables: (autoconf)Setting\n     Output Variables.\n\n     For every substituted variable VAR, \u2018automake\u2019 will add a line \u2018VAR\n     = VALUE\u2019 to each \u2018Makefile.in\u2019 file.  Many Autoconf macros invoke\n     \u2018AC_SUBST\u2019 to set output variables this way, e.g., \u2018AC_PATH_XTRA\u2019\n     defines \u2018X_CFLAGS\u2019 and \u2018X_LIBS\u2019.  Thus, you can access these\n     variables as \u2018$(X_CFLAGS)\u2019 and \u2018$(X_LIBS)\u2019 in any \u2018Makefile.am\u2019 if\n     \u2018AC_PATH_XTRA\u2019 is called.\n\n\u2018AM_CONDITIONAL\u2019\n     This introduces an Automake conditional (*note Conditionals::).\n\n\u2018AM_COND_IF\u2019\n     This macro allows \u2018automake\u2019 to detect subsequent access within\n     \u2018configure.ac\u2019 to a conditional previously introduced with\n     \u2018AM_CONDITIONAL\u2019, thus enabling conditional \u2018AC_CONFIG_FILES\u2019\n     (*note Usage of Conditionals::).\n\n\u2018AM_GNU_GETTEXT\u2019\n     This macro is required for packages that use GNU gettext (*note\n     gettext::).  It is distributed with gettext.  If Automake sees this\n     macro it ensures that the package meets some of gettext\u2019s\n     requirements.\n\n\u2018AM_GNU_GETTEXT_INTL_SUBDIR\u2019\n     This macro specifies that the \u2018intl/\u2019 subdirectory is to be built,\n     even if the \u2018AM_GNU_GETTEXT\u2019 macro was invoked with a first\n     argument of \u2018external\u2019.\n\n\u2018AM_MAINTAINER_MODE([DEFAULT-MODE])\u2019\n     This macro adds an \u2018--enable-maintainer-mode\u2019 option to\n     \u2018configure\u2019.  If this is used, \u2018automake\u2019 will cause\n     \u201cmaintainer-only\u201d rules to be turned off by default in the\n     generated \u2018Makefile.in\u2019s, unless DEFAULT-MODE is \u2018enable\u2019.  This\n     macro defines the \u2018MAINTAINER_MODE\u2019 conditional, which you can use\n     in your own \u2018Makefile.am\u2019.  *Note maintainer-mode::.\n\n\u2018AM_SUBST_NOTMAKE(VAR)\u2019\n     Prevent Automake from defining a variable VAR, even if it is\n     substituted by \u2018config.status\u2019.  Normally, Automake defines a\n     \u2018make\u2019 variable for each \u2018configure\u2019 substitution, i.e., for each\n     \u2018AC_SUBST([VAR])\u2019.  This macro prevents that definition from\n     Automake.  If \u2018AC_SUBST\u2019 has not been called for this variable,\n     then \u2018AM_SUBST_NOTMAKE\u2019 has no effects.  Preventing variable\n     definitions may be useful for substitution of multi-line values,\n     where \u2018VAR = @VALUE@\u2019 might yield unintended results.\n\n\u2018m4_include\u2019\n     Files included by \u2018configure.ac\u2019 using this macro will be detected\n     by Automake and automatically distributed.  They will also appear\n     as dependencies in \u2018Makefile\u2019 rules.\n\n     \u2018m4_include\u2019 is seldom used by \u2018configure.ac\u2019 authors, but can\n     appear in \u2018aclocal.m4\u2019 when \u2018aclocal\u2019 detects that some required\n     macros come from files local to your package (as opposed to macros\n     installed in a system-wide directory; *note aclocal Invocation::).\n\n\u001f\nFile: automake.info,  Node: aclocal Invocation,  Next: Macros,  Prev: Optional,  Up: configure\n\n6.3 Auto-generating aclocal.m4\n==============================\n\nAutomake includes a number of Autoconf macros that can be used in your\npackage (*note Macros::); some of them are actually required by Automake\nin certain situations.  These macros must be defined in your\n\u2018aclocal.m4\u2019; otherwise they will not be seen by \u2018autoconf\u2019.\n\n   The \u2018aclocal\u2019 program will automatically generate \u2018aclocal.m4\u2019 files\nbased on the contents of \u2018configure.ac\u2019.  This provides a convenient way\nto get Automake-provided macros, without having to search around.  The\n\u2018aclocal\u2019 mechanism allows other packages to supply their own macros\n(*note Extending aclocal::).  You can also use it to maintain your own\nset of custom macros (*note Local Macros::).\n\n   At startup, \u2018aclocal\u2019 scans all the \u2018.m4\u2019 files it can find, looking\nfor macro definitions (*note Macro Search Path::).  Then it scans\n\u2018configure.ac\u2019.  Any mention of one of the macros found in the first\nstep causes that macro, and any macros it in turn requires, to be put\ninto \u2018aclocal.m4\u2019.\n\n   _Putting_ the file that contains the macro definition into\n\u2018aclocal.m4\u2019 is usually done by copying the entire text of this file,\nincluding unused macro definitions as well as both \u2018#\u2019 and \u2018dnl\u2019\ncomments.  If you want to make a comment that will be completely ignored\nby \u2018aclocal\u2019, use \u2018##\u2019 as the comment leader.\n\n   When a file selected by \u2018aclocal\u2019 is located in a subdirectory\nspecified as a relative search path with \u2018aclocal\u2019\u2019s \u2018-I\u2019 argument,\n\u2018aclocal\u2019 assumes the file belongs to the package and uses \u2018m4_include\u2019\ninstead of copying it into \u2018aclocal.m4\u2019.  This makes the package\nsmaller, eases dependency tracking, and cause the file to be distributed\nautomatically.  (*Note Local Macros::, for an example.)  Any macro that\nis found in a system-wide directory or via an absolute search path will\nbe copied.  So use \u2018-I `pwd`/reldir\u2019 instead of \u2018-I reldir\u2019 whenever\nsome relative directory should be considered outside the package.\n\n   The contents of \u2018acinclude.m4\u2019, if this file exists, are also\nautomatically included in \u2018aclocal.m4\u2019.  We recommend against using\n\u2018acinclude.m4\u2019 in new packages (*note Local Macros::).\n\n   While computing \u2018aclocal.m4\u2019, \u2018aclocal\u2019 runs \u2018autom4te\u2019 (*note Using\n\u2018Autom4te\u2019: (autoconf)Using autom4te.) in order to trace the macros that\nare really used, and omit from \u2018aclocal.m4\u2019 all macros that are\nmentioned but otherwise unexpanded (this can happen when a macro is\ncalled conditionally).  \u2018autom4te\u2019 is expected to be in the \u2018PATH\u2019, just\nas \u2018autoconf\u2019.  Its location can be overridden using the \u2018AUTOM4TE\u2019\nenvironment variable.\n\n* Menu:\n\n* aclocal Options::             Options supported by aclocal\n* Macro Search Path::           How aclocal finds .m4 files\n* Extending aclocal::           Writing your own aclocal macros\n* Local Macros::                Organizing local macros\n* Serials::                     Serial lines in Autoconf macros\n* Future of aclocal::           aclocal\u2019s scheduled death\n\n\u001f\nFile: automake.info,  Node: aclocal Options,  Next: Macro Search Path,  Up: aclocal Invocation\n\n6.3.1 aclocal Options\n---------------------\n\n\u2018aclocal\u2019 accepts the following options:\n\n\u2018--automake-acdir=DIR\u2019\n     Look for the automake-provided macro files in DIR instead of in the\n     installation directory.  This is typically used for debugging.\n\n     The environment variable \u2018ACLOCAL_AUTOMAKE_DIR\u2019 provides another\n     way to set the directory containing automake-provided macro files.\n     However \u2018--automake-acdir\u2019 takes precedence over it.\n\n\u2018--system-acdir=DIR\u2019\n     Look for the system-wide third-party macro files (and the special\n     \u2018dirlist\u2019 file) in DIR instead of in the installation directory.\n     This is typically used for debugging.\n\n\u2018--diff[=COMMAND]\u2019\n     Run COMMAND on the M4 file that would be installed or overwritten\n     by \u2018--install\u2019.  The default COMMAND is \u2018diff -u\u2019.  This option\n     implies \u2018--install\u2019 and \u2018--dry-run\u2019.\n\n\u2018--dry-run\u2019\n     Do not actually overwrite (or create) \u2018aclocal.m4\u2019 and M4 files\n     installed by \u2018--install\u2019.\n\n\u2018--help\u2019\n     Print a summary of the command line options and exit.\n\n\u2018-I DIR\u2019\n     Add the directory DIR to the list of directories searched for \u2018.m4\u2019\n     files.\n\n\u2018--install\u2019\n     Install system-wide third-party macros into the first directory\n     specified with \u2018-I DIR\u2019 instead of copying them in the output file.\n     Note that this will happen also if DIR is an absolute path.\n\n     When this option is used, and only when this option is used,\n     \u2018aclocal\u2019 will also honor \u2018#serial NUMBER\u2019 lines that appear in\n     macros: an M4 file is ignored if there exists another M4 file with\n     the same basename and a greater serial number in the search path\n     (*note Serials::).\n\n\u2018--force\u2019\n     Always overwrite the output file.  The default is to overwrite the\n     output file only when really needed, i.e., when its contents change\n     or if one of its dependencies is younger.\n\n     This option forces the update of \u2018aclocal.m4\u2019 (or the file\n     specified with \u2018--output\u2019 below) and only this file, it has\n     absolutely no influence on files that may need to be installed by\n     \u2018--install\u2019.\n\n\u2018--output=FILE\u2019\n     Cause the output to be put into FILE instead of \u2018aclocal.m4\u2019.\n\n\u2018--print-ac-dir\u2019\n     Prints the name of the directory that \u2018aclocal\u2019 will search to find\n     third-party \u2018.m4\u2019 files.  When this option is given, normal\n     processing is suppressed.  This option was used _in the past_ by\n     third-party packages to determine where to install \u2018.m4\u2019 macro\n     files, but _this usage is today discouraged_, since it causes\n     \u2018$(prefix)\u2019 not to be thoroughly honored (which violates the GNU\n     Coding Standards), and similar semantics can be better obtained\n     with the \u2018ACLOCAL_PATH\u2019 environment variable; *note Extending\n     aclocal::.\n\n\u2018--verbose\u2019\n     Print the names of the files it examines.\n\n\u2018--version\u2019\n     Print the version number of Automake and exit.\n\n\u2018-W CATEGORY\u2019\n\u2018--warnings=CATEGORY\u2019\n     Output warnings falling in CATEGORY.  CATEGORY can be one of:\n     \u2018syntax\u2019\n          dubious syntactic constructs, underquoted macros, unused\n          macros, etc.\n     \u2018unsupported\u2019\n          unknown macros\n     \u2018all\u2019\n          all the warnings, this is the default\n     \u2018none\u2019\n          turn off all the warnings\n     \u2018error\u2019\n          treat warnings as errors\n\n     All warnings are output by default.\n\n     The environment variable \u2018WARNINGS\u2019 is honored in the same way as\n     it is for \u2018automake\u2019 (*note automake Invocation::).\n\n\u001f\nFile: automake.info,  Node: Macro Search Path,  Next: Extending aclocal,  Prev: aclocal Options,  Up: aclocal Invocation\n\n6.3.2 Macro Search Path\n-----------------------\n\nBy default, \u2018aclocal\u2019 searches for \u2018.m4\u2019 files in the following\ndirectories, in this order:\n\n\u2018ACDIR-APIVERSION\u2019\n     This is where the \u2018.m4\u2019 macros distributed with Automake itself are\n     stored.  APIVERSION depends on the Automake release used; for\n     example, for Automake 1.11.x, APIVERSION = \u20181.11\u2019.\n\n\u2018ACDIR\u2019\n     This directory is intended for third party \u2018.m4\u2019 files, and is\n     configured when \u2018automake\u2019 itself is built.  This is\n     \u2018@datadir@/aclocal/\u2019, which typically expands to\n     \u2018${prefix}/share/aclocal/\u2019.  To find the compiled-in value of\n     ACDIR, use the \u2018--print-ac-dir\u2019 option (*note aclocal Options::).\n\n   As an example, suppose that \u2018automake-1.11.2\u2019 was configured with\n\u2018--prefix=/usr/local\u2019.  Then, the search path would be:\n\n  1. \u2018/usr/local/share/aclocal-1.11.2/\u2019\n  2. \u2018/usr/local/share/aclocal/\u2019\n\n   The paths for the ACDIR and ACDIR-APIVERSION directories can be\nchanged respectively through aclocal options \u2018--system-acdir\u2019 and\n\u2018--automake-acdir\u2019 (*note aclocal Options::).  Note however that these\noptions are only intended for use by the internal Automake test suite,\nor for debugging under highly unusual situations; they are not\nordinarily needed by end-users.\n\n   As explained in (*note aclocal Options::), there are several options\nthat can be used to change or extend this search path.\n\nModifying the Macro Search Path: \u2018-I DIR\u2019\n.........................................\n\nAny extra directories specified using \u2018-I\u2019 options (*note aclocal\nOptions::) are _prepended_ to this search list.  Thus, \u2018aclocal -I /foo\n-I /bar\u2019 results in the following search path:\n\n  1. \u2018/foo\u2019\n  2. \u2018/bar\u2019\n  3. ACDIR-APIVERSION\n  4. ACDIR\n\nModifying the Macro Search Path: \u2018dirlist\u2019\n..........................................\n\nThere is a third mechanism for customizing the search path.  If a\n\u2018dirlist\u2019 file exists in ACDIR, then that file is assumed to contain a\nlist of directory patterns, one per line.  \u2018aclocal\u2019 expands these\npatterns to directory names, and adds them to the search list _after_\nall other directories.  \u2018dirlist\u2019 entries may use shell wildcards such\nas \u2018*\u2019, \u2018?\u2019, or \u2018[...]\u2019.\n\n   For example, suppose \u2018ACDIR/dirlist\u2019 contains the following:\n\n     /test1\n     /test2\n     /test3*\n\nand that \u2018aclocal\u2019 was called with the \u2018-I /foo -I /bar\u2019 options.  Then,\nthe search path would be\n\n  1. \u2018/foo\u2019\n  2. \u2018/bar\u2019\n  3. ACDIR-APIVERSION\n  4. ACDIR\n  5. \u2018/test1\u2019\n  6. \u2018/test2\u2019\n\nand all directories with path names starting with \u2018/test3\u2019.\n\n   If the \u2018--system-acdir=DIR\u2019 option is used, then \u2018aclocal\u2019 will\nsearch for the \u2018dirlist\u2019 file in DIR; but remember the warnings above\nagainst the use of \u2018--system-acdir\u2019.\n\n   \u2018dirlist\u2019 is useful in the following situation: suppose that\n\u2018automake\u2019 version \u20181.11.2\u2019 is installed with \u2018--prefix=/usr\u2019 by the\nsystem vendor.  Thus, the default search directories are\n\n  1. \u2018/usr/share/aclocal-1.11/\u2019\n  2. \u2018/usr/share/aclocal/\u2019\n\n   However, suppose further that many packages have been manually\ninstalled on the system, with $prefix=/usr/local, as is typical.  In\nthat case, many of these \u201cextra\u201d \u2018.m4\u2019 files are in\n\u2018/usr/local/share/aclocal\u2019.  The only way to force \u2018/usr/bin/aclocal\u2019 to\nfind these \u201cextra\u201d \u2018.m4\u2019 files is to always call \u2018aclocal -I\n/usr/local/share/aclocal\u2019.  This is inconvenient.  With \u2018dirlist\u2019, one\nmay create a file \u2018/usr/share/aclocal/dirlist\u2019 containing only the\nsingle line\n\n     /usr/local/share/aclocal\n\n   Now, the \u201cdefault\u201d search path on the affected system is\n\n  1. \u2018/usr/share/aclocal-1.11/\u2019\n  2. \u2018/usr/share/aclocal/\u2019\n  3. \u2018/usr/local/share/aclocal/\u2019\n\nwithout the need for \u2018-I\u2019 options; \u2018-I\u2019 options can be reserved for\nproject-specific needs (\u2018my-source-dir/m4/\u2019), rather than using them to\nwork around local system-dependent tool installation directories.\n\n   Similarly, \u2018dirlist\u2019 can be handy if you have installed a local copy\nof Automake in your account and want \u2018aclocal\u2019 to look for macros\ninstalled at other places on the system.\n\nModifying the Macro Search Path: \u2018ACLOCAL_PATH\u2019\n...............................................\n\nThe fourth and last mechanism to customize the macro search path is also\nthe simplest.  Any directory included in the colon-separated environment\nvariable \u2018ACLOCAL_PATH\u2019 is added to the search path and takes precedence\nover system directories (including those found via \u2018dirlist\u2019), with the\nexception of the versioned directory ACDIR-APIVERSION (*note Macro\nSearch Path::).  However, directories passed via \u2018-I\u2019 will take\nprecedence over directories in \u2018ACLOCAL_PATH\u2019.\n\n   Also note that, if the \u2018--install\u2019 option is used, any \u2018.m4\u2019 file\ncontaining a required macro that is found in a directory listed in\n\u2018ACLOCAL_PATH\u2019 will be installed locally.  In this case, serial numbers\nin \u2018.m4\u2019 are honored too, *note Serials::.\n\n   Conversely to \u2018dirlist\u2019, \u2018ACLOCAL_PATH\u2019 is useful if you are using a\nglobal copy of Automake and want \u2018aclocal\u2019 to look for macros somewhere\nunder your home directory.\n\nPlanned future incompatibilities\n................................\n\nThe order in which the directories in the macro search path are\ncurrently looked up is confusing and/or suboptimal in various aspects,\nand is probably going to be changed in the future Automake release.  In\nparticular, directories in \u2018ACLOCAL_PATH\u2019 and \u2018ACDIR\u2019 might end up\ntaking precedence over \u2018ACDIR-APIVERSION\u2019, and directories in\n\u2018ACDIR/dirlist\u2019 might end up taking precedence over \u2018ACDIR\u2019.  _This is a\npossible future incompatibility!_\n\n\u001f\nFile: automake.info,  Node: Extending aclocal,  Next: Local Macros,  Prev: Macro Search Path,  Up: aclocal Invocation\n\n6.3.3 Writing your own aclocal macros\n-------------------------------------\n\nThe \u2018aclocal\u2019 program doesn\u2019t have any built-in knowledge of any macros,\nso it is easy to extend it with your own macros.\n\n   This can be used by libraries that want to supply their own Autoconf\nmacros for use by other programs.  For instance, the \u2018gettext\u2019 library\nsupplies a macro \u2018AM_GNU_GETTEXT\u2019 that should be used by any package\nusing \u2018gettext\u2019.  When the library is installed, it installs this macro\nso that \u2018aclocal\u2019 will find it.\n\n   A macro file\u2019s name should end in \u2018.m4\u2019.  Such files should be\ninstalled in \u2018$(datadir)/aclocal\u2019.  This is as simple as writing:\n\n     aclocaldir = $(datadir)/aclocal\n     aclocal_DATA = mymacro.m4 myothermacro.m4\n\nPlease do use \u2018$(datadir)/aclocal\u2019, and not something based on the\nresult of \u2018aclocal --print-ac-dir\u2019 (*note Hard-Coded Install Paths::,\nfor arguments).  It might also be helpful to suggest to the user to add\nthe \u2018$(datadir)/aclocal\u2019 directory to his \u2018ACLOCAL_PATH\u2019 variable (*note\nACLOCAL_PATH::) so that \u2018aclocal\u2019 will find the \u2018.m4\u2019 files installed by\nyour package automatically.\n\n   A file of macros should be a series of properly quoted \u2018AC_DEFUN\u2019\u2019s\n(*note (autoconf)Macro Definitions::).  The \u2018aclocal\u2019 programs also\nunderstands \u2018AC_REQUIRE\u2019 (*note (autoconf)Prerequisite Macros::), so it\nis safe to put each macro in a separate file.  Each file should have no\nside effects but macro definitions.  Especially, any call to \u2018AC_PREREQ\u2019\nshould be done inside the defined macro, not at the beginning of the\nfile.\n\n   Starting with Automake 1.8, \u2018aclocal\u2019 will warn about all underquoted\ncalls to \u2018AC_DEFUN\u2019.  We realize this will annoy a lot of people,\nbecause \u2018aclocal\u2019 was not so strict in the past and many third party\nmacros are underquoted; and we have to apologize for this temporary\ninconvenience.  The reason we have to be stricter is that a future\nimplementation of \u2018aclocal\u2019 (*note Future of aclocal::) will have to\ntemporarily include all of these third party \u2018.m4\u2019 files, maybe several\ntimes, including even files that are not actually needed.  Doing so\nshould alleviate many problems of the current implementation; however it\nrequires a stricter style from the macro authors.  Hopefully it is easy\nto revise the existing macros.  For instance,\n\n     # bad style\n     AC_PREREQ(2.68)\n     AC_DEFUN(AX_FOOBAR,\n     [AC_REQUIRE([AX_SOMETHING])dnl\n     AX_FOO\n     AX_BAR\n     ])\n\nshould be rewritten as\n\n     AC_DEFUN([AX_FOOBAR],\n     [AC_PREREQ([2.68])dnl\n     AC_REQUIRE([AX_SOMETHING])dnl\n     AX_FOO\n     AX_BAR\n     ])\n\n   Wrapping the \u2018AC_PREREQ\u2019 call inside the macro ensures that Autoconf\n2.68 will not be required if \u2018AX_FOOBAR\u2019 is not actually used.  Most\nimportantly, quoting the first argument of \u2018AC_DEFUN\u2019 allows the macro\nto be redefined or included twice (otherwise this first argument would\nbe expanded during the second definition).  For consistency we like to\nquote even arguments such as \u20182.68\u2019 that do not require it.\n\n   If you have been directed here by the \u2018aclocal\u2019 diagnostic but are\nnot the maintainer of the implicated macro, you will want to contact the\nmaintainer of that macro.  Please make sure you have the latest version\nof the macro and that the problem hasn\u2019t already been reported before\ndoing so: people tend to work faster when they aren\u2019t flooded by mails.\n\n   Another situation where \u2018aclocal\u2019 is commonly used is to manage\nmacros that are used locally by the package; *note Local Macros::.\n\n\u001f\nFile: automake.info,  Node: Local Macros,  Next: Serials,  Prev: Extending aclocal,  Up: aclocal Invocation\n\n6.3.4 Handling Local Macros\n---------------------------\n\nFeature tests offered by Autoconf do not cover all needs.  People often\nhave to supplement existing tests with their own macros, or with\nthird-party macros.\n\n   There are two ways to organize custom macros in a package.\n\n   The first possibility (the historical practice) is to list all your\nmacros in \u2018acinclude.m4\u2019.  This file will be included in \u2018aclocal.m4\u2019\nwhen you run \u2018aclocal\u2019, and its macro(s) will henceforth be visible to\n\u2018autoconf\u2019.  However if it contains numerous macros, it will rapidly\nbecome difficult to maintain, and it will be almost impossible to share\nmacros between packages.\n\n   The second possibility, which we do recommend, is to write each macro\nin its own file and gather all these files in a directory.  This\ndirectory is usually called \u2018m4/\u2019.  Then it\u2019s enough to update\n\u2018configure.ac\u2019 by adding a proper call to \u2018AC_CONFIG_MACRO_DIRS\u2019:\n\n     AC_CONFIG_MACRO_DIRS([m4])\n\n   \u2018aclocal\u2019 will then take care of automatically adding \u2018m4/\u2019 to its\nsearch path for m4 files.\n\n   When \u2018aclocal\u2019 is run, it will build an \u2018aclocal.m4\u2019 that\n\u2018m4_include\u2019s any file from \u2018m4/\u2019 that defines a required macro.  Macros\nnot found locally will still be searched in system-wide directories, as\nexplained in *note Macro Search Path::.\n\n   Custom macros should be distributed for the same reason that\n\u2018configure.ac\u2019 is: so that other people have all the sources of your\npackage if they want to work on it.  Actually, this distribution happens\nautomatically because all \u2018m4_include\u2019d files are distributed.\n\n   However there is no consensus on the distribution of third-party\nmacros that your package may use.  Many libraries install their own\nmacro in the system-wide \u2018aclocal\u2019 directory (*note Extending\naclocal::).  For instance, Guile ships with a file called \u2018guile.m4\u2019\nthat contains the macro \u2018GUILE_FLAGS\u2019 that can be used to define setup\ncompiler and linker flags appropriate for using Guile.  Using\n\u2018GUILE_FLAGS\u2019 in \u2018configure.ac\u2019 will cause \u2018aclocal\u2019 to copy \u2018guile.m4\u2019\ninto \u2018aclocal.m4\u2019, but as \u2018guile.m4\u2019 is not part of the project, it will\nnot be distributed.  Technically, that means a user who needs to rebuild\n\u2018aclocal.m4\u2019 will have to install Guile first.  This is probably OK, if\nGuile already is a requirement to build the package.  However, if Guile\nis only an optional feature, or if your package might run on\narchitectures where Guile cannot be installed, this requirement will\nhinder development.  An easy solution is to copy such third-party macros\nin your local \u2018m4/\u2019 directory so they get distributed.\n\n   Since Automake 1.10, \u2018aclocal\u2019 offers the option \u2018--install\u2019 to copy\nthese system-wide third-party macros in your local macro directory,\nhelping to solve the above problem.\n\n   With this setup, system-wide macros will be copied to \u2018m4/\u2019 the first\ntime you run \u2018aclocal\u2019.  Then the locally installed macros will have\nprecedence over the system-wide installed macros each time \u2018aclocal\u2019 is\nrun again.\n\n   One reason why you should keep \u2018--install\u2019 in the flags even after\nthe first run is that when you later edit \u2018configure.ac\u2019 and depend on a\nnew macro, this macro will be installed in your \u2018m4/\u2019 automatically.\nAnother one is that serial numbers (*note Serials::) can be used to\nupdate the macros in your source tree automatically when new system-wide\nversions are installed.  A serial number should be a single line of the\nform\n\n     #serial NNN\n\nwhere NNN contains only digits and dots.  It should appear in the M4\nfile before any macro definition.  It is a good practice to maintain a\nserial number for each macro you distribute, even if you do not use the\n\u2018--install\u2019 option of \u2018aclocal\u2019: this allows other people to use it.\n\n\u001f\nFile: automake.info,  Node: Serials,  Next: Future of aclocal,  Prev: Local Macros,  Up: aclocal Invocation\n\n6.3.5 Serial Numbers\n--------------------\n\nBecause third-party macros defined in \u2018*.m4\u2019 files are naturally shared\nbetween multiple projects, some people like to version them.  This makes\nit easier to tell which of two M4 files is newer.  Since at least 1996,\nthe tradition is to use a \u2018#serial\u2019 line for this.\n\n   A serial number should be a single line of the form\n\n     # serial VERSION\n\nwhere VERSION is a version number containing only digits and dots.\nUsually people use a single integer, and they increment it each time\nthey change the macro (hence the name of \u201cserial\u201d).  Such a line should\nappear in the M4 file before any macro definition.\n\n   The \u2018#\u2019 must be the first character on the line, and it is OK to have\nextra words after the version, as in\n\n     #serial VERSION GARBAGE\n\n   Normally these serial numbers are completely ignored by \u2018aclocal\u2019 and\n\u2018autoconf\u2019, like any genuine comment.  However when using \u2018aclocal\u2019\u2019s\n\u2018--install\u2019 feature, these serial numbers will modify the way \u2018aclocal\u2019\nselects the macros to install in the package: if two files with the same\nbasename exist in your search path, and if at least one of them uses a\n\u2018#serial\u2019 line, \u2018aclocal\u2019 will ignore the file that has the older\n\u2018#serial\u2019 line (or the file that has none).\n\n   Note that a serial number applies to a whole M4 file, not to any\nmacro it contains.  A file can contain multiple macros, but only one\nserial.\n\n   Here is a use case that illustrates the use of \u2018--install\u2019 and its\ninteraction with serial numbers.  Let\u2019s assume we maintain a package\ncalled MyPackage, the \u2018configure.ac\u2019 of which requires a third-party\nmacro \u2018AX_THIRD_PARTY\u2019 defined in \u2018/usr/share/aclocal/thirdparty.m4\u2019 as\nfollows:\n\n     # serial 1\n     AC_DEFUN([AX_THIRD_PARTY], [...])\n\n   MyPackage uses an \u2018m4/\u2019 directory to store local macros as explained\nin *note Local Macros::, and has\n\n     AC_CONFIG_MACRO_DIRS([m4])\n\nin its \u2018configure.ac\u2019.\n\n   Initially the \u2018m4/\u2019 directory is empty.  The first time we run\n\u2018aclocal --install\u2019, it will notice that\n\n   \u2022 \u2018configure.ac\u2019 uses \u2018AX_THIRD_PARTY\u2019\n   \u2022 No local macros define \u2018AX_THIRD_PARTY\u2019\n   \u2022 \u2018/usr/share/aclocal/thirdparty.m4\u2019 defines \u2018AX_THIRD_PARTY\u2019 with\n     serial number 1.\n\nBecause \u2018/usr/share/aclocal/thirdparty.m4\u2019 is a system-wide macro and\n\u2018aclocal\u2019 was given the \u2018--install\u2019 option, it will copy this file in\n\u2018m4/thirdparty.m4\u2019, and output an \u2018aclocal.m4\u2019 that contains\n\u2018m4_include([m4/thirdparty.m4])\u2019.\n\n   The next time \u2018aclocal --install\u2019 is run, something different\nhappens.  \u2018aclocal\u2019 notices that\n\n   \u2022 \u2018configure.ac\u2019 uses \u2018AX_THIRD_PARTY\u2019\n   \u2022 \u2018m4/thirdparty.m4\u2019 defines \u2018AX_THIRD_PARTY\u2019 with serial number 1.\n   \u2022 \u2018/usr/share/aclocal/thirdparty.m4\u2019 defines \u2018AX_THIRD_PARTY\u2019 with\n     serial number 1.\n\nBecause both files have the same serial number, \u2018aclocal\u2019 uses the first\nit found in its search path order (*note Macro Search Path::).\n\u2018aclocal\u2019 therefore ignores \u2018/usr/share/aclocal/thirdparty.m4\u2019 and\noutputs an \u2018aclocal.m4\u2019 that contains \u2018m4_include([m4/thirdparty.m4])\u2019.\n\n   Local directories specified with \u2018-I\u2019 are always searched before\nsystem-wide directories, so a local file will always be preferred to the\nsystem-wide file in case of equal serial numbers.\n\n   Now suppose the system-wide third-party macro is changed.  This can\nhappen if the package installing this macro is updated.  Let\u2019s suppose\nthe new macro has serial number 2.  The next time \u2018aclocal --install\u2019 is\nrun the situation is the following:\n\n   \u2022 \u2018configure.ac\u2019 uses \u2018AX_THIRD_PARTY\u2019\n   \u2022 \u2018m4/thirdparty.m4\u2019 defines \u2018AX_THIRD_PARTY\u2019 with serial number 1.\n   \u2022 \u2018/usr/share/aclocal/thirdparty.m4\u2019 defines \u2018AX_THIRD_PARTY\u2019 with\n     serial 2.\n\nWhen \u2018aclocal\u2019 sees a greater serial number, it immediately forgets\nanything it knows from files that have the same basename and a smaller\nserial number.  So after it has found \u2018/usr/share/aclocal/thirdparty.m4\u2019\nwith serial 2, \u2018aclocal\u2019 will proceed as if it had never seen\n\u2018m4/thirdparty.m4\u2019.  This brings us back to a situation similar to that\nat the beginning of our example, where no local file defined the macro.\n\u2018aclocal\u2019 will install the new version of the macro in\n\u2018m4/thirdparty.m4\u2019, in this case overriding the old version.  MyPackage\njust had its macro updated as a side effect of running \u2018aclocal\u2019.\n\n   If you are leery of letting \u2018aclocal\u2019 update your local macro, you\ncan run \u2018aclocal --diff\u2019 to review the changes \u2018aclocal --install\u2019 would\nperform on these macros.\n\n   Finally, note that the \u2018--force\u2019 option of \u2018aclocal\u2019 has absolutely\nno effect on the files installed by \u2018--install\u2019.  For instance, if you\nhave modified your local macros, do not expect \u2018--install --force\u2019 to\nreplace the local macros by their system-wide versions.  If you want to\ndo so, simply erase the local macros you want to revert, and run\n\u2018aclocal --install\u2019.\n\n\u001f\nFile: automake.info,  Node: Future of aclocal,  Prev: Serials,  Up: aclocal Invocation\n\n6.3.6 The Future of \u2018aclocal\u2019\n-----------------------------\n\n\u2018aclocal\u2019 is expected to disappear.  This feature really should not be\noffered by Automake.  Automake should focus on generating \u2018Makefile\u2019s;\ndealing with M4 macros really is Autoconf\u2019s job.  The fact that some\npeople install Automake just to use \u2018aclocal\u2019, but do not use \u2018automake\u2019\notherwise is an indication of how that feature is misplaced.\n\n   The new implementation will probably be done slightly differently.\nFor instance, it could enforce the \u2018m4/\u2019-style layout discussed in *note\nLocal Macros::.\n\n   We have no idea when and how this will happen.  This has been\ndiscussed several times in the past, but someone still has to commit to\nthat non-trivial task.\n\n   From the user point of view, \u2018aclocal\u2019\u2019s removal might turn out to be\npainful.  There is a simple precaution that you may take to make that\nswitch more seamless: never call \u2018aclocal\u2019 yourself.  Keep this guy\nunder the exclusive control of \u2018autoreconf\u2019 and Automake\u2019s rebuild\nrules.  Hopefully you won\u2019t need to worry about things breaking; when\n\u2018aclocal\u2019 disappears, because everything will have been taken care of.\nIf otherwise you used to call \u2018aclocal\u2019 directly yourself or from some\nscript, you will quickly notice the change.\n\n   Many packages come with a script called \u2018bootstrap\u2019 or \u2018autogen.sh\u2019,\nthat will just call \u2018aclocal\u2019, \u2018libtoolize\u2019, \u2018gettextize\u2019 or\n\u2018autopoint\u2019, \u2018autoconf\u2019, \u2018autoheader\u2019, and \u2018automake\u2019 in the right\norder.  Actually this is precisely what \u2018autoreconf\u2019 can do for you.  If\nyour package has such a \u2018bootstrap\u2019 or \u2018autogen.sh\u2019 script, consider\nusing \u2018autoreconf\u2019.  That should simplify its logic a lot (less things\nto maintain, yum!), it\u2019s even likely you will not need the script\nanymore, and more to the point you will not call \u2018aclocal\u2019 directly\nanymore.\n\n   For the time being, third-party packages should continue to install\npublic macros into \u2018/usr/share/aclocal/\u2019.  If \u2018aclocal\u2019 is replaced by\nanother tool it might make sense to rename the directory, but supporting\n\u2018/usr/share/aclocal/\u2019 for backward compatibility should be really easy\nprovided all macros are properly written (*note Extending aclocal::).\n\n\u001f\nFile: automake.info,  Node: Macros,  Prev: aclocal Invocation,  Up: configure\n\n6.4 Autoconf macros supplied with Automake\n==========================================\n\nAutomake ships with several Autoconf macros that you can use from your\n\u2018configure.ac\u2019.  When you use one of them it will be included by\n\u2018aclocal\u2019 in \u2018aclocal.m4\u2019.\n\n* Menu:\n\n* Public Macros::               Macros that you can use.\n* Obsolete Macros::             Macros that will soon be removed.\n* Private Macros::              Macros that you should not use.\n\n\u001f\nFile: automake.info,  Node: Public Macros,  Next: Obsolete Macros,  Up: Macros\n\n6.4.1 Public Macros\n-------------------\n\n\u2018AM_INIT_AUTOMAKE([OPTIONS])\u2019\n     Runs many macros required for proper operation of the generated\n     Makefiles.\n\n     Today, \u2018AM_INIT_AUTOMAKE\u2019 is called with a single argument: a\n     space-separated list of Automake options that should be applied to\n     every \u2018Makefile.am\u2019 in the tree.  The effect is as if each option\n     were listed in \u2018AUTOMAKE_OPTIONS\u2019 (*note Options::).\n\n     This macro can also be called in another, _deprecated_ form:\n     \u2018AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\u2019.  In this form,\n     there are two required arguments: the package and the version\n     number.  This usage is mostly obsolete because the PACKAGE and\n     VERSION can be obtained from Autoconf\u2019s \u2018AC_INIT\u2019 macro.  However,\n     differently from what happens for \u2018AC_INIT\u2019 invocations, this\n     \u2018AM_INIT_AUTOMAKE\u2019 invocation supports shell variables\u2019 expansions\n     in the \u2018PACKAGE\u2019 and \u2018VERSION\u2019 arguments (which otherwise defaults,\n     respectively, to the \u2018PACKAGE_TARNAME\u2019 and \u2018PACKAGE_VERSION\u2019\n     defined via the \u2018AC_INIT\u2019 invocation; *note The \u2018AC_INIT\u2019 macro:\n     (autoconf)AC_INIT.); and this can still be useful in some selected\n     situations.  Our hope is that future Autoconf versions will improve\n     their support for package versions defined dynamically at configure\n     runtime; when (and if) this happens, support for the two-args\n     \u2018AM_INIT_AUTOMAKE\u2019 invocation will likely be removed from Automake.\n\n     If your \u2018configure.ac\u2019 has:\n\n          AC_INIT([src/foo.c])\n          AM_INIT_AUTOMAKE([mumble], [1.5])\n\n     you should modernize it as follows:\n\n          AC_INIT([mumble], [1.5])\n          AC_CONFIG_SRCDIR([src/foo.c])\n          AM_INIT_AUTOMAKE\n\n     Note that if you\u2019re upgrading your \u2018configure.ac\u2019 from an earlier\n     version of Automake, it is not always correct to simply move the\n     package and version arguments from \u2018AM_INIT_AUTOMAKE\u2019 directly to\n     \u2018AC_INIT\u2019, as in the example above.  The first argument to\n     \u2018AC_INIT\u2019 should be the name of your package (e.g., \u2018GNU\n     Automake\u2019), not the tarball name (e.g., \u2018automake\u2019) that you used\n     to pass to \u2018AM_INIT_AUTOMAKE\u2019.  Autoconf tries to derive a tarball\n     name from the package name, which should work for most but not all\n     package names.  (If it doesn\u2019t work for yours, you can use the\n     four-argument form of \u2018AC_INIT\u2019 to provide the tarball name\n     explicitly).\n\n     By default this macro \u2018AC_DEFINE\u2019\u2019s \u2018PACKAGE\u2019 and \u2018VERSION\u2019.  This\n     can be avoided by passing the \u2018no-define\u2019 option (*note List of\n     Automake options::):\n          AM_INIT_AUTOMAKE([no-define ...])\n\n\u2018AM_PATH_LISPDIR\u2019\n     Searches for the program \u2018emacs\u2019, and, if found, sets the output\n     variable \u2018lispdir\u2019 to the full path to Emacs\u2019 site-lisp directory.\n\n     Note that this test assumes the \u2018emacs\u2019 found to be a version that\n     supports Emacs Lisp (such as GNU Emacs or XEmacs).  Other emacsen\n     can cause this test to hang (some, like old versions of MicroEmacs,\n     start up in interactive mode, requiring \u2018C-x C-c\u2019 to exit, which is\n     hardly obvious for a non-emacs user).  In most cases, however, you\n     should be able to use \u2018C-c\u2019 to kill the test.  In order to avoid\n     problems, you can set \u2018EMACS\u2019 to \u201cno\u201d in the environment, or use\n     the \u2018--with-lispdir\u2019 option to \u2018configure\u2019 to explicitly set the\n     correct path (if you\u2019re sure you have an \u2018emacs\u2019 that supports\n     Emacs Lisp).\n\n\u2018AM_PROG_AR([ACT-IF-FAIL])\u2019\n     You must use this macro when you use the archiver in your project,\n     if you want support for unusual archivers such as Microsoft \u2018lib\u2019.\n     The content of the optional argument is executed if the archiver\n     interface is not recognized; the default action is to abort\n     configure with an error message.\n\n\u2018AM_PROG_AS\u2019\n     Use this macro when you have assembly code in your project.  This\n     will choose the assembler for you (by default the C compiler) and\n     set \u2018CCAS\u2019, and will also set \u2018CCASFLAGS\u2019 if required.\n\n\u2018AM_PROG_CC_C_O\u2019\n     This is an obsolescent macro that checks that the C compiler\n     supports the \u2018-c\u2019 and \u2018-o\u2019 options together.  Note that, since\n     Automake 1.14, the \u2018AC_PROG_CC\u2019 is rewritten to implement such\n     checks itself, and thus the explicit use of \u2018AM_PROG_CC_C_O\u2019 should\n     no longer be required.\n\n\u2018AM_PROG_LEX\u2019\n     Like \u2018AC_PROG_LEX\u2019 (*note Particular Program Checks:\n     (autoconf)Particular Programs.), but uses the \u2018missing\u2019 script on\n     systems that do not have \u2018lex\u2019.  HP-UX 10 is one such system.\n\n\u2018AM_PROG_GCJ\u2019\n     This macro finds the \u2018gcj\u2019 program or causes an error.  It sets\n     \u2018GCJ\u2019 and \u2018GCJFLAGS\u2019.  \u2018gcj\u2019 is the Java front-end to the GNU\n     Compiler Collection.\n\n\u2018AM_PROG_UPC([COMPILER-SEARCH-LIST])\u2019\n     Find a compiler for Unified Parallel C and define the \u2018UPC\u2019\n     variable.  The default COMPILER-SEARCH-LIST is \u2018upcc upc\u2019.  This\n     macro will abort \u2018configure\u2019 if no Unified Parallel C compiler is\n     found.\n\n\u2018AM_MISSING_PROG(NAME, PROGRAM)\u2019\n     Find a maintainer tool PROGRAM and define the NAME environment\n     variable with its location.  If PROGRAM is not detected, then NAME\n     will instead invoke the \u2018missing\u2019 script, in order to give useful\n     advice to the user about the missing maintainer tool.  *Note\n     maintainer-mode::, for more information on when the \u2018missing\u2019\n     script is appropriate.\n\n\u2018AM_SILENT_RULES\u2019\n     Control the machinery for less verbose build output (*note Automake\n     Silent Rules::).\n\n\u2018AM_WITH_DMALLOC\u2019\n     Add support for the Dmalloc package (https://dmalloc.com/).  If the\n     user runs \u2018configure\u2019 with \u2018--with-dmalloc\u2019, then define\n     \u2018WITH_DMALLOC\u2019 and add \u2018-ldmalloc\u2019 to \u2018LIBS\u2019.\n\n\u001f\nFile: automake.info,  Node: Obsolete Macros,  Next: Private Macros,  Prev: Public Macros,  Up: Macros\n\n6.4.2 Obsolete Macros\n---------------------\n\nAlthough using some of the following macros was required in past\nreleases, you should not use any of them in new code.  _All these macros\nwill be removed in the next major Automake version_; if you are still\nusing them, running \u2018autoupdate\u2019 should adjust your \u2018configure.ac\u2019\nautomatically (*note Using \u2018autoupdate\u2019 to Modernize \u2018configure.ac\u2019:\n(autoconf)autoupdate Invocation.).  _Do it NOW!_\n\n\u2018AM_PROG_MKDIR_P\u2019\n\n     From Automake 1.8 to 1.9.6 this macro used to define the output\n     variable \u2018mkdir_p\u2019 to one of \u2018mkdir -p\u2019, \u2018install-sh -d\u2019, or\n     \u2018mkinstalldirs\u2019.\n\n     Nowadays Autoconf provides a similar functionality with\n     \u2018AC_PROG_MKDIR_P\u2019 (*note Particular Program Checks:\n     (autoconf)Particular Programs.), however this defines the output\n     variable \u2018MKDIR_P\u2019 instead.  In case you are still using the\n     \u2018AM_PROG_MKDIR_P\u2019 macro in your \u2018configure.ac\u2019, or its provided\n     variable \u2018$(mkdir_p)\u2019 in your \u2018Makefile.am\u2019, you are advised to\n     switch ASAP to the more modern Autoconf-provided interface instead;\n     both the macro and the variable might be removed in a future major\n     Automake release.\n\n\u001f\nFile: automake.info,  Node: Private Macros,  Prev: Obsolete Macros,  Up: Macros\n\n6.4.3 Private Macros\n--------------------\n\nThe following macros are private macros you should not call directly.\nThey are called by the other public macros when appropriate.  Do not\nrely on them, as they might be changed in a future version.  Consider\nthem as implementation details; or better, do not consider them at all:\nskip this section!\n\n\u2018_AM_DEPENDENCIES\u2019\n\u2018AM_SET_DEPDIR\u2019\n\u2018AM_DEP_TRACK\u2019\n\u2018AM_OUTPUT_DEPENDENCY_COMMANDS\u2019\n     These macros are used to implement Automake\u2019s automatic dependency\n     tracking scheme.  They are called automatically by Automake when\n     required, and there should be no need to invoke them manually.\n\n\u2018AM_MAKE_INCLUDE\u2019\n     This macro is used to discover how the user\u2019s \u2018make\u2019 handles\n     \u2018include\u2019 statements.  This macro is automatically invoked when\n     needed; there should be no need to invoke it manually.\n\n\u2018AM_PROG_INSTALL_STRIP\u2019\n     This is used to find a version of \u2018install\u2019 that can be used to\n     strip a program at installation time.  This macro is automatically\n     included when required.\n\n\u2018AM_SANITY_CHECK\u2019\n     This checks to make sure that a file created in the build directory\n     is newer than a file in the source directory.  This can fail on\n     systems where the clock is set incorrectly.  This macro is\n     automatically run from \u2018AM_INIT_AUTOMAKE\u2019.\n\n\u001f\nFile: automake.info,  Node: Directories,  Next: Programs,  Prev: configure,  Up: Top\n\n7 Directories\n*************\n\nFor simple projects that distribute all files in the same directory it\nis enough to have a single \u2018Makefile.am\u2019 that builds everything in\nplace.\n\n   In larger projects, it is common to organize files in different\ndirectories, in a tree.  For example, there could be a directory for the\nprogram\u2019s source, one for the testsuite, and one for the documentation;\nor, for very large projects, there could be one directory per program,\nper library or per module.\n\n   The traditional approach is to build these subdirectories\nrecursively, employing _make recursion_: each directory contains its own\n\u2018Makefile\u2019, and when \u2018make\u2019 is run from the top-level directory, it\nenters each subdirectory in turn, and invokes there a new \u2018make\u2019\ninstance to build the directory\u2019s contents.\n\n   Because this approach is very widespread, Automake offers built-in\nsupport for it.  However, it is worth noting that the use of make\nrecursion has its own serious issues and drawbacks, and that it\u2019s well\npossible to have packages with a multi directory layout that make little\nor no use of such recursion (examples of such packages are GNU Bison and\nGNU Automake itself); see also the *note Alternative:: section below.\n\n* Menu:\n\n* Subdirectories::              Building subdirectories recursively\n* Conditional Subdirectories::  Conditionally not building directories\n* Alternative::                 Subdirectories without recursion\n* Subpackages::                 Nesting packages\n\n\u001f\nFile: automake.info,  Node: Subdirectories,  Next: Conditional Subdirectories,  Up: Directories\n\n7.1 Recursing subdirectories\n============================\n\nIn packages using make recursion, the top level \u2018Makefile.am\u2019 must tell\nAutomake which subdirectories are to be built.  This is done via the\n\u2018SUBDIRS\u2019 variable.\n\n   The \u2018SUBDIRS\u2019 variable holds a list of subdirectories in which\nbuilding of various sorts can occur.  The rules for many targets (e.g.,\n\u2018all\u2019) in the generated \u2018Makefile\u2019 will run commands both locally and in\nall specified subdirectories.  Note that the directories listed in\n\u2018SUBDIRS\u2019 are not required to contain \u2018Makefile.am\u2019s; only \u2018Makefile\u2019s\n(after configuration).  This allows inclusion of libraries from packages\nthat do not use Automake (such as \u2018gettext\u2019; see also *note Third-Party\nMakefiles::).\n\n   In packages that use subdirectories, the top-level \u2018Makefile.am\u2019 is\noften very short.  For instance, here is the \u2018Makefile.am\u2019 from the GNU\nHello distribution:\n\n     EXTRA_DIST = BUGS ChangeLog.O README-alpha\n     SUBDIRS = doc intl po src tests\n\n   When Automake invokes \u2018make\u2019 in a subdirectory, it uses the value of\nthe \u2018MAKE\u2019 variable.  It passes the value of the variable \u2018AM_MAKEFLAGS\u2019\nto the \u2018make\u2019 invocation; this can be set in \u2018Makefile.am\u2019 if there are\nflags you must always pass to \u2018make\u2019.\n\n   The directories mentioned in \u2018SUBDIRS\u2019 are usually direct children of\nthe current directory, each subdirectory containing its own\n\u2018Makefile.am\u2019 with a \u2018SUBDIRS\u2019 pointing to deeper subdirectories.\nAutomake can be used to construct packages of arbitrary depth this way.\n\n   By default, Automake generates \u2018Makefiles\u2019 that work depth-first in\npostfix order: the subdirectories are built before the current\ndirectory.  However, it is possible to change this ordering.  You can do\nthis by putting \u2018.\u2019 into \u2018SUBDIRS\u2019.  For instance, putting \u2018.\u2019 first\nwill cause a prefix ordering of directories.\n\n   Using\n\n     SUBDIRS = lib src . test\n\nwill cause \u2018lib/\u2019 to be built before \u2018src/\u2019, then the current directory\nwill be built, finally the \u2018test/\u2019 directory will be built.  It is\ncustomary to arrange test directories to be built after everything else\nsince they are meant to test what has been constructed.\n\n   In addition to the built-in recursive targets defined by Automake\n(\u2018all\u2019, \u2018check\u2019, etc.), the developer can also define his own recursive\ntargets.  That is done by passing the names of such targets as arguments\nto the m4 macro \u2018AM_EXTRA_RECURSIVE_TARGETS\u2019 in \u2018configure.ac\u2019.\nAutomake generates rules to handle the recursion for such targets; and\nthe developer can define real actions for them by defining corresponding\n\u2018-local\u2019 targets.\n\n     % cat configure.ac\n     AC_INIT([pkg-name], [1.0])\n     AM_INIT_AUTOMAKE\n     AM_EXTRA_RECURSIVE_TARGETS([foo])\n     AC_CONFIG_FILES([Makefile sub/Makefile sub/src/Makefile])\n     AC_OUTPUT\n     % cat Makefile.am\n     SUBDIRS = sub\n     foo-local:\n             @echo This will be run by \"make foo\".\n     % cat sub/Makefile.am\n     SUBDIRS = src\n     % cat sub/src/Makefile.am\n     foo-local:\n             @echo This too will be run by a \"make foo\" issued either in\n             @echo the 'sub/src/' directory, the 'sub/' directory, or the\n             @echo top-level directory.\n\n\u001f\nFile: automake.info,  Node: Conditional Subdirectories,  Next: Alternative,  Prev: Subdirectories,  Up: Directories\n\n7.2 Conditional Subdirectories\n==============================\n\nIt is possible to define the \u2018SUBDIRS\u2019 variable conditionally if, like\nin the case of GNU Inetutils, you want to only build a subset of the\nentire package.\n\n   To illustrate how this works, let\u2019s assume we have two directories,\n\u2018src/\u2019 and \u2018opt/\u2019.  \u2018src/\u2019 should always be built, but we want to decide\nin \u2018configure\u2019 whether \u2018opt/\u2019 will be built or not.  (For this example\nwe will assume that \u2018opt/\u2019 should be built when the variable \u2018$want_opt\u2019\nwas set to \u2018yes\u2019.)\n\n   Running \u2018make\u2019 should thus recurse into \u2018src/\u2019 always, and then maybe\nin \u2018opt/\u2019.\n\n   However \u2018make dist\u2019 should always recurse into both \u2018src/\u2019 and\n\u2018opt/\u2019, because \u2018opt/\u2019 should be distributed even if it is not needed in\nthe current configuration.  This means \u2018opt/Makefile\u2019 should be created\n_unconditionally_.\n\n   There are two ways to set up a project like this.  You can use\nAutomake conditionals (*note Conditionals::) or use Autoconf \u2018AC_SUBST\u2019\nvariables (*note Setting Output Variables: (autoconf)Setting Output\nVariables.).  Using Automake conditionals is the preferred solution.\nBefore we illustrate these two possibilities, let\u2019s introduce\n\u2018DIST_SUBDIRS\u2019.\n\n* Menu:\n\n* SUBDIRS vs DIST_SUBDIRS::     Two sets of directories\n* Subdirectories with AM_CONDITIONAL::  Specifying conditional subdirectories\n* Subdirectories with AC_SUBST::  Another way for conditional recursion\n* Unconfigured Subdirectories::  Not even creating a \u2018Makefile\u2019\n\n\u001f\nFile: automake.info,  Node: SUBDIRS vs DIST_SUBDIRS,  Next: Subdirectories with AM_CONDITIONAL,  Up: Conditional Subdirectories\n\n7.2.1 \u2018SUBDIRS\u2019 vs. \u2018DIST_SUBDIRS\u2019\n----------------------------------\n\nAutomake considers two sets of directories, defined by the variables\n\u2018SUBDIRS\u2019 and \u2018DIST_SUBDIRS\u2019.\n\n   \u2018SUBDIRS\u2019 contains the subdirectories of the current directory that\nmust be built (*note Subdirectories::).  It must be defined manually;\nAutomake will never guess a directory is to be built.  As we will see in\nthe next two sections, it is possible to define it conditionally so that\nsome directory will be omitted from the build.\n\n   \u2018DIST_SUBDIRS\u2019 is used in rules that need to recurse in all\ndirectories, even those that have been conditionally left out of the\nbuild.  Recall our example where we may not want to build subdirectory\n\u2018opt/\u2019, but yet we want to distribute it?  This is where \u2018DIST_SUBDIRS\u2019\ncomes into play: \u2018opt\u2019 may not appear in \u2018SUBDIRS\u2019, but it must appear\nin \u2018DIST_SUBDIRS\u2019.\n\n   Precisely, \u2018DIST_SUBDIRS\u2019 is used by \u2018make maintainer-clean\u2019, \u2018make\ndistclean\u2019 and \u2018make dist\u2019.  All other recursive rules use \u2018SUBDIRS\u2019.\n\n   If \u2018SUBDIRS\u2019 is defined conditionally using Automake conditionals,\nAutomake will define \u2018DIST_SUBDIRS\u2019 automatically from the possible\nvalues of \u2018SUBDIRS\u2019 in all conditions.\n\n   If \u2018SUBDIRS\u2019 contains \u2018AC_SUBST\u2019 variables, \u2018DIST_SUBDIRS\u2019 will not\nbe defined correctly because Automake does not know the possible values\nof these variables.  In this case \u2018DIST_SUBDIRS\u2019 needs to be defined\nmanually.\n\n\u001f\nFile: automake.info,  Node: Subdirectories with AM_CONDITIONAL,  Next: Subdirectories with AC_SUBST,  Prev: SUBDIRS vs DIST_SUBDIRS,  Up: Conditional Subdirectories\n\n7.2.2 Subdirectories with \u2018AM_CONDITIONAL\u2019\n------------------------------------------\n\n\u2018configure\u2019 should output the \u2018Makefile\u2019 for each directory and define a\ncondition into which \u2018opt/\u2019 should be built.\n\n     ...\n     AM_CONDITIONAL([COND_OPT], [test \"$want_opt\" = yes])\n     AC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])\n     ...\n\n   Then \u2018SUBDIRS\u2019 can be defined in the top-level \u2018Makefile.am\u2019 as\nfollows.\n\n     if COND_OPT\n       MAYBE_OPT = opt\n     endif\n     SUBDIRS = src $(MAYBE_OPT)\n\n   As you can see, running \u2018make\u2019 will rightly recurse into \u2018src/\u2019 and\nmaybe \u2018opt/\u2019.\n\n   As you can\u2019t see, running \u2018make dist\u2019 will recurse into both \u2018src/\u2019\nand \u2018opt/\u2019 directories because \u2018make dist\u2019, unlike \u2018make all\u2019, doesn\u2019t\nuse the \u2018SUBDIRS\u2019 variable.  It uses the \u2018DIST_SUBDIRS\u2019 variable.\n\n   In this case Automake will define \u2018DIST_SUBDIRS = src opt\u2019\nautomatically because it knows that \u2018MAYBE_OPT\u2019 can contain \u2018opt\u2019 in\nsome condition.\n\n\u001f\nFile: automake.info,  Node: Subdirectories with AC_SUBST,  Next: Unconfigured Subdirectories,  Prev: Subdirectories with AM_CONDITIONAL,  Up: Conditional Subdirectories\n\n7.2.3 Subdirectories with \u2018AC_SUBST\u2019\n------------------------------------\n\nAnother possibility is to define \u2018MAYBE_OPT\u2019 from \u2018./configure\u2019 using\n\u2018AC_SUBST\u2019:\n\n     ...\n     if test \"$want_opt\" = yes; then\n       MAYBE_OPT=opt\n     else\n       MAYBE_OPT=\n     fi\n     AC_SUBST([MAYBE_OPT])\n     AC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])\n     ...\n\n   In this case the top-level \u2018Makefile.am\u2019 should look as follows.\n\n     SUBDIRS = src $(MAYBE_OPT)\n     DIST_SUBDIRS = src opt\n\n   The drawback is that since Automake cannot guess what the possible\nvalues of \u2018MAYBE_OPT\u2019 are, it is necessary to define \u2018DIST_SUBDIRS\u2019.\n\n\u001f\nFile: automake.info,  Node: Unconfigured Subdirectories,  Prev: Subdirectories with AC_SUBST,  Up: Conditional Subdirectories\n\n7.2.4 Unconfigured Subdirectories\n---------------------------------\n\nThe semantics of \u2018DIST_SUBDIRS\u2019 are often misunderstood by some users\nthat try to _configure and build_ subdirectories conditionally.  Here by\nconfiguring we mean creating the \u2018Makefile\u2019 (it might also involve\nrunning a nested \u2018configure\u2019 script: this is a costly operation that\nexplains why people want to do it conditionally, but only the \u2018Makefile\u2019\nis relevant to the discussion).\n\n   The above examples all assume that every \u2018Makefile\u2019 is created, even\nin directories that are not going to be built.  The simple reason is\nthat we want \u2018make dist\u2019 to distribute even the directories that are not\nbeing built (e.g., platform-dependent code), hence \u2018make dist\u2019 must\nrecurse into the subdirectory, hence this directory must be configured\nand appear in \u2018DIST_SUBDIRS\u2019.\n\n   Building packages that do not configure every subdirectory is a\ntricky business, and we do not recommend it to the novice as it is easy\nto produce an incomplete tarball by mistake.  We will not discuss this\ntopic in depth here, yet for the adventurous here are a few rules to\nremember.\n\n   \u2022 \u2018SUBDIRS\u2019 should always be a subset of \u2018DIST_SUBDIRS\u2019.\n\n     It makes little sense to have a directory in \u2018SUBDIRS\u2019 that is not\n     in \u2018DIST_SUBDIRS\u2019.  Think of the former as a way to tell which\n     directories listed in the latter should be built.\n   \u2022 Any directory listed in \u2018DIST_SUBDIRS\u2019 and \u2018SUBDIRS\u2019 must be\n     configured.\n\n     I.e., the \u2018Makefile\u2019 must exist or the recursive \u2018make\u2019 rules will\n     not be able to process the directory.\n   \u2022 Any configured directory must be listed in \u2018DIST_SUBDIRS\u2019.\n\n     This is so the cleaning rules remove the generated \u2018Makefile\u2019s.  It\n     would be correct to see \u2018DIST_SUBDIRS\u2019 as a variable that lists all\n     the directories that have been configured.\n\n   In order to prevent recursion in some unconfigured directory you must\ntherefore ensure that this directory does not appear in \u2018DIST_SUBDIRS\u2019\n(and \u2018SUBDIRS\u2019).  For instance, if you define \u2018SUBDIRS\u2019 conditionally\nusing \u2018AC_SUBST\u2019 and do not define \u2018DIST_SUBDIRS\u2019 explicitly, it will be\ndefault to \u2018$(SUBDIRS)\u2019; another possibility is to force \u2018DIST_SUBDIRS =\n$(SUBDIRS)\u2019.\n\n   Of course, directories that are omitted from \u2018DIST_SUBDIRS\u2019 will not\nbe distributed unless you make other arrangements for this to happen\n(for instance, always running \u2018make dist\u2019 in a configuration where all\ndirectories are known to appear in \u2018DIST_SUBDIRS\u2019; or writing a\n\u2018dist-hook\u2019 target to distribute these directories).\n\n   In a few packages, unconfigured directories are not even expected to\nbe distributed.  Although these packages do not require the\naforementioned extra arrangements, there is another pitfall.  If the\nname of a directory appears in \u2018SUBDIRS\u2019 or \u2018DIST_SUBDIRS\u2019, \u2018automake\u2019\nwill make sure the directory exists.  Consequently \u2018automake\u2019 cannot be\nrun on such a distribution when one directory has been omitted.  One way\nto avoid this check is to use the \u2018AC_SUBST\u2019 method to declare\nconditional directories; since \u2018automake\u2019 does not know the values of\n\u2018AC_SUBST\u2019 variables it cannot ensure the corresponding directory\nexists.\n\n\u001f\nFile: automake.info,  Node: Alternative,  Next: Subpackages,  Prev: Conditional Subdirectories,  Up: Directories\n\n7.3 An Alternative Approach to Subdirectories\n=============================================\n\nIf you\u2019ve ever read Peter Miller\u2019s excellent paper, \u2018Recursive Make\nConsidered Harmful\u2019, the preceding sections on the use of make recursion\nwill probably come as unwelcome advice.  For those who haven\u2019t read the\npaper, Miller\u2019s main thesis is that recursive \u2018make\u2019 invocations are\nboth slow and error-prone.\n\n   Automake provides sufficient cross-directory support (1) to enable\nyou to write a single \u2018Makefile.am\u2019 for a complex multi-directory\npackage.\n\n   By default an installable file specified in a subdirectory will have\nits directory name stripped before installation.  For instance, in this\nexample, the header file will be installed as \u2018$(includedir)/stdio.h\u2019:\n\n     include_HEADERS = inc/stdio.h\n\n   However, the \u2018nobase_\u2019 prefix can be used to circumvent this path\nstripping.  In this example, the header file will be installed as\n\u2018$(includedir)/sys/types.h\u2019:\n\n     nobase_include_HEADERS = sys/types.h\n\n   \u2018nobase_\u2019 should be specified first when used in conjunction with\neither \u2018dist_\u2019 or \u2018nodist_\u2019 (*note Fine-grained Distribution Control::).\nFor instance:\n\n     nobase_dist_pkgdata_DATA = images/vortex.pgm sounds/whirl.ogg\n\n   Finally, note that a variable using the \u2018nobase_\u2019 prefix can often be\nreplaced by several variables, one for each destination directory (*note\nUniform::).  For instance, the last example could be rewritten as\nfollows:\n\n     imagesdir = $(pkgdatadir)/images\n     soundsdir = $(pkgdatadir)/sounds\n     dist_images_DATA = images/vortex.pgm\n     dist_sounds_DATA = sounds/whirl.ogg\n\nThis latter syntax makes it possible to change one destination directory\nwithout changing the layout of the source tree.\n\n   Currently, \u2018nobase_*_LTLIBRARIES\u2019 are the only exception to this\nrule, in that there is no particular installation order guarantee for an\notherwise equivalent set of variables without \u2018nobase_\u2019 prefix.\n\n   ---------- Footnotes ----------\n\n   (1) We believe.  This work is new and there are probably warts.\n*Note Introduction::, for information on reporting bugs.\n\n\u001f\nFile: automake.info,  Node: Subpackages,  Prev: Alternative,  Up: Directories\n\n7.4 Nesting Packages\n====================\n\nIn the GNU Build System, packages can be nested to arbitrary depth.\nThis means that a package can embed other packages with their own\n\u2018configure\u2019, \u2018Makefile\u2019s, etc.\n\n   These other packages should just appear as subdirectories of their\nparent package.  They must be listed in \u2018SUBDIRS\u2019 like other ordinary\ndirectories.  However the subpackage\u2019s \u2018Makefile\u2019s should be output by\nits own \u2018configure\u2019 script, not by the parent\u2019s \u2018configure\u2019.  This is\nachieved using the \u2018AC_CONFIG_SUBDIRS\u2019 Autoconf macro (*note\nAC_CONFIG_SUBDIRS: (autoconf)Subdirectories.).\n\n   Here is an example package for an \u2018arm\u2019 program that links with a\n\u2018hand\u2019 library that is a nested package in subdirectory \u2018hand/\u2019.\n\n   \u2018arm\u2019\u2019s \u2018configure.ac\u2019:\n\n     AC_INIT([arm], [1.0])\n     AC_CONFIG_AUX_DIR([.])\n     AM_INIT_AUTOMAKE\n     AC_PROG_CC\n     AC_CONFIG_FILES([Makefile])\n     # Call hand's ./configure script recursively.\n     AC_CONFIG_SUBDIRS([hand])\n     AC_OUTPUT\n\n   \u2018arm\u2019\u2019s \u2018Makefile.am\u2019:\n\n     # Build the library in the hand subdirectory first.\n     SUBDIRS = hand\n\n     # Include hand's header when compiling this directory.\n     AM_CPPFLAGS = -I$(srcdir)/hand\n\n     bin_PROGRAMS = arm\n     arm_SOURCES = arm.c\n     # link with the hand library.\n     arm_LDADD = hand/libhand.a\n\n   Now here is \u2018hand\u2019\u2019s \u2018hand/configure.ac\u2019:\n\n     AC_INIT([hand], [1.2])\n     AC_CONFIG_AUX_DIR([.])\n     AM_INIT_AUTOMAKE\n     AC_PROG_CC\n     AM_PROG_AR\n     AC_PROG_RANLIB\n     AC_CONFIG_FILES([Makefile])\n     AC_OUTPUT\n\nand its \u2018hand/Makefile.am\u2019:\n\n     lib_LIBRARIES = libhand.a\n     libhand_a_SOURCES = hand.c\n\n   When \u2018make dist\u2019 is run from the top-level directory it will create\nan archive \u2018arm-1.0.tar.gz\u2019 that contains the \u2018arm\u2019 code as well as the\n\u2018hand\u2019 subdirectory.  This package can be built and installed like any\nordinary package, with the usual \u2018./configure && make && make install\u2019\nsequence (the \u2018hand\u2019 subpackage will be built and installed by the\nprocess).\n\n   When \u2018make dist\u2019 is run from the hand directory, it will create a\nself-contained \u2018hand-1.2.tar.gz\u2019 archive.  So although it appears to be\nembedded in another package, it can still be used separately.\n\n   The purpose of the \u2018AC_CONFIG_AUX_DIR([.])\u2019 instruction is to force\nAutomake and Autoconf to search for auxiliary scripts in the current\ndirectory.  For instance, this means that there will be two copies of\n\u2018install-sh\u2019: one in the top-level of the \u2018arm\u2019 package, and another one\nin the \u2018hand/\u2019 subdirectory for the \u2018hand\u2019 package.\n\n   The historical default is to search for these auxiliary scripts in\nthe parent directory and the grandparent directory.  So if the\n\u2018AC_CONFIG_AUX_DIR([.])\u2019 line was removed from \u2018hand/configure.ac\u2019, that\nsubpackage would share the auxiliary script of the \u2018arm\u2019 package.  This\nmay look like a gain in size (a few kilobytes), but it is actually a\nloss of modularity as the \u2018hand\u2019 subpackage is no longer self-contained\n(\u2018make dist\u2019 in the subdirectory will not work anymore).\n\n   Packages that do not use Automake need more work to be integrated\nthis way.  *Note Third-Party Makefiles::.\n\n\u001f\nFile: automake.info,  Node: Programs,  Next: Other Objects,  Prev: Directories,  Up: Top\n\n8 Building Programs and Libraries\n*********************************\n\nA large part of Automake\u2019s functionality is dedicated to making it easy\nto build programs and libraries.\n\n* Menu:\n\n* A Program::                   Building a program\n* A Library::                   Building a library\n* A Shared Library::            Building a Libtool library\n* Program and Library Variables::  Variables controlling program and\n                                library builds\n* Default _SOURCES::            Default source files\n* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA\n* Program Variables::           Variables used when building a program\n* Yacc and Lex::                Yacc and Lex support\n* C++ Support::                 Compiling C++ sources\n* Objective C Support::         Compiling Objective C sources\n* Objective C++ Support::       Compiling Objective C++ sources\n* Unified Parallel C Support::  Compiling Unified Parallel C sources\n* Assembly Support::            Compiling assembly sources\n* Fortran 77 Support::          Compiling Fortran 77 sources\n* Fortran 9x Support::          Compiling Fortran 9x sources\n* Java Support with gcj::       Compiling Java sources using gcj\n* Vala Support::                Compiling Vala sources\n* Support for Other Languages::  Compiling other languages\n* Dependencies::                Automatic dependency tracking\n* EXEEXT::                      Support for executable extensions\n\n\u001f\nFile: automake.info,  Node: A Program,  Next: A Library,  Up: Programs\n\n8.1 Building a program\n======================\n\nIn order to build a program, you need to tell Automake which sources are\npart of it, and which libraries it should be linked with.\n\n   This section also covers conditional compilation of sources or\nprograms.  Most of the comments about these also apply to libraries\n(*note A Library::) and libtool libraries (*note A Shared Library::).\n\n* Menu:\n\n* Program Sources::             Defining program sources\n* Linking::                     Linking with libraries or extra objects\n* Conditional Sources::         Handling conditional sources\n* Conditional Programs::        Building a program conditionally\n\n\u001f\nFile: automake.info,  Node: Program Sources,  Next: Linking,  Up: A Program\n\n8.1.1 Defining program sources\n------------------------------\n\nIn a directory containing source that gets built into a program (as\nopposed to a library or a script), the \u2018PROGRAMS\u2019 primary is used.\nPrograms can be installed in \u2018bindir\u2019, \u2018sbindir\u2019, \u2018libexecdir\u2019,\n\u2018pkglibexecdir\u2019, or not at all (\u2018noinst_\u2019).  They can also be built only\nfor \u2018make check\u2019, in which case the prefix is \u2018check_\u2019.\n\n   For instance:\n\n     bin_PROGRAMS = hello\n\n   In this simple case, the resulting \u2018Makefile.in\u2019 will contain code to\ngenerate a program named \u2018hello\u2019.\n\n   Associated with each program are several assisting variables that are\nnamed after the program.  These variables are all optional, and have\nreasonable defaults.  Each variable, its use, and default is spelled out\nbelow; we use the \u201chello\u201d example throughout.\n\n   The variable \u2018hello_SOURCES\u2019 is used to specify which source files\nget built into an executable:\n\n     hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h\n\n   This causes each mentioned \u2018.c\u2019 file to be compiled into the\ncorresponding \u2018.o\u2019.  Then all are linked to produce \u2018hello\u2019.\n\n   If \u2018hello_SOURCES\u2019 is not specified, then it defaults to the single\nfile \u2018hello.c\u2019 (*note Default _SOURCES::).\n\n   Multiple programs can be built in a single directory.  Multiple\nprograms can share a single source file, which must be listed in each\n\u2018_SOURCES\u2019 definition.\n\n   Header files listed in a \u2018_SOURCES\u2019 definition will be included in\nthe distribution but otherwise ignored.  In case it isn\u2019t obvious, you\nshould not include the header file generated by \u2018configure\u2019 in a\n\u2018_SOURCES\u2019 variable; this file should not be distributed.  Lex (\u2018.l\u2019)\nand Yacc (\u2018.y\u2019) files can also be listed; see *note Yacc and Lex::.\n\n\u001f\nFile: automake.info,  Node: Linking,  Next: Conditional Sources,  Prev: Program Sources,  Up: A Program\n\n8.1.2 Linking the program\n-------------------------\n\nIf you need to link against libraries that are not found by \u2018configure\u2019,\nyou can use \u2018LDADD\u2019 to do so.  This variable is used to specify\nadditional objects or libraries to link with; it is inappropriate for\nspecifying specific linker flags; you should use \u2018AM_LDFLAGS\u2019 for this\npurpose.\n\n   Sometimes, multiple programs are built in one directory but do not\nshare the same link-time requirements.  In this case, you can use the\n\u2018PROG_LDADD\u2019 variable (where PROG is the name of the program as it\nappears in some \u2018_PROGRAMS\u2019 variable, and usually written in lowercase)\nto override \u2018LDADD\u2019.  If this variable exists for a given program, then\nthat program is not linked using \u2018LDADD\u2019.\n\n   For instance, in GNU cpio, \u2018pax\u2019, \u2018cpio\u2019 and \u2018mt\u2019 are linked against\nthe library \u2018libcpio.a\u2019.  However, \u2018rmt\u2019 is built in the same directory,\nand has no such link requirement.  Also, \u2018mt\u2019 and \u2018rmt\u2019 are only built\non certain architectures.  Here is what cpio\u2019s \u2018src/Makefile.am\u2019 looks\nlike (abridged):\n\n     bin_PROGRAMS = cpio pax $(MT)\n     libexec_PROGRAMS = $(RMT)\n     EXTRA_PROGRAMS = mt rmt\n\n     LDADD = ../lib/libcpio.a $(INTLLIBS)\n     rmt_LDADD =\n\n     cpio_SOURCES = ...\n     pax_SOURCES = ...\n     mt_SOURCES = ...\n     rmt_SOURCES = ...\n\n   \u2018PROG_LDADD\u2019 is inappropriate for passing program-specific linker\nflags (except for \u2018-l\u2019, \u2018-L\u2019, \u2018-dlopen\u2019 and \u2018-dlpreopen\u2019).  So, use the\n\u2018PROG_LDFLAGS\u2019 variable for this purpose.\n\n   It is also occasionally useful to have a program depend on some other\ntarget that is not actually part of that program.  This can be done\nusing either the \u2018PROG_DEPENDENCIES\u2019 or the \u2018EXTRA_PROG_DEPENDENCIES\u2019\nvariable.  Each program depends on the contents both variables, but no\nfurther interpretation is done.\n\n   Since these dependencies are associated to the link rule used to\ncreate the programs they should normally list files used by the link\ncommand.  That is \u2018*.$(OBJEXT)\u2019, \u2018*.a\u2019, or \u2018*.la\u2019 files.  In rare cases\nyou may need to add other kinds of files such as linker scripts, but\n_listing a source file in \u2018_DEPENDENCIES\u2019 is wrong_.  If some source\nfile needs to be built before all the components of a program are built,\nconsider using the \u2018BUILT_SOURCES\u2019 variable instead (*note Sources::).\n\n   If \u2018PROG_DEPENDENCIES\u2019 is not supplied, it is computed by Automake.\nThe automatically-assigned value is the contents of \u2018PROG_LDADD\u2019, with\nmost configure substitutions, \u2018-l\u2019, \u2018-L\u2019, \u2018-dlopen\u2019 and \u2018-dlpreopen\u2019\noptions removed.  The configure substitutions that are left in are only\n\u2018$(LIBOBJS)\u2019 and \u2018$(ALLOCA)\u2019; these are left because it is known that\nthey will not cause an invalid value for \u2018PROG_DEPENDENCIES\u2019 to be\ngenerated.\n\n   *note Conditional Sources:: shows a situation where \u2018_DEPENDENCIES\u2019\nmay be used.\n\n   The \u2018EXTRA_PROG_DEPENDENCIES\u2019 may be useful for cases where you\nmerely want to augment the \u2018automake\u2019-generated \u2018PROG_DEPENDENCIES\u2019\nrather than replacing it.\n\n   We recommend that you avoid using \u2018-l\u2019 options in \u2018LDADD\u2019 or\n\u2018PROG_LDADD\u2019 when referring to libraries built by your package.\nInstead, write the file name of the library explicitly as in the above\n\u2018cpio\u2019 example.  Use \u2018-l\u2019 only to list third-party libraries.  If you\nfollow this rule, the default value of \u2018PROG_DEPENDENCIES\u2019 will list all\nyour local libraries and omit the other ones.\n\n\u001f\nFile: automake.info,  Node: Conditional Sources,  Next: Conditional Programs,  Prev: Linking,  Up: A Program\n\n8.1.3 Conditional compilation of sources\n----------------------------------------\n\nYou can\u2019t put a configure substitution (e.g., \u2018@FOO@\u2019 or \u2018$(FOO)\u2019 where\n\u2018FOO\u2019 is defined via \u2018AC_SUBST\u2019) into a \u2018_SOURCES\u2019 variable.  The reason\nfor this is a bit hard to explain, but suffice to say that it simply\nwon\u2019t work.  Automake will give an error if you try to do this.\n\n   Fortunately there are two other ways to achieve the same result.  One\nis to use configure substitutions in \u2018_LDADD\u2019 variables, the other is to\nuse an Automake conditional.\n\nConditional Compilation using \u2018_LDADD\u2019 Substitutions\n....................................................\n\nAutomake must know all the source files that could possibly go into a\nprogram, even if not all the files are built in every circumstance.  Any\nfiles that are only conditionally built should be listed in the\nappropriate \u2018EXTRA_\u2019 variable.  For instance, if \u2018hello-linux.c\u2019 or\n\u2018hello-generic.c\u2019 were conditionally included in \u2018hello\u2019, the\n\u2018Makefile.am\u2019 would contain:\n\n     bin_PROGRAMS = hello\n     hello_SOURCES = hello-common.c\n     EXTRA_hello_SOURCES = hello-linux.c hello-generic.c\n     hello_LDADD = $(HELLO_SYSTEM)\n     hello_DEPENDENCIES = $(HELLO_SYSTEM)\n\nYou can then set up the \u2018$(HELLO_SYSTEM)\u2019 substitution from\n\u2018configure.ac\u2019:\n\n     ...\n     case $host in\n       *linux*) HELLO_SYSTEM='hello-linux.$(OBJEXT)' ;;\n       *)       HELLO_SYSTEM='hello-generic.$(OBJEXT)' ;;\n     esac\n     AC_SUBST([HELLO_SYSTEM])\n     ...\n\n   In this case, the variable \u2018HELLO_SYSTEM\u2019 should be replaced by\neither \u2018hello-linux.o\u2019 or \u2018hello-generic.o\u2019, and added to both\n\u2018hello_DEPENDENCIES\u2019 and \u2018hello_LDADD\u2019 in order to be built and linked\nin.\n\nConditional Compilation using Automake Conditionals\n...................................................\n\nAn often simpler way to compile source files conditionally is to use\nAutomake conditionals.  For instance, you could use this \u2018Makefile.am\u2019\nconstruct to build the same \u2018hello\u2019 example:\n\n     bin_PROGRAMS = hello\n     if LINUX\n     hello_SOURCES = hello-linux.c hello-common.c\n     else\n     hello_SOURCES = hello-generic.c hello-common.c\n     endif\n\n   In this case, \u2018configure.ac\u2019 should set up the \u2018LINUX\u2019 conditional\nusing \u2018AM_CONDITIONAL\u2019 (*note Conditionals::).\n\n   When using conditionals like this you don\u2019t need to use the \u2018EXTRA_\u2019\nvariable, because Automake will examine the contents of each variable to\nconstruct the complete list of source files.\n\n   If your program uses a lot of files, you will probably prefer a\nconditional \u2018+=\u2019.\n\n     bin_PROGRAMS = hello\n     hello_SOURCES = hello-common.c\n     if LINUX\n     hello_SOURCES += hello-linux.c\n     else\n     hello_SOURCES += hello-generic.c\n     endif\n\n\u001f\nFile: automake.info,  Node: Conditional Programs,  Prev: Conditional Sources,  Up: A Program\n\n8.1.4 Conditional compilation of programs\n-----------------------------------------\n\nSometimes it is useful to determine the programs that are to be built at\nconfigure time.  For instance, GNU \u2018cpio\u2019 only builds \u2018mt\u2019 and \u2018rmt\u2019\nunder special circumstances.  The means to achieve conditional\ncompilation of programs are the same you can use to compile source files\nconditionally: substitutions or conditionals.\n\nConditional Programs using \u2018configure\u2019 Substitutions\n....................................................\n\nIn this case, you must notify Automake of all the programs that can\npossibly be built, but at the same time cause the generated\n\u2018Makefile.in\u2019 to use the programs specified by \u2018configure\u2019.  This is\ndone by having \u2018configure\u2019 substitute values into each \u2018_PROGRAMS\u2019\ndefinition, while listing all optionally built programs in\n\u2018EXTRA_PROGRAMS\u2019.\n\n     bin_PROGRAMS = cpio pax $(MT)\n     libexec_PROGRAMS = $(RMT)\n     EXTRA_PROGRAMS = mt rmt\n\n   As explained in *note EXEEXT::, Automake will rewrite \u2018bin_PROGRAMS\u2019,\n\u2018libexec_PROGRAMS\u2019, and \u2018EXTRA_PROGRAMS\u2019, appending \u2018$(EXEEXT)\u2019 to each\nbinary.  Obviously it cannot rewrite values obtained at run-time through\n\u2018configure\u2019 substitutions, therefore you should take care of appending\n\u2018$(EXEEXT)\u2019 yourself, as in \u2018AC_SUBST([MT], ['mt${EXEEXT}'])\u2019.\n\nConditional Programs using Automake Conditionals\n................................................\n\nYou can also use Automake conditionals (*note Conditionals::) to select\nprograms to be built.  In this case you don\u2019t have to worry about\n\u2018$(EXEEXT)\u2019 or \u2018EXTRA_PROGRAMS\u2019.\n\n     bin_PROGRAMS = cpio pax\n     if WANT_MT\n       bin_PROGRAMS += mt\n     endif\n     if WANT_RMT\n       libexec_PROGRAMS = rmt\n     endif\n\n\u001f\nFile: automake.info,  Node: A Library,  Next: A Shared Library,  Prev: A Program,  Up: Programs\n\n8.2 Building a library\n======================\n\nBuilding a library is much like building a program.  In this case, the\nname of the primary is \u2018LIBRARIES\u2019.  Libraries can be installed in\n\u2018libdir\u2019 or \u2018pkglibdir\u2019.\n\n   *Note A Shared Library::, for information on how to build shared\nlibraries using libtool and the \u2018LTLIBRARIES\u2019 primary.\n\n   Each \u2018_LIBRARIES\u2019 variable is a list of the libraries to be built.\nFor instance, to create a library named \u2018libcpio.a\u2019, but not install it,\nyou would write:\n\n     noinst_LIBRARIES = libcpio.a\n     libcpio_a_SOURCES = ...\n\n   The sources that go into a library are determined exactly as they are\nfor programs, via the \u2018_SOURCES\u2019 variables.  Note that the library name\nis canonicalized (*note Canonicalization::), so the \u2018_SOURCES\u2019 variable\ncorresponding to \u2018libcpio.a\u2019 is \u2018libcpio_a_SOURCES\u2019, not\n\u2018libcpio.a_SOURCES\u2019.\n\n   Extra objects can be added to a library using the \u2018LIBRARY_LIBADD\u2019\nvariable.  This should be used for objects determined by \u2018configure\u2019.\nAgain from \u2018cpio\u2019:\n\n     libcpio_a_LIBADD = $(LIBOBJS) $(ALLOCA)\n\n   In addition, sources for extra objects that will not exist until\nconfigure-time must be added to the \u2018BUILT_SOURCES\u2019 variable (*note\nSources::).\n\n   Building a static library is done by compiling all object files, then\nby invoking \u2018$(AR) $(ARFLAGS)\u2019 followed by the name of the library and\nthe list of objects, and finally by calling \u2018$(RANLIB)\u2019 on that library.\nYou should call \u2018AC_PROG_RANLIB\u2019 from your \u2018configure.ac\u2019 to define\n\u2018RANLIB\u2019 (Automake will complain otherwise).  You should also call\n\u2018AM_PROG_AR\u2019 to define \u2018AR\u2019, in order to support unusual archivers such\nas Microsoft lib.  \u2018ARFLAGS\u2019 will default to \u2018cru\u2019; you can override\nthis variable by setting it in your \u2018Makefile.am\u2019 or by \u2018AC_SUBST\u2019ing it\nfrom your \u2018configure.ac\u2019.  You can override the \u2018AR\u2019 variable by\ndefining a per-library \u2018maude_AR\u2019 variable (*note Program and Library\nVariables::).\n\n   Be careful when selecting library components conditionally.  Because\nbuilding an empty library is not portable, you should ensure that any\nlibrary always contains at least one object.\n\n   To use a static library when building a program, add it to \u2018LDADD\u2019\nfor this program.  In the following example, the program \u2018cpio\u2019 is\nstatically linked with the library \u2018libcpio.a\u2019.\n\n     noinst_LIBRARIES = libcpio.a\n     libcpio_a_SOURCES = ...\n\n     bin_PROGRAMS = cpio\n     cpio_SOURCES = cpio.c ...\n     cpio_LDADD = libcpio.a\n\n\u001f\nFile: automake.info,  Node: A Shared Library,  Next: Program and Library Variables,  Prev: A Library,  Up: Programs\n\n8.3 Building a Shared Library\n=============================\n\nBuilding shared libraries portably is a relatively complex matter.  For\nthis reason, GNU Libtool (*note Introduction: (libtool)Top.) was created\nto help build shared libraries in a platform-independent way.\n\n* Menu:\n\n* Libtool Concept::             Introducing Libtool\n* Libtool Libraries::           Declaring Libtool Libraries\n* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally\n* Conditional Libtool Sources::  Choosing Library Sources Conditionally\n* Libtool Convenience Libraries::  Building Convenience Libtool Libraries\n* Libtool Modules::             Building Libtool Modules\n* Libtool Flags::               Using _LIBADD, _LDFLAGS, and _LIBTOOLFLAGS\n* LTLIBOBJS::                   Using $(LTLIBOBJS) and $(LTALLOCA)\n* Libtool Issues::              Common Issues Related to Libtool\u2019s Use\n\n\u001f\nFile: automake.info,  Node: Libtool Concept,  Next: Libtool Libraries,  Up: A Shared Library\n\n8.3.1 The Libtool Concept\n-------------------------\n\nLibtool abstracts shared and static libraries into a unified concept\nhenceforth called \u201clibtool libraries\u201d.  Libtool libraries are files\nusing the \u2018.la\u2019 suffix, and can designate a static library, a shared\nlibrary, or maybe both.  Their exact nature cannot be determined until\n\u2018./configure\u2019 is run: not all platforms support all kinds of libraries,\nand users can explicitly select which libraries should be built.\n(However the package\u2019s maintainers can tune the default; *note The\n\u2018LT_INIT\u2019 macro: (libtool)LT_INIT.)\n\n   Because object files for shared and static libraries must be compiled\ndifferently, libtool is also used during compilation.  Object files\nbuilt by libtool are called \u201clibtool objects\u201d: these are files using the\n\u2018.lo\u2019 suffix.  Libtool libraries are built from these libtool objects.\n\n   You should not assume anything about the structure of \u2018.la\u2019 or \u2018.lo\u2019\nfiles and how libtool constructs them: this is libtool\u2019s concern, and\nthe last thing one wants is to learn about libtool\u2019s guts.  However the\nexistence of these files matters, because they are used as targets and\ndependencies in \u2018Makefile\u2019s\u2019 rules when building libtool libraries.\nThere are situations where you may have to refer to these, for instance\nwhen expressing dependencies for building source files conditionally\n(*note Conditional Libtool Sources::).\n\n   People considering writing a plug-in system, with dynamically loaded\nmodules, should look into \u2018libltdl\u2019: libtool\u2019s dlopening library (*note\nUsing libltdl: (libtool)Using libltdl.).  This offers a portable\ndlopening facility to load libtool libraries dynamically, and can also\nachieve static linking where unavoidable.\n\n   Before we discuss how to use libtool with Automake in detail, it\nshould be noted that the libtool manual also has a section about how to\nuse Automake with libtool (*note Using Automake with Libtool:\n(libtool)Using Automake.).\n\n\u001f\nFile: automake.info,  Node: Libtool Libraries,  Next: Conditional Libtool Libraries,  Prev: Libtool Concept,  Up: A Shared Library\n\n8.3.2 Building Libtool Libraries\n--------------------------------\n\nAutomake uses libtool to build libraries declared with the \u2018LTLIBRARIES\u2019\nprimary.  Each \u2018_LTLIBRARIES\u2019 variable is a list of libtool libraries to\nbuild.  For instance, to create a libtool library named \u2018libgettext.la\u2019,\nand install it in \u2018libdir\u2019, write:\n\n     lib_LTLIBRARIES = libgettext.la\n     libgettext_la_SOURCES = gettext.c gettext.h ...\n\n   Automake predefines the variable \u2018pkglibdir\u2019, so you can use\n\u2018pkglib_LTLIBRARIES\u2019 to install libraries in \u2018$(libdir)/@PACKAGE@/\u2019.\n\n   If \u2018gettext.h\u2019 is a public header file that needs to be installed in\norder for people to use the library, it should be declared using a\n\u2018_HEADERS\u2019 variable, not in \u2018libgettext_la_SOURCES\u2019.  Headers listed in\nthe latter should be internal headers that are not part of the public\ninterface.\n\n     lib_LTLIBRARIES = libgettext.la\n     libgettext_la_SOURCES = gettext.c ...\n     include_HEADERS = gettext.h ...\n\n   A package can build and install such a library along with other\nprograms that use it.  This dependency should be specified using\n\u2018LDADD\u2019.  The following example builds a program named \u2018hello\u2019 that is\nlinked with \u2018libgettext.la\u2019.\n\n     lib_LTLIBRARIES = libgettext.la\n     libgettext_la_SOURCES = gettext.c ...\n\n     bin_PROGRAMS = hello\n     hello_SOURCES = hello.c ...\n     hello_LDADD = libgettext.la\n\nWhether \u2018hello\u2019 is statically or dynamically linked with \u2018libgettext.la\u2019\nis not yet known: this will depend on the configuration of libtool and\nthe capabilities of the host.\n\n\u001f\nFile: automake.info,  Node: Conditional Libtool Libraries,  Next: Conditional Libtool Sources,  Prev: Libtool Libraries,  Up: A Shared Library\n\n8.3.3 Building Libtool Libraries Conditionally\n----------------------------------------------\n\nLike conditional programs (*note Conditional Programs::), there are two\nmain ways to build conditional libraries: using Automake conditionals or\nusing Autoconf \u2018AC_SUBST\u2019itutions.\n\n   The important implementation detail you have to be aware of is that\nthe place where a library will be installed matters to libtool: it needs\nto be indicated _at link-time_ using the \u2018-rpath\u2019 option.\n\n   For libraries whose destination directory is known when Automake\nruns, Automake will automatically supply the appropriate \u2018-rpath\u2019 option\nto libtool.  This is the case for libraries listed explicitly in some\ninstallable \u2018_LTLIBRARIES\u2019 variables such as \u2018lib_LTLIBRARIES\u2019.\n\n   However, for libraries determined at configure time (and thus\nmentioned in \u2018EXTRA_LTLIBRARIES\u2019), Automake does not know the final\ninstallation directory.  For such libraries you must add the \u2018-rpath\u2019\noption to the appropriate \u2018_LDFLAGS\u2019 variable by hand.\n\n   The examples below illustrate the differences between these two\nmethods.\n\n   Here is an example where \u2018WANTEDLIBS\u2019 is an \u2018AC_SUBST\u2019ed variable set\nat \u2018./configure\u2019-time to either \u2018libfoo.la\u2019, \u2018libbar.la\u2019, both, or none.\nAlthough \u2018$(WANTEDLIBS)\u2019 appears in the \u2018lib_LTLIBRARIES\u2019, Automake\ncannot guess it relates to \u2018libfoo.la\u2019 or \u2018libbar.la\u2019 at the time it\ncreates the link rule for these two libraries.  Therefore the \u2018-rpath\u2019\nargument must be explicitly supplied.\n\n     EXTRA_LTLIBRARIES = libfoo.la libbar.la\n     lib_LTLIBRARIES = $(WANTEDLIBS)\n     libfoo_la_SOURCES = foo.c ...\n     libfoo_la_LDFLAGS = -rpath '$(libdir)'\n     libbar_la_SOURCES = bar.c ...\n     libbar_la_LDFLAGS = -rpath '$(libdir)'\n\n   Here is how the same \u2018Makefile.am\u2019 would look using Automake\nconditionals named \u2018WANT_LIBFOO\u2019 and \u2018WANT_LIBBAR\u2019.  Now Automake is\nable to compute the \u2018-rpath\u2019 setting itself, because it\u2019s clear that\nboth libraries will end up in \u2018$(libdir)\u2019 if they are installed.\n\n     lib_LTLIBRARIES =\n     if WANT_LIBFOO\n     lib_LTLIBRARIES += libfoo.la\n     endif\n     if WANT_LIBBAR\n     lib_LTLIBRARIES += libbar.la\n     endif\n     libfoo_la_SOURCES = foo.c ...\n     libbar_la_SOURCES = bar.c ...\n\n\u001f\nFile: automake.info,  Node: Conditional Libtool Sources,  Next: Libtool Convenience Libraries,  Prev: Conditional Libtool Libraries,  Up: A Shared Library\n\n8.3.4 Libtool Libraries with Conditional Sources\n------------------------------------------------\n\nConditional compilation of sources in a library can be achieved in the\nsame way as conditional compilation of sources in a program (*note\nConditional Sources::).  The only difference is that \u2018_LIBADD\u2019 should be\nused instead of \u2018_LDADD\u2019 and that it should mention libtool objects\n(\u2018.lo\u2019 files).\n\n   So, to mimic the \u2018hello\u2019 example from *note Conditional Sources::, we\ncould build a \u2018libhello.la\u2019 library using either \u2018hello-linux.c\u2019 or\n\u2018hello-generic.c\u2019 with the following \u2018Makefile.am\u2019.\n\n     lib_LTLIBRARIES = libhello.la\n     libhello_la_SOURCES = hello-common.c\n     EXTRA_libhello_la_SOURCES = hello-linux.c hello-generic.c\n     libhello_la_LIBADD = $(HELLO_SYSTEM)\n     libhello_la_DEPENDENCIES = $(HELLO_SYSTEM)\n\nAnd make sure \u2018configure\u2019 defines \u2018HELLO_SYSTEM\u2019 as either\n\u2018hello-linux.lo\u2019 or \u2018hello-generic.lo\u2019.\n\n   Or we could simply use an Automake conditional as follows.\n\n     lib_LTLIBRARIES = libhello.la\n     libhello_la_SOURCES = hello-common.c\n     if LINUX\n     libhello_la_SOURCES += hello-linux.c\n     else\n     libhello_la_SOURCES += hello-generic.c\n     endif\n\n\u001f\nFile: automake.info,  Node: Libtool Convenience Libraries,  Next: Libtool Modules,  Prev: Conditional Libtool Sources,  Up: A Shared Library\n\n8.3.5 Libtool Convenience Libraries\n-----------------------------------\n\nSometimes you want to build libtool libraries that should not be\ninstalled.  These are called \u201clibtool convenience libraries\u201d and are\ntypically used to encapsulate many sublibraries, later gathered into one\nbig installed library.\n\n   Libtool convenience libraries are declared by directory-less\nvariables such as \u2018noinst_LTLIBRARIES\u2019, \u2018check_LTLIBRARIES\u2019, or even\n\u2018EXTRA_LTLIBRARIES\u2019.  Unlike installed libtool libraries they do not\nneed an \u2018-rpath\u2019 flag at link time (actually this is the only\ndifference).\n\n   Convenience libraries listed in \u2018noinst_LTLIBRARIES\u2019 are always\nbuilt.  Those listed in \u2018check_LTLIBRARIES\u2019 are built only upon \u2018make\ncheck\u2019.  Finally, libraries listed in \u2018EXTRA_LTLIBRARIES\u2019 are never\nbuilt explicitly: Automake outputs rules to build them, but if the\nlibrary does not appear as a Makefile dependency anywhere it won\u2019t be\nbuilt (this is why \u2018EXTRA_LTLIBRARIES\u2019 is used for conditional\ncompilation).\n\n   Here is a sample setup merging libtool convenience libraries from\nsubdirectories into one main \u2018libtop.la\u2019 library.\n\n     # -- Top-level Makefile.am --\n     SUBDIRS = sub1 sub2 ...\n     lib_LTLIBRARIES = libtop.la\n     libtop_la_SOURCES =\n     libtop_la_LIBADD = \\\n       sub1/libsub1.la \\\n       sub2/libsub2.la \\\n       ...\n\n     # -- sub1/Makefile.am --\n     noinst_LTLIBRARIES = libsub1.la\n     libsub1_la_SOURCES = ...\n\n     # -- sub2/Makefile.am --\n     # showing nested convenience libraries\n     SUBDIRS = sub2.1 sub2.2 ...\n     noinst_LTLIBRARIES = libsub2.la\n     libsub2_la_SOURCES =\n     libsub2_la_LIBADD = \\\n       sub21/libsub21.la \\\n       sub22/libsub22.la \\\n       ...\n\n   When using such a setup, beware that \u2018automake\u2019 will assume\n\u2018libtop.la\u2019 is to be linked with the C linker.  This is because\n\u2018libtop_la_SOURCES\u2019 is empty, so \u2018automake\u2019 picks C as default language.\nIf \u2018libtop_la_SOURCES\u2019 was not empty, \u2018automake\u2019 would select the linker\nas explained in *note How the Linker is Chosen::.\n\n   If one of the sublibraries contains non-C source, it is important\nthat the appropriate linker be chosen.  One way to achieve this is to\npretend that there is such a non-C file among the sources of the\nlibrary, thus forcing \u2018automake\u2019 to select the appropriate linker.  Here\nis the top-level \u2018Makefile\u2019 of our example updated to force C++ linking.\n\n     SUBDIRS = sub1 sub2 ...\n     lib_LTLIBRARIES = libtop.la\n     libtop_la_SOURCES =\n     # Dummy C++ source to cause C++ linking.\n     nodist_EXTRA_libtop_la_SOURCES = dummy.cxx\n     libtop_la_LIBADD = \\\n       sub1/libsub1.la \\\n       sub2/libsub2.la \\\n       ...\n\n   \u2018EXTRA_*_SOURCES\u2019 variables are used to keep track of source files\nthat might be compiled (this is mostly useful when doing conditional\ncompilation using \u2018AC_SUBST\u2019; *note Conditional Libtool Sources::), and\nthe \u2018nodist_\u2019 prefix means the listed sources are not to be distributed\n(*note Program and Library Variables::).  In effect the file \u2018dummy.cxx\u2019\ndoes not need to exist in the source tree.  Of course if you have some\nreal source file to list in \u2018libtop_la_SOURCES\u2019 there is no point in\ncheating with \u2018nodist_EXTRA_libtop_la_SOURCES\u2019.\n\n\u001f\nFile: automake.info,  Node: Libtool Modules,  Next: Libtool Flags,  Prev: Libtool Convenience Libraries,  Up: A Shared Library\n\n8.3.6 Libtool Modules\n---------------------\n\nThese are libtool libraries meant to be dlopened.  They are indicated to\nlibtool by passing \u2018-module\u2019 at link-time.\n\n     pkglib_LTLIBRARIES = mymodule.la\n     mymodule_la_SOURCES = doit.c\n     mymodule_la_LDFLAGS = -module\n\n   Ordinarily, Automake requires that a library\u2019s name start with \u2018lib\u2019.\nHowever, when building a dynamically loadable module you might wish to\nuse a \"nonstandard\" name.  Automake will not complain about such\nnonstandard names if it knows the library being built is a libtool\nmodule, i.e., if \u2018-module\u2019 explicitly appears in the library\u2019s\n\u2018_LDFLAGS\u2019 variable (or in the common \u2018AM_LDFLAGS\u2019 variable when no\nper-library \u2018_LDFLAGS\u2019 variable is defined).\n\n   As always, \u2018AC_SUBST\u2019 variables are black boxes to Automake since\ntheir values are not yet known when \u2018automake\u2019 is run.  Therefore if\n\u2018-module\u2019 is set via such a variable, Automake cannot notice it and will\nproceed as if the library was an ordinary libtool library, with strict\nnaming.\n\n   If \u2018mymodule_la_SOURCES\u2019 is not specified, then it defaults to the\nsingle file \u2018mymodule.c\u2019 (*note Default _SOURCES::).\n\n\u001f\nFile: automake.info,  Node: Libtool Flags,  Next: LTLIBOBJS,  Prev: Libtool Modules,  Up: A Shared Library\n\n8.3.7 \u2018_LIBADD\u2019, \u2018_LDFLAGS\u2019, and \u2018_LIBTOOLFLAGS\u2019\n------------------------------------------------\n\nAs shown in previous sections, the \u2018LIBRARY_LIBADD\u2019 variable should be\nused to list extra libtool objects (\u2018.lo\u2019 files) or libtool libraries\n(\u2018.la\u2019) to add to LIBRARY.\n\n   The \u2018LIBRARY_LDFLAGS\u2019 variable is the place to list additional\nlibtool linking flags, such as \u2018-version-info\u2019, \u2018-static\u2019, and a lot\nmore.  *Note Link mode: (libtool)Link mode.\n\n   The \u2018libtool\u2019 command has two kinds of options: mode-specific options\nand generic options.  Mode-specific options such as the aforementioned\nlinking flags should be lumped with the other flags passed to the tool\ninvoked by \u2018libtool\u2019 (hence the use of \u2018LIBRARY_LDFLAGS\u2019 for libtool\nlinking flags).  Generic options include \u2018--tag=TAG\u2019 and \u2018--silent\u2019\n(*note Invoking \u2018libtool\u2019: (libtool)Invoking libtool. for more options).\nThey should appear before the mode selection on the command line; in\n\u2018Makefile.am\u2019s they should be listed in the \u2018LIBRARY_LIBTOOLFLAGS\u2019\nvariable.\n\n   If \u2018LIBRARY_LIBTOOLFLAGS\u2019 is not defined, then the variable\n\u2018AM_LIBTOOLFLAGS\u2019 is used instead.\n\n   These flags are passed to libtool after the \u2018--tag=TAG\u2019 option\ncomputed by Automake (if any), so \u2018LIBRARY_LIBTOOLFLAGS\u2019 (or\n\u2018AM_LIBTOOLFLAGS\u2019) is a good place to override or supplement the\n\u2018--tag=TAG\u2019 setting.\n\n   The libtool rules also use a \u2018LIBTOOLFLAGS\u2019 variable that should not\nbe set in \u2018Makefile.am\u2019: this is a user variable (*note Flag Variables\nOrdering::).  It allows users to run \u2018make LIBTOOLFLAGS=--silent\u2019, for\ninstance.  Note that the verbosity of \u2018libtool\u2019 can also be influenced\nby the Automake support for silent rules (*note Automake Silent\nRules::).\n\n\u001f\nFile: automake.info,  Node: LTLIBOBJS,  Next: Libtool Issues,  Prev: Libtool Flags,  Up: A Shared Library\n\n8.3.8 \u2018LTLIBOBJS\u2019 and \u2018LTALLOCA\u2019\n--------------------------------\n\nWhere an ordinary library might include \u2018$(LIBOBJS)\u2019 or \u2018$(ALLOCA)\u2019\n(*note LIBOBJS::), a libtool library must use \u2018$(LTLIBOBJS)\u2019 or\n\u2018$(LTALLOCA)\u2019.  This is required because the object files that libtool\noperates on do not necessarily end in \u2018.o\u2019.\n\n   Nowadays, the computation of \u2018LTLIBOBJS\u2019 from \u2018LIBOBJS\u2019 is performed\nautomatically by Autoconf (*note \u2018AC_LIBOBJ\u2019 vs. \u2018LIBOBJS\u2019:\n(autoconf)AC_LIBOBJ vs LIBOBJS.).\n\n\u001f\nFile: automake.info,  Node: Libtool Issues,  Prev: LTLIBOBJS,  Up: A Shared Library\n\n8.3.9 Common Issues Related to Libtool\u2019s Use\n--------------------------------------------\n\n* Menu:\n\n* Error required file ltmain.sh not found::  The need to run libtoolize\n* Objects created both with libtool and without::  Avoid a specific build race\n\n\u001f\nFile: automake.info,  Node: Error required file ltmain.sh not found,  Next: Objects created both with libtool and without,  Up: Libtool Issues\n\n8.3.9.1 Error: \u2018required file `./ltmain.sh' not found\u2019\n......................................................\n\nLibtool comes with a tool called \u2018libtoolize\u2019 that will install\nlibtool\u2019s supporting files into a package.  Running this command will\ninstall \u2018ltmain.sh\u2019.  You should execute it before \u2018aclocal\u2019 and\n\u2018automake\u2019.\n\n   People upgrading old packages to newer autotools are likely to face\nthis issue because older Automake versions used to call \u2018libtoolize\u2019.\nTherefore old build scripts do not call \u2018libtoolize\u2019.\n\n   Since Automake 1.6, it has been decided that running \u2018libtoolize\u2019 was\nnone of Automake\u2019s business.  Instead, that functionality has been moved\ninto the \u2018autoreconf\u2019 command (*note Using \u2018autoreconf\u2019:\n(autoconf)autoreconf Invocation.).  If you do not want to remember what\nto run and when, just learn the \u2018autoreconf\u2019 command.  Hopefully,\nreplacing existing \u2018bootstrap\u2019 or \u2018autogen.sh\u2019 scripts by a call to\n\u2018autoreconf\u2019 should also free you from any similar incompatible change\nin the future.\n\n\u001f\nFile: automake.info,  Node: Objects created both with libtool and without,  Prev: Error required file ltmain.sh not found,  Up: Libtool Issues\n\n8.3.9.2 Objects \u2018created with both libtool and without\u2019\n.......................................................\n\nSometimes, the same source file is used both to build a libtool library\nand to build another non-libtool target (be it a program or another\nlibrary).\n\n   Let\u2019s consider the following \u2018Makefile.am\u2019.\n\n     bin_PROGRAMS = prog\n     prog_SOURCES = prog.c foo.c ...\n\n     lib_LTLIBRARIES = libfoo.la\n     libfoo_la_SOURCES = foo.c ...\n\n(In this trivial case the issue could be avoided by linking \u2018libfoo.la\u2019\nwith \u2018prog\u2019 instead of listing \u2018foo.c\u2019 in \u2018prog_SOURCES\u2019.  But let\u2019s\nassume we really want to keep \u2018prog\u2019 and \u2018libfoo.la\u2019 separate.)\n\n   Technically, it means that we should build \u2018foo.$(OBJEXT)\u2019 for\n\u2018prog\u2019, and \u2018foo.lo\u2019 for \u2018libfoo.la\u2019.  The problem is that in the course\nof creating \u2018foo.lo\u2019, libtool may erase (or replace) \u2018foo.$(OBJEXT)\u2019,\nand this cannot be avoided.\n\n   Therefore, when Automake detects this situation it will complain with\na message such as\n     object 'foo.$(OBJEXT)' created both with libtool and without\n\n   A workaround for this issue is to ensure that these two objects get\ndifferent basenames.  As explained in *note Renamed Objects::, this\nhappens automatically when per-target flags are used.\n\n     bin_PROGRAMS = prog\n     prog_SOURCES = prog.c foo.c ...\n     prog_CFLAGS = $(AM_CFLAGS)\n\n     lib_LTLIBRARIES = libfoo.la\n     libfoo_la_SOURCES = foo.c ...\n\nAdding \u2018prog_CFLAGS = $(AM_CFLAGS)\u2019 is almost a no-op, because when the\n\u2018prog_CFLAGS\u2019 is defined, it is used instead of \u2018AM_CFLAGS\u2019.  However as\na side effect it will cause \u2018prog.c\u2019 and \u2018foo.c\u2019 to be compiled as\n\u2018prog-prog.$(OBJEXT)\u2019 and \u2018prog-foo.$(OBJEXT)\u2019, which solves the issue.\n\n\u001f\nFile: automake.info,  Node: Program and Library Variables,  Next: Default _SOURCES,  Prev: A Shared Library,  Up: Programs\n\n8.4 Program and Library Variables\n=================================\n\nAssociated with each program is a collection of variables that can be\nused to modify how that program is built.  There is a similar list of\nsuch variables for each library.  The canonical name of the program (or\nlibrary) is used as a base for naming these variables.\n\n   In the list below, we use the name \u201cmaude\u201d to refer to the program or\nlibrary.  In your \u2018Makefile.am\u2019 you would replace this with the\ncanonical name of your program.  This list also refers to \u201cmaude\u201d as a\nprogram, but in general the same rules apply for both static and dynamic\nlibraries; the documentation below notes situations where programs and\nlibraries differ.\n\n\u2018maude_SOURCES\u2019\n     This variable, if it exists, lists all the source files that are\n     compiled to build the program.  These files are added to the\n     distribution by default.  When building the program, Automake will\n     cause each source file to be compiled to a single \u2018.o\u2019 file (or\n     \u2018.lo\u2019 when using libtool).  Normally these object files are named\n     after the source file, but other factors can change this.  If a\n     file in the \u2018_SOURCES\u2019 variable has an unrecognized extension,\n     Automake will do one of two things with it.  If a suffix rule\n     exists for turning files with the unrecognized extension into \u2018.o\u2019\n     files, then \u2018automake\u2019 will treat this file as it will any other\n     source file (*note Support for Other Languages::).  Otherwise, the\n     file will be ignored as though it were a header file.\n\n     The prefixes \u2018dist_\u2019 and \u2018nodist_\u2019 can be used to control whether\n     files listed in a \u2018_SOURCES\u2019 variable are distributed.  \u2018dist_\u2019 is\n     redundant, as sources are distributed by default, but it can be\n     specified for clarity if desired.\n\n     It is possible to have both \u2018dist_\u2019 and \u2018nodist_\u2019 variants of a\n     given \u2018_SOURCES\u2019 variable at once; this lets you easily distribute\n     some files and not others, for instance:\n\n          nodist_maude_SOURCES = nodist.c\n          dist_maude_SOURCES = dist-me.c\n\n     By default the output file (on Unix systems, the \u2018.o\u2019 file) will be\n     put into the current build directory.  However, if the option\n     \u2018subdir-objects\u2019 is in effect in the current directory then the\n     \u2018.o\u2019 file will be put into the subdirectory named after the source\n     file.  For instance, with \u2018subdir-objects\u2019 enabled,\n     \u2018sub/dir/file.c\u2019 will be compiled to \u2018sub/dir/file.o\u2019.  Some people\n     prefer this mode of operation.  You can specify \u2018subdir-objects\u2019 in\n     \u2018AUTOMAKE_OPTIONS\u2019 (*note Options::).\n\n\u2018EXTRA_maude_SOURCES\u2019\n     Automake needs to know the list of files you intend to compile\n     _statically_.  For one thing, this is the only way Automake has of\n     knowing what sort of language support a given \u2018Makefile.in\u2019\n     requires.  (1) This means that, for example, you can\u2019t put a\n     configure substitution like \u2018@my_sources@\u2019 into a \u2018_SOURCES\u2019\n     variable.  If you intend to conditionally compile source files and\n     use \u2018configure\u2019 to substitute the appropriate object names into,\n     e.g., \u2018_LDADD\u2019 (see below), then you should list the corresponding\n     source files in the \u2018EXTRA_\u2019 variable.\n\n     This variable also supports \u2018dist_\u2019 and \u2018nodist_\u2019 prefixes.  For\n     instance, \u2018nodist_EXTRA_maude_SOURCES\u2019 would list extra sources\n     that may need to be built, but should not be distributed.\n\n\u2018maude_AR\u2019\n     A static library is created by default by invoking \u2018$(AR)\n     $(ARFLAGS)\u2019 followed by the name of the library and then the\n     objects being put into the library.  You can override this by\n     setting the \u2018_AR\u2019 variable.  This is usually used with C++; some\n     C++ compilers require a special invocation in order to instantiate\n     all the templates that should go into a library.  For instance, the\n     SGI C++ compiler likes this variable set like so:\n          libmaude_a_AR = $(CXX) -ar -o\n\n\u2018maude_LIBADD\u2019\n     Extra objects can be added to a _library_ using the \u2018_LIBADD\u2019\n     variable.  For instance, this should be used for objects determined\n     by \u2018configure\u2019 (*note A Library::).\n\n     In the case of libtool libraries, \u2018maude_LIBADD\u2019 can also refer to\n     other libtool libraries.\n\n\u2018maude_LDADD\u2019\n     Extra objects (\u2018*.$(OBJEXT)\u2019) and libraries (\u2018*.a\u2019, \u2018*.la\u2019) can be\n     added to a _program_ by listing them in the \u2018_LDADD\u2019 variable.  For\n     instance, this should be used for objects determined by \u2018configure\u2019\n     (*note Linking::).\n\n     \u2018_LDADD\u2019 and \u2018_LIBADD\u2019 are inappropriate for passing\n     program-specific linker flags (except for \u2018-l\u2019, \u2018-L\u2019, \u2018-dlopen\u2019 and\n     \u2018-dlpreopen\u2019).  Use the \u2018_LDFLAGS\u2019 variable for this purpose.\n\n     For instance, if your \u2018configure.ac\u2019 uses \u2018AC_PATH_XTRA\u2019, you could\n     link your program against the X libraries like so:\n\n          maude_LDADD = $(X_PRE_LIBS) $(X_LIBS) $(X_EXTRA_LIBS)\n\n     We recommend that you use \u2018-l\u2019 and \u2018-L\u2019 only when referring to\n     third-party libraries, and give the explicit file names of any\n     library built by your package.  Doing so will ensure that\n     \u2018maude_DEPENDENCIES\u2019 (see below) is correctly defined by default.\n\n\u2018maude_LDFLAGS\u2019\n     This variable is used to pass extra flags to the link step of a\n     program or a shared library.  It overrides the \u2018AM_LDFLAGS\u2019\n     variable.\n\n\u2018maude_LIBTOOLFLAGS\u2019\n     This variable is used to pass extra options to \u2018libtool\u2019.  It\n     overrides the \u2018AM_LIBTOOLFLAGS\u2019 variable.  These options are output\n     before \u2018libtool\u2019\u2019s \u2018--mode=MODE\u2019 option, so they should not be\n     mode-specific options (those belong to the compiler or linker\n     flags).  *Note Libtool Flags::.\n\n\u2018maude_DEPENDENCIES\u2019\n\u2018EXTRA_maude_DEPENDENCIES\u2019\n     It is also occasionally useful to have a target (program or\n     library) depend on some other file that is not actually part of\n     that target.  This can be done using the \u2018_DEPENDENCIES\u2019 variable.\n     Each target depends on the contents of such a variable, but no\n     further interpretation is done.\n\n     Since these dependencies are associated with the link rule used to\n     create the programs they should normally list files used by the\n     link command.  That is \u2018*.$(OBJEXT)\u2019, \u2018*.a\u2019, or \u2018*.la\u2019 files for\n     programs; \u2018*.lo\u2019 and \u2018*.la\u2019 files for Libtool libraries; and\n     \u2018*.$(OBJEXT)\u2019 files for static libraries.  In rare cases you may\n     need to add other kinds of files such as linker scripts, but\n     _listing a source file in \u2018_DEPENDENCIES\u2019 is wrong_.  If some\n     source file needs to be built before all the components of a\n     program are built, consider using the \u2018BUILT_SOURCES\u2019 variable\n     (*note Sources::).\n\n     If \u2018_DEPENDENCIES\u2019 is not supplied, it is computed by Automake.\n     The automatically-assigned value is the contents of \u2018_LDADD\u2019 or\n     \u2018_LIBADD\u2019, with most configure substitutions, \u2018-l\u2019, \u2018-L\u2019, \u2018-dlopen\u2019\n     and \u2018-dlpreopen\u2019 options removed.  The configure substitutions that\n     are left in are only \u2018$(LIBOBJS)\u2019 and \u2018$(ALLOCA)\u2019; these are left\n     because it is known that they will not cause an invalid value for\n     \u2018_DEPENDENCIES\u2019 to be generated.\n\n     \u2018_DEPENDENCIES\u2019 is more likely used to perform conditional\n     compilation using an \u2018AC_SUBST\u2019 variable that contains a list of\n     objects.  *Note Conditional Sources::, and *note Conditional\n     Libtool Sources::.\n\n     The \u2018EXTRA_*_DEPENDENCIES\u2019 variable may be useful for cases where\n     you merely want to augment the \u2018automake\u2019-generated \u2018_DEPENDENCIES\u2019\n     variable rather than replacing it.\n\n\u2018maude_LINK\u2019\n     You can override the linker on a per-program basis.  By default the\n     linker is chosen according to the languages used by the program.\n     For instance, a program that includes C++ source code would use the\n     C++ compiler to link.  The \u2018_LINK\u2019 variable must hold the name of a\n     command that can be passed all the \u2018.o\u2019 file names and libraries to\n     link against as arguments.  Note that the name of the underlying\n     program is _not_ passed to \u2018_LINK\u2019; typically one uses \u2018$@\u2019:\n\n          maude_LINK = $(CCLD) -magic -o $@\n\n     If a \u2018_LINK\u2019 variable is not supplied, it may still be generated\n     and used by Automake due to the use of per-target link flags such\n     as \u2018_CFLAGS\u2019, \u2018_LDFLAGS\u2019 or \u2018_LIBTOOLFLAGS\u2019, in cases where they\n     apply.\n\n\u2018maude_CCASFLAGS\u2019\n\u2018maude_CFLAGS\u2019\n\u2018maude_CPPFLAGS\u2019\n\u2018maude_CXXFLAGS\u2019\n\u2018maude_FFLAGS\u2019\n\u2018maude_GCJFLAGS\u2019\n\u2018maude_LFLAGS\u2019\n\u2018maude_OBJCFLAGS\u2019\n\u2018maude_OBJCXXFLAGS\u2019\n\u2018maude_RFLAGS\u2019\n\u2018maude_UPCFLAGS\u2019\n\u2018maude_YFLAGS\u2019\n     Automake allows you to set compilation flags on a per-program (or\n     per-library) basis.  A single source file can be included in\n     several programs, and it will potentially be compiled with\n     different flags for each program.  This works for any language\n     directly supported by Automake.  These \u201cper-target compilation\n     flags\u201d are \u2018_CCASFLAGS\u2019, \u2018_CFLAGS\u2019, \u2018_CPPFLAGS\u2019, \u2018_CXXFLAGS\u2019,\n     \u2018_FFLAGS\u2019, \u2018_GCJFLAGS\u2019, \u2018_LFLAGS\u2019, \u2018_OBJCFLAGS\u2019, \u2018_OBJCXXFLAGS\u2019,\n     \u2018_RFLAGS\u2019, \u2018_UPCFLAGS\u2019, and \u2018_YFLAGS\u2019.\n\n     When using a per-target compilation flag, Automake will choose a\n     different name for the intermediate object files.  Ordinarily a\n     file like \u2018sample.c\u2019 will be compiled to produce \u2018sample.o\u2019.\n     However, if the program\u2019s \u2018_CFLAGS\u2019 variable is set, then the\n     object file will be named, for instance, \u2018maude-sample.o\u2019.  (See\n     also *note Renamed Objects::.)\n\n     In compilations with per-target flags, the ordinary \u2018AM_\u2019 form of\n     the flags variable is _not_ automatically included in the\n     compilation (however, the user form of the variable _is_ included).\n     So for instance, if you want the hypothetical \u2018maude\u2019 compilations\n     to also use the value of \u2018AM_CFLAGS\u2019, you would need to write:\n\n          maude_CFLAGS = ... your flags ... $(AM_CFLAGS)\n\n     *Note Flag Variables Ordering::, for more discussion about the\n     interaction between user variables, \u2018AM_\u2019 shadow variables, and\n     per-target variables.\n\n\u2018maude_SHORTNAME\u2019\n     On some platforms the allowable file names are very short.  In\n     order to support these systems and per-target compilation flags at\n     the same time, Automake allows you to set a \u201cshort name\u201d that will\n     influence how intermediate object files are named.  For instance,\n     in the following example,\n\n          bin_PROGRAMS = maude\n          maude_CPPFLAGS = -DSOMEFLAG\n          maude_SHORTNAME = m\n          maude_SOURCES = sample.c ...\n\n     the object file would be named \u2018m-sample.o\u2019 rather than\n     \u2018maude-sample.o\u2019.\n\n     This facility is rarely needed in practice, and we recommend\n     avoiding it until you find it is required.\n\n   ---------- Footnotes ----------\n\n   (1) There are other, more obscure reasons for this limitation as\nwell.\n\n\u001f\nFile: automake.info,  Node: Default _SOURCES,  Next: LIBOBJS,  Prev: Program and Library Variables,  Up: Programs\n\n8.5 Default \u2018_SOURCES\u2019\n======================\n\n\u2018_SOURCES\u2019 variables are used to specify source files of programs (*note\nA Program::), libraries (*note A Library::), and Libtool libraries\n(*note A Shared Library::).\n\n   When no such variable is specified for a target, Automake will define\none itself.  The default is to compile a single C file whose base name\nis the name of the target itself, with any extension replaced by\n\u2018AM_DEFAULT_SOURCE_EXT\u2019, which defaults to \u2018.c\u2019.\n\n   For example if you have the following somewhere in your \u2018Makefile.am\u2019\nwith no corresponding \u2018libfoo_a_SOURCES\u2019:\n\n     lib_LIBRARIES = libfoo.a sub/libc++.a\n\n\u2018libfoo.a\u2019 will be built using a default source file named \u2018libfoo.c\u2019,\nand \u2018sub/libc++.a\u2019 will be built from \u2018sub/libc++.c\u2019.  (In older\nversions \u2018sub/libc++.a\u2019 would be built from \u2018sub_libc___a.c\u2019, i.e., the\ndefault source was the canonicalized name of the target, with \u2018.c\u2019\nappended.  We believe the new behavior is more sensible, but for\nbackward compatibility \u2018automake\u2019 will use the old name if a file or a\nrule with that name exists and \u2018AM_DEFAULT_SOURCE_EXT\u2019 is not used.)\n\n   Default sources are mainly useful in test suites, when building many\ntest programs each from a single source.  For instance, in\n\n     check_PROGRAMS = test1 test2 test3\n     AM_DEFAULT_SOURCE_EXT = .cpp\n\n\u2018test1\u2019, \u2018test2\u2019, and \u2018test3\u2019 will be built from \u2018test1.cpp\u2019,\n\u2018test2.cpp\u2019, and \u2018test3.cpp\u2019.  Without the last line, they will be built\nfrom \u2018test1.c\u2019, \u2018test2.c\u2019, and \u2018test3.c\u2019.\n\n   Another case where this is convenient is building many Libtool\nmodules (\u2018moduleN.la\u2019), each defined in its own file (\u2018moduleN.c\u2019).\n\n     AM_LDFLAGS = -module\n     lib_LTLIBRARIES = module1.la module2.la module3.la\n\n   Finally, there is one situation where this default source computation\nneeds to be avoided: when a target should not be built from sources.  We\nalready saw such an example in *note true::; this happens when all the\nconstituents of a target have already been compiled and just need to be\ncombined using a \u2018_LDADD\u2019 variable.  Then it is necessary to define an\nempty \u2018_SOURCES\u2019 variable, so that \u2018automake\u2019 does not compute a\ndefault.\n\n     bin_PROGRAMS = target\n     target_SOURCES =\n     target_LDADD = libmain.a libmisc.a\n\n\u001f\nFile: automake.info,  Node: LIBOBJS,  Next: Program Variables,  Prev: Default _SOURCES,  Up: Programs\n\n8.6 Special handling for \u2018LIBOBJS\u2019 and \u2018ALLOCA\u2019\n===============================================\n\nThe \u2018$(LIBOBJS)\u2019 and \u2018$(ALLOCA)\u2019 variables list object files that should\nbe compiled into the project to provide an implementation for functions\nthat are missing or broken on the host system.  They are substituted by\n\u2018configure\u2019.\n\n   These variables are defined by Autoconf macros such as \u2018AC_LIBOBJ\u2019,\n\u2018AC_REPLACE_FUNCS\u2019 (*note Generic Function Checks: (autoconf)Generic\nFunctions.), or \u2018AC_FUNC_ALLOCA\u2019 (*note Particular Function Checks:\n(autoconf)Particular Functions.).  Many other Autoconf macros call\n\u2018AC_LIBOBJ\u2019 or \u2018AC_REPLACE_FUNCS\u2019 to populate \u2018$(LIBOBJS)\u2019.\n\n   Using these variables is very similar to doing conditional\ncompilation using \u2018AC_SUBST\u2019 variables, as described in *note\nConditional Sources::.  That is, when building a program, \u2018$(LIBOBJS)\u2019\nand \u2018$(ALLOCA)\u2019 should be added to the associated \u2018*_LDADD\u2019 variable, or\nto the \u2018*_LIBADD\u2019 variable when building a library.  However there is no\nneed to list the corresponding sources in \u2018EXTRA_*_SOURCES\u2019 nor to\ndefine \u2018*_DEPENDENCIES\u2019.  Automake automatically adds \u2018$(LIBOBJS)\u2019 and\n\u2018$(ALLOCA)\u2019 to the dependencies, and it will discover the list of\ncorresponding source files automatically (by tracing the invocations of\nthe \u2018AC_LIBSOURCE\u2019 Autoconf macros).  If you have already defined\n\u2018*_DEPENDENCIES\u2019 explicitly for an unrelated reason, then you either\nneed to add these variables manually, or use \u2018EXTRA_*_DEPENDENCIES\u2019\ninstead of \u2018*_DEPENDENCIES\u2019.\n\n   These variables are usually used to build a portability library that\nis linked with all the programs of the project.  We now review a sample\nsetup.  First, \u2018configure.ac\u2019 contains some checks that affect either\n\u2018LIBOBJS\u2019 or \u2018ALLOCA\u2019.\n\n     # configure.ac\n     ...\n     AC_CONFIG_LIBOBJ_DIR([lib])\n     ...\n     AC_FUNC_MALLOC             dnl May add malloc.$(OBJEXT) to LIBOBJS\n     AC_FUNC_MEMCMP             dnl May add memcmp.$(OBJEXT) to LIBOBJS\n     AC_REPLACE_FUNCS([strdup]) dnl May add strdup.$(OBJEXT) to LIBOBJS\n     AC_FUNC_ALLOCA             dnl May add alloca.$(OBJEXT) to ALLOCA\n     ...\n     AC_CONFIG_FILES([\n       lib/Makefile\n       src/Makefile\n     ])\n     AC_OUTPUT\n\n   The \u2018AC_CONFIG_LIBOBJ_DIR\u2019 tells Autoconf that the source files of\nthese object files are to be found in the \u2018lib/\u2019 directory.  Automake\ncan also use this information, otherwise it expects the source files are\nto be in the directory where the \u2018$(LIBOBJS)\u2019 and \u2018$(ALLOCA)\u2019 variables\nare used.\n\n   The \u2018lib/\u2019 directory should therefore contain \u2018malloc.c\u2019, \u2018memcmp.c\u2019,\n\u2018strdup.c\u2019, \u2018alloca.c\u2019.  Here is its \u2018Makefile.am\u2019:\n\n     # lib/Makefile.am\n\n     noinst_LIBRARIES = libcompat.a\n     libcompat_a_SOURCES =\n     libcompat_a_LIBADD = $(LIBOBJS) $(ALLOCA)\n\n   The library can have any name, of course, and anyway it is not going\nto be installed: it just holds the replacement versions of the missing\nor broken functions so we can later link them in.  Many projects also\ninclude extra functions, specific to the project, in that library: they\nare simply added on the \u2018_SOURCES\u2019 line.\n\n   There is a small trap here, though: \u2018$(LIBOBJS)\u2019 and \u2018$(ALLOCA)\u2019\nmight be empty, and building an empty library is not portable.  You\nshould ensure that there is always something to put in \u2018libcompat.a\u2019.\nMost projects will also add some utility functions in that directory,\nand list them in \u2018libcompat_a_SOURCES\u2019, so in practice \u2018libcompat.a\u2019\ncannot be empty.\n\n   Finally here is how this library could be used from the \u2018src/\u2019\ndirectory.\n\n     # src/Makefile.am\n\n     # Link all programs in this directory with libcompat.a\n     LDADD = ../lib/libcompat.a\n\n     bin_PROGRAMS = tool1 tool2 ...\n     tool1_SOURCES = ...\n     tool2_SOURCES = ...\n\n   When option \u2018subdir-objects\u2019 is not used, as in the above example,\nthe variables \u2018$(LIBOBJS)\u2019 or \u2018$(ALLOCA)\u2019 can only be used in the\ndirectory where their sources lie.  E.g., here it would be wrong to use\n\u2018$(LIBOBJS)\u2019 or \u2018$(ALLOCA)\u2019 in \u2018src/Makefile.am\u2019.  However if both\n\u2018subdir-objects\u2019 and \u2018AC_CONFIG_LIBOBJ_DIR\u2019 are used, it is OK to use\nthese variables in other directories.  For instance \u2018src/Makefile.am\u2019\ncould be changed as follows.\n\n     # src/Makefile.am\n\n     AUTOMAKE_OPTIONS = subdir-objects\n     LDADD = $(LIBOBJS) $(ALLOCA)\n\n     bin_PROGRAMS = tool1 tool2 ...\n     tool1_SOURCES = ...\n     tool2_SOURCES = ...\n\n   Because \u2018$(LIBOBJS)\u2019 and \u2018$(ALLOCA)\u2019 contain object file names that\nend with \u2018.$(OBJEXT)\u2019, they are not suitable for Libtool libraries\n(where the expected object extension is \u2018.lo\u2019): \u2018LTLIBOBJS\u2019 and\n\u2018LTALLOCA\u2019 should be used instead.\n\n   \u2018LTLIBOBJS\u2019 is defined automatically by Autoconf and should not be\ndefined by hand (as in the past), however at the time of writing\n\u2018LTALLOCA\u2019 still needs to be defined from \u2018ALLOCA\u2019 manually.  *Note\n\u2018AC_LIBOBJ\u2019 vs. \u2018LIBOBJS\u2019: (autoconf)AC_LIBOBJ vs LIBOBJS.\n\n\u001f\nFile: automake.info,  Node: Program Variables,  Next: Yacc and Lex,  Prev: LIBOBJS,  Up: Programs\n\n8.7 Variables used when building a program\n==========================================\n\nOccasionally it is useful to know which \u2018Makefile\u2019 variables Automake\nuses for compilations, and in which order (*note Flag Variables\nOrdering::); for instance, you might need to do your own compilation in\nsome special cases.\n\n   Some variables are inherited from Autoconf; these are \u2018CC\u2019, \u2018CFLAGS\u2019,\n\u2018CPPFLAGS\u2019, \u2018DEFS\u2019, \u2018LDFLAGS\u2019, and \u2018LIBS\u2019.\n\n   There are some additional variables that Automake defines on its own:\n\n\u2018AM_CPPFLAGS\u2019\n     The contents of this variable are passed to every compilation that\n     invokes the C preprocessor; it is a list of arguments to the\n     preprocessor.  For instance, \u2018-I\u2019 and \u2018-D\u2019 options should be listed\n     here.\n\n     Automake already provides some \u2018-I\u2019 options automatically, in a\n     separate variable that is also passed to every compilation that\n     invokes the C preprocessor.  In particular it generates \u2018-I.\u2019,\n     \u2018-I$(srcdir)\u2019, and a \u2018-I\u2019 pointing to the directory holding\n     \u2018config.h\u2019 (if you\u2019ve used \u2018AC_CONFIG_HEADERS\u2019).  You can disable\n     the default \u2018-I\u2019 options using the \u2018nostdinc\u2019 option.\n\n     When a file to be included is generated during the build and not\n     part of a distribution tarball, its location is under\n     \u2018$(builddir)\u2019, not under \u2018$(srcdir)\u2019.  This matters especially for\n     packages that use header files placed in sub-directories and want\n     to allow builds outside the source tree (*note VPATH Builds::).  In\n     that case we recommend using a pair of \u2018-I\u2019 options, such as, e.g.,\n     \u2018-Isome/subdir -I$(srcdir)/some/subdir\u2019 or\n     \u2018-I$(top_builddir)/some/subdir -I$(top_srcdir)/some/subdir\u2019.  Note\n     that the reference to the build tree should come before the\n     reference to the source tree, so that accidentally leftover\n     generated files in the source directory are ignored.\n\n     \u2018AM_CPPFLAGS\u2019 is ignored in preference to a per-executable (or\n     per-library) \u2018_CPPFLAGS\u2019 variable if it is defined.\n\n\u2018INCLUDES\u2019\n     This does the same job as \u2018AM_CPPFLAGS\u2019 (or any per-target\n     \u2018_CPPFLAGS\u2019 variable if it is used).  It is an older name for the\n     same functionality.  This variable is deprecated; we suggest using\n     \u2018AM_CPPFLAGS\u2019 and per-target \u2018_CPPFLAGS\u2019 instead.\n\n\u2018AM_CFLAGS\u2019\n     This is the variable the \u2018Makefile.am\u2019 author can use to pass in\n     additional C compiler flags.  In some situations, this is not used,\n     in preference to the per-executable (or per-library) \u2018_CFLAGS\u2019.\n\n\u2018COMPILE\u2019\n     This is the command used to actually compile a C source file.  The\n     file name is appended to form the complete command line.\n\n\u2018AM_LDFLAGS\u2019\n     This is the variable the \u2018Makefile.am\u2019 author can use to pass in\n     additional linker flags.  In some situations, this is not used, in\n     preference to the per-executable (or per-library) \u2018_LDFLAGS\u2019.\n\n\u2018LINK\u2019\n     This is the command used to actually link a C program.  It already\n     includes \u2018-o $@\u2019 and the usual variable references (for instance,\n     \u2018CFLAGS\u2019); it takes as \u201carguments\u201d the names of the object files\n     and libraries to link in.  This variable is not used when the\n     linker is overridden with a per-target \u2018_LINK\u2019 variable or\n     per-target flags cause Automake to define such a \u2018_LINK\u2019 variable.\n\n\u001f\nFile: automake.info,  Node: Yacc and Lex,  Next: C++ Support,  Prev: Program Variables,  Up: Programs\n\n8.8 Yacc and Lex support\n========================\n\nAutomake has somewhat idiosyncratic support for Yacc and Lex.\n\n   Automake assumes that the \u2018.c\u2019 file generated by \u2018yacc\u2019 (or \u2018lex\u2019)\nshould be named using the basename of the input file.  That is, for a\nyacc source file \u2018foo.y\u2019, Automake will cause the intermediate file to\nbe named \u2018foo.c\u2019 (as opposed to \u2018y.tab.c\u2019, which is more traditional).\n\n   The extension of a yacc source file is used to determine the\nextension of the resulting C or C++ source and header files.  Note that\nheader files are generated only when the \u2018-d\u2019 Yacc option is used; see\nbelow for more information about this flag, and how to specify it.\nFiles with the extension \u2018.y\u2019 will thus be turned into \u2018.c\u2019 sources and\n\u2018.h\u2019 headers; likewise, \u2018.yy\u2019 will become \u2018.cc\u2019 and \u2018.hh\u2019, \u2018.y++\u2019 will\nbecome \u2018c++\u2019 and \u2018h++\u2019, \u2018.yxx\u2019 will become \u2018.cxx\u2019 and \u2018.hxx\u2019, and \u2018.ypp\u2019\nwill become \u2018.cpp\u2019 and \u2018.hpp\u2019.\n\n   Similarly, lex source files can be used to generate C or C++; the\nextensions \u2018.l\u2019, \u2018.ll\u2019, \u2018.l++\u2019, \u2018.lxx\u2019, and \u2018.lpp\u2019 are recognized.\n\n   You should never explicitly mention the intermediate (C or C++) file\nin any \u2018SOURCES\u2019 variable; only list the source file.\n\n   The intermediate files generated by \u2018yacc\u2019 (or \u2018lex\u2019) will be\nincluded in any distribution that is made.  That way the user doesn\u2019t\nneed to have \u2018yacc\u2019 or \u2018lex\u2019.\n\n   If a \u2018yacc\u2019 source file is seen, then your \u2018configure.ac\u2019 must define\nthe variable \u2018YACC\u2019.  This is most easily done by invoking the macro\n\u2018AC_PROG_YACC\u2019 (*note Particular Program Checks: (autoconf)Particular\nPrograms.).\n\n   When \u2018yacc\u2019 is invoked, it is passed \u2018AM_YFLAGS\u2019 and \u2018YFLAGS\u2019.  The\nlatter is a user variable and the former is intended for the\n\u2018Makefile.am\u2019 author.\n\n   \u2018AM_YFLAGS\u2019 is usually used to pass the \u2018-d\u2019 option to \u2018yacc\u2019.\nAutomake knows what this means and will automatically adjust its rules\nto update and distribute the header file built by \u2018yacc -d\u2019(1).  What\nAutomake cannot guess, though, is where this header will be used: it is\nup to you to ensure the header gets built before it is first used.\nTypically this is necessary in order for dependency tracking to work\nwhen the header is included by another file.  The common solution is\nlisting the header file in \u2018BUILT_SOURCES\u2019 (*note Sources::) as follows.\n\n     BUILT_SOURCES = parser.h\n     AM_YFLAGS = -d\n     bin_PROGRAMS = foo\n     foo_SOURCES = ... parser.y ...\n\n   If a \u2018lex\u2019 source file is seen, then your \u2018configure.ac\u2019 must define\nthe variable \u2018LEX\u2019.  You can use \u2018AC_PROG_LEX\u2019 to do this (*note\nParticular Program Checks: (autoconf)Particular Programs.), but using\nthe \u2018AM_PROG_LEX\u2019 macro (*note Macros::) is recommended.\n\n   When \u2018lex\u2019 is invoked, it is passed \u2018AM_LFLAGS\u2019 and \u2018LFLAGS\u2019.  The\nlatter is a user variable and the former is intended for the\n\u2018Makefile.am\u2019 author.\n\n   When \u2018AM_MAINTAINER_MODE\u2019 (*note maintainer-mode::) is used, the\nrebuild rule for distributed Yacc and Lex sources are only used when\n\u2018maintainer-mode\u2019 is enabled, or when the files have been erased.\n\n   When \u2018lex\u2019 or \u2018yacc\u2019 sources are used, \u2018automake -a\u2019 automatically\ninstalls an auxiliary program called \u2018ylwrap\u2019 in your package (*note\nAuxiliary Programs::).  This program is used by the build rules to\nrename the output of these tools, and makes it possible to include\nmultiple \u2018yacc\u2019 (or \u2018lex\u2019) source files in a single directory.  (This is\nnecessary because yacc\u2019s output file name is fixed, and a parallel make\ncould conceivably invoke more than one instance of \u2018yacc\u2019\nsimultaneously.)\n\n   For \u2018yacc\u2019, simply managing locking is insufficient.  The output of\n\u2018yacc\u2019 always uses the same symbol names internally, so it isn\u2019t\npossible to link two \u2018yacc\u2019 parsers into the same executable.\n\n   We recommend using the following renaming hack used in \u2018gdb\u2019:\n     #define yymaxdepth c_maxdepth\n     #define yyparse c_parse\n     #define yylex   c_lex\n     #define yyerror c_error\n     #define yylval  c_lval\n     #define yychar  c_char\n     #define yydebug c_debug\n     #define yypact  c_pact\n     #define yyr1    c_r1\n     #define yyr2    c_r2\n     #define yydef   c_def\n     #define yychk   c_chk\n     #define yypgo   c_pgo\n     #define yyact   c_act\n     #define yyexca  c_exca\n     #define yyerrflag c_errflag\n     #define yynerrs c_nerrs\n     #define yyps    c_ps\n     #define yypv    c_pv\n     #define yys     c_s\n     #define yy_yys  c_yys\n     #define yystate c_state\n     #define yytmp   c_tmp\n     #define yyv     c_v\n     #define yy_yyv  c_yyv\n     #define yyval   c_val\n     #define yylloc  c_lloc\n     #define yyreds  c_reds\n     #define yytoks  c_toks\n     #define yylhs   c_yylhs\n     #define yylen   c_yylen\n     #define yydefred c_yydefred\n     #define yydgoto  c_yydgoto\n     #define yysindex c_yysindex\n     #define yyrindex c_yyrindex\n     #define yygindex c_yygindex\n     #define yytable  c_yytable\n     #define yycheck  c_yycheck\n     #define yyname   c_yyname\n     #define yyrule   c_yyrule\n\n   For each define, replace the \u2018c_\u2019 prefix with whatever you like.\nThese defines work for \u2018bison\u2019, \u2018byacc\u2019, and traditional \u2018yacc\u2019s.  If\nyou find a parser generator that uses a symbol not covered here, please\nreport the new name so it can be added to the list.\n\n   ---------- Footnotes ----------\n\n   (1) Please note that \u2018automake\u2019 recognizes \u2018-d\u2019 in \u2018AM_YFLAGS\u2019 only\nif it is not clustered with other options; for example, it won\u2019t be\nrecognized if \u2018AM_YFLAGS\u2019 is \u2018-dt\u2019, but it will be if \u2018AM_YFLAGS\u2019 is \u2018-d\n-t\u2019 or \u2018-t -d\u2019.\n\n\u001f\nFile: automake.info,  Node: C++ Support,  Next: Objective C Support,  Prev: Yacc and Lex,  Up: Programs\n\n8.9 C++ Support\n===============\n\nAutomake includes full support for C++.\n\n   Any package including C++ code must define the output variable \u2018CXX\u2019\nin \u2018configure.ac\u2019; the simplest way to do this is to use the\n\u2018AC_PROG_CXX\u2019 macro (*note Particular Program Checks:\n(autoconf)Particular Programs.).\n\n   A few additional variables are defined when a C++ source file is\nseen:\n\n\u2018CXX\u2019\n     The name of the C++ compiler.\n\n\u2018CXXFLAGS\u2019\n     Any flags to pass to the C++ compiler.\n\n\u2018AM_CXXFLAGS\u2019\n     The maintainer\u2019s variant of \u2018CXXFLAGS\u2019.\n\n\u2018CXXCOMPILE\u2019\n     The command used to actually compile a C++ source file.  The file\n     name is appended to form the complete command line.\n\n\u2018CXXLINK\u2019\n     The command used to actually link a C++ program.\n\n\u001f\nFile: automake.info,  Node: Objective C Support,  Next: Objective C++ Support,  Prev: C++ Support,  Up: Programs\n\n8.10 Objective C Support\n========================\n\nAutomake includes some support for Objective C.\n\n   Any package including Objective C code must define the output\nvariable \u2018OBJC\u2019 in \u2018configure.ac\u2019; the simplest way to do this is to use\nthe \u2018AC_PROG_OBJC\u2019 macro (*note Particular Program Checks:\n(autoconf)Particular Programs.).\n\n   A few additional variables are defined when an Objective C source\nfile is seen:\n\n\u2018OBJC\u2019\n     The name of the Objective C compiler.\n\n\u2018OBJCFLAGS\u2019\n     Any flags to pass to the Objective C compiler.\n\n\u2018AM_OBJCFLAGS\u2019\n     The maintainer\u2019s variant of \u2018OBJCFLAGS\u2019.\n\n\u2018OBJCCOMPILE\u2019\n     The command used to actually compile an Objective C source file.\n     The file name is appended to form the complete command line.\n\n\u2018OBJCLINK\u2019\n     The command used to actually link an Objective C program.\n\n\u001f\nFile: automake.info,  Node: Objective C++ Support,  Next: Unified Parallel C Support,  Prev: Objective C Support,  Up: Programs\n\n8.11 Objective C++ Support\n==========================\n\nAutomake includes some support for Objective C++.\n\n   Any package including Objective C++ code must define the output\nvariable \u2018OBJCXX\u2019 in \u2018configure.ac\u2019; the simplest way to do this is to\nuse the \u2018AC_PROG_OBJCXX\u2019 macro (*note Particular Program Checks:\n(autoconf)Particular Programs.).\n\n   A few additional variables are defined when an Objective C++ source\nfile is seen:\n\n\u2018OBJCXX\u2019\n     The name of the Objective C++ compiler.\n\n\u2018OBJCXXFLAGS\u2019\n     Any flags to pass to the Objective C++ compiler.\n\n\u2018AM_OBJCXXFLAGS\u2019\n     The maintainer\u2019s variant of \u2018OBJCXXFLAGS\u2019.\n\n\u2018OBJCXXCOMPILE\u2019\n     The command used to actually compile an Objective C++ source file.\n     The file name is appended to form the complete command line.\n\n\u2018OBJCXXLINK\u2019\n     The command used to actually link an Objective C++ program.\n\n\u001f\nFile: automake.info,  Node: Unified Parallel C Support,  Next: Assembly Support,  Prev: Objective C++ Support,  Up: Programs\n\n8.12 Unified Parallel C Support\n===============================\n\nAutomake includes some support for Unified Parallel C.\n\n   Any package including Unified Parallel C code must define the output\nvariable \u2018UPC\u2019 in \u2018configure.ac\u2019; the simplest way to do this is to use\nthe \u2018AM_PROG_UPC\u2019 macro (*note Public Macros::).\n\n   A few additional variables are defined when a Unified Parallel C\nsource file is seen:\n\n\u2018UPC\u2019\n     The name of the Unified Parallel C compiler.\n\n\u2018UPCFLAGS\u2019\n     Any flags to pass to the Unified Parallel C compiler.\n\n\u2018AM_UPCFLAGS\u2019\n     The maintainer\u2019s variant of \u2018UPCFLAGS\u2019.\n\n\u2018UPCCOMPILE\u2019\n     The command used to actually compile a Unified Parallel C source\n     file.  The file name is appended to form the complete command line.\n\n\u2018UPCLINK\u2019\n     The command used to actually link a Unified Parallel C program.\n\n\u001f\nFile: automake.info,  Node: Assembly Support,  Next: Fortran 77 Support,  Prev: Unified Parallel C Support,  Up: Programs\n\n8.13 Assembly Support\n=====================\n\nAutomake includes some support for assembly code.  There are two forms\nof assembler files: normal (\u2018*.s\u2019) and preprocessed by \u2018CPP\u2019 (\u2018*.S\u2019 or\n\u2018*.sx\u2019).\n\n   The variable \u2018CCAS\u2019 holds the name of the compiler used to build\nassembly code.  This compiler must work a bit like a C compiler; in\nparticular it must accept \u2018-c\u2019 and \u2018-o\u2019.  The values of \u2018CCASFLAGS\u2019 and\n\u2018AM_CCASFLAGS\u2019 (or its per-target definition) is passed to the\ncompilation.  For preprocessed files, \u2018DEFS\u2019, \u2018DEFAULT_INCLUDES\u2019,\n\u2018INCLUDES\u2019, \u2018CPPFLAGS\u2019 and \u2018AM_CPPFLAGS\u2019 are also used.\n\n   The autoconf macro \u2018AM_PROG_AS\u2019 will define \u2018CCAS\u2019 and \u2018CCASFLAGS\u2019\nfor you (unless they are already set, it simply sets \u2018CCAS\u2019 to the C\ncompiler and \u2018CCASFLAGS\u2019 to the C compiler flags), but you are free to\ndefine these variables by other means.\n\n   Only the suffixes \u2018.s\u2019, \u2018.S\u2019, and \u2018.sx\u2019 are recognized by \u2018automake\u2019\nas being files containing assembly code.\n\n\u001f\nFile: automake.info,  Node: Fortran 77 Support,  Next: Fortran 9x Support,  Prev: Assembly Support,  Up: Programs\n\n8.14 Fortran 77 Support\n=======================\n\nAutomake includes full support for Fortran 77.\n\n   Any package including Fortran 77 code must define the output variable\n\u2018F77\u2019 in \u2018configure.ac\u2019; the simplest way to do this is to use the\n\u2018AC_PROG_F77\u2019 macro (*note Particular Program Checks:\n(autoconf)Particular Programs.).\n\n   A few additional variables are defined when a Fortran 77 source file\nis seen:\n\n\u2018F77\u2019\n     The name of the Fortran 77 compiler.\n\n\u2018FFLAGS\u2019\n     Any flags to pass to the Fortran 77 compiler.\n\n\u2018AM_FFLAGS\u2019\n     The maintainer\u2019s variant of \u2018FFLAGS\u2019.\n\n\u2018RFLAGS\u2019\n     Any flags to pass to the Ratfor compiler.\n\n\u2018AM_RFLAGS\u2019\n     The maintainer\u2019s variant of \u2018RFLAGS\u2019.\n\n\u2018F77COMPILE\u2019\n     The command used to actually compile a Fortran 77 source file.  The\n     file name is appended to form the complete command line.\n\n\u2018FLINK\u2019\n     The command used to actually link a pure Fortran 77 program or\n     shared library.\n\n   Automake can handle preprocessing Fortran 77 and Ratfor source files\nin addition to compiling them(1).  Automake also contains some support\nfor creating programs and shared libraries that are a mixture of Fortran\n77 and other languages (*note Mixing Fortran 77 With C and C++::).\n\n   These issues are covered in the following sections.\n\n* Menu:\n\n* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources\n* Compiling Fortran 77 Files::  Compiling Fortran 77 sources\n* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++\n\n   ---------- Footnotes ----------\n\n   (1) Much, if not most, of the information in the following sections\npertaining to preprocessing Fortran 77 programs was taken almost\nverbatim from *note Catalogue of Rules: (make)Catalogue of Rules.\n\n\u001f\nFile: automake.info,  Node: Preprocessing Fortran 77,  Next: Compiling Fortran 77 Files,  Up: Fortran 77 Support\n\n8.14.1 Preprocessing Fortran 77\n-------------------------------\n\n\u2018N.f\u2019 is made automatically from \u2018N.F\u2019 or \u2018N.r\u2019.  This rule runs just\nthe preprocessor to convert a preprocessable Fortran 77 or Ratfor source\nfile into a strict Fortran 77 source file.  The precise command used is\nas follows:\n\n\u2018.F\u2019\n     \u2018$(F77) -F $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)\n     $(AM_FFLAGS) $(FFLAGS)\u2019\n\n\u2018.r\u2019\n     \u2018$(F77) -F $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)\u2019\n\n\u001f\nFile: automake.info,  Node: Compiling Fortran 77 Files,  Next: Mixing Fortran 77 With C and C++,  Prev: Preprocessing Fortran 77,  Up: Fortran 77 Support\n\n8.14.2 Compiling Fortran 77 Files\n---------------------------------\n\n\u2018N.o\u2019 is made automatically from \u2018N.f\u2019, \u2018N.F\u2019 or \u2018N.r\u2019 by running the\nFortran 77 compiler.  The precise command used is as follows:\n\n\u2018.f\u2019\n     \u2018$(F77) -c $(AM_FFLAGS) $(FFLAGS)\u2019\n\n\u2018.F\u2019\n     \u2018$(F77) -c $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)\n     $(AM_FFLAGS) $(FFLAGS)\u2019\n\n\u2018.r\u2019\n     \u2018$(F77) -c $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)\u2019\n\n\u001f\nFile: automake.info,  Node: Mixing Fortran 77 With C and C++,  Prev: Compiling Fortran 77 Files,  Up: Fortran 77 Support\n\n8.14.3 Mixing Fortran 77 With C and C++\n---------------------------------------\n\nAutomake currently provides _limited_ support for creating programs and\nshared libraries that are a mixture of Fortran 77 and C and/or C++.\nHowever, there are many other issues related to mixing Fortran 77 with\nother languages that are _not_ (currently) handled by Automake, but that\nare handled by other packages(1).\n\n   Automake can help in two ways:\n\n  1. Automatic selection of the linker depending on which combinations\n     of source code.\n\n  2. Automatic selection of the appropriate linker flags (e.g., \u2018-L\u2019 and\n     \u2018-l\u2019) to pass to the automatically selected linker in order to link\n     in the appropriate Fortran 77 intrinsic and run-time libraries.\n\n     These extra Fortran 77 linker flags are supplied in the output\n     variable \u2018FLIBS\u2019 by the \u2018AC_F77_LIBRARY_LDFLAGS\u2019 Autoconf macro.\n     *Note Fortran Compiler Characteristics: (autoconf)Fortran Compiler.\n\n   If Automake detects that a program or shared library (as mentioned in\nsome \u2018_PROGRAMS\u2019 or \u2018_LTLIBRARIES\u2019 primary) contains source code that is\na mixture of Fortran 77 and C and/or C++, then it requires that the\nmacro \u2018AC_F77_LIBRARY_LDFLAGS\u2019 be called in \u2018configure.ac\u2019, and that\neither \u2018$(FLIBS)\u2019 appear in the appropriate \u2018_LDADD\u2019 (for programs) or\n\u2018_LIBADD\u2019 (for shared libraries) variables.  It is the responsibility of\nthe person writing the \u2018Makefile.am\u2019 to make sure that \u2018$(FLIBS)\u2019\nappears in the appropriate \u2018_LDADD\u2019 or \u2018_LIBADD\u2019 variable.\n\n   For example, consider the following \u2018Makefile.am\u2019:\n\n     bin_PROGRAMS = foo\n     foo_SOURCES  = main.cc foo.f\n     foo_LDADD    = libfoo.la $(FLIBS)\n\n     pkglib_LTLIBRARIES = libfoo.la\n     libfoo_la_SOURCES  = bar.f baz.c zardoz.cc\n     libfoo_la_LIBADD   = $(FLIBS)\n\n   In this case, Automake will insist that \u2018AC_F77_LIBRARY_LDFLAGS\u2019 is\nmentioned in \u2018configure.ac\u2019.  Also, if \u2018$(FLIBS)\u2019 hadn\u2019t been mentioned\nin \u2018foo_LDADD\u2019 and \u2018libfoo_la_LIBADD\u2019, then Automake would have issued a\nwarning.\n\n* Menu:\n\n* How the Linker is Chosen::    Automatic linker selection\n\n   ---------- Footnotes ----------\n\n   (1) For example, the cfortran package\n(https://www-zeus.desy.de/~burow/cfortran/) addresses all of these\ninter-language issues, and runs under nearly all Fortran 77, C and C++\ncompilers on nearly all platforms.  However, \u2018cfortran\u2019 is not yet Free\nSoftware, but it will be in the next major release.\n\n\u001f\nFile: automake.info,  Node: How the Linker is Chosen,  Up: Mixing Fortran 77 With C and C++\n\n8.14.3.1 How the Linker is Chosen\n.................................\n\nWhen a program or library mixes several languages, Automake chooses the\nlinker according to the following priorities.  (The names in parentheses\nare the variables containing the link command.)\n\n  1. Native Java (\u2018GCJLINK\u2019)\n  2. Objective C++ (\u2018OBJCXXLINK\u2019)\n  3. C++ (\u2018CXXLINK\u2019)\n  4. Fortran 77 (\u2018F77LINK\u2019)\n  5. Fortran (\u2018FCLINK\u2019)\n  6. Objective C (\u2018OBJCLINK\u2019)\n  7. Unified Parallel C (\u2018UPCLINK\u2019)\n  8. C (\u2018LINK\u2019)\n\n   For example, if Fortran 77, C and C++ source code is compiled into a\nprogram, then the C++ linker will be used.  In this case, if the C or\nFortran 77 linkers required any special libraries that weren\u2019t included\nby the C++ linker, then they must be manually added to an \u2018_LDADD\u2019 or\n\u2018_LIBADD\u2019 variable by the user writing the \u2018Makefile.am\u2019.\n\n   Automake only looks at the file names listed in \u2018_SOURCES\u2019 variables\nto choose the linker, and defaults to the C linker.  Sometimes this is\ninconvenient because you are linking against a library written in\nanother language and would like to set the linker more appropriately.\n*Note Libtool Convenience Libraries::, for a trick with\n\u2018nodist_EXTRA_..._SOURCES\u2019.\n\n   A per-target \u2018_LINK\u2019 variable will override the above selection.\nPer-target link flags will cause Automake to write a per-target \u2018_LINK\u2019\nvariable according to the language chosen as above.\n\n\u001f\nFile: automake.info,  Node: Fortran 9x Support,  Next: Java Support with gcj,  Prev: Fortran 77 Support,  Up: Programs\n\n8.15 Fortran 9x Support\n=======================\n\nAutomake includes support for Fortran 9x.\n\n   Any package including Fortran 9x code must define the output variable\n\u2018FC\u2019 in \u2018configure.ac\u2019; the simplest way to do this is to use the\n\u2018AC_PROG_FC\u2019 macro (*note Particular Program Checks:\n(autoconf)Particular Programs.).\n\n   A few additional variables are defined when a Fortran 9x source file\nis seen:\n\n\u2018FC\u2019\n     The name of the Fortran 9x compiler.\n\n\u2018FCFLAGS\u2019\n     Any flags to pass to the Fortran 9x compiler.\n\n\u2018AM_FCFLAGS\u2019\n     The maintainer\u2019s variant of \u2018FCFLAGS\u2019.\n\n\u2018FCCOMPILE\u2019\n     The command used to actually compile a Fortran 9x source file.  The\n     file name is appended to form the complete command line.\n\n\u2018FCLINK\u2019\n     The command used to actually link a pure Fortran 9x program or\n     shared library.\n\n* Menu:\n\n* Compiling Fortran 9x Files::  Compiling Fortran 9x sources\n\n\u001f\nFile: automake.info,  Node: Compiling Fortran 9x Files,  Up: Fortran 9x Support\n\n8.15.1 Compiling Fortran 9x Files\n---------------------------------\n\n\u2018FILE.o\u2019 is made automatically from \u2018FILE.f90\u2019, \u2018FILE.f95\u2019, \u2018FILE.f03\u2019,\nor \u2018FILE.f08\u2019 by running the Fortran 9x compiler.  The precise command\nused is as follows:\n\n\u2018.f90\u2019\n     \u2018$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f90) $<\u2019\n\n\u2018.f95\u2019\n     \u2018$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f95) $<\u2019\n\n\u2018.f03\u2019\n     \u2018$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f03) $<\u2019\n\n\u2018.f08\u2019\n     \u2018$(FC) $(AM_FCFLAGS) $(FCFLAGS) -c $(FCFLAGS_f08) $<\u2019\n\n\u001f\nFile: automake.info,  Node: Java Support with gcj,  Next: Vala Support,  Prev: Fortran 9x Support,  Up: Programs\n\n8.16 Compiling Java sources using gcj\n=====================================\n\nAutomake includes support for natively compiled Java, using \u2018gcj\u2019, the\nJava front end to the GNU Compiler Collection (rudimentary support for\ncompiling Java to bytecode using the \u2018javac\u2019 compiler is also present,\n_albeit deprecated_; *note Java::).\n\n   Any package including Java code to be compiled must define the output\nvariable \u2018GCJ\u2019 in \u2018configure.ac\u2019; the variable \u2018GCJFLAGS\u2019 must also be\ndefined somehow (either in \u2018configure.ac\u2019 or \u2018Makefile.am\u2019).  The\nsimplest way to do this is to use the \u2018AM_PROG_GCJ\u2019 macro.\n\n   By default, programs including Java source files are linked with\n\u2018gcj\u2019.\n\n   As always, the contents of \u2018AM_GCJFLAGS\u2019 are passed to every\ncompilation invoking \u2018gcj\u2019 (in its role as an ahead-of-time compiler,\nwhen invoking it to create \u2018.class\u2019 files, \u2018AM_JAVACFLAGS\u2019 is used\ninstead).  If it is necessary to pass options to \u2018gcj\u2019 from\n\u2018Makefile.am\u2019, this variable, and not the user variable \u2018GCJFLAGS\u2019,\nshould be used.\n\n   \u2018gcj\u2019 can be used to compile \u2018.java\u2019, \u2018.class\u2019, \u2018.zip\u2019, or \u2018.jar\u2019\nfiles.\n\n   When linking, \u2018gcj\u2019 requires that the main class be specified using\nthe \u2018--main=\u2019 option.  The easiest way to do this is to use the\n\u2018_LDFLAGS\u2019 variable for the program.\n\n\u001f\nFile: automake.info,  Node: Vala Support,  Next: Support for Other Languages,  Prev: Java Support with gcj,  Up: Programs\n\n8.17 Vala Support\n=================\n\nAutomake provides initial support for Vala\n(<https://www.vala-project.org/>).  This requires valac version 0.7.0 or\nlater, and currently requires the user to use GNU \u2018make\u2019.\n\n     foo_SOURCES = foo.vala bar.vala zardoc.c\n\n   Any \u2018.vala\u2019 file listed in a \u2018_SOURCES\u2019 variable will be compiled\ninto C code by the Vala compiler.  The generated \u2018.c\u2019 files are\ndistributed.  The end user does not need to have a Vala compiler\ninstalled.\n\n   Automake ships with an Autoconf macro called \u2018AM_PROG_VALAC\u2019 that\nwill locate the Vala compiler and optionally check its version number.\n\n -- Macro: AM_PROG_VALAC ([MINIMUM-VERSION], [ACTION-IF-FOUND],\n     [ACTION-IF-NOT-FOUND]) Search for a Vala compiler in \u2018PATH\u2019.  If it\n     is found, the variable \u2018VALAC\u2019 is set to point to it (see below for\n     more details).  This macro takes three optional arguments.  The\n     first argument, if present, is the minimum version of the Vala API\n     required to compile this package.  For Vala releases, this is the\n     same as the major and minor release number; e.g., when \u2018valac\n     --version\u2019 reports \u20180.48.7\u2019, \u2018valac --api-version\u2019 reports \u20180.48\u2019.\n     If a compiler is found and satisfies MINIMUM-VERSION, then\n     ACTION-IF-FOUND is run (this defaults to do nothing).  Otherwise,\n     ACTION-IF-NOT-FOUND is run.  If ACTION-IF-NOT-FOUND is not\n     specified, the default value is to print a warning in case no\n     compiler is found, or if a too-old version of the compiler is\n     found.\n\n   There are a few variables that are used when compiling Vala sources:\n\n\u2018VALAC\u2019\n     Absolute path to the Vala compiler, or simply \u2018valac\u2019 if no\n     suitable Vala compiler could be found at configure runtime.\n\n\u2018VALAFLAGS\u2019\n     Additional arguments for the Vala compiler.\n\n\u2018AM_VALAFLAGS\u2019\n     The maintainer\u2019s variant of \u2018VALAFLAGS\u2019.\n\n          lib_LTLIBRARIES = libfoo.la\n          libfoo_la_SOURCES = foo.vala\n\n   Note that currently, you cannot use per-target \u2018*_VALAFLAGS\u2019 (*note\nRenamed Objects::) to produce different C files from one Vala source\nfile.\n\n\u001f\nFile: automake.info,  Node: Support for Other Languages,  Next: Dependencies,  Prev: Vala Support,  Up: Programs\n\n8.18 Support for Other Languages\n================================\n\nAutomake currently only includes full support for C, C++ (*note C++\nSupport::), Objective C (*note Objective C Support::), Objective C++\n(*note Objective C++ Support::), Fortran 77 (*note Fortran 77\nSupport::), Fortran 9x (*note Fortran 9x Support::), and Java (*note\nJava Support with gcj::).  There is only rudimentary support for other\nlanguages, support for which will be improved based on user demand.\n\n   Some limited support for adding your own languages is available via\nthe suffix rule handling (*note Suffixes::).\n\n\u001f\nFile: automake.info,  Node: Dependencies,  Next: EXEEXT,  Prev: Support for Other Languages,  Up: Programs\n\n8.19 Automatic dependency tracking\n==================================\n\nAs a developer it is often painful to continually update the\n\u2018Makefile.am\u2019 whenever the include-file dependencies change in a\nproject.  Automake supplies a way to automatically track dependency\nchanges (*note Dependency Tracking::).\n\n   Automake always uses complete dependencies for a compilation,\nincluding system headers.  Automake\u2019s model is that dependency\ncomputation should be a side effect of the build.  To this end,\ndependencies are computed by running all compilations through a special\nwrapper program called \u2018depcomp\u2019.  \u2018depcomp\u2019 understands how to coax\nmany different C and C++ compilers into generating dependency\ninformation in the format it requires.  \u2018automake -a\u2019 will install\n\u2018depcomp\u2019 into your source tree for you.  If \u2018depcomp\u2019 can\u2019t figure out\nhow to properly invoke your compiler, dependency tracking will simply be\ndisabled for your build.\n\n   Experience with earlier versions of Automake (*note Dependency\nTracking Evolution: (automake-history)Dependency Tracking Evolution.)\ntaught us that it is not reliable to generate dependencies only on the\nmaintainer\u2019s system, as configurations vary too much.  So instead\nAutomake implements dependency tracking at build time.\n\n   Automatic dependency tracking can be suppressed by putting\n\u2018no-dependencies\u2019 in the variable \u2018AUTOMAKE_OPTIONS\u2019, or passing\n\u2018no-dependencies\u2019 as an argument to \u2018AM_INIT_AUTOMAKE\u2019 (this should be\nthe preferred way).  Or, you can invoke \u2018automake\u2019 with the \u2018-i\u2019 option.\nDependency tracking is enabled by default.\n\n   The person building your package also can choose to disable\ndependency tracking by configuring with \u2018--disable-dependency-tracking\u2019.\n\n\u001f\nFile: automake.info,  Node: EXEEXT,  Prev: Dependencies,  Up: Programs\n\n8.20 Support for executable extensions\n======================================\n\nOn some platforms, such as Windows, executables are expected to have an\nextension such as \u2018.exe\u2019.  On these platforms, some compilers (GCC among\nthem) will automatically generate \u2018foo.exe\u2019 when asked to generate\n\u2018foo\u2019.\n\n   Automake provides mostly-transparent support for this.  Unfortunately\n_mostly_ doesn\u2019t yet mean _fully_.  Until the English dictionary is\nrevised, you will have to assist Automake if your package must support\nthose platforms.\n\n   One thing you must be aware of is that, internally, Automake rewrites\nsomething like this:\n\n     bin_PROGRAMS = liver\n\nto this:\n\n     bin_PROGRAMS = liver$(EXEEXT)\n\n   The targets Automake generates are likewise given the \u2018$(EXEEXT)\u2019\nextension.\n\n   The variables \u2018TESTS\u2019 and \u2018XFAIL_TESTS\u2019 (*note Simple Tests::) are\nalso rewritten if they contain filenames that have been declared as\nprograms in the same \u2018Makefile\u2019.  (This is mostly useful when some\nprograms from \u2018check_PROGRAMS\u2019 are listed in \u2018TESTS\u2019.)\n\n   However, Automake cannot apply this rewriting to \u2018configure\u2019\nsubstitutions.  This means that if you are conditionally building a\nprogram using such a substitution, then your \u2018configure.ac\u2019 must take\ncare to add \u2018$(EXEEXT)\u2019 when constructing the output variable.\n\n   Sometimes maintainers like to write an explicit link rule for their\nprogram.  Without executable extension support, this is easy\u2014you simply\nwrite a rule whose target is the name of the program.  However, when\nexecutable extension support is enabled, you must instead add the\n\u2018$(EXEEXT)\u2019 suffix.\n\n   This might be a nuisance for maintainers who know their package will\nnever run on a platform that has executable extensions.  For those\nmaintainers, the \u2018no-exeext\u2019 option (*note Options::) will disable this\nfeature.  This works in a fairly ugly way; if \u2018no-exeext\u2019 is seen, then\nthe presence of a rule for a target named \u2018foo\u2019 in \u2018Makefile.am\u2019 will\noverride an \u2018automake\u2019-generated rule for \u2018foo$(EXEEXT)\u2019.  Without the\n\u2018no-exeext\u2019 option, this use will give a diagnostic.\n\n\u001f\nFile: automake.info,  Node: Other Objects,  Next: Other GNU Tools,  Prev: Programs,  Up: Top\n\n9 Other Derived Objects\n***********************\n\nAutomake can handle derived objects that are not C programs.  Sometimes\nthe support for actually building such objects must be explicitly\nsupplied, but Automake will still automatically handle installation and\ndistribution.\n\n* Menu:\n\n* Scripts::                     Executable scripts\n* Headers::                     Header files\n* Data::                        Architecture-independent data files\n* Sources::                     Derived sources\n\n\u001f\nFile: automake.info,  Node: Scripts,  Next: Headers,  Up: Other Objects\n\n9.1 Executable Scripts\n======================\n\nIt is possible to define and install programs that are scripts.  Such\nprograms are listed using the \u2018SCRIPTS\u2019 primary name.  When the script\nis distributed in its final, installable form, the \u2018Makefile\u2019 usually\nlooks as follows:\n\n     # Install my_script in $(bindir) and distribute it.\n     dist_bin_SCRIPTS = my_script\n\n   Scripts are not distributed by default; as we have just seen, those\nthat should be distributed can be specified using a \u2018dist_\u2019 prefix as\nwith other primaries.\n\n   Scripts can be installed in \u2018bindir\u2019, \u2018sbindir\u2019, \u2018libexecdir\u2019,\n\u2018pkglibexecdir\u2019, or \u2018pkgdatadir\u2019.\n\n   Scripts that need not be installed can be listed in \u2018noinst_SCRIPTS\u2019,\nand among them, those which are needed only by \u2018make check\u2019 should go in\n\u2018check_SCRIPTS\u2019.\n\n   When a script needs to be built, the \u2018Makefile.am\u2019 should include the\nappropriate rules.  For instance the \u2018automake\u2019 program itself is a Perl\nscript that is generated from \u2018automake.in\u2019.  Here is how this is\nhandled:\n\n     bin_SCRIPTS = automake\n     CLEANFILES = $(bin_SCRIPTS)\n     EXTRA_DIST = automake.in\n\n     do_subst = sed -e 's,[@]datadir[@],$(datadir),g' \\\n                 -e 's,[@]PERL[@],$(PERL),g' \\\n                 -e 's,[@]PACKAGE[@],$(PACKAGE),g' \\\n                 -e 's,[@]VERSION[@],$(VERSION),g' \\\n                 ...\n\n     automake: automake.in Makefile\n             $(do_subst) < $(srcdir)/automake.in > automake\n             chmod +x automake\n\n   Such scripts for which a build rule has been supplied need to be\ndeleted explicitly using \u2018CLEANFILES\u2019 (*note Clean::), and their sources\nhave to be distributed, usually with \u2018EXTRA_DIST\u2019 (*note Basics of\nDistribution::).\n\n   Another common way to build scripts is to process them from\n\u2018configure\u2019 with \u2018AC_CONFIG_FILES\u2019.  In this situation Automake knows\nwhich files should be cleaned and distributed, and what the rebuild\nrules should look like.\n\n   For instance if \u2018configure.ac\u2019 contains\n\n     AC_CONFIG_FILES([src/my_script], [chmod +x src/my_script])\n\nto build \u2018src/my_script\u2019 from \u2018src/my_script.in\u2019, then a\n\u2018src/Makefile.am\u2019 to install this script in \u2018$(bindir)\u2019 can be as simple\nas\n\n     bin_SCRIPTS = my_script\n     CLEANFILES = $(bin_SCRIPTS)\n\nThere is no need for \u2018EXTRA_DIST\u2019 or any build rule: Automake infers\nthem from \u2018AC_CONFIG_FILES\u2019 (*note Requirements::).  \u2018CLEANFILES\u2019 is\nstill useful, because by default Automake will clean targets of\n\u2018AC_CONFIG_FILES\u2019 in \u2018distclean\u2019, not \u2018clean\u2019.\n\n   Although this looks simpler, building scripts this way has one\ndrawback: directory variables such as \u2018$(datadir)\u2019 are not fully\nexpanded and may refer to other directory variables.\n\n\u001f\nFile: automake.info,  Node: Headers,  Next: Data,  Prev: Scripts,  Up: Other Objects\n\n9.2 Header files\n================\n\nHeader files that must be installed are specified by the \u2018HEADERS\u2019\nfamily of variables.  Headers can be installed in \u2018includedir\u2019,\n\u2018oldincludedir\u2019, \u2018pkgincludedir\u2019 or any other directory you may have\ndefined (*note Uniform::).  For instance,\n\n     include_HEADERS = foo.h bar/bar.h\n\nwill install the two files as \u2018$(includedir)/foo.h\u2019 and\n\u2018$(includedir)/bar.h\u2019.\n\n   The \u2018nobase_\u2019 prefix is also supported:\n\n     nobase_include_HEADERS = foo.h bar/bar.h\n\nwill install the two files as \u2018$(includedir)/foo.h\u2019 and\n\u2018$(includedir)/bar/bar.h\u2019 (*note Alternative::).\n\n   Usually, only header files that accompany installed libraries need to\nbe installed.  Headers used by programs or convenience libraries are not\ninstalled.  The \u2018noinst_HEADERS\u2019 variable can be used for such headers.\nHowever when the header actually belongs to a single convenience library\nor program, we recommend listing it in the program\u2019s or library\u2019s\n\u2018_SOURCES\u2019 variable (*note Program Sources::) instead of in\n\u2018noinst_HEADERS\u2019.  This is clearer for the \u2018Makefile.am\u2019 reader.\n\u2018noinst_HEADERS\u2019 would be the right variable to use in a directory\ncontaining only headers and no associated library or program.\n\n   All header files must be listed somewhere; in a \u2018_SOURCES\u2019 variable\nor in a \u2018_HEADERS\u2019 variable.  Missing ones will not appear in the\ndistribution.\n\n   For header files that are built and must not be distributed, use the\n\u2018nodist_\u2019 prefix as in \u2018nodist_include_HEADERS\u2019 or\n\u2018nodist_prog_SOURCES\u2019.  If these generated headers are needed during the\nbuild, you must also ensure they exist before they are used (*note\nSources::).\n\n\u001f\nFile: automake.info,  Node: Data,  Next: Sources,  Prev: Headers,  Up: Other Objects\n\n9.3 Architecture-independent data files\n=======================================\n\nAutomake supports the installation of miscellaneous data files using the\n\u2018DATA\u2019 family of variables.\n\n   Such data can be installed in the directories \u2018datadir\u2019,\n\u2018sysconfdir\u2019, \u2018sharedstatedir\u2019, \u2018localstatedir\u2019, or \u2018pkgdatadir\u2019.\n\n   By default, data files are _not_ included in a distribution.  Of\ncourse, you can use the \u2018dist_\u2019 prefix to change this on a per-variable\nbasis.\n\n   Here is how Automake declares its auxiliary data files:\n\n     dist_pkgdata_DATA = clean-kr.am clean.am ...\n\n\u001f\nFile: automake.info,  Node: Sources,  Prev: Data,  Up: Other Objects\n\n9.4 Built Sources\n=================\n\nBecause Automake\u2019s automatic dependency tracking works as a side-effect\nof compilation (*note Dependencies::) there is a bootstrap issue: a\ntarget should not be compiled before its dependencies are made, but\nthese dependencies are unknown until the target is first compiled.\n\n   Ordinarily this is not a problem, because dependencies are\ndistributed sources: they preexist and do not need to be built.  Suppose\nthat \u2018foo.c\u2019 includes \u2018foo.h\u2019.  When it first compiles \u2018foo.o\u2019, \u2018make\u2019\nonly knows that \u2018foo.o\u2019 depends on \u2018foo.c\u2019.  As a side-effect of this\ncompilation \u2018depcomp\u2019 records the \u2018foo.h\u2019 dependency so that following\ninvocations of \u2018make\u2019 will honor it.  In these conditions, it\u2019s clear\nthere is no problem: either \u2018foo.o\u2019 doesn\u2019t exist and has to be built\n(regardless of the dependencies), or accurate dependencies exist and\nthey can be used to decide whether \u2018foo.o\u2019 should be rebuilt.\n\n   It\u2019s a different story if \u2018foo.h\u2019 doesn\u2019t exist by the first \u2018make\u2019\nrun.  For instance, there might be a rule to build \u2018foo.h\u2019.  This time\n\u2018file.o\u2019\u2019s build will fail because the compiler can\u2019t find \u2018foo.h\u2019.\n\u2018make\u2019 failed to trigger the rule to build \u2018foo.h\u2019 first by lack of\ndependency information.\n\n   The \u2018BUILT_SOURCES\u2019 variable is a workaround for this problem.  A\nsource file listed in \u2018BUILT_SOURCES\u2019 is made when \u2018make all\u2019, \u2018make\ncheck\u2019, \u2018make install\u2019, \u2018make install-exec\u2019 (or \u2018make dist\u2019) is run,\nbefore other targets are processed.  However, such a source file is not\n_compiled_ unless explicitly requested by mentioning it in some other\n\u2018_SOURCES\u2019 variable.\n\n   So, to conclude our introductory example, we could use \u2018BUILT_SOURCES\n= foo.h\u2019 to ensure \u2018foo.h\u2019 gets built before any other target (including\n\u2018foo.o\u2019) during \u2018make all\u2019 or \u2018make check\u2019.\n\n   \u2018BUILT_SOURCES\u2019 is actually a bit of a misnomer, as any file which\nmust be created early in the build process can be listed in this\nvariable.  Moreover, all built sources do not necessarily have to be\nlisted in \u2018BUILT_SOURCES\u2019.  For instance, a generated \u2018.c\u2019 file doesn\u2019t\nneed to appear in \u2018BUILT_SOURCES\u2019 (unless it is included by another\nsource), because it\u2019s a known dependency of the associated object.\n\n   To emphasize, \u2018BUILT_SOURCES\u2019 is honored only by \u2018make all\u2019, \u2018make\ncheck\u2019, \u2018make install\u2019, and \u2018make install-exec\u2019 (and \u2018make dist\u2019).  This\nmeans you cannot build an arbitrary target (e.g., \u2018make foo\u2019) in a clean\ntree if it depends on a built source.  However it will succeed if you\nhave run \u2018make all\u2019 earlier, because accurate dependencies are already\navailable.\n\n   The next section illustrates and discusses the handling of built\nsources on a toy example.\n\n* Menu:\n\n* Built Sources Example::       Several ways to handle built sources.\n\n\u001f\nFile: automake.info,  Node: Built Sources Example,  Up: Sources\n\n9.4.1 Built Sources Example\n---------------------------\n\nSuppose that \u2018foo.c\u2019 includes \u2018bindir.h\u2019, which is\ninstallation-dependent and not distributed: it needs to be built.  Here\n\u2018bindir.h\u2019 defines the preprocessor macro \u2018bindir\u2019 to the value of the\n\u2018make\u2019 variable \u2018bindir\u2019 (inherited from \u2018configure\u2019).\n\n   We suggest several implementations below.  It\u2019s not meant to be an\nexhaustive listing of all ways to handle built sources, but it will give\nyou a few ideas if you encounter this issue.\n\nFirst Try\n.........\n\nThis first implementation will illustrate the bootstrap issue mentioned\nin the previous section (*note Sources::).\n\n   Here is a tentative \u2018Makefile.am\u2019.\n\n     # This won't work.\n     bin_PROGRAMS = foo\n     foo_SOURCES = foo.c\n     nodist_foo_SOURCES = bindir.h\n     CLEANFILES = bindir.h\n     bindir.h: Makefile\n             echo '#define bindir \"$(bindir)\"' >$@\n\n   This setup doesn\u2019t work, because Automake doesn\u2019t know that \u2018foo.c\u2019\nincludes \u2018bindir.h\u2019.  Remember, automatic dependency tracking works as a\nside-effect of compilation, so the dependencies of \u2018foo.o\u2019 will be known\nonly after \u2018foo.o\u2019 has been compiled (*note Dependencies::).  The\nsymptom is as follows.\n\n     % make\n     source='foo.c' object='foo.o' libtool=no \\\n     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \\\n     depmode=gcc /bin/sh ./depcomp \\\n     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c\n     foo.c:2: bindir.h: No such file or directory\n     make: *** [foo.o] Error 1\n\n   In this example \u2018bindir.h\u2019 is not distributed nor installed, and it\nis not even being built on-time.  One may wonder if the\n\u2018nodist_foo_SOURCES = bindir.h\u2019 line has any use at all.  This line\nsimply states that \u2018bindir.h\u2019 is a source of \u2018foo\u2019, so for instance, it\nshould be inspected while generating tags (*note Tags::).  In other\nwords, it does not help our present problem, and the build would fail\nidentically without it.\n\nUsing \u2018BUILT_SOURCES\u2019\n.....................\n\nA solution is to require \u2018bindir.h\u2019 to be built before anything else.\nThis is what \u2018BUILT_SOURCES\u2019 is meant for (*note Sources::).\n\n     bin_PROGRAMS = foo\n     foo_SOURCES = foo.c\n     nodist_foo_SOURCES = bindir.h\n     BUILT_SOURCES = bindir.h\n     CLEANFILES = bindir.h\n     bindir.h: Makefile\n             echo '#define bindir \"$(bindir)\"' >$@\n\n   See how \u2018bindir.h\u2019 gets built first:\n\n     % make\n     echo '#define bindir \"/usr/local/bin\"' >bindir.h\n     make  all-am\n     make[1]: Entering directory `/home/adl/tmp'\n     source='foo.c' object='foo.o' libtool=no \\\n     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \\\n     depmode=gcc /bin/sh ./depcomp \\\n     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c\n     gcc  -g -O2   -o foo  foo.o\n     make[1]: Leaving directory `/home/adl/tmp'\n\n   However, as said earlier, \u2018BUILT_SOURCES\u2019 applies only to the \u2018all\u2019,\n\u2018check\u2019, and \u2018install\u2019 targets.  It still fails if you try to run \u2018make\nfoo\u2019 explicitly:\n\n     % make clean\n     test -z \"bindir.h\" || rm -f bindir.h\n     test -z \"foo\" || rm -f foo\n     rm -f *.o\n     % : > .deps/foo.Po # Suppress previously recorded dependencies\n     % make foo\n     source='foo.c' object='foo.o' libtool=no \\\n     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \\\n     depmode=gcc /bin/sh ./depcomp \\\n     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c\n     foo.c:2: bindir.h: No such file or directory\n     make: *** [foo.o] Error 1\n\nRecording Dependencies manually\n...............................\n\nUsually people are happy enough with \u2018BUILT_SOURCES\u2019 because they never\nbuild targets such as \u2018make foo\u2019 before \u2018make all\u2019, as in the previous\nexample.  However if this matters to you, you can avoid \u2018BUILT_SOURCES\u2019\nand record such dependencies explicitly in the \u2018Makefile.am\u2019.\n\n     bin_PROGRAMS = foo\n     foo_SOURCES = foo.c\n     nodist_foo_SOURCES = bindir.h\n     foo.$(OBJEXT): bindir.h\n     CLEANFILES = bindir.h\n     bindir.h: Makefile\n             echo '#define bindir \"$(bindir)\"' >$@\n\n   You don\u2019t have to list _all_ the dependencies of \u2018foo.o\u2019 explicitly,\nonly those that might need to be built.  If a dependency already exists,\nit will not hinder the first compilation and will be recorded by the\nnormal dependency tracking code.  (Note that after this first\ncompilation the dependency tracking code will also have recorded the\ndependency between \u2018foo.o\u2019 and \u2018bindir.h\u2019, so our explicit dependency is\nreally useful to the first build only.)\n\n   Adding explicit dependencies like this can be a bit dangerous if you\nare not careful enough.  This is due to the way Automake tries not to\noverwrite your rules (it assumes you know better than it).\n\u2018foo.$(OBJEXT): bindir.h\u2019 supersedes any rule Automake may want to\noutput to build \u2018foo.$(OBJEXT)\u2019.  It happens to work in this case\nbecause Automake doesn\u2019t have to output any \u2018foo.$(OBJEXT):\u2019 target: it\nrelies on a suffix rule instead (i.e., \u2018.c.$(OBJEXT):\u2019).  Always check\nthe generated \u2018Makefile.in\u2019 if you do this.\n\nBuild \u2018bindir.h\u2019 from \u2018configure\u2019\n.................................\n\nIt\u2019s possible to define this preprocessor macro from \u2018configure\u2019, either\nin \u2018config.h\u2019 (*note Defining Directories: (autoconf)Defining\nDirectories.), or by processing a \u2018bindir.h.in\u2019 file using\n\u2018AC_CONFIG_FILES\u2019 (*note Configuration Actions: (autoconf)Configuration\nActions.).\n\n   At this point it should be clear that building \u2018bindir.h\u2019 from\n\u2018configure\u2019 works well for this example.  \u2018bindir.h\u2019 will exist before\nyou build any target, hence will not cause any dependency issue.\n\n   The Makefile can be shrunk as follows.  We do not even have to\nmention \u2018bindir.h\u2019.\n\n     bin_PROGRAMS = foo\n     foo_SOURCES = foo.c\n\n   However, it\u2019s not always possible to build sources from \u2018configure\u2019,\nespecially when these sources are generated by a tool that needs to be\nbuilt first.\n\nBuild \u2018bindir.c\u2019, not \u2018bindir.h\u2019.\n.................................\n\nAnother attractive idea is to define \u2018bindir\u2019 as a variable or function\nexported from \u2018bindir.o\u2019, and build \u2018bindir.c\u2019 instead of \u2018bindir.h\u2019.\n\n     noinst_PROGRAMS = foo\n     foo_SOURCES = foo.c bindir.h\n     nodist_foo_SOURCES = bindir.c\n     CLEANFILES = bindir.c\n     bindir.c: Makefile\n             echo 'const char bindir[] = \"$(bindir)\";' >$@\n\n   \u2018bindir.h\u2019 contains just the variable\u2019s declaration and doesn\u2019t need\nto be built, so it won\u2019t cause any trouble.  \u2018bindir.o\u2019 is always\ndependent on \u2018bindir.c\u2019, so \u2018bindir.c\u2019 will get built first.\n\nWhich is best?\n..............\n\nThere is no panacea, of course.  Each solution has its merits and\ndrawbacks.\n\n   You cannot use \u2018BUILT_SOURCES\u2019 if the ability to run \u2018make foo\u2019 on a\nclean tree is important to you.\n\n   You won\u2019t add explicit dependencies if you are leery of overriding an\nAutomake rule by mistake.\n\n   Building files from \u2018./configure\u2019 is not always possible, neither is\nconverting \u2018.h\u2019 files into \u2018.c\u2019 files.\n\n\u001f\nFile: automake.info,  Node: Other GNU Tools,  Next: Documentation,  Prev: Other Objects,  Up: Top\n\n10 Other GNU Tools\n******************\n\nSince Automake is primarily intended to generate \u2018Makefile.in\u2019s for use\nin GNU programs, it tries hard to interoperate with other GNU tools.\n\n* Menu:\n\n* Emacs Lisp::                  Emacs Lisp\n* gettext::                     Gettext\n* Libtool::                     Libtool\n* Java::                        Java bytecode compilation (deprecated)\n* Python::                      Python\n\n\u001f\nFile: automake.info,  Node: Emacs Lisp,  Next: gettext,  Up: Other GNU Tools\n\n10.1 Emacs Lisp\n===============\n\nAutomake provides some support for Emacs Lisp.  The \u2018LISP\u2019 primary is\nused to hold a list of \u2018.el\u2019 files.  Possible prefixes for this primary\nare \u2018lisp_\u2019 and \u2018noinst_\u2019.  Note that if \u2018lisp_LISP\u2019 is defined, then\n\u2018configure.ac\u2019 must run \u2018AM_PATH_LISPDIR\u2019 (*note Macros::).\n\n   Lisp sources are not distributed by default.  You can prefix the\n\u2018LISP\u2019 primary with \u2018dist_\u2019, as in \u2018dist_lisp_LISP\u2019 or\n\u2018dist_noinst_LISP\u2019, to indicate that these files should be distributed.\n\n   Automake will byte-compile all Emacs Lisp source files using the\nEmacs found by \u2018AM_PATH_LISPDIR\u2019, if any was found.  When performing\nsuch byte-compilation, the flags specified in the (developer-reserved)\n\u2018AM_ELCFLAGS\u2019 and (user-reserved) \u2018ELCFLAGS\u2019 make variables will be\npassed to the Emacs invocation.\n\n   Byte-compiled Emacs Lisp files are not portable among all versions of\nEmacs, so it makes sense to turn this off if you expect sites to have\nmore than one version of Emacs installed.  Furthermore, many packages\ndon\u2019t actually benefit from byte-compilation.  Still, we recommend that\nyou byte-compile your Emacs Lisp sources.  It is probably better for\nsites with strange setups to cope for themselves than to make the\ninstallation less nice for everybody else.\n\n   There are two ways to avoid byte-compiling.  Historically, we have\nrecommended the following construct.\n\n     lisp_LISP = file1.el file2.el\n     ELCFILES =\n\n\u2018ELCFILES\u2019 is an internal Automake variable that normally lists all\n\u2018.elc\u2019 files that must be byte-compiled.  Automake defines \u2018ELCFILES\u2019\nautomatically from \u2018lisp_LISP\u2019.  Emptying this variable explicitly\nprevents byte-compilation.\n\n   Since Automake 1.8, we now recommend using \u2018lisp_DATA\u2019 instead:\n\n     lisp_DATA = file1.el file2.el\n\n   Note that these two constructs are not equivalent.  \u2018_LISP\u2019 will not\ninstall a file if Emacs is not installed, while \u2018_DATA\u2019 will always\ninstall its files.\n\n\u001f\nFile: automake.info,  Node: gettext,  Next: Libtool,  Prev: Emacs Lisp,  Up: Other GNU Tools\n\n10.2 Gettext\n============\n\nIf \u2018AM_GNU_GETTEXT\u2019 is seen in \u2018configure.ac\u2019, then Automake turns on\nsupport for GNU gettext, a message catalog system for\ninternationalization (*note Introduction: (gettext)Top.).\n\n   The \u2018gettext\u2019 support in Automake requires the addition of one or two\nsubdirectories to the package: \u2018po\u2019 and possibly also \u2018intl\u2019.  The\nlatter is needed if \u2018AM_GNU_GETTEXT\u2019 is not invoked with the \u2018external\u2019\nargument, or if \u2018AM_GNU_GETTEXT_INTL_SUBDIR\u2019 is used.  Automake ensures\nthat these directories exist and are mentioned in \u2018SUBDIRS\u2019.\n\n\u001f\nFile: automake.info,  Node: Libtool,  Next: Java,  Prev: gettext,  Up: Other GNU Tools\n\n10.3 Libtool\n============\n\nAutomake provides support for GNU Libtool (*note Introduction:\n(libtool)Top.) with the \u2018LTLIBRARIES\u2019 primary.  *Note A Shared\nLibrary::.\n\n\u001f\nFile: automake.info,  Node: Java,  Next: Python,  Prev: Libtool,  Up: Other GNU Tools\n\n10.4 Java bytecode compilation (deprecated)\n===========================================\n\nAutomake provides some minimal support for Java bytecode compilation\nwith the \u2018JAVA\u2019 primary (in addition to the support for compiling Java\nto native machine code; *note Java Support with gcj::).  Note however\nthat _the interface and most features described here are deprecated_.\nFuture Automake releases will strive to provide a better and cleaner\ninterface, which however _won\u2019t be backward-compatible_; the present\ninterface will probably be removed altogether some time after the\nintroduction of the new interface (if that ever materializes).  In any\ncase, the current \u2018JAVA\u2019 primary features are frozen and will no longer\nbe developed, not even to take bug fixes.\n\n   Any \u2018.java\u2019 files listed in a \u2018_JAVA\u2019 variable will be compiled with\n\u2018JAVAC\u2019 at build time.  By default, \u2018.java\u2019 files are not included in\nthe distribution; you should use the \u2018dist_\u2019 prefix to distribute them.\n\n   Here is a typical setup for distributing \u2018.java\u2019 files and installing\nthe \u2018.class\u2019 files resulting from their compilation.\n\n     javadir = $(datadir)/java\n     dist_java_JAVA = a.java b.java ...\n\n   Currently Automake enforces the restriction that only one \u2018_JAVA\u2019\nprimary can be used in a given \u2018Makefile.am\u2019.  The reason for this\nrestriction is that, in general, it isn\u2019t possible to know which\n\u2018.class\u2019 files were generated from which \u2018.java\u2019 files, so it would be\nimpossible to know which files to install where.  For instance, a\n\u2018.java\u2019 file can define multiple classes; the resulting \u2018.class\u2019 file\nnames cannot be predicted without parsing the \u2018.java\u2019 file.\n\n   There are a few variables that are used when compiling Java sources:\n\n\u2018JAVAC\u2019\n     The name of the Java compiler.  This defaults to \u2018javac\u2019.\n\n\u2018JAVACFLAGS\u2019\n     The flags to pass to the compiler.  This is considered to be a user\n     variable (*note User Variables::).\n\n\u2018AM_JAVACFLAGS\u2019\n     More flags to pass to the Java compiler.  This, and not\n     \u2018JAVACFLAGS\u2019, should be used when it is necessary to put Java\n     compiler flags into \u2018Makefile.am\u2019.\n\n\u2018JAVAROOT\u2019\n     The value of this variable is passed to the \u2018-d\u2019 option to \u2018javac\u2019.\n     It defaults to \u2018$(top_builddir)\u2019.\n\n\u2018CLASSPATH_ENV\u2019\n     This variable is a shell expression that is used to set the\n     \u2018CLASSPATH\u2019 environment variable on the \u2018javac\u2019 command line.  (In\n     the future we will probably handle class path setting differently.)\n\n\u001f\nFile: automake.info,  Node: Python,  Prev: Java,  Up: Other GNU Tools\n\n10.5 Python\n===========\n\nAutomake provides support for Python compilation with the \u2018PYTHON\u2019\nprimary.  A typical setup is to call \u2018AM_PATH_PYTHON\u2019 in \u2018configure.ac\u2019\nand use a line like the following in \u2018Makefile.am\u2019:\n\n     python_PYTHON = tree.py leave.py\n\n   Any files listed in a \u2018_PYTHON\u2019 variable will be byte-compiled with\n\u2018py-compile\u2019 at install time.  \u2018py-compile\u2019 actually creates both\nstandard (\u2018.pyc\u2019) and optimized (\u2018.pyo\u2019) byte-compiled versions of the\nsource files.  Note that because byte-compilation occurs at install\ntime, any files listed in \u2018noinst_PYTHON\u2019 will not be compiled.  Python\nsource files are included in the distribution by default; prepend\n\u2018nodist_\u2019 (as in \u2018nodist_python_PYTHON\u2019) to omit them.\n\n   Automake ships with an Autoconf macro called \u2018AM_PATH_PYTHON\u2019 that\nwill determine some Python-related directory variables (see below).  If\nyou have called \u2018AM_PATH_PYTHON\u2019 from \u2018configure.ac\u2019, then you may use\nthe variables \u2018python_PYTHON\u2019 or \u2018pkgpython_PYTHON\u2019 to list Python\nsource files in your \u2018Makefile.am\u2019, depending on where you want your\nfiles installed (see the definitions of \u2018pythondir\u2019 and \u2018pkgpythondir\u2019\nbelow).\n\n -- Macro: AM_PATH_PYTHON ([VERSION], [ACTION-IF-FOUND],\n     [ACTION-IF-NOT-FOUND])\n\n     Search for a Python interpreter on the system.  This macro takes\n     three optional arguments.  The first argument, if present, is the\n     minimum version of Python required for this package:\n     \u2018AM_PATH_PYTHON\u2019 will skip any Python interpreter that is older\n     than VERSION.  If an interpreter is found and satisfies VERSION,\n     then ACTION-IF-FOUND is run.  Otherwise, ACTION-IF-NOT-FOUND is\n     run.\n\n     If ACTION-IF-NOT-FOUND is not specified, as in the following\n     example, the default is to abort \u2018configure\u2019.\n\n          AM_PATH_PYTHON([2.2])\n\n     This is fine when Python is an absolute requirement for the\n     package.  If Python >= 2.5 was only _optional_ to the package,\n     \u2018AM_PATH_PYTHON\u2019 could be called as follows.\n\n          AM_PATH_PYTHON([2.5],, [:])\n\n     If the \u2018PYTHON\u2019 variable is set when \u2018AM_PATH_PYTHON\u2019 is called,\n     then that will be the only Python interpreter that is tried.\n\n     \u2018AM_PATH_PYTHON\u2019 creates the following output variables based on\n     the Python installation found during configuration.\n\n\u2018PYTHON\u2019\n     The name of the Python executable, or \u2018:\u2019 if no suitable\n     interpreter could be found.\n\n     Assuming ACTION-IF-NOT-FOUND is used (otherwise \u2018./configure\u2019 will\n     abort if Python is absent), the value of \u2018PYTHON\u2019 can be used to\n     set up a conditional in order to disable the relevant part of a\n     build as follows.\n\n          AM_PATH_PYTHON(,, [:])\n          AM_CONDITIONAL([HAVE_PYTHON], [test \"$PYTHON\" != :])\n\n\u2018PYTHON_VERSION\u2019\n     The Python version number, in the form MAJOR.MINOR (e.g., \u20182.5\u2019).\n     This is currently the value of \u2018'%u.%u' % sys.version_info[:2]\u2019.\n\n\u2018PYTHON_PREFIX\u2019\n     The string \u2018${prefix}\u2019.  This term may be used in future work that\n     needs the contents of Python\u2019s \u2018sys.prefix\u2019, but general consensus\n     is to always use the value from \u2018configure\u2019.\n\n\u2018PYTHON_EXEC_PREFIX\u2019\n     The string \u2018${exec_prefix}\u2019.  This term may be used in future work\n     that needs the contents of Python\u2019s \u2018sys.exec_prefix\u2019, but general\n     consensus is to always use the value from \u2018configure\u2019.\n\n\u2018PYTHON_PLATFORM\u2019\n     The canonical name used by Python to describe the operating system,\n     as given by \u2018sys.platform\u2019.  This value is sometimes needed when\n     building Python extensions.\n\n\u2018pythondir\u2019\n     The directory name for the \u2018site-packages\u2019 subdirectory of the\n     standard Python install tree.\n\n\u2018pkgpythondir\u2019\n     This is the directory under \u2018pythondir\u2019 that is named after the\n     package.  That is, it is \u2018$(pythondir)/$(PACKAGE)\u2019.  It is provided\n     as a convenience.\n\n\u2018pyexecdir\u2019\n     This is the directory where Python extension modules (shared\n     libraries) should be installed.  An extension module written in C\n     could be declared as follows to Automake:\n\n          pyexec_LTLIBRARIES = quaternion.la\n          quaternion_la_SOURCES = quaternion.c support.c support.h\n          quaternion_la_LDFLAGS = -avoid-version -module\n\n\u2018pkgpyexecdir\u2019\n     This is a convenience variable that is defined as\n     \u2018$(pyexecdir)/$(PACKAGE)\u2019.\n\n   All of these directory variables have values that start with either\n\u2018${prefix}\u2019 or \u2018${exec_prefix}\u2019 unexpanded.  This works fine in\n\u2018Makefiles\u2019, but it makes these variables hard to use in \u2018configure\u2019.\nThis is mandated by the GNU coding standards, so that the user can run\n\u2018make prefix=/foo install\u2019.  The Autoconf manual has a section with more\ndetails on this topic (*note Installation Directory Variables:\n(autoconf)Installation Directory Variables.).  See also *note Hard-Coded\nInstall Paths::.\n\n\u001f\nFile: automake.info,  Node: Documentation,  Next: Install,  Prev: Other GNU Tools,  Up: Top\n\n11 Building documentation\n*************************\n\nCurrently Automake provides support for Texinfo and man pages.\n\n* Menu:\n\n* Texinfo::                     Texinfo\n* Man Pages::                   Man pages\n\n\u001f\nFile: automake.info,  Node: Texinfo,  Next: Man Pages,  Up: Documentation\n\n11.1 Texinfo\n============\n\nIf the current directory contains Texinfo source, you must declare it\nwith the \u2018TEXINFOS\u2019 primary.  Generally Texinfo files are converted into\ninfo, and thus the \u2018info_TEXINFOS\u2019 variable is most commonly used here.\nAny Texinfo source file should have the \u2018.texi\u2019 extension.  Automake\nalso accepts \u2018.txi\u2019 or \u2018.texinfo\u2019 extensions, but their use is\ndiscouraged now, and will elicit runtime warnings.\n\n   Automake generates rules to build \u2018.info\u2019, \u2018.dvi\u2019, \u2018.ps\u2019, \u2018.pdf\u2019 and\n\u2018.html\u2019 files from your Texinfo sources.  Following the GNU Coding\nStandards, only the \u2018.info\u2019 files are built by \u2018make all\u2019 and installed\nby \u2018make install\u2019 (unless you use \u2018no-installinfo\u2019, see below).\nFurthermore, \u2018.info\u2019 files are automatically distributed so that Texinfo\nis not a prerequisite for installing your package.\n\n   It is worth noting that, contrary to what happens with the other\nformats, the generated \u2018.info\u2019 files are by default placed in \u2018srcdir\u2019\nrather than in the \u2018builddir\u2019.  This can be changed with the\n\u2018info-in-builddir\u2019 option.\n\n   Other documentation formats can be built on request by \u2018make dvi\u2019,\n\u2018make ps\u2019, \u2018make pdf\u2019 and \u2018make html\u2019, and they can be installed with\n\u2018make install-dvi\u2019, \u2018make install-ps\u2019, \u2018make install-pdf\u2019 and \u2018make\ninstall-html\u2019 explicitly.  \u2018make uninstall\u2019 will remove everything: the\nTexinfo documentation installed by default as well as all the above\noptional formats.\n\n   All of these targets can be extended using \u2018-local\u2019 rules (*note\nExtending::).\n\n   If the \u2018.texi\u2019 file \u2018@include\u2019s \u2018version.texi\u2019, then that file will\nbe automatically generated.  The file \u2018version.texi\u2019 defines four\nTexinfo flags you can reference using \u2018@value{EDITION}\u2019,\n\u2018@value{VERSION}\u2019, \u2018@value{UPDATED}\u2019, and \u2018@value{UPDATED-MONTH}\u2019.\n\n\u2018EDITION\u2019\n\u2018VERSION\u2019\n     Both of these flags hold the version number of your program.  They\n     are kept separate for clarity.\n\n\u2018UPDATED\u2019\n     This holds the date the primary \u2018.texi\u2019 file was last modified.\n\n\u2018UPDATED-MONTH\u2019\n     This holds the name of the month in which the primary \u2018.texi\u2019 file\n     was last modified.\n\n   The \u2018version.texi\u2019 support requires the \u2018mdate-sh\u2019 script; this\nscript is supplied with Automake and automatically included when\n\u2018automake\u2019 is invoked with the \u2018--add-missing\u2019 option.\n\n   If you have multiple Texinfo files, and you want to use the\n\u2018version.texi\u2019 feature, then you have to have a separate version file\nfor each Texinfo file.  Automake will treat any include in a Texinfo\nfile that matches \u2018vers*.texi\u2019 just as an automatically generated\nversion file.\n\n   Sometimes an info file actually depends on more than one \u2018.texi\u2019\nfile.  For instance, in GNU Hello, \u2018hello.texi\u2019 includes the file\n\u2018fdl.texi\u2019.  You can tell Automake about these dependencies using the\n\u2018TEXI_TEXINFOS\u2019 variable.  Here is how GNU Hello does it:\n\n     info_TEXINFOS = hello.texi\n     hello_TEXINFOS = fdl.texi\n\n   By default, Automake requires the file \u2018texinfo.tex\u2019 to appear in the\nsame directory as the \u2018Makefile.am\u2019 file that lists the \u2018.texi\u2019 files.\nIf you used \u2018AC_CONFIG_AUX_DIR\u2019 in \u2018configure.ac\u2019 (*note Finding\n\u2018configure\u2019 Input: (autoconf)Input.), then \u2018texinfo.tex\u2019 is looked for\nthere.  In both cases, \u2018automake\u2019 then supplies \u2018texinfo.tex\u2019 if\n\u2018--add-missing\u2019 is given, and takes care of its distribution.  However,\nif you set the \u2018TEXINFO_TEX\u2019 variable (see below), it overrides the\nlocation of the file and turns off its installation into the source as\nwell as its distribution.\n\n   The option \u2018no-texinfo.tex\u2019 can be used to eliminate the requirement\nfor the file \u2018texinfo.tex\u2019.  Use of the variable \u2018TEXINFO_TEX\u2019 is\npreferable, however, because that allows the \u2018dvi\u2019, \u2018ps\u2019, and \u2018pdf\u2019\ntargets to still work.\n\n   Automake generates an \u2018install-info\u2019 rule; some people apparently use\nthis.  By default, info pages are installed by \u2018make install\u2019, so\nrunning \u2018make install-info\u2019 is pointless.  This can be prevented via the\n\u2018no-installinfo\u2019 option.  In this case, \u2018.info\u2019 files are not installed\nby default, and user must request this explicitly using \u2018make\ninstall-info\u2019.\n\n   By default, \u2018make install-info\u2019 and \u2018make uninstall-info\u2019 will try to\nrun the \u2018install-info\u2019 program (if available) to update (or\ncreate/remove) the \u2018${infodir}/dir\u2019 index.  If this is undesired, it can\nbe prevented by exporting the \u2018AM_UPDATE_INFO_DIR\u2019 variable to \"\u2018no\u2019\".\n\n   The following variables are used by the Texinfo build rules.\n\n\u2018MAKEINFO\u2019\n     The name of the program invoked to build \u2018.info\u2019 files.  This\n     variable is defined by Automake.  If the \u2018makeinfo\u2019 program is\n     found on the system then it will be used by default; otherwise\n     \u2018missing\u2019 will be used instead.\n\n\u2018MAKEINFOHTML\u2019\n     The command invoked to build \u2018.html\u2019 files.  Automake defines this\n     to \u2018$(MAKEINFO) --html\u2019.\n\n\u2018MAKEINFOFLAGS\u2019\n     User flags passed to each invocation of \u2018$(MAKEINFO)\u2019 and\n     \u2018$(MAKEINFOHTML)\u2019.  This user variable (*note User Variables::) is\n     not expected to be defined in any \u2018Makefile\u2019; it can be used by\n     users to pass extra flags to suit their needs.\n\n\u2018AM_MAKEINFOFLAGS\u2019\n\u2018AM_MAKEINFOHTMLFLAGS\u2019\n     Maintainer flags passed to each \u2018makeinfo\u2019 invocation.  Unlike\n     \u2018MAKEINFOFLAGS\u2019, these variables are meant to be defined by\n     maintainers in \u2018Makefile.am\u2019.  \u2018$(AM_MAKEINFOFLAGS)\u2019 is passed to\n     \u2018makeinfo\u2019 when building \u2018.info\u2019 files; and\n     \u2018$(AM_MAKEINFOHTMLFLAGS)\u2019 is used when building \u2018.html\u2019 files.\n\n     For instance, the following setting can be used to obtain one\n     single \u2018.html\u2019 file per manual, without node separators.\n          AM_MAKEINFOHTMLFLAGS = --no-headers --no-split\n\n     \u2018AM_MAKEINFOHTMLFLAGS\u2019 defaults to \u2018$(AM_MAKEINFOFLAGS)\u2019.  This\n     means that defining \u2018AM_MAKEINFOFLAGS\u2019 without defining\n     \u2018AM_MAKEINFOHTMLFLAGS\u2019 will impact builds of both \u2018.info\u2019 and\n     \u2018.html\u2019 files.\n\n\u2018TEXI2DVI\u2019\n     The name of the command that converts a \u2018.texi\u2019 file into a \u2018.dvi\u2019\n     file.  This defaults to \u2018texi2dvi\u2019, a script that ships with the\n     Texinfo package.\n\n\u2018TEXI2PDF\u2019\n     The name of the command that translates a \u2018.texi\u2019 file into a\n     \u2018.pdf\u2019 file.  This defaults to \u2018$(TEXI2DVI) --pdf --batch\u2019.\n\n\u2018DVIPS\u2019\n     The name of the command that builds a \u2018.ps\u2019 file out of a \u2018.dvi\u2019\n     file.  This defaults to \u2018dvips\u2019.\n\n\u2018TEXINFO_TEX\u2019\n     If your package has Texinfo files in many directories, you can use\n     the variable \u2018TEXINFO_TEX\u2019 to tell Automake where to find the\n     canonical \u2018texinfo.tex\u2019 for your package.  The value of this\n     variable should be the relative path from the current \u2018Makefile.am\u2019\n     to \u2018texinfo.tex\u2019:\n\n          TEXINFO_TEX = ../doc/texinfo.tex\n\n\u001f\nFile: automake.info,  Node: Man Pages,  Prev: Texinfo,  Up: Documentation\n\n11.2 Man Pages\n==============\n\nA package can also include man pages (but see the GNU standards on this\nmatter, *note (standards)Man Pages::.)  Man pages are declared using the\n\u2018MANS\u2019 primary.  Generally the \u2018man_MANS\u2019 variable is used.  Man pages\nare automatically installed in the correct subdirectory of \u2018mandir\u2019,\nbased on the file extension.\n\n   File extensions such as \u2018.1c\u2019 are handled by looking for the valid\npart of the extension and using that to determine the correct\nsubdirectory of \u2018mandir\u2019.  Valid section names are the digits \u20180\u2019\nthrough \u20189\u2019, and the letters \u2018l\u2019 and \u2018n\u2019.\n\n   Sometimes developers prefer to name a man page something like\n\u2018foo.man\u2019 in the source, and then rename it to have the correct suffix,\nfor example \u2018foo.1\u2019, when installing the file.  Automake also supports\nthis mode.  For a valid section named SECTION, there is a corresponding\ndirectory named \u2018manSECTIONdir\u2019, and a corresponding \u2018_MANS\u2019 variable.\nFiles listed in such a variable are installed in the indicated section.\nIf the file already has a valid suffix, then it is installed as-is;\notherwise the file suffix is changed to match the section.\n\n   For instance, consider this example:\n     man1_MANS = rename.man thesame.1 alsothesame.1c\n\nIn this case, \u2018rename.man\u2019 will be renamed to \u2018rename.1\u2019 when installed,\nbut the other files will keep their names.\n\n   By default, man pages are installed by \u2018make install\u2019.  However,\nsince the GNU project does not require man pages, many maintainers do\nnot expend effort to keep the man pages up to date.  In these cases, the\n\u2018no-installman\u2019 option will prevent the man pages from being installed\nby default.  The user can still explicitly install them via \u2018make\ninstall-man\u2019.\n\n   For fast installation, with many files it is preferable to use\n\u2018manSECTION_MANS\u2019 over \u2018man_MANS\u2019 as well as files that do not need to\nbe renamed.\n\n   Man pages are not currently considered to be source, because it is\nnot uncommon for man pages to be automatically generated.  Therefore\nthey are not automatically included in the distribution.  However, this\ncan be changed by use of the \u2018dist_\u2019 prefix.  For instance here is how\nto distribute and install the two man pages of GNU \u2018cpio\u2019 (which\nincludes both Texinfo documentation and man pages):\n\n     dist_man_MANS = cpio.1 mt.1\n\n   The \u2018nobase_\u2019 prefix is meaningless for man pages and is disallowed.\n\n   Executables and manpages may be renamed upon installation (*note\nRenaming::).  For manpages this can be avoided by use of the \u2018notrans_\u2019\nprefix.  For instance, suppose an executable \u2018foo\u2019 allowing to access a\nlibrary function \u2018foo\u2019 from the command line.  The way to avoid renaming\nof the \u2018foo.3\u2019 manpage is:\n\n     man_MANS = foo.1\n     notrans_man_MANS = foo.3\n\n   \u2018notrans_\u2019 must be specified first when used in conjunction with\neither \u2018dist_\u2019 or \u2018nodist_\u2019 (*note Fine-grained Distribution Control::).\nFor instance:\n\n     notrans_dist_man3_MANS = bar.3\n\n\u001f\nFile: automake.info,  Node: Install,  Next: Clean,  Prev: Documentation,  Up: Top\n\n12 What Gets Installed\n**********************\n\nNaturally, Automake handles the details of actually installing your\nprogram once it has been built.  All files named by the various\nprimaries are automatically installed in the appropriate places when the\nuser runs \u2018make install\u2019.\n\n* Menu:\n\n* Basics of Installation::      What gets installed where\n* The Two Parts of Install::    Installing data and programs separately\n* Extending Installation::      Adding your own rules for installation\n* Staged Installs::             Installation in a temporary location\n* Install Rules for the User::  Useful additional rules\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/old/ChangeLog.03": "2003-12-31  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (generate_makefile): Update misleading comment.\n\n\t* automake.in (handle_languages): Define %DEPBASE% conditionally\n\ton subdir-objects.  Define SUBDIROBJ.  Do not clean *_.c files\n\there ...\n\t(lang_c_finish): ... do it here.\n\t(handle_single_transform_list): Do not output specific rules for\n\tsubdir-objects files which are not renamed.  This should reduce\n\tthe size of Makefiles with lots of subdirectory sources.\n\t* lib/depcomp: Simplify computation of dependency output, and use\n\tDEPDIR.\n\t* lib/am/depend2.am (%EXT%.o, %EXT%.obj, %EXT%.lo): Adjust call\n\tto depcomp.  Compute depbase on-the-fly in generic fastdep rules\n\tfor subdir-objects.\n\t* tests/ansi9.test: Do not grep for an explicit rule that\n\twe no longer expect.  Really run $MAKE to make sure the chain\n\tof rules works.\n\t* tests/yacc5.test: Do not grep for an explicit rule that\n\twe no longer expect.  Adjust to use set -e.\n\n2003-12-27  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (@common_files): Move configure, configure.ac, and\n\tconfigure.in ...\n\t(@common_sometimes): ... here so that these files do not appear\n\ttwice in DIST_COMMON.\n\n\t* automake.in (maybe_push_required_file): Add $(srcdir) in front\n\ta required files outside the current directory or its subdirectories.\n\t* lib/am/distdir.am (distdir): Update comment.\n\tReport from Nicolas Joly.\n\n2003-12-26  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* doc/automake.texi (@copying): Do not repeat the version.\n\t(Top): Use @insertcopying.  Add a @detailmenu, this works around\n\tEmacs 21's inability to lookup indices in sub-nodes (reported\n\tby Kevin Ryde).\n\t(C++ Support, Assembly Support, Fortran 77 Support, Java Support,\n\tSupport for Other Languages, Preprocessing Fortran 77, Compiling\n\tFortran 77 Files, Mixing Fortran 77 With C and C++, How the Linker\n\tis Chosen): Add missing descriptions in menus.\n\t(Fortran 77 and Autoconf): Remove, this node was just saying \"use\n\tAutoconf 2.53 or greater\".\n\n2003-12-26  Santiago Vila  <sanvila@unex.es>  (tiny change)\n\n\t* NEWS: s/Gettext 1.12.1/Gettext 0.12.1/\n\n2003-12-25  Nicolas Joly  <njoly@pasteur.fr>  (tiny change)\n\n\t* doc/automake.texi (Conditional Sources): Typo.\n\n2003-12-25  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Config.in: Require Exporter.\n\tReport from Kevin Ryde (failure with Perl 5.005_03).\n\n2003-12-15  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/aclocal6.test: Check for autom4te.cache only if it has\n\tbeen created.\n\t* tests/maintclean.test: Update comment.\n\tReport from Bruno Haible.\n\n\t* tests/txinfo24.test, tests/txinfo25.test, tests/txinfo28.test:\n\tRequire texi2dvi-o.\n\tReport from V\u00e1clav Haisman.\n\n2003-12-10  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* configure.ac, NEWS: Bump version to 1.8a.\n\n\t* configure.ac, NEWS: Bump version to 1.8.\n\n\t* lib/texinfo.tex: New upstream version.\n\n\t* Makefile.am (INSTALL): Copy the source from $(srcdir).\n\n2003-12-09  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Rule.pm (define): Remove debugging traces.\n\tReport from Akim Demaille.\n\n2003-12-09  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>  (tiny change)\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* Makefile.am (do_subst): Fix the substitution of @configure_input@.\n\t(automake, aclocal): Create the output atomically and make it\n\tread-only, as done in the Autoconf package.\n\t* lib/Automake/Makefile.am (do_subst): Fix the substitution of\n\t@configure_input@.\n\t(Config.pm): Create the output atomically and make it read-only.\n\t* m4/Makefile.am ($(top_srcdir)/m4/amversion.m4): Substitute\n\t@configure_input@ and make the output read-only.\n\t* lib/Automake/Config.in, m4/amversion.in, tests/aclocal.in,\n\ttests/automake.in, tests/defs.in: Add a @configure_input@ line.\n\n2003-12-09  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>  (tiny change)\n\n\t* doc/automake.texi (Local Macros, CVS): Typos.\n\n2003-12-08  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (hook): Use $$ as prototype, not $\\&.\n\tPerl 5.6.0 will not accept a reference sub reference for the\n\tlatter.\n\t* automake.in (var_SUFFIXES_trigger): Adjust registration via\n\tAutomake::Variable::hook.\n\t(handle_texinfo_helper): Make sure `inner_expand => 1' appears\n\ton one line, so that Perl 5.6.0 does not complain about\n\tinner_expand being a bare identifier.\n\n2003-12-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* aclocal.in (check_acinclude, scan_file): Output `warning:' in\n\tfront of warnings.\n\tReport from Pavel Roskin.\n\n2003-12-04  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* TODO: Remove some old entries.\n\n\t* doc/automake.texi (Rebuilding): Document CONFIGURE_DEPENDENCIES\n\tand CONFIG_STATUS_DEPENDENCIES.  Move this sections later\n\tin the manual since it's pretty advanced material.\n\n\t* automake.in ($config_header_location): Remove.  Use\n\t%ac_config_files_location instead.\n\t(rewrite_inputs_into_dependencies): Do not prepend $(top_builddir)/\n\tat the top-level.\n\t(handle_configure): Use rewrite_inputs_into_dependencies to\n\tdistribute and compute AC_CONFIG_HEADERS dependencies.\n\t(scan_autoconf_traces) <AC_CONFIG_HEADERS>: Fill\n\t%ac_config_files_location.\n\t* lib/am/remake-hdr.am ($(srcdir)/%CONFIG_HIN%): Rename as ...\n\t(%CONFIG_HIN%): ... this.  $(srcdir) is already added in\n\tscan_autoconf_traces.\n\t* tests/Makefile.am (TESTS): Add confh5.test.\n\t* tests/confh5.test: New file.\n\n\t* tests/ltlibsrc.test: Fix the zoo_d_old2_la.c rule in Makefile.am,\n\t$< is not portable and the source is in $(srcdir).\n\n2003-12-03  Paolo Bonzini  <bonzini@gnu.org>\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_configure): Do not require link sources if\n\tthey contain a dollar, or if they were built.  Likewise, do not\n\tclean link destination if they contain a dollar.\n\t(scan_autoconf_traces) <AC_CONFIG_LINKS>: Populate\n\t%ac_config_files_location with link destinations.  Do not\n\tstore locations in @config_links, now that %ac_config_files_location\n\thave them.\n\t* tests/conflnk3.test: New file.\n\t* tests/Makefile.am (TESTS): Add conflnk3.test.\n\n2003-12-02  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* configure.ac, NEWS: Bump version to 1.7i.\n\n\t* configure.ac, NEWS: Bump version to 1.7h.\n\n\t* doc/automake.texi (Default _SOURCES): Fix reference to true.\n\n\t* lib/texinfo.tex: New upstream version.\n\n2003-11-30  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_source_transform): If it's present, use\n\tlibfoo_la.c instead of libfoo.c as the default source of\n\tlibfoo.la, and issue an -Wobsolete diagnostic.  Do not be\n\tgreedy in the suffix replacement regex.\n\t* doc/automake.texi (Default _SOURCES): New node.\n\t(Program Sources, Libtool Modules): Refer to it.\n\t* tests/ltlibsrc.test: Update to check for old default source files.\n\n2003-11-30  Gary V. Vaughan  <gary@gnu.org>\n\n\t* automake.in (&handle_source_transform): Calculate a default file\n\tfor use in the absence of an appropriate _SOURCES declaration by\n\tfirst stripping any suffix from the unxformed target name, and\n\tappending `.c'.\n\t* doc/automake.texi (Program Sources, Libtool Modules): Document this.\n\t* tests/ltlibsrc.test: New file.\n\t* tests/Makefile.am (TESTS): Add ltlibsrc.test.\n\n2003-11-29  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (loc_and_value_as_list_recursive,\n\t_value_as_list_recursive_worker): Merge into ...\n\t(value_as_list_recursive): ... this function.  Pass options\n\tas a hash argument, and use the `location' option to trigger\n\tthe behavior of loc_and_value_as_list_recursive.\n\t(traverse_recursively, transform_variable_recursively): Take\n\toptions as a %options argument.\n\t(_do_recursive_traversal): Perform expansion of inner variables\n\t(as in `$(FILE).ext') on request.\n\t* automake.in (handle_options, check_libobjs_sources)\n\t(handle_source_transform, handle_LIBOBJS, handle_ltlibraries)\n\t(handle_ltlibraries, handle_man_pages, handle_dist)\n\t(handle_gettext, am_install_var): Adjust usage of\n\tvalue_as_list_recursive.\n\t(handle_texinfo_helper): Pass inner_expand to\n\tvalue_as_list_recursive.\n\t* tests/txinfo28.test: New file.\n\t* tests/Makefile.am (TESTS): Add txinfo28.test.\n\tReport from Ralf Corsepius.\n\n\t* lib/Automake/Variable.pm (_do_recursive_traversal): Do not\n\tupdate @_substfroms and @_substfroms for undefined variables.\n\t* tests/substre2.test: New file.\n\t* tests/Makefile.am (TESTS): Add substre2.test.\n\n\t* lib/Automake/VarDef.pm (value): Rename as ...\n\t(raw_value): ... this.\n\t(value): New method, strip # and \\\\\\n.\n\t(dump): Use raw_value.\n\t* lib/Automake/Variable.pm (output): Use raw_value.\n\t(value_as_list): Simplify, now that backslash and comments\n\tare already removed.\n\t* tests/txinfo22.test: Make sure Automake isn't confused\n\tby comments in variables.\n\n2003-11-27  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* doc/automake.texi: More target vs. rule editing.  Back out some\n\tof the previous changes.  It's OK to talk about targets as \"entry\n\tpoints\", or as thing to build, but targets cannot be run: rules\n\tare run.\n\n\t* doc/automake.texi: s/target/rule/ where appropriate.  A target\n\tis the destination of a target rule, not the rule itself.\n\tSuggested by Bruno Haible.\n\n2003-11-25  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* configure.ac, NEWS: Bump version to 1.7g.\n\n\t* configure.ac, NEWS: Bump version to 1.7f.\n\n\t* automake.in (prepend_srcdir): Parenthesize @inputs to remove\n\ta maintainer-check warning.\n\t* tests/subst2.test: Rewrite the $MAKE invocation to please\n\tmaintainer-check.\n\n\t* lib/config.sub, lib/config.guess, lib/texinfo.tex: New upstream\n\tversions.\n\n\t* doc/automake.texi (Program variables): Mention per-target\n\t_CPPFLAGS in the documentation of INCLUDES.\n\t* automake.in (generate_makefile): Likewise in the INCLUDES diagnostic.\n\tReport from Bob Friesenhahn.\n\n\t* doc/automake.texi (Extending): Elaborate on overriding.\n\t* NEWS: Likewise.\n\tSuggested by Bruno Haible.\n\n2003-11-24  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (output): Add $(am__empty) to variable\n\tdefinitions that end with a line full of @substitutions@ that\n\twould confuse HP-UX Make if it were blank.\n\t(transform_variable_recursively): Make sure not to erase empty\n\tvariables.\n\t* tests/Makefile.am (TESTS): Add subst2.test.\n\t* tests/subst2.test: New file.\n\tReport from Harlan Stenn.\n\n\t* lib/am/texibuild.am (%SOURCE_SUFFIX%.html): Work around a\n\tTexinfo 4.1 bug.\n\tReport from Dalibor Topic.\n\n2003-11-22  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFix for PR automake/411:\n\t* automake.in (rewrite_inputs_into_dependencies): Simplify, and rename\n\tinto ...\n\t(prepend_srcdir): ... this.\n\t(rewrite_inputs_into_dependencies): New function, extracted from ...\n\t(handle_configure): ... here.  Adjust to use prepend_srcdir\n\tor rewrite_inputs_into_dependencies where needed.  Especially,\n\tusing (the new) rewrite_inputs_into_dependencies to compute\n\tMakefile dependencies will fix PR/411.\n\t* lib/am/configure.am (DIST_COMMON): Remove %MAKEFILE-IN%, it's\n\talready distributed by rewrite_inputs_into_dependencies.\n\t* tests/Makefile.am (TESTS): Add output10.test, remove distcom.test.\n\t* tests/colon3.test: Use set -e.  Don't allow any AUTOMAKE\n\tinvocation refer to zardoz.  Make sure two.in and three.in\n\tappear as $(srcdir)/two.in and $(srcdir)/three.in dependencies.\n\t* tests/distcom.test: Delete.  This is covered by tests/output9.test.\n\t* tests/output10.test: New file, for PR/411.\n\n2003-11-21  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (append_exeext): Do not append $(EXEEXT) to\n\t@substitutions@.\n\t* tests/exeext4.test: New file.\n\t* tests/Makefile.am (TESTS): Add exeext4.test.\n\n2003-11-19  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/configure.am (%MAKEFILE%): Remove %MAINTAINER-MODE%,\n\tmistakenly added on 2001-03-05.\n\t* tests/remake5.test: New file.\n\t* tests/Makefile.am (TESTS): Add remake5.test.\n\tReport from Ralf Corsepius.\n\n2003-11-18  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* configure.ac, NEWS: Bump version to 1.7e.\n\n\t* configure.ac, NEWS: Bump version to 1.7d.\n\n\t* lib/config.sub, lib/config.guess, lib/texinfo.tex: New\n\tupstream versions.\n\n2003-11-18  Maciej W. Rozycki  <macro@ds2.pg.gda.pl>  (tiny change)\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/texinfos.am (install-info): Depend on\n\tinstall-info-recursive or install-info-am even if no-installinfo.\n\t* tests/txinfo27.test: New file.\n\t* tests/Makefile.am (TESTS): Add txinfo26.test.\n\n2003-11-18  Paolo Bonzini  <bonzini@gnu.org>\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/ylwrap: Do not overwrite headers if they haven't changed.\n\tFix the include guard substitution.\n\t* tests/yacc6.test: Augment to run ylwrap, and make sure it\n\tdoes not needlessly update headers.\n\t* tests/yacc8.test: Make sure headers are not needlessly updated\n\twith ylwrap is not used.  Move `test -f foo.o' into the\n\tMakefile as `test -f foo.$(OBJEXT)' for portability.\n\n2003-11-17  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (generate_makefile): Define SUBDIRS if it is\n\tnot defined and DIST_SUBDIRS is.\n\t* tests/subpkg2.test: New file.\n\t* tests/Makefile.am (TESTS): Add subpkg2.test.\n\tReport from Gary V. Vaughan.\n\n\t* tests/suffix11.test: Check for suffixes containing `-'.\n\t* lib/Automake/Rule.pm ($_SUFFIX_RULE_PATTERN): Accept `-' in\n\tsuffixes.\n\n\t* lib/Automake/Rule.pm (define): Suggest using target-local instead\n\tof target-am, not target-am-local.\n\t* tests/overrid.test: Check the diagnostic for clean-am.\n\tReport from Bruno Haible.\n\n2003-11-17  Jim Meyering  <jim@meyering.net>\n\n\t* bootstrap: Require not only that `perl' have the executable\n\tbit set, but also that it is not a directory.\n\n\t* lib/am/configure.am: Mark %MAKEFILE% as `.PRECIOUS'.\n\n2003-11-17  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (ac_config_files_location): Declare as a hash.\n\t(handle_configure): Rewrite the computation of AC_CONFIG_FILES\n\tdependencies; make sure we don't use $(srcdir) or $(top_srcdir)\n\tfor inputs which are also outputs, and do not check inputs\n\trelatively to the current directory.\n\t(scan_autoconf_config_files): Take $where as argument, and\n\tfill $ac_config_files_location.\n\t* tests/output8.test, tests/output9.test: New files.\n\t* tests/Makefile.am (TESTS): Add output8.test and output9.test.\n\tReport from Bruno Haible.\n\n2003-11-14  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/aclibobj.test, tests/aclocal.test, tests/aclocal3.test,\n\ttests/acoutbs.test, tests/acoutbs2.test, tests/acoutnoq.test,\n\ttests/acoutpt.test, tests/acoutpt2.test, tests/acoutqnl.test,\n\ttests/acsilent.test, tests/acsubst.test, tests/acsubst2.test,\n\ttests/all.test, tests/alpha.test, tests/amassign.test,\n\ttests/ammissing.test, tests/ansi.test, tests/ansi10.test,\n\ttests/ansi2.test, tests/ansi3.test, tests/ansi3b.test,\n\ttests/ansi4.test, tests/ansi5.test, tests/ansi6.test,\n\ttests/ansi7.test, tests/ansi9.test, tests/ar.test,\n\ttests/autohdr.test, tests/autohdr2.test, tests/auxdir.test,\n\ttests/auxdir2.test, tests/backsl.test, tests/backsl2.test,\n\ttests/badprog.test, tests/block.test, tests/canon2.test,\n\ttests/canon3.test, tests/canon4.test, tests/canon5.test,\n\ttests/ccnoco.test, tests/check.test, tests/check2.test,\n\ttests/check3.test, tests/checkall.test, tests/clean.test,\n\ttests/colneq2.test, tests/colon.test, tests/colon2.test,\n\ttests/colon3.test, tests/colon4.test, tests/colon5.test,\n\ttests/colon6.test, tests/colon7.test, tests/comment.test,\n\ttests/comment2.test, tests/comment4.test, tests/comment6.test,\n\ttests/comment7.test, tests/compile_f_c_cxx.test, tests/cond.test,\n\ttests/cond10.test, tests/cond11.test, tests/cond13.test,\n\ttests/cond14.test, tests/cond15.test, tests/cond16.test,\n\ttests/cond17.test, tests/cond18.test, tests/cond19.test,\n\ttests/cond21.test, tests/cond22.test, tests/cond25.test,\n\ttests/cond26.test, tests/cond28.test, tests/cond3.test,\n\ttests/cond4.test, tests/cond5.test, tests/cond6.test,\n\ttests/cond7.test, tests/cond8.test, tests/cond9.test,\n\ttests/condd.test, tests/condinc.test, tests/condlib.test,\n\ttests/condman.test, tests/condman2.test, tests/conf2.test,\n\ttests/confdeps.test, tests/confh.test, tests/confh4.test,\n\ttests/config.test, tests/confincl.test, tests/conflnk.test,\n\ttests/conflnk2.test, tests/confsub.test, tests/confvar.test,\n\ttests/confvar2.test, tests/copy.test, tests/ctarget1.test,\n\ttests/cxx.test, tests/cxxansi.test, tests/cxxcpp.test,\n\ttests/cxxlibobj.test, tests/cxxlink.test, tests/cxxnoc.test,\n\ttests/cxxo.test, tests/cygwin32.test, tests/dash.test,\n\ttests/defun.test, tests/defun2.test, tests/dejagnu.test,\n\ttests/dejagnu3.test, tests/dejagnu4.test, tests/dejagnu5.test,\n\ttests/dejagnu6.test, tests/dejagnu7.test, tests/depacl2.test,\n\ttests/depcomp.test, tests/depcomp2.test, tests/depcomp4.test,\n\ttests/depdist.test, tests/depend.test, tests/depend2.test,\n\ttests/depend3.test, tests/depend4.test, tests/destdir.test,\n\ttests/dirlist.test, tests/discover.test, tests/distcom.test,\n\ttests/distcom2.test, tests/distdir.test, tests/distname.test,\n\ttests/dollar.test, tests/double.test, tests/dup2.test,\n\ttests/empty.test, tests/empty2.test, tests/empty3.test,\n\ttests/empty4.test, tests/error.test, tests/exdir.test,\n\ttests/exeext.test, tests/exeext3.test, tests/exsource.test,\n\ttests/ext.test, tests/ext2.test, tests/extra.test,\n\ttests/extra2.test, tests/extra3.test, tests/extra4.test,\n\ttests/extra5.test, tests/extra6.test, tests/extra7.test,\n\ttests/flibs.test, tests/fnoc.test, tests/fo.test,\n\ttests/fonly.test, tests/fortdep.test, tests/fpinst2.test,\n\ttests/fpinstall.test, tests/gcj.test, tests/gcj3.test,\n\ttests/gcj4.test, tests/gnits2.test, tests/gnits3.test,\n\ttests/header.test, tests/implicit.test, tests/include.test,\n\ttests/include2.test, tests/info.test, tests/insh2.test,\n\ttests/install2.test, tests/installdir.test, tests/instdat.test,\n\ttests/instdat2.test, tests/instexec.test, tests/insthook.test,\n\ttests/instman.test, tests/instman2.test, tests/instsh.test,\n\ttests/instsh2.test, tests/interp.test, tests/interp2.test,\n\ttests/java.test, tests/java2.test, tests/javaprim.test,\n\ttests/javasubst.test, tests/ldadd.test, tests/ldflags.test,\n\ttests/lex.test, tests/lex3.test, tests/lex4.test, tests/lex5.test,\n\ttests/libobj11.test, tests/libobj2.test, tests/libobj4.test,\n\ttests/libobj5.test, tests/libobj7.test, tests/libobj8.test,\n\ttests/library.test, tests/libtool.test, tests/libtool2.test,\n\ttests/libtool3.test, tests/libtool5.test, tests/link_c_cxx.test,\n\ttests/link_dist.test, tests/link_f_only.test, tests/link_fc.test,\n\ttests/link_fccxx.test, tests/link_fcxx.test, tests/lisp.test,\n\ttests/listval.test, tests/ltdeps.test, tests/ltlibobjs.test,\n\ttests/maintclean.test, tests/make.test, tests/makej.test,\n\ttests/makevars.test, tests/man.test, tests/man2.test,\n\ttests/mclean.test, tests/mdate.test, tests/mdate2.test,\n\ttests/mdate3.test, tests/mdate4.test, tests/mkinst2.test,\n\ttests/mkinstall.test, tests/nobase.test, tests/nodef.test,\n\ttests/nodef2.test, tests/nodep.test, tests/nodepcomp.test,\n\ttests/nodist.test, tests/nodist2.test, tests/nodist3.test,\n\ttests/noinst.test, tests/noinstdir.test, tests/nolink.test,\n\ttests/nostdinc.test, tests/number.test, tests/obsolete.test,\n\ttests/order.test, tests/outdir.test, tests/output.test,\n\ttests/output2.test, tests/output3.test, tests/output4.test,\n\ttests/parse.test, tests/phony.test, tests/pluseq.test,\n\ttests/pluseq10.test, tests/pluseq2.test, tests/pluseq3.test,\n\ttests/pluseq4.test, tests/pluseq6.test, tests/pluseq8.test,\n\ttests/postproc.test, tests/ppf77.test, tests/pr2.test,\n\ttests/pr204.test, tests/pr220.test, tests/pr224.test,\n\ttests/pr229.test, tests/pr243.test, tests/pr266.test,\n\ttests/pr279-2.test, tests/pr279.test, tests/pr287.test,\n\ttests/pr300-lib.test, tests/pr300-ltlib.test,\n\ttests/pr300-prog.test, tests/pr307.test, tests/pr72.test,\n\ttests/pr87.test, tests/pr9.test, tests/prefix.test,\n\ttests/proginst.test, tests/python.test, tests/python3.test,\n\ttests/python4.test, tests/python5.test, tests/python6.test,\n\ttests/python7.test, tests/python8.test, tests/python9.test,\n\ttests/recurs2.test, tests/remake.test, tests/remake2.test,\n\ttests/remake3.test, tests/req.test, tests/reqd.test,\n\ttests/rulepat.test, tests/scripts.test, tests/sinclude.test,\n\ttests/space.test, tests/specflg3.test, tests/specflg6.test,\n\ttests/specflg7.test, tests/specflg8.test, tests/specflg9.test,\n\ttests/spell3.test, tests/spelling.test, tests/spy.test,\n\ttests/stamph2.test, tests/stdlib2.test, tests/strip.test,\n\ttests/subcond.test, tests/subcond2.test, tests/subcond3.test,\n\ttests/subdir.test, tests/subdir2.test, tests/subdir3.test,\n\ttests/subdir4.test, tests/subdir5.test, tests/subdir6.test,\n\ttests/subdirbuiltsources.test, tests/subobj.test,\n\ttests/subobj2.test, tests/subobj3.test, tests/subobj4.test,\n\ttests/subobj5.test, tests/subobj6.test, tests/subobj7.test,\n\ttests/subobj8.test, tests/subobj9.test, tests/subobjname.test,\n\ttests/subpkg.test, tests/subst.test, tests/substref.test,\n\ttests/suffix.test, tests/suffix10.test, tests/suffix2.test,\n\ttests/suffix3.test, tests/suffix4.test, tests/suffix5.test,\n\ttests/suffix6.test, tests/suffix7.test, tests/suffix8.test,\n\ttests/suffix9.test, tests/symlink2.test, tests/symlink3.test,\n\ttests/tags.test, tests/tagsub.test, tests/target-cflags.test,\n\ttests/transform.test, tests/txinfo.test, tests/txinfo10.test,\n\ttests/txinfo13.test, tests/txinfo16.test, tests/txinfo17.test,\n\ttests/txinfo18.test, tests/txinfo2.test, tests/txinfo23.test,\n\ttests/txinfo24.test, tests/txinfo25.test, tests/txinfo26.test,\n\ttests/txinfo3.test, tests/txinfo5.test, tests/txinfo6.test,\n\ttests/txinfo7.test, tests/txinfo8.test, tests/txinfo9.test,\n\ttests/unused.test, tests/vars.test, tests/vars3.test,\n\ttests/vartar.test, tests/version.test, tests/version2.test,\n\ttests/version4.test, tests/version6.test, tests/version7.test,\n\ttests/vpath.test, tests/vtexi.test, tests/vtexi2.test,\n\ttests/werror.test, tests/whoami.test, tests/yacc.test,\n\ttests/yacc3.test, tests/yacc4.test, tests/yacc5.test,\n\ttests/yacc6.test, tests/yacc7.test, tests/yacc8.test,\n\ttests/yaccpp.test, tests/yaccvpath.test: Fix license to refer\n\tto Automake, not autoconf.\n\n\tFix for PR automake/408:\n\t* lib/am/texinfos.am (install-info-am): Strip any $(srcdir)/ prefix\n\tfrom $file, as already done for dist-info.\n\t* tests/Makefile.am (TESTS): Add txinfo26.test.\n\t* tests/txinfo26.test: New file.\n\tReport from Nicholas Wourms.\n\n2003-11-13  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* m4/lispdir.m4 (AM_PATH_LISPDIR): If EMACS=t, empty it before\n\trunning AC_CHECK_PROGS(EMACS).\n\t* lib/am/lisp.am (elc-stamp): Quote $(EMACS).\n\tReport from Jens Petersen.\n\n\t* tests/mkinst2.test: Rewrite.\n\n\t* m4/mkdirp.m4: Do not require AM_AUX_DIR_EXPAND.\n\n2003-11-12  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (scan_autoconf_traces): Honor sinclude.\n\t* tests/sinclude.test: Check for sinclude.\n\tReport from Roberto Bagnara.\n\n2003-11-11  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* Makefile.am: Do not rerun `make dist' after tagging, `make distcheck'\n\talready build the tarballs.  Commit files right before tagging.\n\tCheck NEWS before running distcheck.\n\n\t* m4/amversion.in (AM_AUTOMAKE_VERSION): Missing cosmetic space.\n\n\t* configure.ac, NEWS: Bump version to 1.7c.\n\n\t* configure.ac, NEWS: Bump version to 1.7b.\n\t* Makefile.am (maintainer-check): Ignore comments while\n\tscanning for rm without -f.\n\n\t* Makefile.am (fetch): Get all files from savannah.  Do not\n\tpostprocess Struct.pm and XFiles.pm, since we now are the master\n\tof these.\n\t* lib/config.sub, lib/config.guess, lib/config-ml.in,\n\tlib/texinfo.tex: New upstream versions.\n\n\t* configure.ac: Check that autoconf is installed, that it works,\n\tand that it is recent enough in three steps, not one.\n\n\t* NEWS: Minor edits.\n\n\t* lib/Makefile.am (dist_script_DATA): Move config-ml.in ...\n\t(dist_pkgvdata_DATA): ... here.\n\n\t* tests/spy.test: Document overlapping ::-rules incompatibilities,\n\tand check only non-overlapping ::-rules.\n\n\t* doc/automake.texi (Texinfo): Define MAKEINFO, MAKEINFOHTML,\n\tMAKEINFOFLAGS, AM_MAKEINFOFLAGS, AM_MAKEINFOHTMLFLAGS, TEXI2DVI,\n\tTEXI2PDF, DVIPS, and TEXINFO_TEX in a table.\n\t(Uniform): Do not speak of missing HTML support, this is\n\tconfusing.\n\t* lib/Automake/Variable.pm (_silent_variable_override): Add\n\tAM_MAKEINFOHTMLFLAGS.\n\t* lib/am/texibuild.am (%SOURCE_SUFFIX%.html): Use MAKEINFOHTML and\n\tAM_MAKEINFOHTMLFLAGS instead of MAKEINFO and AM_MAKEINFOFLAGS.\n\t* lib/am/texinfos.am (MAKEINFOHTML, AM_MAKEINFOHTMLFLAGS): Define.\n\t* tests/txinfo21.test: Add a test with AM_MAKEINFOHTMLFLAGS.\n\n2003-11-10  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/spy.test: New file.\n\t* tests/Makefile.am (TESTS): Add spy.test.\n\n\t* automake.in (handle_configure): Distribute and define mkinstalldirs\n\tonly if it is already present in the package.\n\t(scan_autoconf_files): Do not require mkinstalldirs.\n\t(require_build_directory): Use $(mkdir_p), not $(mkinstalldirs).\n\t* lib/am/data.am, lib/am/distdir.am, lib/am/install.am,\n\tlib/am/java.am, lib/am/libs.am, lib/am/lisp.am, lib/am/mans.am,\n\tlib/am/progs.am, lib/am/python.am, lib/am/scripts.am,\n\tlib/am/texinfos.am: Use $(mkdir_p) instead of $(mkinstalldirs).\n\t* m4/mkdirp.m4: New file.\n\t* m4/Makefile.am (dist_m4data_DATA): Add mkdirp.m4.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Call AM_PROG_MKDIR_P.\n\t* tests/Makefile.am (TESTS): Remove insh.test.\n\t* tests/insh.test: Delete.\n\t* tests/defs.in, tests/instsh.test: Do not install mkinstalldirs.\n\t* tests/auxdir.test: Install mkinstalldirs.\n\t* tests/distdir.test, tests/instman.test, tests/pr2.test: Use\n\t$(mkdir_p), not $(mkinstalldirs).\n\t* tests/empty.test: Run configure, do not substitute things by hand.\n\t* doc/automake.texi (Optional) <AC_CONFIG_FILES>: Take install-sh\n\tas an example, not mkinstalldirs.\n\t(Auxiliary Programs) <mkinstalldirs>: Update.\n\n\t* tests/defs.in: Handle required=bzip2.\n\n\t* tests/defs.in: Export SHELL.\n\t* tests/cond11.test: Missing quotes.\n\t* tests/nogzip2.test: Require bzip2.\n\n2003-11-09  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* NEWS: Add news entries from 1.6.x and 1.7.x.\n\n\t* automake.texi (Optional) <AC_SUBST>: Grammar fixes.\n\n\t* automake.in (check_gnu_standards): Install COPYING only if\n\tnone of COPYING, COPYING.LIB, or COPYING.LESSER exist.  Do not\n\toverwrite the license otherwise.\n\t* tests/Makefile.am (TESTS): Add license.test.\n\t* tests/license.test: New file.\n\n\t* lib/mkinstalldirs: Mention automake-patches@gnu.org and\n\tbug-automake@gnu.org.\n\t* lib/compile, lib/depcomp, lib/elisp-comp, lib/mdate-sh:\n\tLikewise.  Also add support for --help and --version.\n\t* lib/py-compile, lib/ylwrap: Likewise, and reindent.\n\n2003-11-08  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/tags.am (ETAGSFLAGS, CTAGSFLAGS): Remove.\n\t* lib/am/dejagnu.am (RUNTESTFLAGS): Remove.\n\t* lib/am/java.am (JAVACFLAGS): Remove.\n\t* tests/dejagnu3.test: Check that the environment value\n\tof RUNTESTFLAGS get passed down to runtest.\n\tSuggested by Mark Mitchell.\n\n\t* lib/am/depend2.am (?GENERIC?%EXT%.o, ?GENERIC?%EXT%.obj)\n\t(?GENERIC?%EXT%.lo): Do not echo compile command manually, this\n\tbreaks `make -s'.  Instead, fold the compile command on two lines,\n\tso that it take less space on the display.\n\tSuggested by Karl Berry and William Fulton.\n\n\t* lib/am/texibuild.am (%DEST_PREFIX%%DEST_SUFFIX%): Rename as ...\n\t(%DEST_INFO_PREFIX%%DEST_SUFFIX%): ... this, and honor ?INSRC?\n\tto select $(srcdir) or `.' builds.\n\t(INFO_DEPS): Define here.\n\t* lib/am/texinfos.am (dist-info): Strip filename starting with\n\t\"$(srcdir)/\".\n\t* automake.in (output_texinfo_build_rules): Take a new argument\n\t$insrc, and adjust substitutions in 'texibuild'.\n\t(handle_texinfo_helper): Compute a regex of all user-cleaned\n\tfiles, and use this to select whether to build .info files in `.'\n\tor $(srcdir).  Give an account of the $(srcdir) vs `.' debacle.\n\tAlway build the version.texi and stamp files in $(srcdir).  Do not\n\tdefine INFO_DEPS.\n\t* tests/Makefile.am (TESTS): Add txinfo23.test, txinfo24.test,\n\tand txinfo25.test.\n\t* tests/txinfo23.test, tests/txinfo24.test, tests/txinfo25.test:\n\tNew files.\n\t* tests/txinfo13.test, tests/txinfo16.test, tests/txinfo3.test,\n\ttests/vtexi.test: Adjust to new rules.\n\n2003-11-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Require Autoconf 2.58.\n\t* configure.ac: Require Autoconf 2.58a, and check for 2.58.\n\n2003-10-27  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/remake-hdr.am ($(srcdir)/%CONFIG_HIN%): Erase %STAMP%.\n\t* tests/Makefile.am (TESTS): Add autohdr3.test\n\t* tests/autohdr3.test: New file.\n\n\t* automake.in (handle_configure): Rename am__configure_deps\n\tas am__aclocal_m4_deps and include $(ACLOCAL_M4_SOURCES) and\n\t$configure_ac.  Define am__configure_deps as am__aclocal_m4_deps\n\t+ $(CONFIGURE_DEPENDENCIES) + $(ACLOCAL_M4).  Do not define\n\tACLOCAL_M4_DEPS while processing configure.am.\n\t(make_paragraphs): Do not define %CONFIGURE_AC%, now unused.\n\t(scan_aclocal_m4): Do not distribute aclocal.m4, this\n\tis done from lib/am/configure.am.\n\t* lib/am/configure.am (%MAKEFILE-IN%, DIST_COMMON,\n\t$(top_srcdir)/configure, $(ACLOCAL_M4)): Simplify using\n\t$(am__configure_deps) or $(am__aclocal_m4_deps).\n\t* lib/am/remake-hdr.am ($(srcdir)/%CONFIG_HIN%): Likewise.\n\n2003-10-26  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/remake-hdr.am ($(srcdir)/%CONFIG_HIN%): Depend on\n\t$(am__configure_deps).\n\n\t* automake.in (handle_configure): Distribute all AC_CONFIG_HEADERS\n\tsources, and without using require_file.  Define %CONFIG_H_DEPS%\n\tand %FIRST_CONFIG_HIN% while processing remake-hdr.am.\n\t* lib/am/remake-hdr.am (%STAMP%): Use %CONFIG_H_DEPS% instead\n\tof (srcdir)/%CONFIG_HIN%.  Output the $(srcdir)/%CONFIG_HIN%\n\trule only for the first header (i.e., if %FIRST_CONFIG_HIN%).\n\t* tests/autohdr4.test: New file.\n\t* tests/Makefile.am (TESTS): Add autohdr4.test.\n\t* tests/config.test: Do not grep, run things to see if they work.\n\n2003-10-25  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/output7.test: Populate sub/ with a dummy file, so that it\n\tis not empty.  This fixes a failure reported by Patrick Welche.\n\t* lib/am/distdir.am: Add note about tar's `-o' option and empty\n\tdirectories.\n\n2003-10-24  Didier Cassirame  <faded@free.fr>  (tiny change)\n\n\t* lib/ylwrap: Typo in regex.\n\n2003-10-23  Paul Eggert  <eggert@twinsun.com>\n\n\t* lib/Automake/XFile.pm: Don't assume -j is solo.\n\tIssue a more-informative diagnostic.\n\tProblems reported by Eric Sunshine.\n\n2003-10-21  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* m4/lispdir.m4 (AM_PATH_LISPDIR): Always check for Emacs.\n\tAlways define lispdir.\n\t* lib/am/lisp.am (install-%DIR%LISP, uninstall-%DIR%LISP): Check\n\t$(EMACS) to decide whether _LISP files must be installed,\n\tnot $(lispdir).\n\t* doc/automake.texi (Emacs Lisp): Mention the two ways to install\n\tnon byte-compiled Emacs lisp files.\n\t* tests/lisp4.test, tests/lisp5.test: Check \"make install\"\n\twhen EMACS=no.\n\tSuggested by Simon Josefsson.\n\n\t* NEWS: Clarify the entry about multiple conditional definitions\n\tof _PROGRAMS, _LDADD, and _LIBADD.\n\tReport from Simon Josefsson.\n\n\t* lib/am/install.am (install-strip): Override install_sh_PROGRAM\n\ttoo.\n\tReport from Elmar Hoffmann.\n\n2003-10-07  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* aclocal.in (\"MAIN\", usage, parse_arguments): Move near\n\tthe end, so \"MAIN\" can use prototypes.\n\t(scan_configure): Move later too, for the sake of prototypes.\n\t(scan_configure_dep): Fix setting of $scanned_configure_dep.\n\t(trace_used_macros): Do not take any argument.\n\n2003-10-06  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/stdlib2.test: Check AM_LDFLAGS alone.\n\n\t* lib/config.guess, lib/config.sub, lib/texinfo.tex: New upstream\n\tversions.\n\n\t* automake.in (handle_ltlibraries): Also grep AM_LDFLAGS for `-module'.\n\t* tests/stdlib2.test: New file.\n\t* tests/Makefile.am (TESTS): Add stdlib2.test.\n\tReport from Kevin P. Fleming.\n\n2003-10-03  Richard Dawe  <rich@phekda.freeserve.co.uk>  (tiny change)\n\n\t* tests/defs.in: For required=runtest, check that we are using\n\ta DejaGnu that supports specifying the program on the command-line.\n\n2003-10-03  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFor Debian Bug #213524:\n\t* lib/am/texinfos.am (install-info-am, uninstall-info-am): Merge\n\tstderr and stdout, and grep only the first line while testing\n\tinstall-info --version's output.  This revert part of the change\n\tfrom 2001-05-18.\n\n2003-10-01  Akim Demaille  <akim@epita.fr>\n\n\t* m4/amversion.in: Add (C) to the Copyright notice.\n\n2003-10-01  Paul Eggert  <eggert@twinsun.com>\n\n\t* lib/Automake/XFile.pm: Use Errno.\n\t(lock): Ignore ENOLCK errors.  Problem reported Andreas Schwab in\n\t<https://mail.gnu.org/archive/html/bug-autoconf/2003-09/msg00141.html>.\n\n2003-09-30  Tom Tromey  <tromey@redhat.com>\n\n\t* lib/Automake/Options.pm (_process_option_list): Recognize\n\tno-dist.\n\t* NEWS: Update.\n\t* doc/automake.texi (Options): Document no-dist.\n\t* automake.in (check_cygnus): Set no-dist option.\n\t(handle_dist): Recognize no-dist.\n\t* tests/nodist3.test: New file.\n\t* tests/Makefile.am (TESTS): Added nodist3.test.\n\n2003-09-29  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_clean): Take $makefile as argument, and\n\tdefine %MAKEFILE% while processing clean.am.\n\t(generate_makefile): Pass $makefile to handle_clean.\n\t* lib/am/clean.am (distclean, maintainer-clean): Erase %MAKEFILE%,\n\tnot Makefile.\n\t* tests/gnumake.test: New file.\n\t* tests/Makefile.am (TESTS): Add gnumake.test.\n\tReport from Braden N. McDaniel.\n\n2003-09-26  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* doc/automake.texi (Scripts): Update the example about automake.\n\tMention `dist_' for distributed scripts.\n\n\t* lib/mkinstalldirs: Clean up after NextStep and OpenStep mkdir.\n\tSuggested by Eric Sunshine.\n\n2003-09-25  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* README: More mailing lists.\n\n\t* NEWS: Mention the switch to GNU FDL for the manual.\n\n2003-09-24  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/install-sh (src, dst): Protect names starting with `-',\n\tas in mkinstalldirs.\n\n\t* configure.in: Rename as ...\n\t* configure.ac: ... this.\n\t* README: s/configure.in/configure.ac/.\n\n\t* doc/fdl.texi: New file.\n\t* doc/Makefile.am (automake_TEXINFOS): New variable.\n\t* doc/automake.texi (Copying This Manual): New appendix, include\n\tfdl.texi.\n\t(Macro and Variable Index, General Index): Move as subsections of ...\n\t(Indices): This new appendix.\n\n\t* doc/automake.texi: Refer to configure.ac instead of configure.in.\n\n\t* automake.texi: Move ...\n\t* doc/automake.texi: ... here.\n\t* doc/Makefile.am: New file.\n\t* configure.in: Output doc/Makefile.\n\t* Makefile.am (SUBDIRS): Add doc.\n\t(ETAGS_ARGS, TAGS_DEPENDENCIES): Move to doc/Makefile.am.\n\n2003-09-23  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* aclocal.in (write_aclocal): Consider files with relative\n\tpaths as local to the project, i.e., subject to m4_include.\n\t* tests/subpkg.test (ACLOCAL_AMFLAGS): Make sure m4_include\n\tis also used for .m4 files in the outer project.\n\n\tSupport for multiple inputs in AC_CONFIG_FILES.\n\tRequested long ago by Harlan Stenn.\n\t* automake.in (handle_dist): Remove unused argument $makefile.\n\t(handle_subdirs): Expect SUBDIRS elements in $relative_dir,\n\tnot $am_relative_dir.\n\t(rewrite_inputs_into_dependencies): Allow $add_srcdir to\n\tbe a filename that must always be prefixed by $(srcdir) or\n\t$(top_srcdir).\n\t(handle_configure, generate_makefile): Revamp to make the\n\tMakefile.am, Makefile.in, Makefile more independent.\n\t(locate_am): New function.\n\t(scan_configure_dep, parse_arguments): Use locate_am.\n\t(MAIN): Adjust call to generate_makefile.\n\t* lib/am/configure.am: Remove %MAKEFILE-IN% from the dependencies\n\tof %MAKEFILE%.  %MAKEFILE-IN% is already in %MAKEFILE-DEPS%.\n\t* tests/output6.test, tests/output7.test: New files.\n\t* tests/Makefile.am (TESTS): Add them.\n\t* automake.texi (Requirements) <AC_CONFIG_FILES>: Document how\n\tmultiple inputs are scanned.\n\n2003-09-13  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* Makefile.am (FETCHFILES, fetch): Do not fetch lib/Automake/XFile.pm\n\tand lib/Automake/Struct.pm from Autoconf.\n\t* lib/Automake/XFile.pm: Update comment, Automake is now\n\tthe master for this file.  Cosmetic changes.\n\n2003-09-09  Akim Demaille  <akim@epita.fr>\n\n\t* lib/Automake/FileUtils.pm (&update_file): s/cannot not/cannot/g.\n\tReported by Gary Vaughan.\n\t(&find_file): Walk the @include in forward order.\n\n2003-09-09  Akim Demaille  <akim@epita.fr>\n\n\t* lib/Automake/FileUtils.pm (&update_file): Be sure not to leave\n\ttrailing files.\n\n2003-09-07  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tChanges to m4_included files should also cause aclocal.m4 to change.\n\t* aclocal.in (m4_include_rx): New variable.\n\t(scan_configure_dep): New function.\n\t(scan_configure, add_file): Simplify using scan_configure_dep.\n\t* tests/Makefile.am (TESTS): Add acloca13.test.\n\t* tests/aclocal13.test: New file.\n\n\t* tests/instsh.test: Do not reset $ACLOCAL and $AUTOMAKE now\n\tthat we have fake version in the $PATH.\n\n\t* aclocal.in (add_file): Remove useless filling of $output, probably\n\tleft a after CVS conflict.  This code is now in write_aclocal.\n\n\t* aclocal.in (configure_ac): Do not call require_configure_ac\n\tbefore parsing the options.\n\t* automake.in (configure_ac): Likewise.\n\t* lib/Automake/Variable.pm (configure_ac): Do not require configure.ac,\n\tfind it.\n\t* lib/Automake/Configure_ac.pm (require_configure_ac):\n\tfind_configure_ac never return an undefined value, so test\n\tthe file's existence instead.\n\t* tests/Makefile.am (TESTS): Add help.test.\n\t* tests/help.test: New file.\n\n2003-09-06  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/XFile.pm: Update to use ChannelDefs.\n\t(close): Call Automake::FileUtils::handle_exec_errors on errors.\n\t* automake.in (scan_autoconf_files): Exit with $?=63 on version\n\tmismatch.\n\t(scan_autoconf_traces): Likewise.  Close the autoconf pipe to\n\tcapture abnormal exits.\n\t* aclocal.in ($exit_status): Remove, and use Channels.pm's $exit_code\n\tinstead.\n\t(trace_used_macros): Close the autom4te pipe to capture abnormal exits.\n\t* lib/missing: When a tool has run and exited with $?=63, emulate\n\tit.  Adjust the diagnostic and pretend the tool is tool old in this\n\tcase.  Use an emacs-updated \"scriptversion\" variable.\n\t* configure.in: Output tests/aclocal-${APIVERSION} and\n\ttests/automake-${APIVERSION}.\n\t* tests/aclocal.in, tests/automake.in,\n\ttests/missing.test, tests/missing2.test: New files.\n\t* tests/defs.in (AUTOMAKE, ACLOCAL, PATH): Define\n\tto use tests/aclocal-$APIVERSION and tests/automake-$APIVERSION.\n\t* tests/dup3.test: Remove. alocal9.test, acloca10.test, and others are\n\talready testing for this.\n\t* tests/depacl2.test, tests/dup2.test, tests/order.test: Fix\n\tconfigure.in so that aclocal works.\n\t* tests/defun.test: Quote the AC_DEFUN body.\n\t* tests/Makefile.am (TESTS): Add missing.test and missing2.test,\n\tand remove dup3.test.\n\t(check_SCRIPTS): Add aclocal and automake.\n\n\t* tests/unused.test: Quote AC_DEFUN arguments.\n\n2003-09-05  Paul Eggert  <eggert@twinsun.com>\n\n\t* NEWS, aclocal.in, automake.in, automake.texi, lib/ansi2knr.c,\n\tlib/depcomp, lib/missing, lib/py-compile,\n\tlib/Automake/Channels.pm, lib/Automake/Rule.pm,\n\tlib/Automake/Variable.pm, lib/Automake/tests/Condition.pl,\n\tlib/am/dejagnu.am, lib/am/depend.am, lib/am/lisp.am,\n\tlib/am/remake-hdr.am, lib/am/texi-vers.am, m4/obsolete.m4,\n\tm4/python.m4, tests/backsl4.test, tests/defs.in,\n\ttests/dejagnu7.test, tests/depacl2.test, tests/dirlist.test,\n\ttests/error.test, tests/getopt.test, tests/gnuwarn.test,\n\ttests/include2.test, tests/libobj10.test, tests/libtool5.test,\n\ttests/libtool6.test, tests/lisp3.test, tests/phony.test,\n\ttests/pr220.test, tests/subcond2.test, tests/subcond3.test,\n\ttests/vtexi.test:\n\tSpelling and minor grammar fixes.\n\n2003-09-01  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/config.sub, lib/config.guess, lib/texinfo.tex,\n\tlib/config-ml.in, lib/symlink-tree: New upstream versions.\n\n2003-08-31  Thien-Thi Nguyen  <ttn@gnu.org>  (tiny change)\n\n\t* tests/yacc7.test: Require bison.\n\n2003-08-31  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* aclocal.in (scan_file): Warn about underquoted AC_DEFUN.\n\t($underquoted_manual_once): New variable.\n\t* automake.texi (Extending aclocal): Document this.\n\n2003-08-29  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* aclocal.in (@file_order): New variable, to make sure\n\tfiles are output in the opposite order of the -I arguments.\n\t(scan_file): Fill it.\n\t(trace_used_macros, write_aclocal): Use it.\n\t(scan_m4_files): Reverse the directory contents, so that\n\tmacros from the lexicographically greatest files are preferred.\n\t* tests/aclocal9.test, tests/acloca10.test, tests/acloca11.test:\n\tNew files.\n\t* tests/Makefile.am (TESTS): Add them.\n\n2003-08-24  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFor Debian Bug #206299:\n\t* automake.in ($configure_deps_greatest_timestamp,\n\t$output_deps_greatest_timestamp): New variables.\n\t(initialize_per_input): Reset $output_deps_greatest_timestamp.\n\t(scan_autoconf_traces, scan_autoconf_files, read_am_file):\n\tUpdate $configure_deps_greatest_timestamp and\n\t$output_deps_greatest_timestamp\n\t(generate_makefile): Rewrite the logic to decide whether\n\tto rewrite the output.  Move the leading dup_channel_setup\n\tand trailing drop_channel_setup to MAIN, so that\n\tdrop_channel_setup is executed for all exit paths.\n\t* tests/aclocal7.test: Update to check for $AUTOMAKE --no-force\n\t* tests/distcom6.test: New file.  Report from Scott James Remnant.\n\t* tests/Makefile.am (TESTS): Add distcom6.test.\n\n\t* configure.in: Require Autoconf 2.57b to be sure\n\taclocal can use autom4te --language Autoconf-without-aclocal-m4.\n\t* m4/init.m4: Likewise.  Move the AC_PREREQ and m4_pattern_allow\n\tcalls inside the AM_INIT_AUTOMAKE macro.\n\t* m4/auxdir.m4, m4/cond.m4, m4/lex.m4, m4/regex.m4: Move\n\tAC_PREREQ calls inside the macros.\n\t* m4/header.m4: Remove AC_PREREQ.\n\n\t* automake.in (file_contents_internal): Do not add newlines before\n\tempty actions.\n\n\t* aclocal.in (write_aclocal): Take an output file and list of\n\tused macros in arguments and make up the file contents here.\n\t(trace_used_macros): New function.\n\t(add_file): Do not update $output.\n\t($output): Delete.\n\t(MAIN): Call trace_used_macros.  Then rewrite aclocal.m4 only\n\tfor these traced macros.  This should shorten aclocal.m4 by\n\tstripping out unused macros.\n\t* automake.texi (Invoking aclocal): Document ${AUTOM4TE}.\n\t* tests/aclibobj.test: Make sure configure.in exists by the time\n\taclocal runs.\n\t* tests/aclocal8.test: New file.\n\t* tests/Makefile.am (TESTS): Add aclocal8.test.\n\tSuggested by Bruno Haible and Akim Demaille.\n\n2003-08-21  Akim Demaille  <akim@epita.fr>\n\n\t* lib/Automake/Configure_ac.pm (&find_configure_ac)\n\t(&require_configure_ac): Accept an optional directory argument.\n\t($configure_ac): Remove.\n\t* aclocal.in, automake.in ($configure_ac): New.\n\t* lib/Automake/Variable.pm: Don't use $configure_ac, just\n\tconfigure.ac.\n\n2003-08-20  Akim Demaille  <akim@epita.fr>\n\n\t* lib/Automake/FileUtils.pm: More perldoc.\n\t(&up_to_date_p): New.\n\n2003-08-17  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFix for PR automake/398:\n\t* m4/python.m4: Do not call AC_PATH_PROGS if $PYTHON is already\n\tset.  Display `none' instead of `:' and $PYTHON is set to `:'\n\twhen no suitable interpreter is found.  Honor ACTION-IF-FOUND and\n\tACTION-IF-NOT-FOUND.\n\t* automake.texi (Python): Document ACTION-IF-FOUND and\n\tACTION-IF-NOT-FOUND.\n\t* tests/python4.test, tests/python5.test, tests/python6.test,\n\ttests/python7.test, tests/python8.test, tests/python9.test: New\n\tfiles.\n\t* tests/Makefile.am (TESTS): Add them.\n\tReport from Per Cederqvist.\n\n2003-08-13  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFix for PR automake/399:\n\t* m4/python.m4: Use AC_PATH_PROGS, not AC_PATH_PROG.\n\tReport from Per Cederqvist.\n\n2003-08-12  Raja R Harinath  <harinath@acm.org>\n\n\t* lib/Automake/Condition.pm (strip): Replace loop with 'grep'.\n\t(not): Replace loop with 'map'.\n\t* lib/Automake/DisjConditions.pm (sub_conditions): Likewise.\n\t* lib/Automake/Item.pm (not_alwasy_defined_in_cond):\n\tDon't 'simplify' result of 'invert', since it's already in\n\tcanonical form.\n\t* lib/Automake/Rule.pm (define): Replace loop with\n\t'not_always_defined_in_cond'.\n\n\t* lib/Automake/DisjConditions.pm (ambiguous_p): Typo in comment.\n\t* lib/Automake/Rule.pm (accept_extensions, msg_cond_rule): Likewise.\n\t(define): Reword comment slightly.\n\t* Variable.pm (_var_order, msg_cond_var): Typo in comment.\n\t* tests/cond20.test (var2): Use foo.c instead of foo.cc to avoid\n\tspurious automake error exit.\n\n2003-08-12  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Item.pm, lib/Automake/ItemDef.pm: New files.\n\t* lib/Automake/Rule.pm, lib/Automake/RuleDef.pm: New files.\n\t* lib/Automake/Makefile.am (dist_perllib_DATA): Add them.\n\t* lib/Automake/VarDef.pm: Make this a subclass of Automake::ItemDef.\n\t(new): Adjust to call Automake::ItemDef::new.\n\t(comment, location, owner): Delete.  Now inherited from ItemDef.\n\t* lib/Automake/Variable.pm: Make this a subclass of Automake::Item.\n\t(_new): Adjust to call Automake::Item::new.\n\t(name, def, rdef, _set, conditions, not_always_defined_in_cond):\n\tDelete.  How inherited from Item, where `_set' is called `set'.\n\t* automake.in (SUFFIX_RULE_PATTERN): Delete. Now in Automake::Rule.\n\t(suffix_rules_default): Delete.  Now\n\tAutomake::Rule::_suffix_rules_default\n\t(suffixes): Delete.  Now Automake::Rule::suffixes.\n\t(TARGET_AUTOMAKE, TARGET_USER): Delete.  Now\n\tAutomake::RuleDef::RULE_AUTOMAKE and Automake::RuleDef::RULE_USER.\n\t(%targets, %target_source, %target_name, %target_owner): Delete,\n\treplaced by the Rule and RuleDef classes.\n\t(dependencies, depend, actions): Delete.  Now in Automake::Rule.\n\t(suffix_rules, register_suffix_rule): Likewise.\n\t(KNOWN_EXTENSIONS_PATTERN, accept_extensions): Likewise.\n\t(known_extensions_list): Delete.  Now\n\tAutomake::Rule::_known_extensions_list.\n\t(target_conditions): Delete.  Now inherited by Automake::Rule\n\tfrom Automake::Item::conditions.\n\t(rule_define): Delete.  Now Automake::Rule::define.  Adjust all\n\tcallers.\n\t(target_defined): Delete.  Now Automake::Rule::rule.  Adjust all\n\tcallers.\n\t(initialize_per_input): Adjust to call Automake::Rule::reset.\n\t(err_target, err_cond_target, msg_cond_target, msg_target,\n\treject_target): Delete.  Now defined in Automake::Rule as\n\terr_rule, err_cond_rule, msg_cond_rule, msg_rule and reject_target.\n\tAdjust all callers.\n\t(handle_languages): Call suffix_rules_count.\n\t* tests/location.test: Adjust expected diagnostics.  We now display\n\t$(EXEEXT) accurately.\n\n2003-08-10  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tRevert the fix for PR automake/291:\n\t* lib/Automake/Variable.pm (define): Do not warn about variables\n\tstarting with `_' which are an issue on NEWS-OS 4.2R.  According\n\tto Paul Eggert, NEWS-OS 4.2R is ten years old, the latest version\n\twas released on 1996 and is not in wide use.  On the other hand,\n\tvariables starting with `_' are mandatory in several situations,\n\tso diagnosing them is more annoying than useful.\n\t* tests/canon5.test: Do not use -Wno-portability.\n\t* tests/vars2.test: Delete.\n\t* tests/Makefile.am (TESTS): Remove vars2.test.\n\tSuggested by Jim Meyering.\n\n2003-08-09  Raja R Harinath  <harinath@acm.org>\n\n\t* lib/Automake/DisjConditions.pm (ambiguous_p): Simplify slightly.\n\t* lib/Automake/tests/DisjConditions.pl (test_ambig): Test\n\tAutomake::Disjunctions::ambiguous_p.\n\n2003-08-07  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (condition_ambiguous_p): Move ...\n\t* lib/Automake/DisjConditions.pm (ambiguous_p): ... here.\n\t* automake.in (rule_define): Adjust usage.\n\t* lib/Automake/Variable.pm (_check_ambiguous_condition): Likewise.\n\n\t* lib/Automake/Options.pm: New file.\n\t* lib/Automake/Makefile.am (dist_perllib_DATA): Add Options.pm.\n\t* automake.in (FOREIGN, GNU, GNITS, $default_strictness)\n\t($default_strictness_name, $strictness, $strictness_name)\n\t(%options, %global_options, process_option_list)\n\t(set_strictness): Remove, now in Options.pm.\n\t(initialize_per_input): Call Automake::Options::reset.\n\t(handle_options, get_object_extension, get_object_extension)\n\t(handle_languages, handle_single_transform_list, handle_compile)\n\t(handle_texinfo_helper, handle_man_pages, handle_dist)\n\t(handle_configure, do_check_merge_target)\n\t(handle_factored_dependencies, handle_tests)\n\t(handle_minor_options, scan_autoconf_traces, check_cygnus)\n\t(lang_sub_obj, lang_c_rewrite, lang_c_finish, rule_define)\n\t(make_paragraphs, am_install_var, parse_arguments): Adjust\n\tto set and read options via the new interface.\n\n2003-08-07  Raja R Harinath  <harinath@acm.org>\n\n\t* Makefile.am (maintainer-check): Update perllibdir.\n\t* lib/Automake/Makefile.am (Config.pm): Depend on Makefile too.\n\t(EXTRA_DIST): Add Config.in.\n\t* Makefile.in, lib/Automake/Makefile.in: Regenerate.\n\t* tests/defs.in (AUTOMAKE, ACLOCAL): Use absolute paths in\n\t$perllibdir.\n\n2003-08-06  Raja R Harinath  <harinath@acm.org>\n\n\t* configure.in (AUTOMAKE, ACLOCAL): Search the 'lib' directory\n\tfrom the builddir too, to pick up Automake::Config.\n\t* tests/defs.in (AUTOMAKE, ACLOCAL): Likewise.\n\t* configure: Regenerate.\n\t* automake.in (BEGIN): Handle multiple directories in $perllibdir.\n\t* aclocal.in (BEGIN): Likewise.\n\n2003-08-07  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/ltcond.test: Thinko.\n\n2003-08-06  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Config.in: New file.\n\t* lib/Automake/Makefile.am (nodist_perllib_DATA, do_subst,\n\tCLEANFILES): New variables.\n\t(Config.pm): New rule.\n\t* Makefile.am (maintainer-check): Adjust expected differences\n\tbetween automake.in and automake.\n\t* aclocal.in, automake.in: Use Automake::Config.\n\n2003-08-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/ltconv.test: s/rm/rm -f/ to placate maintainer-check.\n\n\t* automake.in (handle_texinfo_helper): Use the user definition\n\tof TEXINFO_TEX before checking for cygnus or AC_CONFIG_AUX_DIR.\n\t* tests/txinfo22.test: New file.\n\t* tests/Makefile.am (TESTS): Add txinfo22.test.\n\tReport from Tom Tromey.\n\n2003-08-03  Raja R Harinath  <harinath@acm.org>\n\n\t* lib/Automake/Variable.pm (@EXPORT): Remove\n\ttraverse_variable_recursively and\n\trequire_variables_for_variable.\n\t(require_variables_for_variable, traverse_variable_recursively)\n\t(_traverse_variable_recursively_worker): Convert to\n\tAutomake::Variable methods, remove support for being\n\tinvoked with variable names, and rename to ...\n\t(requires_variables, traverse_recursively)\n\t(_do_recursive_traversal): ... these.\n\t(_value_as_list_recursive_worker, transform_variable_recursively):\n\tUpdate to reflect changes.\n\t* automake.in (handle_LIBOBJS, handle_ALLOCA)\n\t(handle_libraries, handle_ltlibraries, am_primary_prefixes):\n\tLikewise.\n\t(define_objects_from_sources): Fix typo in comment.\n\n2003-08-02  Raja R Harinath  <harinath@acm.org>\n\n\t* automake.in (handle_source_transform): Replace 'grep' with 'map'.\n\t(register_language): Replace 'grep' with 'foreach' modifier.\n\n2003-08-01  Raja R Harinath  <harinath@acm.org>\n\n\t* lib/Automake/Variables.pm (variables): Return a list of\n\tAutomake::Variable instances, not a list of strings.\n\t(dump): Remove support for being invoked with a string.\n\t(variables_dump): Adapt to these changes.\n\t* automake.in (check_typos): Likewise.\n\t(am_primary_prefixes): Likewise.\n\n2003-07-31  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>  (tiny change)\n\n\t* lib/depcomp (aix): Support AIX Compiler version 6.\n\n2003-07-31  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (A Shared Library): Rewrite and split into\n\tsubsections.  Valuable comments from Norman Gray, Harlan Stenn,\n\tTim Van Holder, and Guido Draheim.\n\t* tests/ltcond.test, tests/ltcond2.test, tests/ltconv.test: New files.\n\t* tests/Makefile.am (TESTS): Add them.\n\n2003-07-30  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_single_transform_list): Complain about\n\tfoo.$(OBJEXT) being created both with libtool and without, not\n\tabout foo.lo.\n\tReport from Tim Van Holder.\n\n2003-07-29  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* Makefile.am (FETCHFILES, fetch): Add config-ml.in and\n\tsymlink-tree.\n\t* lib/config.sub, lib/config-ml.in, lib/texinfo.tex: New\n\tupstream versions.\n\n2003-07-28  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_configure): Cosmetic change to avoid\n\ta maintainer-check complaint.\n\n2003-07-27  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (@EXPORT): Remove variable_dump.\n\t(variable_dump): Replace by ...\n\t(dump): ... this method.\n\t(rdef, _check_ambiguous_condition): Adjust to use ->dump.\n\t(define, variables_dump): Adjust to use Automake::Variable::dump\n\n\t* lib/am/compile.am (mostlyclean-compile): Do not erase core dumps.\n\t* automake.texi (Built sources example): Adjust example.\n\n2003-07-26  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (get_object_extension, handle_languages)\n\t(handle_single_transform_list, handle_compile, handle_compile)\n\t(handle_texinfo_helper, handle_texinfo_helper, handle_man_pages)\n\t(handle_tests, handle_minor_options, check_gnu_standards)\n\t(lang_sub_obj, lang_c_rewrite, lang_c_finish, rule_define):\n\tSimplify \"if (defined $options{'X'})\" into \"if ($options{'X'})\".\n\n\tComplete changes from 2003-07-08.\n\t* automake.in ($cmdline_use_dependencies, $use_dependencies): Remove,\n\treplaced by $options{'no-dependencies'}.\n\t($global_options): Remove.\n\t(%global_options): New variable.\n\t(initialize_per_input): Empty %options.\n\t(process_option_list): Take a location and %options ref argument,\n\tprocess no-dependencies as other options.\n\t(handle_options): Do not reparse the global options, just initialize\n\t%options from %global_options and fill it with local options.\n\t(handle_languages, handle_single_transform_list)\n\t(handle_configure, check_cygnus): Adjust usage of\n\t$options{'no-dependencies'}.\n\t(make_paragraphs): Adjust usage of $options{'cygnus'}.\n\t(parse_arguments): Set cygnus and no-dependencies in %global_options.\n\t(scan_autoconf_traces) <AM_INIT_AUTOMAKE>: Call process_option_list\n\tto fill %global_options.\n\n2003-07-25  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/remake4.test: Use `$MAKE distdir' instead of `$MAKE dist' to\n\tavoid the use of tar.\n\n2003-07-24  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/gnuwarn2.test: Typo.\n\n\t* tests/insthook.test: Use $MAKE, not make.\n\n\tFix missing rebuilds during `make dist' with BSD make.\n\t* automake.in (generate_makefile): Do not push Makefile.in, and\n\tMakefile.am into DIST_COMMON here.\n\t* lib/am/configure.am (DIST_COMMON): Do it here, and use\n\t%MAKEFILE-AM% and %MAKEFILE-IN% so that items in DIST_COMMON\n\tactually match the targets.  Prefix `configure' with `$(srcdir)/'\n\tto match the target.\n\t* tests/remake4.test: New file.\n\t* tests/Makefile.am (TESTS): Add remake4.test.\n\tReport from Akim Demaille.\n\n2003-07-23  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_multilib): Register all-multi.\n\t(file_contents_internal): Insert \\n when concatenating actions\n\tfrom \"factored\" rules.\n\t* lib/config-ml.in: New file, from GCC, including a patch\n\tfrom Ralf Corsepius (see GCC's PR 11526).\n\t* lib/symlink-tree.in: New file, from GCC.\n\t* lib/Makefile.am (dist_script_DATA): Add config-ml.in and\n\tsymlink-tree.\n\t* lib/am/clean.am (distclean-generic): Do not delete Makefile here...\n\t(distclean, maintainer-clean): ... do it here.\n\t* lib/am/depend.am (distclean-depend): Likewise, replace by\n\t(distclean, maintainer-clean): ... these.\n\t* lib/am/multilib.am (all-recursive, install-recursive,\n\tmostlyclean-recursive, clean-recursive, distclean-recursive,\n\tmaintainer-clean-recursive): Remove these rules.\n\t(mostlyclean-am, clean-am, distclean-am, maintainer-clean-am): Replace\n\tby ...\n\t(mostlyclean, clean, distclean, maintainer-clean): ... these.\n\t(all-am): Remove, done in handle_multilib.\n\t(install-am): Replace by ...\n\t(install-exec-am): ... this.\n\t* tests/Makefile.am (TESTS): Add multlib.test.\n\t* tests/multlib.test: New file, based on a test case by\n\tRalf Corsepius\n\n2003-07-23  Tom Tromey  <tromey@redhat.com>\n\n\t* lib/missing (autom4te): Typo.\n\n2003-07-16  Derek Price  <derek@ximbiot.com>\n\n\t* automake.in (scan_autoconf_traces): Handle AC_CONFIG_LINKS.\n\t(handle_configure): Handle adding AC_CONFIG_LINKS arguments to\n\tdistclean targets (CONFIG_CLEAN_FILES makefile var).\n\t* NEWS: Note new handling of AC_CONFIG_LINKS.\n\t* automake.texi (Other things Automake recognizes): Ditto.\n\t* tests/Makefile.am (TESTS): Add new tests.\n\t* tests/conflnk.test: New test that links are cleaned on distclean.\n\t* tests/conflnk2.test: New test that source files for links are\n\tdistributed.\n\n2003-07-15  Ralf Corsepius <corsepiu@faw.uni-ulm.de>  (tiny change)\n\n\t* automake.in (scan_autoconf_traces): Trace AM_ENABLE_MULTILIB to\n\trender $seen_multilib functional again.\n\n2003-07-10  Raja R Harinath  <harinath@cs.umn.edu>\n\n\tAvoid using refs as hash keys.\n\t* lib/Automake/Variable.pm ($_traversal): New.\n\t(reset): Reset $_traversal.\n\t(_new): New attribute 'scanned'.\n\t(%_vars_scanned): Remove.\n\t(traverse_variable_recursively)\n\t(traverse_variable_recursively_worker):\n\tUse $_traversal instead of %_vars_scanned to detect recursively\n\tdefined variables.\n\n\t* lib/am/configure.am (am--refresh): Silence.\n\n2003-07-10  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (define): Make clear the diagnostic\n\tabout variable names starting with `_' is about *Make* variables.\n\n\tFor Debian Bug #193907:\n\t* automake.texi (Clean): make maintainer-clean should still\n\tallow ./configure && make to run.\n\n\t* automake.texi (CVS): Typo.\n\n2003-07-09  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* aclocal.in: Use Automake::FileUtils.\n\t(parse_arguments, scan_configure, scan_m4_files): Never call\n\t\"die\" to print an error message.  Use print and exit.\n\t* automake.in: Use Automake::FileUtils.\n\t* lib/Automake/General.pm ($debug, $help, $tmp, $verbose,\n\t$version, &debug, &getopt, &mktmpdir, &verbose): Remove.\n\t(END): Do not massage Perl's exit code.  Do not clean any temporary\n\tdirectory.\n\t(find_file, mtime, update_file, xsystem, contents): Move to ...\n\t* lib/Automake/FileUtils.pm: ... this new file.  Adjust to\n\treport errors using Channels.\n\t(handle_exec_errors, xqx): New functions, from Autoconf.\n\t* lib/Automake/Makefile.am (dist_perllib_DATA): Add FileUtils.pm.\n\n\t* lib/Automake/Variable.pm (_traverse_variable_recursively_worker):\n\tReturn the empty list on recursively defined variable.  This\n\tsupersedes my change of 2003-07-02.\n\n2003-07-08  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in ($cygnus_mode): Replace with $options{'cygnus'}.\n\tAdjust all dependencies.\n\t(&depend): Move next to %dependencies and prototype.\n\t(&initialize_per_input): Initialize the 'cygnus' field of\n\t'%options' to spare the code from 'exists' or 'defined' when\n\ttesting it.\n\t(&handle_configure, &do_check_merge_target, &check_cygnus): Prototype.\n\t(&parse_arguments): Rename '%options' and '%options_1st_pass' as\n\t'%cli_options' and '%cli_options_1st_pass' to avoid clashes and\n\tinconsistencies.\n\n2003-07-07  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (generate_makefile): Move near the end of the\n\tfile, after the definition of all called functions, so that\n\tprototypes can be enforced.\n\n2003-07-06  Akim Demaille  <akim@epita.fr>\n\n\t* lib/am/subdirs.am (RECURSIVE_TARGETS): Move install-recursive,\n\tinstall-exec-recursive, install-data-recursive and\n\tuninstall-recursive addition to...\n\t* lib/am/install.am: here.\n\t* lib/am/texinfos.am, lib/am/subdirs.am: Remove the .PHONY\n\tdeclaration of RECURSIVE_TARGETS.\n\n2003-07-06  Akim Demaille  <akim@epita.fr>\n\n\t* lib/Automake/Variable.pm, lib/Automake/VarDef.pm (VAR_SORTED):\n\tNew variable type.\n\tHandle it.\n\t* automake.in (&handle_subdirs): Prototype.\n\tAdjust callers.\n\tMake RECURSIVE_TARGETS a VAR_SORTED.\n\n2003-07-06  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (&define_files_variable): New.\n\t(&handle_texinfo_helper): Move the handling of user variables from\n\there, to...\n\t(&handle_texinfo): here.\n\tThis is to balance the size of these functions, and to match the\n\tconvention of other _helper functions.\n\t(&handle_texinfo_helper): Use &define_files_variable.\n\tMove some code to use less variables.\n\tRename $info_cursor as $texi.\n\t(&handle_texinfo): Do not call handle_texinfo_helper if there are\n\tno TEXINFOS.\n\t* lib/am/texinfos.am: Sort the occurrences of dvi, info, pdf, ps\n\tand html.\n\tRemove *-recursive targets from .PHONY, they are part of\n\t$(RECURSIVE_TARGETS) anyway.\n\t(install-info, mostlyclean-aminfo): Are .PHONY.\n\n2003-07-05  Akim Demaille  <akim@epita.fr>\n\n\t* lib/am/distdir.am: Use ';' as a terminator, not a separator, for\n\tsed complex commands, as required by NetBSD sed.\n\tReported by Patrick Welche.\n\n2003-07-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/config.guess, lib/config.sub: New upstream version.\n\n2003-07-04  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (Optional, Dist): AC_CONFIG_AUX_DIR files\n\tare automatically distributed.\n\n\t* lib/depcomp (icc): Update to grok ICC 7.1's output.\n\t* m4/depend.m4 (_AM_DEPENDENCIES): Check dependency generation\n\tin a subdirectory, and with many dependencies.  This\n\tcatches more failures of depcomp.\n\tReports from Ralf Wildenhues and Akim Demaille.\n\n2003-07-04  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (&scan_texinfo_file, &output_texinfo_build_rules,\n\t(&handle_texinfo_helper, &handle_texinfo): Formatting changes.\n\tPrototype properly.\n\tDon't use & when calling functions.\n\n2003-07-03  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* NEWS: Categorize entries.\n\tSuggested by Jim Meyering.\n\n\t* Makefile.am (maintainer-clean): Disallow '$AUTOMAKE && exit 1'.\n\tIgnore @...@ substitutions in comments.\n\t* tests/defs.in: Try to make the shell more POSIX compliant.\n\t(AUTOMAKE_run, AUTOMAKE_fails): New functions.\n\t* tests/README: Mention AUTOMAKE_fails.\n\t* tests/alloca.test, tests/alloca2.test, tests/ansi8.test,\n\t* tests/asm.test, tests/backsl3.test, tests/backsl4.test,\n\t* tests/badline.test, tests/badopt.test, tests/canon.test,\n\t* tests/canon5.test, tests/colneq.test, tests/comment3.test,\n\t* tests/comment5.test, tests/cond2.test, tests/cond20.test,\n\t* tests/cond23.test, tests/cond24.test, tests/cond27.test,\n\t* tests/condinc2.test, tests/conff2.test, tests/cxx2.test,\n\t* tests/dejagnu2.test, tests/dirforbid.test,\n\t* tests/distcom3.test, tests/else.test, tests/exdir2.test,\n\t* tests/exeext2.test, tests/gcj2.test, tests/gcj5.test,\n\t* tests/getopt.test, tests/gettext.test, tests/gettext2.test,\n\t* tests/gnits.test, tests/gnuwarn.test, tests/gnuwarn2.test,\n\t* tests/insh.test, tests/lex2.test, tests/libobj10.test,\n\t* tests/libobj12.test, tests/libobj13.test,\n\t* tests/libobj3.test, tests/library2.test,\n\t* tests/library3.test, tests/libtool4.test,\n\t* tests/libtool6.test, tests/lisp2.test, tests/location.test,\n\t* tests/nogzip2.test, tests/output5.test, tests/overrid.test,\n\t* tests/percent.test, tests/percent2.test,\n\t* tests/pluseq5.test, tests/pluseq7.test, tests/pluseq9.test,\n\t* tests/pr211.test, tests/primary.test, tests/primary2.test,\n\t* tests/python2.test, tests/recurs.test, tests/reqd2.test,\n\t* tests/seenc.test, tests/specflg.test, tests/specflg2.test,\n\t* tests/spell.test, tests/spell2.test, tests/srcsub.test,\n\t* tests/srcsub2.test, tests/stdlib.test, tests/subdir7.test,\n\t* tests/substtarg.test, tests/suffix11.test,\n\t* tests/symlink.test, tests/syntax.test,\n\t* tests/targetclash.test, tests/txinfo4.test,\n\t* tests/version3.test, tests/warnopts.test,\n\t* tests/xsource.test, tests/yacc2.test: Use set -e,\n\tAUTOMAKE_fails, and always grep error message.\n\n\t* automake.in (handle_ltlibraries): Fix call to msg.\n\n\t* tests/stamph.test: Delete.\n\t* tests/Makefile.am (TESTS): Remove stamph.test.\n\n\t* automake.in (handle_single_transform_list): Use $var->name\n\tto print variable in the configure-substitution diagnostic.\n\tDo not mention the parent when it is the variable itself.\n\n\t* tests/package.test: Delete.\n\t* tests/Makefile.am (TESTS): Remove package.test.\n\n\t* automake.in (cond_stack_else): Return FALSE if `if' was not\n\tused.\n\t(cond_stack_endif): Return TRUE if `if' was not used.  Do not\n\tdisplay $negate and $cond, they are irrelevant and maybe undefined.\n\n2003-07-02  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (_traverse_variable_recursively_worker):\n\tDo not return undef when a variable is recursively defined, this\n\tcauses warnings all over the place.  Return the empty string instead.\n\n\t* lib/am/distdir.am (distcheck): Protect loop of DIST_ARCHIVES\n\tfrom empty DIST_ARCHIVES.\n\n2003-07-01  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (scan_autoconf_traces): Check the expected\n\tnumber of arguments of each traced macro.\n\t* tests/overrid.test: Fix call to AM_CONDITIONAL.\n\t* tests/conff2.test: New files.\n\t* tests/Makefile.am (TESTS): Add conff2.test.\n\tReport from Paolo Bonzini.\n\n2003-06-30  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in ($SUBST_REF_PATTERN): Do not define.\n\t(%gen_varname): Move to Variable.pm, as %_gen_varname.\n\t(initialize_per_input): Do not clean %gen_varname.\n\t(handle_options, check_libobjs_sources, handle_source_transform,\n\thandle_LIBOBJS, handle_ltlibraries, handle_texinfo_helper,\n\thandle_man_pages, handle_dist, handle_subdirs, handle_gettext,\n\tam_install_var): Adjust to use value_as_list_recursive,\n\tloc_and_value_as_list_recursive, and has_conditional_contents.\n\t(require_file_with_macro): Accept an Automake::Variable as argument.\n\t(traverse_variable_recursively,\n\ttraverse_variable_recursively_worker, gen_varname,\n\ttransform_variable_recursively): Move ...\n\t* lib/Automake/Variable.pm (traverse_variable_recursively,\n\t_traverse_variable_recursively_worker,\n\t_gen_varname, transform_variable_recursively): ... here.\n\t* automake.in (variable_conditionally_defined,\n\tvariable_value_as_list_recursive_worker,\n\tvariable_value_as_list_recursive\n\tvariable_loc_and_value_as_list_recursive): Move ...\n\t* lib/Automake/Variable.pm (has_conditional_contents,\n\t_value_as_list_recursive_worker,\n\tvalue_as_list_recursive, loc_and_value_as_list_recursive): ... here.\n\t(reset): Reset %_gen_varname.\n\t(require_variables_for_variable): Accept an Automake::Variable\n\tas argument.\n\n2003-06-27  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/aclocal6.test: Test maintainer-clean in VPATH\n\tbuilds. (For Ralf's fix.)\n\n2003-06-27  Ralf Corsepius  <corsepiu@faw.uni-ulm.de>  (tiny change)\n\n\t* lib/am/configure.am (maintainer-clean): Remove\n\t$(top_srcdir)/autom4te.cache, not autom4te.cache.\n\n2003-06-27  Akim Demaille  <akim@epita.fr>\n\n\t* automake.texi: Use @node with a single argument.\n\n2003-06-27  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* m4/Makefile.am (dist_m4data_DATA): Add $(top_srcdir)/m4/amversion.m4.\n\n\t* lib/am/distdir.am (distcheck): Run $(am__remove_distdir)\n\tat the end of distcheck.  This was mistakenly removed on\n\t2003-06-15.\n\t* tests/subpkg.test: Make sure distcheck cleans up after itself.\n\n\t* m4/Makefile.am ($(srcdir)/amversion.m4): Rename as ...\n\t($(top_srcdir)/m4/amversion.m4): ... this.\n\t(DISTCLEANFILES): Remove.\n\t(nodist_m4data_DATA): Remove. amversion.m4 is automatically\n\tdistributed.\n\t(EXTRA_DIST): Add amversion.in.\n\n2003-06-25  Akim Demaille  <akim@epita.fr>\n\n\t* automake.texi (Top): Use @copying and @insertcopying.\n\tMake Alexandre an author.\n\t* automake.in ($gen_copyright): Add the \"(C)\" to Copyright.\n\t* lib/depcomp: Likewise.\n\n2003-06-23  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (vardef, rvardef, set_seen): New functions.\n\t(variable_defined, examine_variable): Remove.\n\t(%_ac_macro_for_var): Add an entry for ALLOCA.\n\t(require_variables): Use vardef instead of variable_defined.\n\tDo not use _cvar.\n\t* automake.in (generate_makefile): Do not push $(SOURCE) into\n\t@sources.  Use define_pretty_variable to define SOURCES.\n\t(handle_LIBOBJS, handle_ALLOCA): Use require_variables_for_variable\n\tto require LIBOBJS, LTLIBOBJS and ALLOCA.\n\t(handle_programs, handle_ltlibraries): Do not define an empty\n\t_DEPENDENCIES or _LDFLAGS variable when none is defined.\n\t(define_configure_variable): Do not check whether the variable\n\talready exists (it's Automake::Variable::define's job).\n\t(require_build_directory): Likewise, do not check\n\tthe existence of am__dirstamp.\n\t(generate_makefile, handle_options, handle_languages)\n\t(check_libobjs_sources, handle_single_transform_list)\n\t(traverse_variable_recursively_worker, handle_source_transform)\n\t(handle_lib_objects, handle_LIBOBJS, handle_compile)\n\t(handle_libtool, handle_programs, handle_libraries)\n\t(handle_ltlibraries, check_typos, handle_texinfo_helper)\n\t(handle_man_pages, handle_tags, handle_dist, handle_subdirs)\n\t(scan_aclocal_m4, handle_gettext, handle_footer, handle_install)\n\t(handle_all, do_check_merge_target, handle_clean, lang_c_finish)\n\t(handle_tests, lang_yacc_target_hook, define_pretty_variable)\n\t(define_compiler_variable, define_linker_variable)\n\t(make_paragraphs, am_primary_prefixes, am_install_var): Adjust to\n\tcall var, vardef, or set_seen, instead of variable_defined.  Use\n\tset_seen only for variables which are actually checked by\n\tcheck_typos.\n\t* tests/target.test: Delete.\n\t* tests/alloca.test, tests/alloca2.test: New files.\n\t* tests/libobj3.test: Check error message.\n\t* tests/distcom4.test: Make sure configure is in DIST_COMMON.\n\tThis replace confdist.test.\n\t* tests/Makefile.am (TESTS, XFAIL_TESTS): Remove target.test.\n\t(TESTS): Add alloca.test and alloca2.test.  Remove confdist.test.\n\n2003-06-20  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_dist): Delete DIST_COMMON before redefining\n\tit.  Bug report from Akim Demaille.\n\t(rewrite_inputs_into_dependencies): Make sure we always return\n\tsomething, even when $add_srcdir is 0.\n\t* tests/distcom4.test, tests/distcom5.test: New files.\n\t* tests/Makefile.am (TESTS): Add distcom4.test and distcom5.test.\n\n\t* tests/cond29.test: Also check for _SOURCES.\n\tReport from Paolo Bonzini.\n\n2003-06-20  Akim Demaille  <akim@epita.fr>\n\n\t* lib/am/configure.am: Replace leading spaces with a real tab.\n\n2003-06-15  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/nogzip.test, tests/nogzip2.test: New files.\n\t* tests/Makefile.am (TESTS): Add nogzip.test and nogzip2.test\n\n2003-06-15  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (&make_paragraphs): Define %GZIP%.\n\t(&process_option_list): Accept no-dist-gzip2.\n\t(&handle_dist): Complain when no archive format is enabled.\n\t* lib/am/distdir.am (DIST_ARCHIVES): New variable.\n\t(dist-gzip, dist-bzip2, dist-tarZ, dist-zip): No longer\n\tconditioned.\n\t(dist): Build $(distdir).tar.gz conditionally.\n\t(distcheck): Use DIST_ARCHIVES to find an archive to unpack, and\n\tto list built archives.  Run $(MAKE) dist instead of dist-gzip.\n\t* automake.texi (Options, The types of distributions): Adjust.\n\n2003-06-15  Jens Elkner  <elkner@imsgroup.de>  (tiny change)\n\n\t* m4/lispdir.m4 (AM_PATH_LISPDIR): Fix sed commands to work with\n\tPOSIXLY_CORRECT=1.\n\n2003-06-14  Karl Berry  <karl@gnu.org>\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* mkinstalldirs (scriptversion): New variable.  Setup emacs hooks\n\tto update it each time the file is written, as in install-sh.\n\t(usage): Improve message.\n\t(--version): New option.\n\t(--help): Output to stdout, not stderr.\n\n2003-06-13  Paul Eggert  <eggert@twinsun.com>\n\n\t* lib/install-sh (dsttmp, rmtmp): Do not use '#' in file names;\n\tit's not guaranteed by POSIX and it doesn't work on OpenVMS.\n\tBug reported by Bernard Giroud in:\n\thttps://mail.gnu.org/archive/html/autoconf-patches/2003-06/msg00013.html\n\n2003-06-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (check_gnu_standards): Use no-installman and\n\tno-installinfo's locations.\n\t(process_option_list): Fill %options with locations.\n\t(check_cygnus) Fill $options{'no-installinfo'} and\n\t$options{'no-dependencies'} with $cygnus_mode, so that it\n\tremains a Location.\n\t* tests/gnuwarn2.test: New file.\n\t* tests/Makefile.am (TESTS): Add gnuwarn2.test.\n\n2003-06-04  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (process_option_list): Record the location\n\tof ansi2knr's definition.\n\t(handle_compile): Use it.\n\t* tests/ansi3.test: Make sure the location appears correctly.\n\tUpdate to use set -e.\n\t* tests/ansi3b.test: New file.\n\t* tests/Makefile.am (TESTS): Add ansi3b.test.\n\n\t* tests/alpha.test: Really run $MAKE.  Augment to test\n\tsubdirectories, and check-news report.\n\t* tests/alpha2.test: New file.  Bug report from Akim Demaille.\n\t* tests/gnits2.test: Make sure README-alpha is not distributed.\n\t* tests/Makefile.am (TESTS): Add alpha2.test.\n\t* automake.in (handle_minor_options): Distribute README-alpha\n\tusing push_dist_common, not require_file_with_macro.\n\n2003-06-03  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Configure_ac.pm\n\t(search_configure_ac, find_configure_ac): Rename as ...\n\t(find_configure_ac, require_configure_ac): ... these.\n\t* aclocal.in (scan_configure): Adjust call to require_configure_ac.\n\t* automake.in (scan_autoconf_files): Likewise.\n\tSuggested by Tim Van Holder.\n\n\t* alocal.in: Use Automake::Configure_ac.\n\t($configure_ac): Delete.\n\t(scan_configure): Adjust use of find_configure_ac;\n\t* automake.in: Use Automake::Configure_ac.\n\t($configure_ac): Delete.\n\t(scan_autoconf_files): Adjust use of find_configure_ac;\n\t* lib/Automake/Configure_ac.pm: New file.\n\t* lib/Automake/General.pm (find_configure_ac): Delete.  Now\n\treplaced by Automake::Configure_ac::search_configure_ac.\n\t* lib/Automake/Makefile.am (dist_perllib_DATA): Add Configure_ac.pm.\n\t* lib/Automake/Variable.pm: Use Automake::Configure_ac.\n\t(require_variables): Adjust use of $configure_ac.\n\n2003-06-02  Akim Demaille  <akim@epita.fr>\n\n\t* lib/am/texi-vers.am, lib/am/subdirs.am, lib/am/scripts.am,\n\t* lib/am/remake-hdr.am, lib/am/python.am, lib/am/progs.am,\n\t* lib/am/program.am, lib/am/multilib.am, lib/am/mans.am,\n\t* lib/am/mans-vars.am, lib/am/ltlibrary.am, lib/am/ltlib.am,\n\t* lib/am/lisp.am, lib/am/libtool.am, lib/am/library.am,\n\t* lib/am/lang-compile.am, lib/am/java.am, lib/am/header.am,\n\t* lib/am/header-vars.am, lib/am/footer.am, lib/am/depend.am,\n\t* lib/am/dejagnu.am, lib/am/data.am, lib/am/compile.am,\n\t* lib/am/clean.am, lib/am/clean-hdr.am, lib/am/check.am,\n\t* lib/am/ansi2knr.am, lib/am/Makefile.am, lib/Makefile.am,\n\t* m4/strip.m4, m4/sanity.m4, m4/runlog.m4, m4/regex.m4,\n\t* m4/python.m4, m4/protos.m4, m4/options.m4, m4/obsolete.m4,\n\t* m4/obsol-lt.m4, m4/obsol-gt.m4, m4/multi.m4, m4/missing.m4,\n\t* m4/minuso.m4, m4/maintainer.m4, m4/lispdir.m4, m4/lex.m4,\n\t* m4/install-sh.m4, m4/header.m4, m4/gcj.m4, m4/dmalloc.m4,\n\t* m4/depout.m4, m4/cond.m4, m4/ccstdc.m4, m4/auxdir.m4, m4/as.m4,\n\t* m4/Makefile.am: White space changes and Copyright updates.\n\n2003-05-29  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm (check_defined_unconditionally): Add\n\tthe $parent_cond argument.\n\t(output): Use $self->name in diagnostic not $self.\n\t(variable_value_as_list): Rename as ...\n\t(value_as_list): ... this.  Declare as a method.  Take a $parent_cond\n\targument and pass it to check_defined_unconditionally.  Do not call\n\tvariable_assert, now that this is a method.\n\t(variable_assert): Delete (unused).\n\t* automake.in (traverse_variable_recursively_worker): Adjust to\n\tuse check_defined_unconditionally and value_as_list as a methods.\n\n\t* lib/Automake/Variable.pm (output): Declare as a method, since it\n\tis only used this way.\n\t(define): Fix documentation of $cond.\n\tSuggested by Raja R. Harinath.\n\n2003-05-25  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Variable.pm, lib/Automake/VarDef.pm: New files.\n\t* lib/Automake/Makefile.am (dist_perllib_DATA): Add Variable.pm\n\tand VarDef.pm.\n\t* automake.in: Use Automake::Variable and Automake::VarDef.\n\t(MACRO_PATTERN): Delete. Now Automake::Variable::_MACRO_PATTERN.\n\t(am_macro_for_var): Delete. Now Automake::Variable::_am_macro_for_var.\n\t(ac_macro_for_var): Delete. Now Automake::Variable::_ac_macro_for_var.\n\t(silent_variable_override): Delete.  Now\n\tAutomake::Variable::_silent_variable_override.\n\t(var_value, var_location, var_comment, var_type, var_owner,\n\tvar_pretty, content_seen): Delete.  This functionality is now\n\toffered by Automake::Variable and Automake::VarDef.\n\t(VAR_AUTOMAKE, VAR_CONFIGURE, VAR_MAKEFILE, VAR_ASIS, VAR_PRETTY):\n\tDelete.  Now defined in Automake::VarDef.\n\t(var_order): Delete.  Now Automake::Variable::_var_order.\n\t(appendvar): Delete.  Now Automake::Variable::_appendvar.\n\t(var_SUFFIX_trigger): Register using Automake::Variable::hook.\n\t(initialize_per_input): Call Automake::Variable::reset.\n\t(err_var, msg_cond_var, msg_var, reject_var): Delete.  Now\n\tdefined in Automake::Variable.\n\t(generate_makefile, process_option_list, handle_languages)\n\t(traverse_variable_recursively_worker)\n\t(transform_variable_recursively, handle_compile)\n\t(handle_libraries, handle_ltlibraries)\n\t(check_typos, handle_dist, handle_subdirs, scan_autoconf_files):\n\tAdjust to use Automake::Variable functions.\n\t(check_ambiguous_condition): Delete.  Now\n\tAutomake::Variable::_check_ambiguous_condition.\n\t(condition_ambiguous_p): Delete.  Now\n\tAutomake::Variable::condition_ambiguous_p.\n\t(variable_not_always_defined_in_cond): Delete.  Now\n\tAutomake::Variable::not_always_defined_in_cond.\n\t(macro_define): Delete.  Now Automake::Variable::define.\n\t(macro_delete): Delete.  Now Automake::Variable::variable_delete.\n\t(macro_dump): Delete.  Now Automake::Variable::variable_dump.\n\t(macros_dump): Delete.  Now Automake::Variable::variables_dump.\n\t(variable_defined): Delete.  Now\n\tAutomake::Variable::variable_defined, with the target check\n\ttemporarily disabled.\n\t(variable_assert): Delete.  Now Automake::Variable::variable_assert.\n\t(examine_variable): Delete.  Now\n\tAutomake::Variable::examine_variable.\n\t(variable_conditions): Delete.  Now Automake::Variable::conditions.\n\t(scan_variable_expansions): Delete.  Now\n\tAutomake::Variable::scan_variable_expansions.\n\t(check_variable_expansions): Delete.  Now\n\tAutomake::Variable::check_variable_expansions.\n\t(check_variable_defined_unconditionally): Delete.  Now\n\tAutomake::Variable::check_defined_unconditionally.\n\t(variable_value): Delete.  Now Automake::Variable::variable_value.\n\t(variable_value_as_list): Delete.  Now\n\tAutomake::Variable::variable_value_as_list.\n\t(variable_value_as_list_recursive_worker): Adjust to use\n\tAutomake::Variable functions.\n\t(variable_output): Delete.  Now Automake::Variable::output.\n\t(define_pretty_variable, define_configure_variable, read_am_file)\n\t(define_standard_variables, read_main_am_file): Adjust to use\n\tAutomake::Variable functions.\n\t(handle_variables): Delete.  Now Automake::Variable::output_variables.\n\t(file_contents_internal, am_primary_prefixes, am_install_var)\n\t(require_file_with_macro, require_conf_file_with_macro)\n\t(push_dist_common): : Adjust to use\n\tAutomake::Variable functions.\n\t(require_variables): Delete.  Now\n\tAutomake::Variable::require_variables.\n\t(require_variables_for_macro): Delete.  Now\n\tAutomake::Variable::require_variables_for_variable.\n\t* tests/Makefile.am (XFAIL_TESTS): Add target.test.\n\n2003-05-25  Christian Cornelssen  <ccorn@cs.tu-berlin.de>  (tiny change)\n\n\t* tests/dejagnu7.test: Check if runtest supports --status.\n\n2003-05-23  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Location.pm (dump): Output 'INTERNAL' when position\n\tis undefined.\n\n\t* lib/Automake/DisjConditions.pm (human): Fix infinite loop when\n\t$self contains only one Condition.\n\n\t* automake.in: Use plain strict, including refs.\n\t(macro_define, handle_single_transform_list): Use \\&{'name'} to\n\tbuild references to named subroutines.\n\n2003-05-22  Karl Berry  <karl@gnu.org>\n\n\t* automake.texi: Update @dircategory to match the Free Software\n\tDirectory.  End directory entries with dots.\n\n2003-05-22  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (maintainer-mode): s/Fran\u00e7ois/Fran@,{c}ois/.\n\n\t* lib/elisp-comp: s/Fran\u00e7ois/Franc,ois/.\n\tSuggested by Paul Eggert.\n\n\t* automake.in: Move the \"main\" code at the end.\n\t(parse_arguments): Move near the end.\n\t($KNOWN_EXTENSIONS_PATTERN, @known_extensions_list,\n\taccept_extensions, var_SUFFIXES_trigger): Move these definitions\n\tbefore any call to register_language.\n\t(am_file): Move the definition with all other global variables,\n\tdo not use local to define it.\n\t* Makefile.am (maintainer-check): Expect no `local' in Automake.\n\n2003-05-21  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/Wrap.pm, lib/Automake/tests/Wrap.pl: New files.\n\t* lib/Automake/Makefile.am (dist_perllib_DATA): Add Wrap.pm.\n\t* lib/Automake/tests/Makefile.am (TESTS): Add Wrap.pl.\n\t* automake.in (handle_texinfo_helper, pretty_print_rule)\n\t(variable_output): Adjust to use makefile_wrap instead of\n\tpretty_print_internal.\n\t(pretty_print_internal): Remove.  Renamed as Automake::Wrap::wrap\n\tand augmented to accept the $eol and $max_len arguments.\n\n2003-05-18  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Autom4te/XFile.pm, lib/config.guess, lib/config.sub,\n\tlib/texinfo.tex: New upstream versions.\n\n2003-05-17  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/install.am (install, install-exec, install-data, uninstall):\n\tDeclare conditionally using a if/else/endif block instead of\n\tusing ?SUBDIRS?-style conditions.  The latter fail when\n\t%maybe_BUILT_SOURCES% is replaced by several lines.\n\tThis fixes a bug introduced on 2003-04-06.\n\t* tests/bsource.test: New file.\n\t* tests/Makefile.am (TESTS): Add bsource.test.\n\tReported by Bruno Haible.\n\n2003-05-11  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (renamed objects): New node.\n\t(Program and Library Variables): Move maude_DEPENDENCIES closer\n\tto maude_LDADD.  Define and use `per-target compilation flags' in the\n\texplanation for maude_CFLAGS et al.  Link to the `renamed objects'\n\tnode.  Illustrate maude_SHORTNAME.\n\n2003-05-09  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/install-sh: Update copyright notice and license to that of\n\tX11R6.  This removes an advertising clause reported as Debian bug\n\t#191717.\n\n2003-05-07  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* configure.in (ACLOCAL): Do not use -I, --acdir is enough.\n\n\t* m4/make.m4: Rename the doit target as am__doit,\n\tand make it phony.\n\tReported by Philip S Tellis.\n\n2003-05-07  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/configure.am (%MAKEFILE-IN%): Propagate automake's exit\n\tstatus.\n\t* tests/makej.test: New file (test Autom4te's cache locking,\n\tnew in CVS Autoconf).\n\t* tests/Makefile.am (TESTS): Add makej.test.\n\n2003-05-06  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/General.pm (contents): New function.\n\t* aclocal.in (greatest_mtime, force_output): New globals.\n\t(scan_configure, add_file): Update $greatest_mtime.\n\t(parse_arguments): Parse --force.\n\t(write_aclocal): Do not overwrite $output_file unless needed.\n\t* automake.texi (aclocal options): Document --force.\n\t* tests/aclocal7.test: New file.\n\t* tests/Makefile.am (TESTS): Add aclocal7.test.\n\n2003-05-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (Optional): Document m4_include.\n\t(Invoking aclocal): Shake a bit to introduce the various uses\n\tof aclocal and explain that aclocal will use m4_include for\n\tlocal files.\n\t(Extending aclocal): Show how to install installable macros\n\tin $(datadir)/aclocal, and make it clearer that writing installable\n\tmacros is not the only way to extend aclocal.\n\t(Local Macros, Future of aclocal): New sections.\n\n2003-04-27  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (@common_files): Remove acinclude.m4 since\n\tit will be m4_included by aclocal.m4 and files are always\n\tdistributed.\n\t(scan_aclocal_m4): Do not bother about acinclude.m4 anymore.\n\tWe will get this dependency when tracing m4_includes.\n\t* tests/aclocal6.test: Make sure acinclude.m4 is distributed\n\twhen used.\n\t* tests/acinclude.test: Delete.\n\t* tests/Makefile.am (TESTS): Remove acinclude.test.\n\n2003-04-25  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_configure): Don't add @configure_deps to\n\tDIST_COMMON, we do this from lib/am/configure.am now.\n\tDefine the am__configure_deps variable instead of substituing\n\t%CONFIGURE_DEPS%.\n\t* lib/am/configure.am (%MAKEFILE-IN%, $(top_srcdir)/configure,\n\t$(ACLOCAL_M4)): Use $(am__configure_deps) instead of %CONFIGURE_DEPS%.\n\t(DIST_COMMON): Add $(am__configure_deps).\n\n\t* tests/aclocal6.test: New file.\n\t* lib/am/configure.am (am--refresh): New rule.\n\t(%MAKEFILE-IN%, %MAKEFILE%, $(top_builddir)/config.status,\n\t$(top_srcdir)/configure): Call the top-level am--refresh from\n\tsubdirectories.\n\t($(ACLOCAL_M4)): Depend upon %CONFIGURE_DEPS%.  Call the\n\ttop-level am--refresh when not in the top-level directory.\n\tFix jump directories for VPATH builds.\n\tSuggested by Raja R. Harinath.\n\n2003-04-24  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (scan_aclocal_m4): Do not parse ACLOCAL_AMFLAGS\n\tand glob for m4_files (We've got all local m4 files while\n\ttracing m4_include's).  Diagnose ACLOCAL_M4_SOURCES as obsolete.\n\tDistribute aclocal.m4 only at the top-level.\n\t(my_glob): Remove.  This fixes PR automake/11.\n\t(handle_dist): Strip leading `./' from directories.\n\t* aclocal.in (add_file): Output 'm4_include([file.m4])' instead\n\tof copying local files.\n\t(write_aclocal, parse_arguments): Bump copyright date.\n\t* configure.in: De not build m4/amversion.m4 from here ...\n\t* m4/Makefile.am ($(srcdir)/amversion.m4): ... do this here.\n\t(nodist_m4data_DATA): Use $(srcdir)/amversion.m4 instead\n\tof amversion.m4.\n\t* tests/Makefile.am (XFAIL_TESTS): Remove aclocal5.test.\n\t(TESTS): Remove aclocal2.test.  Do not test aclocal.test twice.\n\t* tests/aclocal2.test: Delete (pointless).\n\t* tests/aclocal5.test: Make sure configure's dependencies are\n\tdistributed.\n\t* tests/acinclude.test: Adjust to search for m4_include.\n\t* tests/dirlist.test, tests/dup3.test: Run $AUTOCONF and grep\n\tconfigure instead of aclocal.m4.\n\n\tFor PR automake/46:\n\t* automake.in (scan_aclocal_m4): Work in all directories, not only\n\tthe top-level.  Prepend $(top_srcdir) in front of each aclocal.m4\n\tdependency.\n\t* lib/am/configure.am (config.status, configure, $(ACLOCAL_M4)):\n\tDefine rebuild rules in each directory.\n\t* tests/subdir8.test: Augment to exercise aclocal.m4's dependencies\n\tfrom the top-level directory.\n\t* tests/aclocal5.test: New file.  Exercise aclocal.m4's dependencies\n\tfrom a subdirectory.\n\t* tests/Makefile.am (TESTS): Add aclocal5.test.\n\t(XFAIL_TESTS): Replace subdir8.test by aclocal5.test.\n\n2003-04-24  Akim Demaille  <akim@epita.fr>\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFor PR automake/46:\n\t* lib/am/configure.am (%MAKEFILE-IN%): If Makefile.in is rebuilt\n\tbecause of one of configure's dependencies, run automake without\n\targument to update the whole tree at once.  Depend upon\n\t%CONFIGURE_DEPS%.\n\t(%MAKEFILE%): If Makefile is rebuilt because config.status has\n\tbeen updated, run config.status without arguments.\n\t* automake.in (scan_autoconf_traces): Prepend $(top_srcdir)\n\tbefore all files in @configure_deps.\n\t* tests/subdir5.test: Modernize configure.in, make sure\n\tmaude/Makefile was actually created, and exercise %CONFIGURE_DEPS%.\n\t* tests/subdir8.test: New file.\n\t* tests/Makefile.am (TESTS): Add subdir8.test.\n\t(XFAIL_TESTS): Replace subdir5.test by subdir8.test.\n\n2003-04-23  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (Requirements): Typo in index\n\ts/AC_CONFIG_FILE/AC_CONFIG_FILES/.\n\n\t* lib/texinfo.tex: New upstream version.\n\n2003-04-21  Jim Meyering  <jim@meyering.net>\n\n\t* lib/mkinstalldirs: Remove each sequence of spaces before a\n\tTAB character.\n\t* lib/depcomp: Search for TAB-SPC, not SPC-TAB.\n\n2003-04-19  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFix for PR automake/389:\n\t* automake.in (handle_configure): Don't put $colon_infile in\n\tCONFIG-MAKEFILE.\n\t* tests/conff.test: New file.\n\t* tests/Makefile.am (TESTS): Add conff.test.\n\tReported by Alexander Turbov.\n\n2003-04-18  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/defs.in: Handle required=etags to work around\n\tExuberant Ctags.\n\n\t* lib/config.guess, lib/config.sub, lib/texinfo.tex: New upstream\n\tversions.\n\n\t* tests/dejagnu3.test, tests/dejagnu4.test, tests/dejagnu5.test:\n\tDistribute dejagnu test cases, so that distcheck actually runs them.\n\n2003-04-18  Richard Dawe  <rich@phekda.freeserve.co.uk>\n\n\t* lib/am/dejagnu.am (site.exp): Don't define tool in site.exp,\n\tbecause we set that by invoking runtest with --tool.\n\t* tests/Makefile.am (TESTS): Add dejagnu4.test, dejagnu5.test,\n\tdejagnu6.test, dejagnu7.test.\n\t* tests/dejagnu4.test: New test.\n\t* tests/dejagnu5.test: New test.\n\t* tests/dejagnu6.test: New test.\n\t* tests/dejagnu7.test: New test.\n\n\t* tests/dejagnu3.test: Make sure the DejaGnu test is actually run.\n\n2003-04-18  Jim Meyering  <jim@meyering.net>\n\n\t* automake.in (variable_output): Fix typo in comment s/is/if/.\n\n\t* lib/am/yacc.am (?!GENERIC?%OBJ% aka .y.c): Don't redirect\n\tdirectly to $@.  Instead, redirect to $@t and rename upon success.\n\tAlso, move the commands that update $@ so they are last.  Otherwise,\n\tthis rule could leave the user with an up to date target (.c file)\n\tbut with a missing or corrupted corresponding .h file.\n\n2003-04-17  Richard Dawe  <rich@phekda.freeserve.co.uk>\n\n\t* tests/defs.in: Handle required=runtest, to detect runtest\n\tfrom DejaGnu.\n\t* tests/Makefile.am (TESTS): Add dejagnu3.test.\n\t* tests/dejagnu3.test: New test.\n\n2003-04-16  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (rule_define): If the user tries to override\n\tan Automake which has a -local variant, suggest using the\n\t-local variant in the -Woverride diagnostic.\n\t(handle_factored_dependencies): Register factored\n\trules with rule_define, and define them only in undefined\n\tconditions.\n\t* tests/Makefile.am (TESTS): Add override.test.\n\t* tests/overrid.test: New file.\n\t* tests/phony.test: Count the number of .PHONY targets.\n\n2003-04-15  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/distdir.am (distuninstallcheck, distcleancheck): Silence\n\tthese rules, so that we don't confuse users by echoing\n\t\"echo ERROR:\" commands which are not run.\n\n2003-03-14  Richard Dawe  <rich@phekda.freeserve.co.uk>\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (output_texinfo_build_rules, handle_texinfo_helper,\n\tinitialize_per_input):  Add infrastructure for generating HTML\n\tdocumentation from texinfo source.\n\t* lib/am/texinfos.am: Add rules for building HTML documentation\n\tfrom texinfo source.\n\t* lib/am/texibuild.am: Likewise.\n\t* automake.texi (Texinfo): Document rules for building\n\tHTML documentation from texinfo source.\n\t* tests/txinfo21.test: New file.\n\t* tests/Makefile.am (TESTS): Add txinfo21.test.\n\t* tests/defs.in: Handle required=makeinfo-html.\n\n2003-04-14  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (%silent_variable_override): New variable.\n\t(macro_define): Warn about variable definitions overriding\n\tAutomake variables.\n\t(rule_define): Warn about target definitions overriding\n\tAutomake variables.  Fix $condmsg definition.\n\t* automake.texi (Invoking Automake): Document the `override'\n\tcategory.\n\t* lib/Automake/ChannelDefs.pm (usage): Likewise.\n\t* lib/am/texinfos.am [!%?CYGNUS] (MAKEINFO): Do not define,\n\tthis is already done in m4/init.m4.\n\t* tests/dejagnu2.test: Run $MAKE, don't only grep.  Use\n\t-Wno-override, and make sure we get a warning without.\n\t* tests/exeext2.test, tests/substtarg.test: Use -Wno-override,\n\tand make sure we get a warning without.\n\t* tests/exeext3.test, tests/java2.test, tests/nolink.test,\n\ttests/subpkg.test, tests/vartest.test: Use -Wno-override.\n\t* tests/txinfo13.test: Use installcheck-local instead of overriding\n\tinstallcheck.\n\t* tests/txinfo2.test: Run $MAKE on the real Makefile (this test\n\tused to succeed thanks to a failure...)\n\t* tests/location.test: Adjust expected messages.\n\t* tests/Makefile.am (XFAIL_TESTS): Add txinfo5.test.\n\n2003-04-12  Raja R Harinath  <harinath@acm.org>\n\n\t* lib/Automake/DisjConditions.pm (true): Don't cache answer.\n\t(invert): Update comment.\n\t(_simplify): Remove.\n\t(simplify): Implement using invert().\n\t* lib/Automake/tests/DisjConditions.pl (test_simplify):\n\tUpdate to reflect changes.\n\n2003-04-12  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (scan_autoconf_files): Augment the error message\n\tabout AM_INIT_AUTOMAKE not found.\n\tSuggested by Bruno Haible.\n\n\t* lib/Automake/Version.pm: New file.\n\t* lib/Automake/Makefile.am (dist_perllib_DATA): Add Version.pm.\n\t* lib/Automake/tests/Version.pl: New file.\n\t* lib/Automake/tests/Makefile.am (TESTS): Add Version.pl.\n\t* tests/Makefile.am (TESTS): Remove version5.test.\n\t* tests/version5.test: Delete.  Move the tests to Version.pl.\n\t* automake.in (version_split, version_compare, version_check): Move ...\n\t* lib/Automake/Version.pm (split, compare, check): ... here.\n\n2003-04-11  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/tests/Condition.pl (test_reduce_and)\n\t(test_reduce_or): Cosmetics.\n\t* lib/Automake/tests/DisjConditions.pl (test_sub_conditions):\n\tFix a comment.\n\t* lib/Automake/DisjConditions.pm (sub_conditions): Add missing C<...>\n\tin comment.\n\t* tests/yacc8.test, configure.in: Update copyright year.\n\n2003-04-10  Richard Dawe  <rich@phekda.freeserve.co.uk>\n\n\t* configure.in: Get the build platform name.  Define\n\tMODIFICATION_DELAY as the time to wait after modifying a file,\n\tto cope with timestamp granularity issues, depending\n\ton the platform.\n\t* tests/defs.in: Define `sleep' using MODIFICATION_DELAY.\n\n2003-04-10  Eric Siegerman  <eric_97@pobox.com>  (tiny change)\n\n\t* automake.texi (Public macros): Clarify that the new\n\tAM_INIT_AUTOMAKE variant is preferred, and the old one\n\tdeprecated.  Copy-edit the rest of the AM_INIT_AUTOMAKE item.\n\t(Hello): Caution that the example uses the deprecated\n\tAC_INIT/AM_INIT_AUTOMAKE syntax, and xref to the discussion.\n\n2003-04-10  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tRetain all variable definitions until the whole Makefile.am has\n\tbeen processed, then output all variables in one step, at the top\n\tof Makefile.in.  (Older revisions used to output user variables\n\tbefore generating Automake targets, and to mix Automake variables\n\twith Automake targets, preventing redefinitions of previously\n\toutput variables.)\n\n\t* automake.in (%var_pretty): New variable.\n\t(VAR_ASIS, VAR_PRETTY): New constants.\n\t(@var_list): Rename as ...\n\t(@var_order): ... this.\n\t(initialize_per_input): Clear %var_pretty.\n\t(handle_variables): New function, extracted from ...\n\t(read_main_am_file): ... here.\n\t(generate_makefile): Call handle_variable after everything else.\n\t(handle_dist): Use define_pretty_variable, not pretty_print.\n\t(pretty_print): Delete.\n\t(macro_define): Augment with $COMMENT and $PRETTY parameters.\n\tUpdate %var_comment, %var_pretty, and @var_order.  Adjust callers.\n\t(variable_pretty_output): Merge with ...\n\t(variable_output): ... this, and choose the prettiness on a\n\tper-condition basis.\n\t(append_comments): Delete.  This work is now done by macro_define.\n\t(read_am_file, file_contents_internal): Don't call append_comments\n\tnor update @var_list, adjust calls to macro_define.\n\t(handle_subdirs): Don't explicitly output RECURSIVE_TARGETS,\n\tjust mark it as VAR_PRETTY.\n\t* tests/exeext.test: Make sure bin_PROGRAMS is output only once.\n\tReport from Jim Meyering.\n\n2003-04-06  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_installdirs): Rename as ...\n\t(handle_install): ... this.  Define maybe_BUILT_SOURCES.\n\t(generate_makefile): Adjust call to handle_install.\n\t* lib/am/install.am (install): Use %maybe_BUILT_SOURCES%.\n\t* automake.texi (Sources, Built sources example): BUILT_SOURCES\n\tis honored by `make install' too.\n\t* tests/check3.test: Make sure that `make install' also depends\n\tupon BUILT_SOURCES.\n\tReport from Alexander Turbov.\n\n\t* lib/am/libs.am (ARFLAGS): Define.\n\t* automake.in (handle_libraries): Use `$(ARFLAGS)' instead of\n\thard-coding `cru'.\n\t* automake.texi (A Library): Explain how AR, ARFLAGS and RANLIB\n\tare used, and how they can be overridden.\n\t(Program and Library Variables): Adjust to show `$(ARFLAGS)'\n\tinstead of `cru'\n\t* tests/ar.test: Rewrite to test for AR, ARFLAGS, and RANLIB.\n\t* tests/ranlib.test: Delete, obsoleted by ar.test.\n\t* tests/Makefile.am (TESTS): Remove ranlib.test.\n\tReport from Paul Thomas.\n\n2003-04-03  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (check_trailing_slash): New function (variation on\n\ta patch by Peter Muir).  Diagnose whitespaces following trailing\n\tbackslash.\n\t(read_am_file): Use it.\n\t* tests/backsl4.test: New file.\n\t* tests/Makefile.am (TESTS): Add backsl4.test.\n\tReported by Peter Muir.\n\n2003-03-29  Raja R Harinath  <harinath@acm.org>\n\n\tSpeedup Automake::DisjConditions::invert().\n\t* lib/Automake/Condition.pm (multiply): New.\n\t* lib/Automake/DisjConditions.pm (_multiply): Use it.\n\t(sub_conditions): Likewise.\n\n\t* lib/Automake/Condition.pm (reduce): Rename to ...\n\t(reduce_and): ... this.\n\t(reduce_or): New.\n\t* lib/Automake/DisjConditions.pm (_multiply): Use reduce_or().\n\t* lib/Automake/tests/Condition.pl (test_reduce): Rename to ...\n\t(test_reduce_and): ... this.\n\t(test_reduce_or): New.\n\t* lib/Automake/tests/DisjConditions.pl\n\t(test_invert): Update to reflect effect of reduce_or().\n\t(test_simplify): Don't skip invert() on larger inputs.\n\n2003-03-29  Raja R Harinath  <harinath@cs.umn.edu>\n\n\t* tests/yacc8.test: Add a $sleep before modifying Makefile.am so\n\tthat timestamp will change.\n\n2003-03-23  Akim Demaille  <akim@epita.fr>\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/tags.am (TAGS): Use --etags-include instead of --include,\n\twhen supported by etags (Exuberant Ctags).\n\t* tests/tagsub.test: Rewrite to _run_ the `tags' rule.\n\n2003-03-20  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFor Debian Bug #185388:\n\t* automake.texi (Extending): Augment the install-exec-hook\n\tdiscussion with an example how to symlink a versioned binary.\n\t* tests/insthook.test: Rewrite to test the above example.\n\tReport from James R. Van Zandt.\n\n2003-03-19  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* Makefile.am (maintainer-check): Allow `automake:' tokens,\n\toccurring in location.test.  Automake now has 5 legitimate\n\tunsubstituted @strings@.\n\n\t* tests/aclocal4.test: Require GNU make.\n\n2003-03-14  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/aclocal4.test: New file.  Test for the ACLOCAL_M4 bug below.\n\t* tests/Makefile.am (TESTS): Add aclocal4.test.\n\n2003-03-14  Jim Meyering  <jim@meyering.net>\n\n\t* automake.in (scan_aclocal_m4): Define ACLOCAL_M4 even in\n\tsubdirectories.  Makefile.in depends on that variable.\n\n2003-03-13  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* m4/init.m4: Remove a leftover comment from the pre-1.7 era.\n\n\tFix for PR automake/386:\n\t* m4/init.m4: Require Autoconf 2.55.\n\tReported by Owen Taylor.\n\n\t* lib/am/depend2.am (?GENERIC?%EXT%.o, ?GENERIC?%EXT%.obj)\n\t(?GENERIC?%EXT%.lo): Use `mv -f' instead of `mv' in FASTDEP mode.\n\tSuggested by Matthias Andree.\n\n\t* tests/README: Typo.\n\n2003-03-08  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/depend2.am (?GENERIC?%EXT%.o, ?GENERIC?%EXT%.obj)\n\t(?GENERIC?%EXT%.lo): Hide the if/then/else machinery for FASTDEP.\n\tJust echo the gcc command.\n\tSuggested by Karl Berry.\n\n2003-03-06  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/depend2.am (?GENERIC?%EXT%.lo): Do not use\n\t`test -f foo || echo $(srcdir)/` to emulate a VPATH search when\n\toutputing suffix rules.  This follows 2003-02-25's change.\n\t* lib/am/lex.am (?GENERIC?%EXT%%DERIVED-EXT%): Likewise.\n\t* lib/am/yacc.am (?GENERIC?%EXT%%DERIVED-EXT%): Likewise.\n\n2003-03-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (Requirements) <AC_CONFIG_FILES>: Files listed\n\twith AC_CONFIG_FILES are cleaned by `make distclean'.  Don't\n\tpretend otherwise.\n\tReported by Rafael Laboissiere.\n\n2003-03-04  Andreas Buening  <andreas.buening@nexgo.de>\n\n\t* lib/mdate-sh: Find out which column of the ls -l output contains\n\tthe month. Do not assume it is at least the fifth column.\n\n2003-02-26  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (Emacs Lisp): Mention that `dist_' can be used.\n\n\t* automake.texi (Emacs Lisp): Instruct people to use lisp_DATA\n\tinstead of lisp_LISP when they don't want byte-compilation.\n\tDon't mention ELCFILES anymore.\n\t* automake.in (handle_data): Allow lisp_DATA.\n\t* tests/lisp5.test: New file.\n\t* tests/Makefile.am (TESTS): Add lisp5.test.\n\n\t* automake.in (handle_emacs_lisp): Don't build *.elc files\n\tif ELCFILES was set empty.\n\t* tests/lisp4.test: New file.\n\t* tests/Makefile.am (TESTS): Add lisp4.test.\n\tReported by Simon Josefsson.\n\n\t* tests/lex3.test, tests/lex5.test: Require flex.\n\tReported by Leo Davis.\n\n2003-02-25  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/depend2.am (?GENERIC?%EXT%.o, ?GENERIC?%EXT%.obj): Do not\n\tuse the `test -f foo || echo $(srcdir)/` to emulate a VPATH search\n\twhen outputing suffix rules.\n\t* lib/am/texibuild.am (?GENERIC?%SOURCE_SUFFIX%.dvi)\n\t(?GENERIC?%SOURCE_SUFFIX%.pdf): Likewise.\n\tSuggested by Bruno Haible.\n\n\t* automake.in (read_am_file): Catch trailing backslashes on last line.\n\t* tests/backsl3.test: New file.\n\t* tests/Makefile.am (TESTS): Add backsl3.test.\n\tReported by Akim Demaille.\n\n2003-02-24  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* ChangeLog: Move 2002's entries to ...\n\t* ChangeLog.02: ... this new file.\n\t* Makefile.am (EXTRA_DIST): Add ChangeLog.02.\n\n2003-02-24  Richard Dawe  <rich@phekda.freeserve.co.uk>\n\n\t* tests/version7.test: Use $sleep to sleep before updating\n\tthe version, to work around timestamp inconsistencies in Windows.\n\n2003-02-24  Bruno Haible  <bruno@clisp.org>\n\t    Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/texibuild.am: Don't remove the target info files. Instead,\n\tback up and restore them if makeinfo fails.\n\t* tests/txinfo20.test: New file.\n\t* tests/Makefile.am (TESTS): Add txinfo20.test.\n\n2003-02-23  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (FAQ, CVS, maintainer-mode, wildcards)\n\t(distcleancheck): Fix typos and other errors reported by Karl\n\tBerry.\n\n2003-02-20  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/texibuild.am (%SOURCE_SUFFIX%%DEST_SUFFIX%): Use $(...)\n\tinstead of ${...}.\n\n\t* tests/defs.in: Handle required=ro-dir.\n\t* tests/destdir.test: Use this.\n\n2003-02-19  Richard Dawe  <rich@phekda.freeserve.co.uk>\n\n\t* lib/am/distdir.am (distcheck): Strip any leading DOS drive\n\tfrom dc_install_base.\n\n2003-02-19  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/texinfos.am (install-info-am, uninstall-info-am): Install\n\tDJGPP-style *.iNN info files.\n\t(maintainer-clean-aminfo): Rewrite using the same pattern\n\tas in uninstall-info-am.\n\t* lib/am/texibuild.am (%SOURCE_SUFFIX%%DEST_SUFFIX%): Erase\n\tDJGPP-style *.iNN info files before running $(MAKEINFO).\n\t* tests/txinfo19.test: New file.\n\t* tests/Makefile.am (TESTS): Add txinfo19.test.\n\n2003-02-18  Richard Dawe  <rich@phekda.freeserve.co.uk>\n\n\t* lib/depcomp (dashmstdout): Cope with DOS filenames in\n\tdependencies.\n\n2003-02-17  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/depcomp (makedepend): Don't pass $object to makedepend.\n\tReported by Stepan Kasal.\n\n2003-02-12  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* tests/defs.in: Handle required=makedepend.\n\n\t* Makefile.am (maintainer-check): Update the diff check\n\tto account for the recent @SHELL@ substitution.\n\n2003-02-11  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/depcomp: Do not put comments on the `icc)' line.\n\n\t* lib/config.guess, lib/config.sub, lib/texinfo.tex: New upstream\n\tversions.\n\n\tFix for PR automake/381:\n\t* automake.in (handle_gettext): Do not print diagnostics\n\tabout po/ and intl/ missing from SUBDIRS if po/ does not\n\texist.  Warn if `SUBDIRS = intl' is used although libintl\n\tis 'external'.\n\t* tests/gettext.test: Make sure diagnostics are not output\n\twhen po/ does not exist.\n\t* tests/gettext2.test: Test for unwanted intl/.\n\tPR from Alexander Turbov, fix suggested by Bruno Haible.\n\n\t* m4/depend.m4: Grep depcomp's stderr for icc warnings about\n\tignored options.\n\t* lib/depcomp (icc): New mode.\n\t* tests/depcomp5.test: New file.\n\t* tests/defs.in: Handle required=icc.\n\t* tests/Makefile.am (TESTS): Add it.\n\n\tTemporary hack for PR automake/381:\n\t* automake.in (handle_gettext): Turn missing po/ and intl/ errors\n\tinto -Wsyntax warnings.\n\n2003-02-10  Richard Dawe  <rich@phekda.freeserve.co.uk>\n\n\t* Makefile.am: Substitute @SHELL@ in automake.in and aclocal.in.\n\tThis makes the setting of SHELL work for DJGPP.\n\n2003-02-10  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFor PR automake/385:\n\t* lib/depcomp (makedepend): Strip any libtool call, before\n\trunning makedepends.\n\t* tests/depcomp4.test: New file.\n\t* tests/Makefile.am (TESTS): Add it.\n\tReported by Jeff Squyres.\n\n\tRelated to PR automake/385:\n\t* lib/depcomp (dashmstdout): Do not use `-o /dev/null', or gcc will\n\twrite dependencies to /dev/null.  `-o /dev/null' was added\n\ton 2002-06-13 just because I tried to replace `-o foo.o' by something\n\telse and didn't thought about removing it entirely.\n\t* tests/depcomp3.test: New file.\n\t* tests/Makefile.am (TESTS): Add it.\n\n\t* automake.in (BEGIN): Override $ENV{'SHELL'} with ./configure's\n\tSHELL for DJGPP.\n\tSuggested by Richard Dawe.\n\n2003-02-09  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (FAQ, CVS, maintainer-mode, wildcards)\n\t(distcleancheck): New nodes.\n\n2003-02-06  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (scan_autoconf_files): Don't complain that\n\tAM_INIT_AUTOMAKE comes from an old version if it was not found.\n\n2003-02-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (am_install_var): Simplify filtering of\n\tvariable_loc_and_value_as_list_recursive's output.\n\n2003-02-04  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* m4/init.m4 (_AC_AM_CONFIG_HEADER_HOOK): Recompute\n\tindexes of header files so we create stamp files with\n\tthe right numbers when config.status is run on some headers.\n\t* tests/stamph2.test: Check for this.\n\tReported by Sander Niemeijer.\n\n2003-02-02  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (vars_scanned): Move near traverse_variable_recursively.\n\t(traverse_variable_recursively,\n\ttraverse_variable_recursively_worker): Accept a $COND_FILTER argument\n\tto filter out conditions during recursion.  Don't recurse into\n\tundefined variables.  Don't pass empty results to &FUN_COLLECT.\n\t(value_to_list): Remove, was used by\n\tvariable_value_as_list_recursive_worker only.\n\t(variable_value_as_list_recursive_worker): Rewrite using\n\ttraverse_variable_recursively.  Remove the $parent argument.\n\t(variable_value_as_list_recursive,\n\tvariable_loc_and_value_as_list_recursive): Adjust calls\n\tto variable_value_as_list_recursive_worker.  Don't reset\n\t%vars_scanned.\n\t* tests/cond3.test: Don't expect empty helper variables,\n\twe don't output them anymore.\n\t* tests/cond30.test: Use an undefined variable.\n\n\t* automake.in (handle_programs): Strip $(EXEEXT) before\n\tcalling &check_canonical_spelling.\n\t* tests/exeext.test: Make sure we don't use a\n\tmaude3__EXEEXT__OBJECTS variable.\n\n2003-02-02  Jeremy Nimmer  <jwnimmer@alum.mit.edu>  (tiny change)\n\n\tFor Debian Bug #39542:\n\t* automake.texi (Invoking Automake, Optional): Document how\n\tAC_CONFIG_AUX_DIR interacts with missing files.\n\n2003-02-02  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/Automake/DisjConditions.pm (_permutations_worker)\n\t(permutations): Remove, so that people aren't tempted to use it.\n\t* lib/Automake/tests/DisjConditions.pl (tests_permutations): Remove.\n\n\t* automake.in (variable_conditions_recursive): Remove.\n\t(variable_conditionally_defined): Rewrite using\n\ttraverse_variable_recursively.\n\n\t* automake.in (traverse_variable_recursively,\n\ttraverse_variable_recursively_worker): Pass one merged Condition\n\tinstead of a stack of conditions to &FUN_STORE and &FUN_COLLECT.\n\t(transform_variable_recursively, define_objects_from_sources)\n\t(handle_lib_objects, variable_conditions_recursive): Adjust usage.\n\n2003-02-01  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_lib_objects): Compute _DEPENDENCIES variables\n\tusing transform_variable_recursively instead of\n\tvariable_conditions_recursive and variable_value_as_list_recursive\n\tto avoid combinatorial explosion.\n\t(handle_lib_objects_cond): Merge into handle_lib_objects.\n\t* tests/cond11.test: Don't grep internal details in Makefile.in,\n\trun $MAKE to make sure the resulting Makefile runs as expected.\n\t* tests/cond29.test: Also exercise conditional _LDADD.\n\t* tests/cond31.test, tests/cond32.test: New files.\n\t* tests/Makefile.am (TESTS): Add tests/cond31.test and\n\ttests/cond32.test.\n\n2003-01-31  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (handle_lib_objects_cond): Ignore -dlopen and\n\t-dlpreopen in _LIBADD variables too.\n\t(handle_LIBOBJS, handle_ALLOCA): New functions, extracted from\n\thandle_lib_objects_cond.\n\t* tests/libtool7.test: New file.\n\t* tests/Makefile.am (TESTS): Add libtool7.test.\n\n\t* automake.texi (Program and Library Variables): Clarify that\n\t_LIBADD is for libraries and _LDADD for programs.\n\n\t* automake.in (handle_source_transform): Correct typo from 2003-01-23.\n\n2003-01-28  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFix for PR automake/352:\n\t* automake.in (transform_variable_recursively): If the destination\n\tand the source variables are the same, delete the source variable\n\tbefore defining the destination variable.\n\t(handle_programs): Strip any $(EXEEXT) suffix from $one_file,\n\tor this will confuse handle_source_transform.\n\t(append_exeext): Rewrite using transform_variable_recursively.\n\t* tests/cond29.test, tests/cond30.test: New files.\n\t* tests/exeext.test: Run ./configure and make, this uncovered\n\tthe above handle_programs issue.\n\t* tests/Makefile.am (TESTS): Add cond29.test and cond20.test.\n\n\t* automake.in (%subobjvar): Replace by ...\n\t(%gen_varname): ... this.\n\t(subobjname): Replace by ...\n\t(gen_varname): ... this.\n\t(initialize_per_input): Clean gen_varname instead of subobjname.\n\t(transform_variable_recursively): New function, extracted\n\tfrom define_objects_from_sources.\n\t(define_objects_from_sources): Use transform_variable_recursively.\n\tRemove the unused $parent argument.\n\t(handle_source_transform): Adjust call to define_objects_from_sources.\n\n2003-01-23  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (@substfroms, @substtos): Move near\n\ttraverse_variable_recursively.\n\t(traverse_variable_recursively, traverse_variable_recursively_worker):\n\tNew functions, extracted from define_objects_from_sources.\n\t(define_objects_from_sources): Rewrite using\n\ttraverse_variable_recursively.\n\t(handle_source_transform): Use variables_conditionally_defined\n\tinstead of calling variable_conditions_recursive directly.\n\tAdjust the call to define_objects_from_sources; there is no need\n\tto reset @substtos, @substfroms, and %vars_scanned now.\n\t(variable_conditions_recursive): Rewrite using\n\ttraverse_variable_recursively.\n\t(variable_conditions_recursive_sub): Remove.\n\t(variable_conditionally_defined): Fix condition comparison (the\n\tconsequence was that DIST_SUBDIRS was always output).\n\t* lib/Automake/Condition.pm (merge): Allow merging several\n\tconditions at once.\n\n2003-01-22  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.texi (Python): Explain that directory variables start\n\twith either ${prefix} or ${exec_prefix}, and point to the\n\t`Installation Directory Variables' section of the Autoconf manual.\n\n2003-01-21  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* lib/am/distdir.am (top_distdir, distdir): Define these\n\tvariables only in top level Makefile.  Redefine $(top_distdir)\n\tas $(distdir).\n\t(distdir): Fix passing of $(top_distdir) to sub-makes.\n\t* automake.in (handle_dist): Do not define the DISTDIR and\n\tTOP_DISTDIR transformations.  We don't need them anymore.\n\t* automake.texi (Dist): Reorder the dist-hook section, and move\n\tthe DIST_SUBDIRS paragraph earlier.  Document distdir and\n\ttop_distdir.\n\t* tests/subpkg.test: Update to check for $(distdir) and\n\t$(top_distdir).\n\n2003-01-19  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tRename more files to accommodate 8+3 file systems, and adjust the\n\tvocabulary at the same time: AM_CONDITIONAL defines \"conditionals\",\n\tand we call \"condition\" a conjunction of \"conditionals\".\n\t* lib/am/Conditional.pm: Rename to lib/am/Condition.pm.\n\t* lib/am/tests/Conditional.pl: Rename to lib/am/tests/Condition.pl.\n\t* lib/am/ConditionalSet.pm: Rename to lib/am/DisjConditions.pm.\n\t* lib/am/tests/ConditionalSet.pl: Rename to\n\tlib/am/tests/DisjConditions.pl\n\t* lib/am/Conditional.pm (condition_negate): Rename to ...\n\t* lib/am/Condition.pm (conditional_negate): ... this.\n\t* automake.in: Adjust references to Condition and DisjConditions.\n\t(check_ambiguous_conditional, conditional_ambiguous_p): Rename to ...\n\t(check_ambiguous_condition, condition_ambiguous_p): ... these.\n\n\t* tests/README: New file.\n\n\t* automake.texi (Conditional Programs): Show a sample Makefile.am.\n\tRemind $(EXEEXT) must be appended to configure substitutions.\n\tShow how Automake conditionals can be used instead.\n\t* tests/exeext.test (check_PROGRAMS): Make sure EXEEXT is also\n\tappended to conditionally defined programs.\n\n2003-01-16  Jim Meyering  <jim@meyering.net>\n\n\tAccept --help and --version, and lots of syntactic clean-up.\n\t* lib/install-sh: Use consistent indentation, two spaces per level.\n\t(scriptversion): New variable.\n\tChange initializations like `variable=\"\"' to `variable='.\n\t(usage): New variable.\n\tUse `test', not `['.\n\tUse `test -z \"$var\"', not `[ x\"$var\" = x ]'.\n\tUse `test -n \"$var\"', not `[ x\"$var\" != x ]'.\n\tAlphabetize case entries.\n\tAccept --help and --version options.\n\tRemove unnecessary `else :' clauses.\n\tAdd a `Local variables' eval block to help emacs users update\n\tthe time-stamp variable added above.\n\tMostly from Karl Berry.\n\n2003-01-16  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* m4/python.m4 (AM_PATH_PYTHON) <_AM_PYTHON_INTERPRETER_LIST>: Add\n\tpython2.3.\n\n\t* m4/python.m4 (AM_PATH_PYTHON): Query distutils for `pythondir'\n\tor `pyexecdir', for the sake of 64-bit distributions that usually\n\tuse lib64/ instead of lib/.  Fall back to the default directory\n\tif it doesn't work.\n\tSuggested by Gwenole Beauchesne.\n\n2003-01-14  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tFor PR automake/382:\n\t* automake.texi (Yacc and Lex): Document `AM_YFLAGS = -d'.\n\tExplain BUILT_SOURCES is usually needed in this case.\n\tReported by William S Fulton.\n\n2003-01-13  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tRename some files for the sake of 8+3 file systems.\n\t* tests/aclocali.test:     Rename to tests/aclocal.test.\n\t* tests/aclocali1.test:    Rename to tests/aclocal2.test.\n\t* tests/aclocalii.test:    Rename to tests/aclocal3.test.\n\t* tests/acoutput.test:     Rename to tests/acoutpt.test.\n\t* tests/acoutput2.test:    Rename to tests/acoutpt2.test.\n\t* tests/acouttbs.test:     Rename to tests/acoutbs.test.\n\t* tests/acouttbs2.test:    Rename to tests/acoutbs2.test.\n\t* tests/autoheader.test:   Rename to tests/autohdr.test.\n\t* tests/autoheader2.test:  Rename to tests/autohdr2.test.\n\t* tests/condincl.test:     Rename to tests/condinc.test.\n\t* tests/condincl2.test:    Rename to tests/condinc2.test.\n\t* tests/distcommon.test:   Rename to tests/distcom.test.\n\t* tests/distcommon2.test:  Rename to tests/distcom2.test.\n\t* tests/distcommon3.test:  Rename to tests/distcom3.test.\n\t* tests/installsh.test:    Rename to tests/instsh.test.\n\t* tests/installsh2.test:   Rename to tests/instsh2.test.\n\t* tests/instdata.test:     Rename to tests/instdat.test.\n\t* tests/instdata2.test:    Rename to tests/instdat2.test.\n\t* tests/libobj12b.test:    Rename to tests/libobj13.test.\n\t* tests/link_f_c.test:     Rename to tests/link_fc.test.\n\t* tests/link_f_c_cxx.test: Rename to tests/link_fccxx.test.\n\t* tests/link_f_cxx.test:   Rename to tests/link_fcxx.test.\n\t* tests/nodefine.test:     Rename to tests/nodef.test.\n\t* tests/nodefine2.test:    Rename to tests/nodef2.test.\n\t* tests/required.test:     Rename to tests/reqd.test.\n\t* tests/required2.test:    Rename to tests/reqd2.test.\n\t* tests/sourcesub.test:    Rename to tests/srcsub.test.\n\t* tests/sourcesub2.test:   Rename to tests/srcsub2.test.\n\t* tests/specflags.test:    Rename to tests/specflg.test.\n\t* tests/specflags2.test:   Rename to tests/specflg2.test.\n\t* tests/specflags3.test:   Rename to tests/specflg3.test.\n\t* tests/specflags6.test:   Rename to tests/specflg6.test.\n\t* tests/specflags7.test:   Rename to tests/specflg7.test.\n\t* tests/specflags8.test:   Rename to tests/specflg8.test.\n\t* tests/specflags9.test:   Rename to tests/specflg9.test.\n\t* tests/subdircond.test:   Rename to tests/subcond.test.\n\t* tests/subdircond2.test:  Rename to tests/subcond2.test.\n\t* tests/subdircond3.test:  Rename to tests/subcond3.test.\n\t* tests/texinfo.test:      Rename to tests/txinfo.test.\n\t* tests/texinfo2.test:     Rename to tests/txinfo2.test.\n\t* tests/texinfo3.test:     Rename to tests/txinfo3.test.\n\t* tests/texinfo4.test:     Rename to tests/txinfo4.test.\n\t* tests/texinfo5.test:     Rename to tests/txinfo5.test.\n\t* tests/texinfo6.test:     Rename to tests/txinfo6.test.\n\t* tests/texinfo7.test:     Rename to tests/txinfo7.test.\n\t* tests/texinfo8.test:     Rename to tests/txinfo8.test.\n\t* tests/texinfo9.test:     Rename to tests/txinfo9.test.\n\t* tests/texinfo10.test:    Rename to tests/txinfo10.test.\n\t* tests/texinfo13.test:    Rename to tests/txinfo13.test.\n\t* tests/texinfo16.test:    Rename to tests/txinfo16.test.\n\t* tests/texinfo17.test:    Rename to tests/txinfo17.test.\n\t* tests/texinfo18.test:    Rename to tests/txinfo18.test.\n\t* tests/Makefile.am (TESTS): Adjust.\n\t* ChangeLog.1996: Rename to ChangeLog.96.\n\t* ChangeLog.1998: Rename to ChangeLog.98.\n\t* ChangeLog.2000: Rename to ChangeLog.00.\n\t* ChangeLog.2001: Rename to ChangeLog.01.\n\t* Makefile.am (EXTRA_DIST): Adjust.\n\tReported by Richard Dawe.\n\n2003-01-13  Richard Dawe  <rich@phekda.freeserve.co.uk>  (tiny change)\n\n\t* lib/am/distdir.am (distcheck): '=' is not valid in DOS filenames.\n\tUse '_build' and '_inst' instead of '=build' and '=inst'.\n\t* tests/man2.test: Reflect change automake: check for files in\n\t'_build' and '_inst' directories instead of '=build' and '=inst'.\n\n2003-01-13  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\tUse `_dirstamp' when the file-system doesn't support `.dirstamp'.\n\t* m4/lead-dot.m4: New file.\n\t* m4/Makefile.am (dist_m4data_DATA): Add lead-dot.m4\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Require AM_SET_LEADING_DOT.:\n\t* m4/depend.m4 (AM_SET_DEPDIR): Require AM_SET_LEADING_DOT. Define\n\tDEPDIR using am__leading_dot.\n\t* automake.in (require_build_directory): Define am__dirstamp, a new\n\tvariable for the dirstamp basename, based on am__leading_dot.\n\t* tests/subobj6.test: Move all `test -f' into Makefiles, so we can\n\tuse $(am__dirstamp).\n\tReported by Richard Dawe.\n\n\t* tests/gnits2.test, tests/pr300-prog.test, tests/transform.test:\n\tMove all `test -f' into Makefiles, so we can honor $(EXEEXT) when\n\ttesting for programs.\n\tReported by Richard Dawe.\n\n2003-01-10  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* Makefile.am (maintainer-check): Suggest using $sleep instead of\n\tsleep 2.\n\t* tests/defs.in (sleep): New variable.\n\t* tests/asm.test, tests/confsub.test, tests/lisp3.test,\n\ttests/texinfo16.test, tests/warnopts.test, tests/yaccvpath.test:\n\tUse $sleep instead of sleep 2, to work around timestamp\n\tinconsistencies in Windows.\n\tReported by Richard Dawe.\n\n\t* Makefile.am (maintainer-check): Do not require SHELL=/bin/sh\n\tafter $MAKE -e.\n\t* tests/ansi3.test, tests/ansi5.test, tests/cond22.test,\n\ttests/man2.test, tests/subobj3.test, tests/suffix8.test,\n\ttests/suffix11.test: Do not set SHELL=/bin/sh after $MAKE -e.\n\t$SHELL is overridden by tests/defs, so it won't hurt even\n\tif $MAKE -e uses the $SHELL envvar.\n\t* tests/ansi.test, tests/insh2.test, tests/texinfo.test,\n\ttests/texinfo8.test: Use SHELL=$SHELL, not SHELL=/bin/sh.\n\tReported by Richard Dawe.\n\n\tBuild elisp files all at once instead of one by one.\n\t* automake.in (handle_emacs_lisp): Define am__ELFILES.  Add\n\telc-stamp to all's dependencies.\n\t* lib/am/lisp.am (elc-stamp): New rule, build all *.elc files.\n\t(.el.elc): Rewrite to call elc-stamp if $@ doesn't exist.\n\t(clean-lisp): Clean elc-stamp.\n\t* lib/elisp-comp: Reindent.  Erase the temporatry directory\n\tfrom a trap.  Propagate Emacs's exit status.\n\t* tests/lisp3.test: New file.\n\t* tests/Makefile.am (TESTS): Add lisp3.test.\n\tReported by Ryan T. Sammartino.\n\n2003-01-09  Akim Demaille  <akim@epita.fr>\n\n\t* automake.texi: Prefer $(FOO) to @FOO@ in the documentation.\n\n2003-01-08  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* m4/lispdir.m4: Register EMACS and EMACSLOADPATH as precious\n\tvariables.  Suggested by Ryan T. Sammartino.\n\n2003-01-05  Alexandre Duret-Lutz  <adl@gnu.org>\n\n\t* automake.in (macro_define): Add missing `{$cond}' (typo from\n\t2002-09-18).\n\t($gen_copyright): Append year 2003.\n\t(version): Increase year.\n\n\t* tests/defs.in: Substitute aclocaldir instead of running\n\tthe installed aclocal.  Otherwise Libtool and Gettext\n\ttests get skipped when aclocal doesn't preexist.\n\tReported by Imacat.\n\t* tests/listval.test, tests/suffix2.test: Remove pointless -I\n\targument to aclocal.\n\n-----\n\nCopyright (C) 2003-2020 Free Software Foundation, Inc.\n\nCopying and distribution of this file, with or without modification, are\npermitted provided the copyright notice and this notice are preserved.\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/old/ChangeLog.00": "2000-12-29  Derek Price  <derek.price@openavenue.com>\n\n\t* automake.in (handle_dependencies): Switched the DEP_FILES\n\tdefinition to be conditional on @AMDEP@.\n\n2001-02-03  Ville Laurikari  <vlaurika@hutcs.cs.hut.fi>\n\n\t* depcomp (aix): New side-effect dependency tracking mode, for\n\tthe C for AIX compiler.\n\t* m4/depend.m4 (AM_DEPENDENCIES): Recreate `conftest.c' and\n\t`conftest.h' for each test.\n\n2001-02-03  Tom Tromey  <tromey@redhat.com>\n\n\t* automake.texi (Dist): Updated to mention caveat of putting\n\tdirectory in EXTRA_DIST and also providing a nice example of\n\tremoving the CVS dir.\n\tFrom Ganesan Rajagopal.\n\n\t* m4/depend.m4 (depcpp): Run tests in a subdir.  Fixes report from\n\tBob Proulx.\n\n\t* automake.in (scan_one_autoconf_file): Disable warning about\n\tAM_PROG_LIBTOOL.\n\n\t* automake.in (handle_configure): Don't modify variable which\n\taliases list element.  Don't push @inputs onto the dist list.\n\tFixes colon7.test.\n\t(initialize_per_input) [dist_dirs]: New variable.\n\t(handle_dist_worker): Use global dist_dirs.\n\t(handle_configure): Set dist_dirs entries at toplevel.\n\n2001-02-02  Gordon Sadler  <gbsadler1@lcisp.com>\n\n\t* automake.texi (Java Support): Added index, @section.\n\n2001-02-02  Pavel Roskin  <proski@gnu.org>\n\n\t* automake.in (scan_autoconf_traces): Restore trace messages.\n\n\t* automake.in (handle_aclocal_m4): Fix stripping of the initial\n\t\"./\" from the dependencies of aclocal.m4.\n\tReported by Ralf Corsepius.\n\n2001-02-01  Pavel Roskin  <proski@gnu.org>\n\n\t* aclocal.in: Rename \"verbosity\" to \"verbose\". Always prepend\n\t\"aclocal: \" to the verbose output.\n\n\t* automake.in: Remove all debugging messages.\n\n2001-01-31  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (add_depend2): Quote properly $obj and $source.\n\n2001-01-31  Akim Demaille  <akim@epita.fr>\n\n\t* depend2.am: Instead of replacing @PFX@ in $(@PFX@COMPILE), and\n\tthen replacing `$(@PFX@COMPILE)' for the files that need some\n\tspecial flags, use only @COMPILE@.  Similarly for @LTCOMPILE@.\n\tTry to document this file.\n\t* automake.in (add_depend2): Adjust to these changes.\n\n2001-01-31  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (%factored_dependencies): New.\n\t(file_contents): Use it.\n\t(handle_phony): Rename as...\n\t(handle_factored_dependencies): this.\n\t* subdirs.am: No need for convolved syntax to declare .PHONY.\n\n2001-01-31  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in: maintainer-check fixes.\n\n2001-01-31  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (file_contents): Rewrite: instead of trying to parse\n\tit line by line, first swallow it completely into $CONTENTS,\n\t*then*, parse it *paragraph* by paragraph.\n\n2001-01-30  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (file_contents): Remove.\n\t(file_contents_with_transform): Swap the order of the arguments,\n\tand rename as...\n\t(file_contents): this.\n\tAdjust all uses.\n\n2001-01-30  Tom Tromey  <tromey@redhat.com>\n\n\t* automake.in (scan_one_autoconf_file): Don't mention\n\tomit_dependencies.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (&scan_autoconf_config_files): Extract from\n\t&scan_one_autoconf_file.\n\t(&scan_one_autoconf_file): Use it.\n\t(&scan_autoconf_traces): New.\n\t($scan_autoconf_files): Use it.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* texinfos.am, tags.am, subdirs.am, multilib.am, mans.am: Add a\n\t.PHONY target.\n\t* automake.in (handle_texinfo, handle_man_pages, handle_multilib)\n\t(handle_etags, handle_subdirs): Don't push into @phony.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (scan_one_autoconf_file): Correctly recognize\n\tconfigure.ac.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_tests_dejagnu): New, extracted from...\n\t(handle_tests): here.  Use `.PHONY:'.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_phony): Sort.\n\t(file_contents_with_transform): Catch `.PHONY:'.\n\t(handle_tests): Instead dumping the hard coded target check-TESTS\n\tand registering its .PHONYsm, get them from...\n\t* check.am: here, new file.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (add_depend2): Use &transform.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_tags): Use &transform.\n\t(am_error, am_line_error, am_conf_error, read_am_file): Use\n\tdirectly arrays in strings, no need for &join.\n\tRequire Perl 5.\n\t* Makefile.am (maintainer-check): Use grep -w when looking for\n\twords.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (prog_error): New.\n\tSpread its use.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_single_transform_list): if (@list) { foreach\n\t(@list) ...} can be written as a simple `foreach' loop.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (define_standard_variables): Use &transform instead\n\tof build_rx.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_texinfo): Use the new $texinfodir instead of\n\tthe removed $texinfo_tex.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_libraries, handle_ltlibraries): Use\n\t&transform.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_programs) <xexe>: Remove, replaced by\n\t`exeext'.\n\tUse it, and &transform.\n\n2001-01-29  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (get_object_extension) <$default_includes>: New.\n\tUse it and &transform.\n\n2001-01-28  Tom Tromey  <tromey@redhat.com>\n\n\t* automake.in (variable_value_as_list_worker): Handle entries in\n\t%am_var_defs.  Fixes listval.test.\n\n2001-01-26  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_texinfo): Don't use $conf_pat, just\n\t$conf_dir to transform MDDIR since now &transform handles the\n\tescaping of RE special characters by itself.\n\n2001-01-24  Akim Demaille  <akim@epita.fr>\n\n\t* m4/depend.m4 (AM_DEPENDENCIES): Don't leave `AC_PROG_CC' etc. in\n\tclear.\n\t* m4/init.m4: Likewise.\n\t* m4/sanity.m4: s/conftestfile/conftest.file/.\n\n2001-01-24  Tom Tromey  <tromey@redhat.com>\n\n\t* automake.in (handle_libraries): Use $configure_ac; typo fix.\n\n\t* automake.in (transform): Quote substitution.\n\n2001-01-21  Alexandre Duret-Lutz  <duret_g@epita.fr>\n\t    Tom Tromey  <tromey@redhat.com>\n\n\t* automake.in (obsolete_rx): Match whole macro names, not\n\tsubstrings.\n\t* aclocal.in (obsolete_rx): Likewise.\n\n2001-01-21  Tom Tromey  <tromey@redhat.com>\n\n\t* automake.texi: Changed dir category.\n\n2001-01-18  Akim Demaille  <akim@epita.fr>\n\n\t* automake.in (handle_texinfo): Use &transform, and transform\n\tCONFIGURE_AC.\n\tReported by Lars Hecking, and diagnosed by Raja R Harinath.\n\n2001-01-16  Akim Demaille  <akim@epita.fr>\n\n\tLet Automake support `configure.ac'.\n\n\t* automake.in: In the comments, prefer `configure.ac' to\n\t`configure.in'.\n\tWhen using &am_conf_error, don't repeat `in configure.in', since\n\tthe function already reports it.\n\tWhen referring to `configure.in' use `$configure_ac' instead.\n\t(configure_ac): New global variable.\n\t(scan_configure, scan_one_configure_file): Rename as...\n\t(scan_autoconf_files, scan_one_autoconf_file): this.\n\t(scan_autoconf_files): Compute $configure_ac.\n\t(transform): New function.\n\t(handle_configure): Use it to transform CONFIGURE_AC in\n\t`remake.am' and in `remake-hdr.am'.\n\t(common_files): Also consider `configure.ac'.\n\tUse consistently single quotes.\n\t* aclocal.in (configure_ac): New variable.\n\tUse it.\n\t* texi-vers.am: Depend on CONFIGURE_AC not configure.in.\n\t* remake.am: Likewise.\n\t* remake-hdr.am: Likewise.\n\n2001-01-16  Akim Demaille  <akim@epita.fr>\n\n\t* m4/multi.m4: Remove the hairy useless quotation of `$'.\n\tSimplify `ifelse([$2],,,[$2])' into... `$2'!\n\t* m4/minuso.m4: Don't use changequote!\n\t* m4/cond.m4: Fix quotation.\n\t* m4/sanity.m4: Follow the Autoconf coding style.\n\t* m4/missing.m4 (AM_MISSING_INSTALL_SH): Use a for loop.\n\t* m4/depend.m4 (AM_DEPENDENCIES): Fix quotation issues.\n\tUse AC_CACHE_CHECK.\n\n2001-01-15  Tom Tromey  <tromey@redhat.com>\n\n\t* automake.in (handle_single_transform_list): Don't print rule\n\there when source is in subdir and object is not.  Fixes\n\tsubobj4.test.\n\n\t* automake.in (handle_single_transform_list): Correctly compute\n\t$nonansi_obj.  Fixes cxxansi.test.\n\n\t* automake.texi (Man pages): Updated to account for man1_MANS,\n\tetc.\n\n2001-01-13  Steve Robbins  <smr@debian.org>\n\t    Tom Tromey  <tromey@redhat.com>\n\n\t* aclocal.in (scan_configure): Don't recognize macro assignments\n\tor AC_SUBSTs.\n\t(add_file): Likewise.\n\n2001-01-13  Kevin Ryde  <user42@zip.com.au>\n\n\t* automake.in (handle_ltlibraries): Omit -rpath from\n\tcheck_LTLIBRARIES, as per noinst_LTLIBRARIES.\n\n2001-01-11  Tom Tromey  <tromey@redhat.com>\n\n\t* depcomp (case gcc3): Use -MD, not -M.\n\n2001-01-10  Tom Tromey  <tromey@redhat.com>\n\n\t* depcomp: Handle gcc 3.\n\n2000-12-23  Tom Tromey  <tromey@redhat.com>\n\n\t* configure.in: Updated to 1.4c for cvs.\n\n\t* configure.in: Updated to 1.4b and released.\n\n\t* config.guess, config.sub, texinfo.tex: New versions.\n\n\t* automake.in (handle_dist_worker): Always define DIST_SUBDIRS.\n\tRe-fixes pr87.test.\n\n\t* subdirs.am (maintainer-clean-recursive): Use DIST_SUBDIRS for\n\tdistclean and maintainer-clean.\n\t* automake.texi (Top level): Document use of DIST_SUBDIRS.\n\n\tFrom Rusty Ballinger:\n\t* automake.in (handle_java): Don't skip `noinst' prefix.\n\n\t* automake.texi (Invoking aclocal): Mention ## comments.\n\n2000-12-22  Tom Tromey  <tromey@redhat.com>\n\n\tFrom Raja R Harinath:\n\t* automake.in (libtoolize_sometimes): New global.\n\t(initialize_global_constants): Added libtoolize_sometimes to\n\tcommon_files.\n\n\t* m4/depend.m4 (AM_SET_DEPDIR): Ignore errors when running rmdir.\n\n\t* m4/depend.m4 (AM_SET_DEPDIR): Remove .deps directory when done.\n\n2000-12-21  Tom Tromey  <tromey@redhat.com>\n\n\t* automake.texi (Tags): Document GTAGS target.\n\t* tags.am (GTAGS): New target.\n\n\t* automake.in (libtoolize_files): Removed ltconfig.\n\t(initialize_global_constants): Added ltconfig to common_files.\n\n2000-12-21  Kevin Ryde  <user42@zip.com.au>\n\n\t* automake.in (handle_footer): Generate .SUFFIXES target when user\n\tdefines suffixes but automake does not.\n\n2000-12-20  Marc Espie  <espie@openbsd.org>\n\n\t* automake.in (handle_texinfo): Make path of $vtexi explicit in\n\tdependency.\n\t* texi-vers.am: Likewise.\n\n2000-12-20  Tom Tromey  <tromey@redhat.com>\n\n\tFrom Kevin Ryde:\n\t* automake.in (handle_footer): Always push user suffixes at the\n\tstart of .SUFFIXES:.\n\t* automake.texi (Suffixes): Updated to reflect new suffix\n\thandling.\n\n2000-12-18  Tom Tromey  <tromey@redhat.com>\n\n\t* automake.in (handle_built_sources): Removed.\n\t(handle_merge_targets): Handle BUILT_SOURCES.\n\t* automake.texi (Sources): Updated documentation of\n\tBUILT_SOURCES.\n\n2000-12-17  Tom Tromey  <tromey@redhat.com>\n\n\t* m4/protos.m4: Always do header checks.\n\n\t* automake.in (handle_ltlibraries): Check for LDFLAGS variables\n\tbefore using values.\n\n\t* automake.in (handle_ltlibraries): Allow _LDFLAGS to be\n\tconditionally defined.  Fixes PR automake/77 and ldflags.test.\n\n2000-11-25  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (file_contents_with_transform): Added file name and\n\tline number to error report.\n\t(MACRO_PATTERN, BOGUS_MACRO_PATTERN): Leading spaces are ok.\n\n2000-11-23  Pavel Roskin  <proski@gnu.org>\n\n\t* m4/regex.m4 (AM_WITH_REGEX): This macro was broken because\n\tof M4 underquoting.\n\t* m4/ccstdc.m4 (AC_PROG_CC_STDC): Added some M4 quotes.\n\t* m4/dmalloc.m4 (AM_WITH_DMALLOC): Likewise.\n\t* m4/lispdir.m4 (AM_PATH_LISPDIR): Likewise.\n\t* m4/maintainer.m4 (AM_MAINTAINER_MODE): Likewise.\n\t* m4/multi.m4 (AM_WITH_DMALLOC): Likewise.\n\t* m4/python.m4 (AM_PATH_PYTHON): Likewise.\n\t* m4/strtod.m4 (AM_FUNC_STRTOD): Likewise.\n\n2000-11-23  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (require_file_internal): Pass $file as second\n\targument to maybe_push_required_file.  Fixes PR automake/87.\n\n2000-11-18  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/depend.m4 (AM_DEPENDENCIES): Redirect `$am_depcomp' stdout to\n\t/dev/null.  From Paul Martinolich.\n\n2000-11-16  Morten Eriksen  <mortene@sim.no>\n\n\t* aclocal.in (write_aclocal): Set ``binmode'' after file has been\n\topened, otherwise it has no effect.\n\n2000-10-23  Morten Eriksen  <mortene@sim.no>\n\n\t* aclocal.in (write_aclocal): Don't write aclocal.m4 with\n\tCRLFs. This circumvents a bug in Cygwin bash.\n\n\t* automake.in (generate_makefile): Don't write Makefile.in\n\tfiles with CRLFs, as it causes problems for the dependency-file\n\textraction in AM_OUTPUT_DEPENDENCY_COMMANDS.\n\n2000-10-19  Alex Hornby  <alex@anvil.co.uk>\n\n\t* automake.in (handle_merge_targets): Allow parallel install\n\twith forced relink.\n\n2000-10-19  Akim Demaille  <akim@epita.fr>\n\n\t* subdir4.test (depcomp): Don't create it, defs does.\n\n2000-10-17  Pavel Roskin  <proski@gnu.org>\n\n\t* automake.in (handle_aclocal_m4): exclude aclocal.m4 and\n\tacinclude.m4 from the dependencies of aclocal.m4 to avoid\n\tcircular and duplicated dependencies. Strip \"./\" from the\n\tdependencies.\n\n2000-10-17  Lars J. Aas  <larsa@sim.no>\n\n\t* aclocal.in (write_aclocal): Set up aclocal.m4 header with\n\tnormal comments (#) instead of m4 dnl-type comments.\n\n2000-10-17  Alex Hornby  <alex@anvil.com>\n\n\t* depcomp: Altered sed clause to strip of inclusion depth\n\tnumbers generated by cpp. Also output in gcc style.\n\n2000-10-16  Morten Eriksen  <mortene@sim.no>\n\n\t* depcomp (msvisualcpp): New dependency tracking mode, for\n\tMicrosoft Visual C++.\n\n2000-10-16  Morten Eriksen  <mortene@sim.no>\n\n\t* depcomp: Fix a bug in SGI dependency tracking mode with source\n\tfiles which do not dependend on any other source files.\n\n2000-10-16  Rodney Brown  <RodneyBrown@mynd.com>\n\n\t* aclocal.in, aclocal.m4: Standardize FSF Copyright statements.\n\t* automake.in, automake.texi: Likewise.\n\t* clean-kr.am, clean.am: Likewise.\n\t* comp-vars.am: Likewise.\n\t* compile, compile.am: Likewise.\n\t* data-clean.am: Likewise.\n\t* data.am: Likewise.\n\t* dejagnu.am: Likewise.\n\t* depcomp: Likewise.\n\t* depend.am, depend2.am: Likewise.\n\t* dist-vars.am, dist.am: Likewise.\n\t* elisp-comp: Likewise.\n\t* footer.am: Likewise.\n\t* header-vars.am, header.am: Likewise.\n\t* java-clean.am java.am: Likewise.\n\t* kr-extra.am: Likewise.\n\t* library.am: Likewise.\n\t* libs-clean.am, libs.am: Likewise.\n\t* libtool.am: Likewise.\n\t* lisp-clean.am lisp.am: Likewise.\n\t* ltlib-clean.am ltlib.am: Likewise.\n\t* ltlibrary.am: Likewise.\n\t* m4/Makefile.in: Likewise.\n\t* m4/strtod.m4: Likewise.\n\t* mans-vars.am, mans.am: Likewise.\n\t* mdate-sh: Likewise.\n\t* missing: Likewise.\n\t* multilib.am: Likewise.\n\t* program.am: Likewise.\n\t* progs-clean.am, progs.am: Likewise.\n\t* python-clean.am, python.am: Likewise.\n\t* remake-hdr.am, remake.am: Likewise.\n\t* scripts.am: Likewise.\n\t* subdirs.am: Likewise.\n\t* tags-clean.am, tags.am: Likewise.\n\t* texi-vers.am: Likewise.\n\t* texinfos.am: Likewise.\n\t* ylwrap: Likewise.\n\n2000-10-09  Pavel Roskin  <proski@gnu.org>\n\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Don't rely on variable\n\tassignments changing $? - it's broken in ash-0.2.\n\t* m4/missing.m4 (AM_MISSING_HAS_RUN): Likewise.\n\n\t* automake.in (handle_aclocal_m4): If ACLOCAL_M4_SOURCES is\n\tdefined use it as the list of M4 files aclocal.m4 depends on.\n\n2000-10-06  Alexandre Duret-Lutz  <duret_g@epita.fr>\n\n\t* aclocal.in (add_file): Strip comments while scanning for\n\tmacro dependencies.\n\n2000-09-15  Alexandre Duret-Lutz  <duret_g@epita.fr>\n\n\t* automake.in (initialize_global_constants): End the\n\tresult of dist-bzip2 with tar.bz2, not bz2.\n\n2000-08-30  Tom Tromey  <tromey@cygnus.com>\n\n\tFix for PR automake/72:\n\t* automake.in (initialize_per_input): Define `need_link'.\n\t(finish_languages): Use need_link.\n\t(handle_source_transform): Set need_link if required.\n\n2000-08-28  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (yacc, yaccxx, lex, lexxx): Set `derived-autodep'\n\tkey.\n\t(register_language): Default the `derived-autodep' option.\n\t(handle_single_transform_list): Add to %dep_files if language has\n\t`derived-autodep' set.  Re-fixes lex4.test.\n\n2000-08-27  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_single_transform_list): Only add to\n\t%dep_files if language is found and supports automatic dependency\n\ttracking.  Fixes PR automake/75.\n\n\t* automake.in (am_primary_prefixes): Don't set `valid' for\n\tconfigure variables that don't satisfy the other constraints.\n\tFixes PR automake/68.\n\n2000-04-14  Victor V. Vengerov  <vvv@oktet.ru>\n\n\tFix for PR automake/67.\n\t* automake.in (handle_multilib): remove .am suffix in fragment\n\tname passed to file_contents.\n\t* m4/multi.m4: Add missing ')' in AC_ARG_ENABLE invocation.\n\tRemove external quotes in first arg of AC_OUTPUT_COMMANDS.\n\tRemove unnecessary \"rel-to-top-srcdir\" before config-ml.in.\n\n2000-08-26  Tom Tromey  <tromey@cygnus.com>\n\n\t* subdirs.am (maintainer-clean-recursive): Always run clean rules\n\tin `.' after all subdirs.  Fixes PR automake/3 and PR automake/24.\n\n\t* automake.in (handle_man_pages): Generate install targets for man\n\teven if man_MANS not defined.  From `danpb'.  Fixes PR automake/73.\n\n\t* m4/depend.m4 (depcpp): Use `-o conftest.o'.\n\tFix for PR automake/74.  From js pendry.\n\n2000-08-20  Eli Zaretskii  <eliz@is.elta.co.il>\n\n\t* depcomp (gcc): Support DOS-style absolute file names with drive\n\tletters.\n\n2000-08-06  Jim Meyering  <meyering@lucent.com>\n\n\t* automake.in (handle_dependencies): Set $require_file_found{'depcomp'}\n\tif the depcomp file exists, before calling require_config_file on\n\t`depcomp'.  This makes require_file_internal skip its buggy existence\n\ttest that would make automake fail (with `required file `lib/depcomp'\n\tnot found') when AC_CONFIG_AUX_DIR is not set.\n\n\tThis change change does not fix the existing bug where, if `depcomp'\n\tis not present in the build directory (at the top level), automake\n\tstill gives the inaccurate diagnostic about *lib*/depcomp rather\n\tthan ./depcomp.\n\n2000-08-05  Jim Meyering  <meyering@lucent.com>\n\n\t* m4/header.m4 (AM_CONFIG_HEADER): Fix typo in last change:\n\tadd missing closing bracket and closing parenthesis.\n\tDon't quote the first argument to AC_OUTPUT_COMMANDS.\n\tBackslash-escape the backquotes and `$' in `am_indx'-incrementing stmt.\n\n2000-08-04  Tom Tromey  <tromey@cygnus.com>\n\n\tIdea from Nicolas Thiery:\n\t* automake.texi (Tests): Document DEJATOOL as a list.\n\t* dejagnu.am (RUNTESTDEFAULTFLAGS): Use $$tool, not $(DEJATOOL).\n\t(check-DEJAGNU): Run runtest in a loop.\n\n2000-08-02  Akim Demaille  <akim@epita.fr>\n\n\t* m4: Quote properly the name of the macros being defined.\n\tUse `#' instead of `dnl' where appropriate.\n\t* m4/header.m4 (AM_CONFIG_HEADER): Get rid of changequote, just\n\tquote.\n\tDon't quote passive characters.\n\tPull the AC_PREREQ outside the macro.\n\t* m4/init.m4: Pull the AC_PREREQ outside the macro.\n\n2000-07-28  Tom Tromey  <tromey@cygnus.com>\n\n\t* lisp.am (uninstall-@DIR@LISP): Prefix file with $(DESTDIR).\n\tFrom Bruno Haible.\n\n2000-07-13  Kevin Ryde  <user42@zip.com.au>\n\n\t* automake.in (am_install_var): Apply the $(EXEEXT) hack to\n\tEXTRA_PROGRAMS as well as other _PROGRAMS.\n\n2000-07-02  Jim Meyering  <meyering@lucent.com>\n\n\t* automake.in (scan_one_configure_file): Recognize AC_LIBOBJ.\n\n2000-06-19  Paolo Bonzini    <bonzini@gnu.org>\n\n\t* texi-vers.am: define UPDATED-MONTH variable (for an example, see\n\tGNU make's manual)\n\n2000-06-02  Morten Eriksen  <mortene@sim.no>\n\n\t* depcomp: workaround for problem with SGI IRIX sed (it can only\n\thandle lines of up to 8192 characters, the rest of the line will\n\tbe mangled).\n\n2000-05-31  Morten Eriksen  <mortene@sim.no>\n\n\t* depcomp: tell SGI MIPSpro compilers to generate dependencies\n\tthrough the pre-processor (only CVS libtool has the -Wc option\n\tyet).\n\n2000-05-15  Brendan O'Dea  <bod@compusol.com.au>\n\n\t* missing: Add support for `help2man'.\n\n2000-05-11  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_tests): Work correctly if TESTS is empty;\n\tprint nothing if it is.  From Kevin Ryde.\n\n2000-05-08  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.texi (Texinfo): Mention vers*.texi.\n\n2000-05-04  Akim Demaille  <akim@epita.fr>\n\n\tAM_INIT_AUTOMAKE is no longer optional, so don't look for\n\t`VERSION=' and `PACKAGE='.\n\t* automake.in (seen_package, seen_version): Remove initializations of\n\tunnecessary variables.\n\t(scan_one_configure_file): Don't set them.\n\t(scan_configure): Don't use them.\n\n2000-05-01  Akim Demaille  <akim@epita.fr>\n\n\t* m4/init.m4 (AC_PROVIDE_IFELSE): If it is not defined, do it.\n\t(AM_INIT_AUTOMAKE): Update the writing conventions.\n\tQuote the arguments properly.\n\tAdd a few missing `dnl'.\n\tUse AC_PROVIDE_IFELSE.\n\n2000-04-26  Jim Meyering  <meyering@lucent.com>\n\n\t* automake.in (scan_one_configure_file): Handle the AC_CONFIG_FILES\n\tmacro.  Based on a patch from Harlan Stenn.\n\n2000-04-13  Akim Demaille  <akim@epita.fr>\n\n\t* compile: Remove unnecessary double quotes in assignments.\n\n2000-04-13  Akim Demaille  <demaille@epita.fr>\n\n\t* automake.in (scan_one_configure_file): Also recognize\n\tAC_CONFIG_HEADERS.\n\tRemove trailing blanks.\n\n2000-04-05  Tom Tromey  <tromey@cygnus.com>\n\n\t* header-vars.am (DESTDIR): Commented out definition.\n\n\t* automake.in (require_file_internal): Pass --copy to libtoolize\n\tif automake was run with `--copy'.\n\n2000-03-22  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.texi (Uniform): Fix definition of pkglibdir.\n\tFrom thi <ttn@revel.glug.org>.\n\n2000-03-19  Tom Tromey  <tromey@cygnus.com>\n\n\t* aclocal.in (parse_arguments): Copyright 2000.\n\t(write_aclocal): Likewise.\n\t* automake.in (parse_arguments): Copyright 2000.\n\t(initialize_global_constants): Likewise.\n\n\t* automake.in (generate_makefile): Call handle_dist after\n\thandle_dependencies and handle_tests.  Fixes subobj3.test and\n\tpr19.test regressions.\n\n2000-03-19  Gordon Matzigkeit  <gord@fig.org>\n\n\t* depend2.am (@EXT@.o): Look for the source file in srcdir as well\n\tas the current directory.\n\t(@EXT@.lo): Likewise.\n\n2000-03-19  OKUJI Yoshinori  <okuji@kuicr.kyoto-u.ac.jp>\n\n\t* automake.in (handle_data): Pass -candist instead of\n\t-defaultdist, for the compatibility.\n\n2000-03-19  Tom Tromey  <tromey@cygnus.com>\n\n\tFix for test nodepcomp.test:\n\t* automake.in (require_file_internal): Use readlink on symlinks.\n\tOnly unlink file if we are going to try to add it again.\n\t(handle_dependencies): Require `depcomp' here.\n\t(scan_configure): Don't require `depcomp'.\n\n2000-03-16  OKUJI Yoshinori  <okuji@kuicr.kyoto-u.ac.jp>\n\n\t* automake.in (handle_configure): Remove $(BUILT_SOURCES) from\n\tthe rule to remake Makefile, whether $use_dependencies is true\n\tor not. This was a historical one and doesn't make sense any\n\tlonger.\n\n2000-03-19  Tom Tromey  <tromey@cygnus.com>\n\n\tMore for PR automake/38:\n\t* automake.texi (Invoking Automake): Document --force-missing.\n\t* automake.in (force_missing): New global.\n\t(parse_arguments): Recognize --force-missing.\n\t(initialize_global_constants): Document --force-missing.\n\t(require_file_internal): Handle --force-missing.\n\n\tFix for PR automake/38:\n\t* automake.in (require_file_internal): Check for and handle\n\tdangling symlinks.  Fixes symlink2.test.\n\n\tFix for PR automake/45:\n\t* automake.texi (configure): Mention requirement to run\n\tAM_INIT_AUTOMAKE.\n\t(Requirements): Removed most text.\n\t* automake.in (seen_init_automake): New global.\n\t(scan_configure): Error if AM_INIT_AUTOMAKE not seen.\n\t(scan_one_configure_file): Don't support AM_INIT_GUILE_MODULE.\n\tSet seen_init_automake if needed.\n\n\tFix for PR automake/41:\n\t* automake.in (require_file_found): New global.\n\t(require_file_internal): Set require_file_found entry.\n\t(handle_texinfo): Require file any number of times.\n\n\t* automake.in (handle_dist_worker): Exit if `cp' fails.  Fixes\n\tinstall2.test.\n\n\t* tags.am: Don't reference $$here.  Report from Sven Verdoolaege.\n\n2000-03-13  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n\n\t* m4/missing.m4: Print the backtick in a way that won't cause\n\tautoconf CVS to emit any warnings.\n\n2000-03-01  Jim Meyering  <meyering@lucent.com>\n\n\t* automake.in (handle_dist_worker) [generating rules for distdir]:\n\tDon't use `ln' (which was just a space optimization anyway) to\n\tpopulate $(distdir).  Otherwise, the dist rules that change\n\tpermissions would end up affecting the master sources.\n\t* texinfos.am (dist-info): Likewise.\n\n2000-02-13  Jim Meyering  <meyering@lucent.com>\n\n\t* automake.in (generate_makefile): Detect write/close failure.\n\n2000-02-02  Assar Westerlund  <assar@sics.se>\n\n\t* automake.in (handle_single_transform_list): do not use $< which\n\tis not handled by all non-GNU makes.  Instead do explicit sh code\n\ttesting for the file in this directory and srcdir.  Based on a\n\tsuggestion by Alexandre Oliva <oliva@lsd.ic.unicamp.br>\n\n2000-01-12  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/lispdir.m4: Added --with-lispdir argument processing.\n\tFrom Kevin Dalley.\n\n2000-01-06  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_configure): Don't check for\n\tAC_PROG_MAKE_SET.\n\t(scan_configure): Check for AC_PROG_MAKE_SET.\n\n\t* header-vars.am (@SET_MAKE@): Added.\n\t* subdirs.am (@SET_MAKE@): Removed.  Report from Motoyuki\n\tKasahara.\n\n1999-12-19  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_dist_worker): Expand DIST_COMMON under all\n\tconditions.\n\t(require_file_internal): Corrected arguments to second invocation\n\tof maybe_push_required_file.\n\n\tFix for PR automake/9:\n\t* automake.in (make_dirs, make_dirs_set): New globals.\n\t(is_make_dir): New function.\n\t(handle_configure): Use it.\n\t(require_file_internal): Push file if there is no Makefile in its\n\tdirectory.\n\t(initialize_per_input): Initialize handle_dist_run.\n\t(push_dist_common): Inspect handle_dist_run.\n\t(handle_dist): Set handle_dist_run.  Push items from\n\tconfigure_dist_common onto dist_common if appropriate.\n\t(configure_dist_common): New global.\n\t(scan_configure): Set it.\n\t(maybe_push_required_file): New function.\n\t(require_file_internal): Use it.\n\n\t* automake.in (handle_dist_worker): Scan DIST_COMMON to see if\n\tmore subdirs are defined.  From Axel Belinfante.  Fixes\n\tPR automake/2.\n\n1999-12-18  Tom Tromey  <tromey@cygnus.com>\n\n\tPartial fix for PR automake/40:\n\t* lisp.am (install-@DIR@LISP): Handle nobase_ case.\n\t(uninstall-@DIR@LISP): Likewise.\n\t* header.am (install-@DIR@HEADERS): Handle nobase_ case.\n\t(uninstall-@DIR@HEADERS): Likewise.\n\t* data.am (install-@DIR@DATA): Handle nobase_ case.\n\t(uninstall-@DIR@DATA): Likewise.\n\t* automake.in (am_primary_prefixes): Recognize `nobase_' prefix.\n\t(am_install_var): Recognize and handle `nobase_' prefix.\n\n1999-12-17  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (get_object_extension): Added space before `-I.'.\n\tReport from Ralf Corsepius.\n\n1999-12-15  Tom Tromey  <tromey@cygnus.com>\n\n\t* aclocal.in: Don't pass $acdir to scan_m4_files.\n\t(parse_arguments): Push $acdir on end of dirlist.\n\t(scan_file): Don't warn if duplicate macro seen.\n\n1999-12-13  Tom Tromey  <tromey@cygnus.com>\n\n\tFix for PR automake/30 and PR automake/23.  Fixes test\n\tsuffix3.test.\n\t* automake.in (initialize_per_input): Initialize\n\tsource_suffix_pattern.\n\t(derive_suffix): New function.\n\t(handle_single_transform_list): Call it.\n\n\t* automake.in (add_depend2): Handle the no-dependency-tracking\n\tcase.  Fixes test suffix2.test.\n\n\t* depcomp (tmpdepfile): [case sgi] Added missing `fi'.\n\n\t* automake.in (get_object_extension): Fixed quoting on\n\t-I$(srcdir).\n\n\t* depend2.am: Removed erroneous comment.\n\n\t* automake.texi (Program variables): Document nostdinc.\n\t(Options): Likewise.\n\t* automake.in (get_object_extension): Respect nostdinc option.\n\t(handle_options): Recognize nostdinc.\n\t* comp-vars.am (DEFS): Use @DEFAULT_INCLUDES@ as sole\n\tsubstitution.\n\n\t* automake.in (read_am_file): Allow conditional includes.  Fixes\n\ttest condincl.test.\n\n\t* depcomp: Handle case on SGI when libtool is `yes'.\n\t* depend2.am (@EXT@.o): Set libtool.\n\t(@EXT@.lo): Likewise.\n\t(@EXT@.obj): Likewise.\n\n\t* depcomp: Unify dashmstdout and dashXmstdout cases.  Move hp case\n\tafter gcc case.\n\n1999-12-13  Pavel Roskin  <pavel_roskin@geocities.com>\n\n\t* automake.in (add_depend2): substitute $rule in the rules\n\tfor individual files.  Fixes test specflags5.test.\n\n1999-12-12  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/depout.m4 (AM_OUTPUT_DEPENDENCY_COMMANDS): Run mkinstalldirs\n\tto create directories.  Fixes test subobj3.test.\n\n1999-12-10  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/depout.m4 (AM_OUTPUT_DEPENDENCY_COMMANDS): Don't print\n\tmessage when creating .deps files.\n\n\t* automake.in (initialize_global_constants): If unreadable by\n\towner, make it readable by owner regardless of number of links.\n\tFixes more of install2.test.\n\n\t* missing: Try to see if gnutar or gtar exist before invoking\n\tthem.\n\n\t* m4/missing.m4 (AM_MISSING_INSTALL_SH): Remove ${SHELL} from\n\tinstall_sh value.  Look for install-sh and install.sh in a\n\tsomewhat more sensible way.  Fixes test install2.test.  Partially\n\tfrom Jim Meyering.\n\n1999-12-09  Pavel Roskin  <pavel_roskin@geocities.com>\n\n\t* m4/missing.m4: remove redundant backquote\n\n1999-11-23  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (initialize_global_constants): Use `bzip2 -9', not\n\t`bzip --best'  Report from Jim Meyering.\n\n1999-11-22  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/missing.m4 (AM_MISSING_INSTALL_SH): Don't take argument.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Don't pass argument to\n\tAM_MISSING_INSTALL_SH.\n\t* automake.in (scan_one_configure_file): Reverted previous\n\tchange.\n\n\t* automake.in (scan_one_configure_file): Define `install_sh'\n\tconfigure variable when AM_INIT_AUTOMAKE seen.  Report from Jim\n\tMeyering.\n\n\t* automake.in (handle_single_transform_list): Generate explicit\n\trule for subdir objects.  Fixes new addition to subobj.test.\n\n\t* automake.in (handle_lib_objects_cond): Allow LIBOBJS to be\n\tdefined by AC_SUBST.  Fixes ltlibobjs.test.\n\n\tFix for sourcesub.test:\n\t* automake.in (handle_single_transform_list): Added `var'\n\targument.  If config sub found, give error.\n\t(handle_source_transform): Updated for new\n\thandle_source_transform.\n\n\t* py-compile: New file.\n\t* m4/Makefile.am (m4data_DATA): Added python.m4.\n\t* m4/python.m4: New file.\n\t* automake.texi (Uniform): Mention PYTHON.\n\t(Python): New node.\n\t* Makefile.am (amfiles): Added python.am, python-clean.am.\n\t(dist_script_DATA): Added py-compile.\n\t* python.am: New file.\n\t* python-clean.am: New file.\n\t* automake.in (seen_pythondir): New global.\n\t(generate_makefile): Call handle_python.\n\t(handle_python): New function.\n\t(scan_one_configure_file): Set seen_pythondir if AM_PATH_PYTHON\n\tseen.\n\t(am_install_var): Special-case PYTHON like JAVA.\n\t(scan_configure): Check for py-compile.\n\t(initialize_global_constants): Added py-compile to @common_files.\n\n\t* ltlib.am (install-@DIR@LTLIBRARIES): Added missing space.\n\n1999-11-21  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (finish_languages): Only generate suffix rule when\n\tnot doing dependency tracking.\n\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Use AM_MISSING_INSTALL_SH.\n\t* m4/missing.m4 (AM_MISSING_INSTALL_SH): New macro.\n\n\t* depend2.am: Use @SOURCE@, @OBJ@, @LTOBJ@, @OBJOBJ@, and @BASE@.\n\tAlways use `-o'.\n\n1999-11-19  Tom Tromey  <tromey@cygnus.com>\n\n\t* dist.am: Set `CDPATH=:' to avoid problems.  Merged from\n\tAlexandre's change on branch.\n\n1999-10-02  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n\n\t* Makefile.am (maintainer-check): Look for occurrences of ``cd'\n\twithout `CDPATH'.\n\t* dejagnu.am: Set CDPATH before cd.\n\t* Makefile.in: Rebuilt.\n\n\t* automake.in (handle_single_transform_list): Change `\\1' for `$1'\n\tin `s///' replacement.\n\n\t* automake.in (handle_dist): Set CDPATH before cd.\n\t* dejagnu.am (check-DEJAGNU): Likewise.\n\t* texinfos.am (install-info-am, dist-info): Likewise.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Likewise.\n\t* m4/missing.m4 (AM_MISSING_HAS_RUN): Likewise.\n\t* aclocal.m4, configure, Makefile.in: Rebuilt.\n\n\t* AUTHORS: Added myself.\n\n1999-09-14  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n\n\t* m4/missing.m4: Support relative srcdir and ac_aux_dir.\n\tReported by Tim Wilkinson <tim@transvirtual.com>\n\t* aclocal.m4, configure: Rebuilt.\n\n1999-08-17  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* m4/lex.m4 (AM_PROG_LEX): Require AM_MISSING_HAS_RUN and, if no\n\tLEX program is found, use `${am_missing_run}flex'.\n\n1999-08-16  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (handle_single_transform_list): Replace `$(OBJEXT)'\n\twith `o' in depfile.\n\n\t* automake.in (handle_lib_objects_cond): Remove second dot from\n\tdependency file names.\n\n\t* depend2.am (OBJEXT@EXT@.obj): Dependency file should be .Po,\n\tregardless of OBJEXT.\n\n\t* automake.in (handle_dependencies): Add blank line after depend2.\n\t(handle_dependencies): Start DEP_FILES with `@AMDEP@'.  Output\n\tblank line before `include's, not after them.\n\t(scan_one_configure_file): Do not special-case `DEP_' any more.\n\n\t* m4/depout.m4 (AM_OUTPUT_DEPENDENCY_COMMANDS): Run for loop only\n\tif AMDEP is empty.\n\t* aclocal.m4, configure: Rebuilt.\n\n\t* m4/depend.m4 (AMDEPBACKSLASH): Define.\n\t* depend2.am (@EXT@.o, @EXT@.lo, @EXT@.obj): Use AMDEPBACKSLASH.\n\n\t* automake.in (handle_dependencies): Generate `include's for\n\tdependency files after `@AMDEP@'.\n\n\t* m4/missing.m4: Use eval, instead of a sub-shell, to test for\n\t--run support in the missing script, since SHELL is not exported.\n\tReported by job bogan <job@piquin.uchicago.edu>\n\t* aclocal.m4, configure: Rebuilt.\n\n1999-08-15  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* aclocal.m4, configure: Rebuilt with itself.\n\t* Makefile.in, m4/Makefile.in, tests/Makefile.in: Likewise.\n\n\t* m4/missing.m4 (AM_MISSING_PROG): Remove DIRECTORY argument.\n\tRequire AM_MISSING_HAS_RUN.  Use am_missing_run, defined by...\n\t(AM_MISSING_HAS_RUN): New macro.\n\t* m4/init.m4: Remove missing_dir from calls to AM_MISSING_PROG.\n\t* automake.texi (Requirements): Likewise.\n\t* version.texi, stamp-vti: Rebuilt.\n\n1999-07-28  Tom Tromey  <tromey@cygnus.com>\n\n\t* depcomp: Handle the `hp' mode.\n\n1999-07-06  Tom Tromey  <tromey@cygnus.com>\n\n\t* depcomp: Work around HP-UX 10.20 sed bug.\n\n1999-07-05  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_dependencies): Generate a separate include\n\tfor each dep file.  Report from Alexandre Oliva.\n\t* depend.am: Don't include DEP_FILES.\n\n1999-06-01  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* depend.am: Add @AMDEP@ before `include', so that dependency\n\ttracking can be disabled.\n\t* depend2.am: Ditto, before all lines related with dependency\n\ttracking.\n\t* m4/depend.m4 (AM_DEP_TRACK): New macro, that documents\n\t--enable/disable-dependency-tracking and sets AMDEP accordingly.\n\tIt is implicitly disabled if depcomp is missing.\n\t(AM_DEPENDENCIES): Disable dependency tracking unless it can be\n\tgenerated by side-effect.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Require AM_DEP_TRACK.\n\t* automake.in (handle_dependencies): Add @AMDEP@ before the value\n\tof DEP_FILES.\n\t* m4/depout.m4 (AM_OUTPUT_DEPENDENCY_COMMANDS): Handle DEP_FILES\n\tstarting with `#'.\n\n\t* depcomp: Support -xM for dependency generation, for Sun CC.\n\tReported by Alex Hornby <alex@anvil.co.uk>\n\t* m4/depend.m4: Extract the list of supported dependency-tracking\n\tmechanisms from the depcomp script and use it to test each one.\n\t* THANKS: Added Alex Hornby.\n\n\t* depend2.am: Move $(depcomp) to the line of $(...DEPMODE), so as\n\tto leave $(...COMPILE) in a line by itself.\n\n\t* THANKS: Added Miles Bader.\n\n1999-06-01  Miles Bader  <miles@ccs.mt.nec.co.jp>\n\n\t* m4/depend.m4 (AM_DEPENDENCIES): Add check for `makedepend'.\n\tFix `dashmstdout' to ignore non-dependency-generating uses of the\n\t-M flag.\n\t* depcomp (makedepend): New dependency-generating method.\n\n1999-06-01  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* missing: If given `--run' as first argument, try to run the\n\tgiven program before falling back to the ``emulated'' behavior.\n\tAdd support for `tar'.\n\t* automake.in: Use new `tar' support for `dist'.\n\t* m4/missing.m4 (AM_MISSING_PROG): Instead of checking for the\n\tprogram, prepend `missing --run' to the given program name.\n\t* m4/init.m4: Remove AMTAR-related stuff.\n\t* NEWS: Updated.\n\n\t* m4/depout.m4: Instead of `find'ing Makefiles, just iterate on\n\tCONFIG_FILES.  Do not use temporary variable for list of\n\tdependency files, it breaks Cygwin.\n\n1999-04-27  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* depcomp (gcc): Imported comments removed from depend2.am, so\n\tthat we don't lose them.\n\n\t* m4/depout.m4 (AM_OUTPUT_DEPENDENCY_COMMANDS): Avoid sed s/$U//\n\twhen not using ansi2knr.\n\n1999-04-26  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* m4/depend.m4 (AM_DEPENDENCIES): Test for depcc -E support.\n\t* depcomp (cpp): Extract dependencies from `# nnn \"...\"' lines.\n\n1999-04-25  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* m4/depend.m4 (AM_DEPENDENCIES): Add a definition to conftest.h,\n\tso as not to compile an empty source; some compilers fail on this.\n\tRedirect stderr of depcc to /dev/null.  Test for -M with -o,\n\tbecause some compilers will output the rules to the output file.\n\t* depcomp (dashmstdout): Add --silent before --mode=compile, so\n\tthat we don't get libtool output mixed up with make rules.\n\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Require AM_SET_DEPDIR.\n\t* depend2.am: Set tmpdepfile too, to speed up depcomp.  Always use\n\t-o for libtool, otherwise it may try to deduce the object name\n\tfrom the dependency-generation flag.\n\t* depcomp: Assume depdir exists.  Preserve depfile on unsuccessful\n\tcompilations.\n\n\t* libtool.am: Do not emit .c.lo here...\n\t* depend2.am: ... emit .*.lo here, only when using libtool.\n\t* automake.in (get_object_extension): No more @MINUSO@ here.\n\t(handle_single_transform_list): Set $depfile from $object.\n\t(handle_dependencies): Emit depend2.am for all used languages,\n\tregardless of $use_dependencies; the setting of depcomp makes the\n\tdifference.\n\t(lang_cxx_finish): Do not emit compilation rules.\n\t(lang_objc_finish): Likewise.\n\t(lang_java_finish): Likewise.\n\n1999-04-21  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/depout.m4 (AM_OUTPUT_DEPENDENCY_COMMANDS): Correctly\n\tinterpolate DEPDIR in DEP_FILES expansion.\n\n1999-04-20  Lee Iverson  <leei@Canada.AI.SRI.COM>\n\n\t* m4/depend.m4 (AM_DEPENDENCIES): Fix up test for SGI-style\n\tdependency updating.\n\t* m4/depout.m4 (AM_OUTPUT_DEPENDENCY_COMMANDS): Fix sed script to\n\thandle multi-line dependency lists.\n\n1999-11-12  Tom Tromey  <tromey@cygnus.com>\n\n\tFix for PR automake/14:\n\t* aclocal.in: Added `ud_GNU_GETTEXT'.  Updated to mention\n\tAC_CYGWIN.\n\t* automake.in: Mention AC_CYGWIN, not AC_CYGWIN32.\n\n\t* m4/multi.m4: Added missing `]'.  From Akim Demaille.\n\n\t* Makefile.am (path-check): Make sure distdir is writeable before\n\tremoving it.\n\t* automake.in (handle_texinfo): Added `cm' and `ov' extensions.\n\t(handle_dist_worker): Make sure distdir is writeable before\n\tremoving it.\n\t(initialize_global_constants [$dist_trailer]): Make sure distdir\n\tis writeable before removing it.\n\t* dist.am (distcheck): Make the new source tree read-only before\n\tcompiling.  Idea from Karl Berry.\n\n\t* automake.texi (Gnits): Allow COPYING.LIB again.\n\t* automake.in (check_gnits_standards): Allow COPYING.LIB again.\n\n1999-11-11  Jim Meyering  <meyering@ascend.com>\n\n\t* dist.am (distcheck): Remove $(distdir).tar.gz before counting\n\tfiles.\n\n1999-11-09  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_dist): Typo fix.  From Jim Meyering.\n\n1999-11-09  Jim Meyering  <meyering@ascend.com>\n\n\t* automake.in (handle_dist): Remove the DISTHOOK and GETTEXT\n\tmarkers, no matter what.\n\n1999-11-08  Tom Tromey  <tromey@cygnus.com>\n\n\t* dist.am (distcheck): Put `&&' at the start of the distcheck-hook\n\tline.\n\n\t* automake.in (handle_dist_worker): Use `cp -R', not `cp -r'.\n\tFrom Jim Meyering.  Also, don't mention file name in `cp'\n\tdestination.  From Olly Betts.\n\n1999-10-27  Miodrag Vallat  <miodrag@ifrance.com>\n\n\t* texinfos.am (uninstall-info): Use installed info file, not one\n\tfrom srcdir or builddir.\n\n1999-11-07  Tom Tromey  <tromey@cygnus.com>\n\n\t* clean.am (maintainer-clean-generic): Remove Makefile.in.  From\n\tJeff Bailey\n\n\tFix for PR automake/18:\n\t* automake.in (handle_dist): Add contents of dist.am to the output\n\trules.\n\t* Makefile.am (amfiles): Added dist.am.\n\t* dist.am: New file.\n\t(distcheck): Added uninstall and distclean checks.\n\n\t* automake.in (PATH_PATTERN): Added `-' as allowable character.\n\tFixes PR automake/20.  From Matthew D. Langston.\n\n\t* automake.in (SUFFIX_RULE_PATTERN): Add `0-9' as characters\n\tallowed in suffixes.  Fixes PR 22.  From Matthias Clasen.\n\n1999-10-03  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n\n\t* m4/lispdir.m4: -batch must come before -q.\n\t* elisp-comp: Likewise.\n\tReported by Lars Hecking <lhecking@nmrc.ucc.ie>\n\t* THANKS: Added Lars.\n\n1999-08-15  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (get_object_extension): Fixed quoting bug.  Fixes\n\tansi4.test.\n\n1999-07-27  Tom Tromey  <tromey@cygnus.com>\n\n\t* config.guess, config.sub: New versions from autoconf.\n\n1999-07-13  Tom Tromey  <tromey@cygnus.com>\n\n\tWork around losing `awk'.  Report from Harlan Stenn.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Require AC_PROG_AWK.\n\t* tags.am (ID, TAGS): Use $(AWK), not `awk'.\n\n\t* automake.in (handle_source_transform): Mark prefix as seen if\n\tcorresponding _SOURCES variable exists.  Fixes empty2.test.\n\n1999-06-25  OKUJI Yoshinori  <okuji@kuicr.kyoto-u.ac.jp>\n\n\t* configure.in (ACLOCAL): Do not prepend the variable SRCDIR to\n\tm4.\n\t(AUTOMAKE): Set --amdir to current directory.\n\n1999-06-20  Tom Tromey  <tromey@cygnus.com>\n\n\t* Makefile.am (TAGS_FILES): New macro.\n\t(ETAGS_ARGS): Moved files into TAGS_FILES.\n\t(TAGS_DEPENDENCIES): Likewise.\n\t(ETAGS_ARGS): Removed.\n\t(TAGS_DEPENDENCIES): Removed duplicate definition.\n\n\t* tags.am (ID): Handle VPATH correctly.  Use TAGS_FILES.  Report\n\tfrom Ganesan Rajagopal.\n\t(TAGS): Likewise.\n\n1999-06-18  Thomas Tanner  <tanner@ffii.org>\n\n\t* automake.in (handle_ltlibraries): Check for -module in LDFLAGS,\n\ttoo.\n\n1999-06-20 Mark Elbrecht <snowball3@bigfoot.com>\n\n\t* ylwrap: Handle filenames output by the DOS version of Bison.\n\n1999-06-20  Tom Tromey  <tromey@cygnus.com>\n\n\t* ylwrap: Be less strict when recognizing DOS paths.  From Mark\n\tElbrecht.\n\n1999-06-19  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_dist_worker): Remove redundant entries from\n\tDIST_SUBDIRS.\n\n\t* automake.in (handle_lib_objects_cond): Better error message when\n\tunrecognized option passed in LDADD.\n\n1999-06-08  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* configure.in (ACLOCAL, AUTOMAKE): Use our own scripts, with\n\tappropriate --acdir and --amdir arguments.\n\n1999-06-07  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (dist_header): Avoid changing permissions of files\n\tin the source tree, trying a complex `find/chmod' command before\n\tfalling back to plain chmod.\n\t(handle_dist_worker): Do not create directories with mode 777, the\n\tfind above will take care of that.\n\t* m4/init.m4: Set install_sh for find/chmod above.\n\n\t* THANKS: Added Shuhei Amakawa.\n\n1999-06-07  Shuhei Amakawa <sa264@cam.ac.uk>\n\n\t* mans.am: Strip dirname from given filename.\n\n1999-06-07  Jim Meyering  <meyering@ascend.com>\n\n\t* automake.in (handle_dist): Change emitted rules so that a failure\n\tin `$(MAKE) distcheck-hook' propagates to the outer make.\n\n1999-05-27  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_single_transform_list): Replace AM_FLAG and\n\tnot FLAG in compilation rule.\n\t(add_depend2): Likewise.\n\n\t* ltlib.am (install-@DIR@LTLIBRARIES): Pass INSTALL_STRIP_FLAG to\n\tlibtool.\n\n\t* m4/dmalloc.m4: Updated dmalloc site information.\n\n1999-05-19  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_single_transform_list): Push object name\n\twithout extension onto lang_specific_files.  Fixes\n\tspecflags4.test.\n\n\t* automake.in (handle_single_transform_list): Added missing\n\tspace.  Fixes specflags.test.\n\n1999-05-05  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in: Disabled dependency tracking for Java.\n\n1999-05-04  Tom Tromey  <tromey@cygnus.com>\n\n\t* library.am (@LIBRARY@): Use $(@XLIBRARY@_AR).\n\t* automake.in (handle_libraries): Recognize _AR variable.\n\n1999-04-30  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (finish_languages): Always use `-o $@' with\n\tlibtool.  Define ltcompile and ltlink at outermost scope in\n\tfunction.\n\t* libtool.am (.c.lo): Removed.\n\n\t* automake.in (finish_languages): Put `.' before extension in\n\tsuffix list, `.obj' rule, and `.lo' rule.  Look at `-flags', not\n\t`-flag'.  From Pavel Roskin.\n\n1999-04-28  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (finish_languages): Fixed scoping of ltcompile and\n\tltlink.  From Pavel Roskin.\n\n1999-04-27  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (read_main_am_file): Don't start macro definition\n\twith backslash-newline.  Instead, append newline at the end if\n\trequired.\n\n\t* automake.in (read_am_file): Insert a backslash before a trailing\n\tnewline.  Fixes pluseq8.test.\n\n\t* automake.in (MACRO_PATTERN): Allow digits and `_' to start a\n\tmacro name.\n\t(check_canonical_spelling): Don't insert `AM' before macro name\n\t(reverts Alexandre's 1999-04-27 patch).\n\t* automake.texi: Reverted documentation change for `AM' patch.\n\n\t* automake.in (handle_lib_objects_cond): Prefer `$1' over `\\1'.\n\tMinor rewrite for clarity.\n\t(check_canonical_spelling): Prefer `$1' over `\\1'.\n\n\t* depend2.am (@OBJ@): Renamed.  Use @SOURCE@, @COMPILE@.  Always\n\tuse `-o $@'.\n\t(@LTOBJ@): Likewise.\n\t* automake.in (handle_single_transform_list): Don't print rule if\n\tdoing dependency tracking and the file's language supports it.\n\t(initialize_per_input): Initialize lang_specific_files.\n\t(add_depend2): New function.\n\t(handle_dependencies): Use it.\n\n\t* automake.in (lang_ppf77_finish): Use lang_f77_finish.\n\tratfor compiler name is `RCOMPILE'.  ppf77 compiler name changed\n\tto `PPF77COMPILE' to allow use of f77 and ppf77 in the same\n\tdirectory.\n\t(lang_ratfor_finish): Use lang_f77_finish.\n\n\t* compile.am (NOTDEPEND.c.o): Removed.\n\t(OBJEXT.c.obj): Likewise.\n\t* automake.in: Added `flags' attribute to all relevant languages.\n\t(handle_single_transform_list): Handle per-derived-object flags.\n\tChanged interface and all callers.\n\t(handle_built_sources): Don't call handle_single_transform_list.\n\tAdded `compile' and `compiler-name' attribute to all relevant\n\tlanguages.\n\t(finish_languages): Define compiler variables here.\n\t(lang_cxx_finish): Don't call define_compiler_variable.  Don't\n\tdefine flag variable or .o rules.  Don't add to @suffixes.\n\t(lang_f77_finish): Likewise.\n\t(lang_ppf77_finish): Likewise.\n\t(lang_objc_finish): Likewise.\n\t(lang_java_finish): Likewise.\n\t(finish_languages): Define flag variable here.\n\tAdded `output-arg' attribute to all relevant languages.\n\t(finish_languages): Define `.o' rules here.\n\t(finish_languages): Put extension on @suffixes.\n\t(get_object_extension): Don't transform NOTDEPEND or MINUSO.\n\n1999-04-27  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (initialize_global_constants): Invoke gzip for\n\tdist-shar just like in plain dist, i.e., pass it GZIP_ENV and -c.\n\n\t* automake.in (initialize_global_constants): Remove zip file\n\tbefore re-creating it.\n\tReported by Bob Friesenhahn <bfriesen@simple.dallas.tx.us>\n\n\t* texinfos.am (uninstall-info): Look for info file in srcdir, just\n\tlike in install-info-am.\n\tReported by Tudor Hulubei <tudor@cs.unh.edu>\n\n\t* automake.in (handle_lib_objects_cond): \\Q doesn't work either.\n\tLet's use the good ol' substitution, then.\n\tReported by Russ Allbery <rra@stanford.edu>\n\n\t* automake.in (check_canonical_spelling): Insert AM before names\n\tstarting with non-letters.\n\n\t* automake.texi: Document it.\n\n1999-04-26  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (handle_lib_objects_cond): Do not use quotemeta, it\n\tdoesn't work on perl4.  Maybe \\Q and \\E do.\n\n1999-04-24  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in: Treat `.zip' and `.jar' files as Java.\n\n\t* automake.in (generate_makefile): Define `subdir' after reading\n\t.am file.\n\t(read_main_am_file): Give programming error if variable defined\n\tbefore invocation.\n\n1999-04-22  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (generate_makefile): Define `subdir' variable.\n\t(handle_dist): Don't define `subdir'.\n\n\t* automake.in (handle_texinfo): Change numbering scheme for\n\tstamp-vti files, to avoid problems with DOS.\n\tFrom Michel de Ruiter.\n\n\t* automake.texi: Don't mention AM_FUNC_MKTIME.\n\t* aclocal.in (obsolete_macros): Mention AM_FUNC_MKTIME.\n\t* automake.in (scan_one_configure_file): Recognize\n\tAC_FUNC_MKTIME, not AM_FUNC_MKTIME.\n\t(obsolete_macros): Mention AM_FUNC_MKTIME.\n\t* m4/Makefile.am (m4data_DATA): Removed mktime.m4.\n\t* m4/mktime.m4: Removed.\n\n1999-04-20  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.texi (Top level): Don't recommend substing SUBDIRS.\n\n1999-04-20  Brian Ford <ford@vss.fsi.com>\n\n\t* scripts.am: Change else if's to elif.\n\n1999-04-20  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (handle_lib_objects_cond): Only require the source\n\tof a LIBOBJ if it's not in BUILT_SOURCES.\n\tReported by Erez Zadok.\n\n1999-04-19  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in: Treat `.class' files as Java source.\n\t(lang_java_finish): Handle `.class' files.\n\n1999-04-18  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* m4/lispdir.m4: Match only `/(share|lib)/x?emacs/site-lisp/*$'.\n\n\t* m4/lispdir.m4: Do not override lispdir if it's already defined.\n\tRun some emacs-lisp to find out the site-lisp directory, but\n\trelocate it into prefix.\n\n1999-04-17  Paul Eggert  <eggert@twinsun.com>\n\n\t* m4/mktime.m4 (bigtime_test, main): Move alarm from\n\tbigtime_test to main, since Solaris 7 (64-bit) mktime loops\n\teven outside of bigtime_test.  Use a time limit of 60 seconds\n\tfor the whole test, not 10 seconds per iteration.\n\n1999-04-17  Erez Zadok  <ezk@cs.columbia.edu>\n\n\t* automake.in: Create stamps for headers in appropriate\n\tdirectories, even if the input file lives in a different place.\n\t* remake-hdr.am: Likewise.\n\n1999-04-16  Tom Tromey  <tromey@cygnus.com>\n\n\tFrom Brian Ford:\n\t* progs.am (install-@DIR@PROGRAMS, uninstall-@DIR@PROGRAMS):\n\tInvoke `sed' only once per program.\n\t* scripts.am (install-@DIR@SCRIPTS, uninstall-@DIR@SCRIPTS):\n\tInvoke `sed' only once per program.\n\n1999-04-13  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_subdirs): Make `install-recursive' phony.\n\tFrom Michel de Ruiter.\n\n\t* automake.in (handle_ltlibraries): Added missing `check'.\n\n1999-04-12  Tom Tromey  <tromey@cygnus.com>\n\n\t* ansi2knr.c: New version from Pavel Roskin (via ansi2knr.c\n\tmaintainer).\n\n1999-04-11  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_dist): Use AMTAR.\n\t(initialize_global_constants): Likewise.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Use AMTAR, not TAR.\n\n\t* automake.in (lang_sub_obj): New function.\n\t(lang_cxx_rewrite): Use it.\n\t(lang_asm_rewrite): Likewise.\n\t(lang_objc_rewrite): Likewise.\n\t(lang_cxx_finish): Add `-o $@' to all C++ rules.\n\t(lang_asm_finish): Add `-o' to suffix rules when appropriate.\n\t(lang_objc_finish): Add `-o $@' to all ObjC rules.\n\t(lang_java_finish): Likewise.\n\n\t* automake.in: Only register `asm' once.\n\t(lang_asm_finish): Put assembly suffixes on @suffixes.\n\n\t* libtool.am (.s.lo): Removed.\n\t(.S.lo): Likewise.\n\t* automake.in (lang_asm_finish): Handle libtool.\n\n\t* libtool.am (.c.o): Always pass -c to libtool.\n\n\t* automake.in (lang_yacc_rewrite): Handle sources in subdirs.\n\t(lang_yaccxx_rewrite): Likewise.\n\t(lang_lex_rewrite): Likewise.\n\t(lang_lexxx_rewrite): Likewise.\n\n\tAssembly code no longer included by default:\n\t* compile.am (.s.o): Removed.\n\t(.S.o): Likewise.\n\t* automake.in: Register `asm' language.\n\t(lang_asm_finish): Generate suffix rules for assembly.\n\t(get_object_extension): Don't add `.s' or `.S' to suffix list.\n\n\t* automake.in (get_object_extension): Substitute @MINUSO@ when\n\tincluding compile.am.\n\t* compile.am (.c.o): Added @MINUSO@.\n\t(.c.obj): Likewise.\n\n\tFirst cut at allowing objects in subdirectories:\n\t* m4/Makefile.am (m4data_DATA): Added minuso.m4.\n\t* Makefile.am (dist_script_DATA): Added compile.\n\t* m4/minuso.m4: New file.\n\t* automake.in (initialize_global_constants): Added compile to\n\tcommon_files.\n\t(seen_cc_c_o): New global.\n\t(scan_one_configure_file): Set it when AM_PROG_CC_C_O seen.\n\t(handle_options): Recognize `subdir-objects' option.\n\t(lang_c_rewrite): Added directory argument.\n\t(lang_yacc_rewrite): Likewise.\n\t(lang_yaccxx_rewrite): Likewise.\n\t(lang_lex_rewrite): Likewise.\n\t(lang_lexxx_rewrite): Likewise.\n\t(handle_single_transform_list): Pass directory to _rewrite\n\tfunction.  Generate dependencies for dirstamp files for each .o;\n\tit is just the rules we want to create once.\n\t(lang_c_rewrite): Handle `subdir-objects' option.\n\t(lang_c_rewrite): Require `compile' program.\n\t* compile: New file.\n\n\t* automake.in (initialize_per_input): Initialize %directory_map.\n\t(handle_single_transform_list): Only create .dirstamp rules once\n\tper directory.\n\n\t* m4/gcj.m4 (AM_PROG_GCJ): Use AC_CHECK_PROGS, not AC_CHECK_PROG.\n\n\tFix for confh.test:\n\t* automake.in (configure_input_files): New global.\n\t(scan_configure): Set it.\n\t(handle_configure): Use configure_input_files when determining\n\twhich subdirs have a Makefile.am.  Fixes confh.test.\n\t(handle_configure): Only recognize acconfig.h in top srcdir.\n\n1999-04-10  Tom Tromey  <tromey@cygnus.com>\n\n\t* depend2.am (%.o): Use `$(*D)/$(*F)', not just `$(*F)'.\n\t(%.lo): Likewise.\n\n\t* automake.in (am_install_var): Remove redundancies from the\n\tresult.  Fixes test cond8.test.\n\n\t* automake.in (handle_single_transform_list): Handle dependency\n\ttracking when files are created in subdirs.  Error if object in\n\tsubdir has `..' component.\n\n\t* automake.in (initialize_global_constants): Use $(TAR), not tar.\n\n\t* automake.in (handle_ltlibraries): Allow check_LTLIBRARIES.\n\n\t* automake.in (lang_yacc_finish): Added missing `&'.\n\n1999-04-10  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (handle_configure): Replace multiple occurrences of\n\t@STAMP@ in the same line; completes the patch for remake-hdr.am\n\tbelow.\n\n\t* automake.in (handle_dependencies): Fix test for `autodep'\n\tsupport.\n\n\t* automake.in (handle_source_transform): Add a pfx to used_pfx\n\tonly if it's conditional or non-empty, to reduce the number of\n\tempty variables.  Emit _OBJECS variable based on program name if\n\tno SOURCES were explicitly specified.\n\n\t* remake-hdr.am: Create the stamp file before the header file,\n\tand just rename it after, so that the timestamps will be correct.\n\tReported by Marc Horowitz <marc@mit.edu>\n\n\t* automake.in (lang_yacc_finish): Generate and dist a `.h' for a\n\t`.y' iff YFLAGS or AM_YFLAGS contain `-d'.\n\tReported by Jim Meyering <meyering@ascend.com>\n\n\t* automake.in (lang_yacc_finish): $hname must not contain a `.'.\n\n1999-04-10  Tom Tromey  <tromey@cygnus.com>\n\n\t* Makefile.am (EXTRA_DIST): New macro.\n\t* ChangeLog.1996, ChangeLog.1998: New files.\n\n1999-04-09  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_source_transform): Handle dist and nodist\n\tprefixes.\n\t(initialize_per_input): Initialize dist_sources.\n\t(check_libobjs_sources): Handle dist and nodist prefixes.\n\t(generate_makefile): Define DIST_SOURCES.\n\t* dist-vars.am (DISTFILES): Reference DIST_SOURCES, not SOURCES.\n\n\t* automake.texi (Macros): Mention AM_PROG_GCJ.\n\t(Java Support): New node.\n\t(Dist): Documented dist_ and nodist_ prefixes.\n\n\t* m4/gcj.m4 (AM_PROG_GCJ): Renamed from AC_PROG_GCJ.\n\n\t* automake.in (lang_java_finish): Generate .lo rule for `.java'\n\tfiles, not `.gcj' files.\n\n\t* m4/gcj.m4: New file.\n\t* m4/Makefile.am (m4data_DATA): Added gcj.m4.\n\n\t* automake.in: Register the `java' language.\n\t(resolve_linker): Handle GCJLINK.\n\t(lang_java_rewrite): New function.\n\t(LANG_IGNORE, LANG_PROCESS, LANG_SUBDIR): New constants.\n\t(lang_c_rewrite): Use new constants.\n\t(lang_cxx_rewrite): Likewise.\n\t(lang_header_rewrite): Likewise.\n\t(lang_yacc_rewrite): Likewise.\n\t(lang_yaccxx_rewrite): Likewise.\n\t(lang_lex_rewrite): Likewise.\n\t(lang_lexxx_rewrite): Likewise.\n\t(lang_asm_rewrite): Likewise.\n\t(lang_f77_rewrite): Likewise.\n\t(lang_ppf77_rewrite): Likewise.\n\t(lang_ratfor_rewrite): Likewise.\n\t(lang_objc_rewrite): Likewise.\n\t(handle_single_transform_list): Likewise.  Handle LANG_SUBDIR\n\treturn from rewrite function.\n\t(lang_java_finish): New function.\n\t(register_language): Changed interface and all calls.  Added\n\t`autodep' settings to various languages.\n\t(handle_dependencies): Use `autodep' property of language when\n\tincluding dependency-tracking code.\n\n1999-04-07  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_texinfo): Indentation fixes.\n\n1999-04-07  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (value_to_list): Skip *only* trailing backslashes.\n\n1999-04-07  Pavel Roskin  <pavel_roskin@geocities.com>\n\n\t* automake.in (value_to_list): Skip trailing backslashes.\n\n1999-04-07  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (handle_texinfo): Add texinfo.tex to config_aux_dir\n\twhen appropriate.\n\tReported by Per Cederqvist <ceder@lysator.liu.se>\n\t(handle_texinfo): Do not define texinfo_tex='.', use\n\t'$(srcdir)/texinfo.tex' instead; the directory name will be\n\tproperly extracted.\n\t(require_conf_file_with_line): Fixed typo.\n\n1999-04-03  Raja R Harinath  <harinath@cs.umn.edu>\n\n\t* automake.in (handle_tests): Test `dir=./' before `dir=', so that\n\twe do not depend on PATH starting with `.'.\n\n1999-03-31  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (quote_cond_val): Quote \\n.\n\t(unquote_cond_val): Unquote \\n.\n\t(read_am_file): If line ends with `\\', preserve it and add a\n\tnewline.\n\t(read_main_am_file): In conditional case, put conditional text at\n\tbeginning of each generated line.\n\n1999-03-31  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (handle_tests): support XFAIL_TEST\n\t* automake.texi: document it\n\n1999-04-12  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* End of merge from trunk.\n\n1999-04-12  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (cmdline_use_dependencies): Reintroduce it.\n\t(--ignore-deps): Set cmdline_use_dependencies again.\n\t(handle_dependencies): If use_dependencies is not set, define\n\tdepcomp as empty.\n\t(handle_configure): Pass --ignore-deps to generated Makefile.ins.\n\t(scan_configure): Do not require depcomp when ignoring\n\tdependencies.\n\t(initialize_global_constants): Reintroduce --ignore-deps.\n\n1999-04-10  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* depcomp: New file.\n\t* Makefile.am (dist_script_DATA): Added depcomp.\n\t* automake.in (cmdline_use_dependencies, omit_dependencies,\n\tdependency_macros): Removed.\n\t(--ignore-deps): Just ignore.\n\t(handle_single_transform_list, dep_files): Named dependency files\n\tas \\$(DEPDIR)/$base.P$obj\n\t(handle_lib_objects_cond): Likewise.\n\t(generate_dependency_code): Do not check for AM_*_DEPENDENCIES.\n\t(scan_one_configure_file): Likewise.\n\t(handle_dependencies): Always enable auto-dep.  Define `depcomp'.\n\tIgnore OMIT_DEPENDENCIES.\n\t(handle_configure): Do not pass --ignore-deps.\n\t(scan_configure): Require `depcomp'.\n\t(initialize_global_constants): Make `depcomp' common.  Remove\n\t`--ignore-deps' from usage.\n\t(get_object_extension): No more NOTDEPEND in compile nor libtool.\n\t* compile.am: Remove rules for .c.o and .c.obj\n\t* depend.am (distclean-depend): Wipe out $(DEPDIR)\n\t* depend2.am (@FPFX@DEPMODE): Define from config.status.\n\tUse it and depcomp in suffix rules.\n\t* libtool.m4: Likewise.\n\t* m4/ccdepend.m4, m4/cxxdepend.m4: Removed.\n\t* m4/depvars.m4, m4/objcdepend.m4: Likewise.\n\t* m4/Makefile.am (dist_m4data_DATA): Likewise.\n\t* m4/depout.m4 (AM_OUTPUT_DEPENDENCY_COMMANDS): Extract DEPDIR\n\tfrom the Makefile and subst it in deps.  Report creation of deps\n\tfiles (for now).  Replace $U with `_' and the empty string.  Write\n\ta comment to each created file.\n\t* m4/depend.m4 (AM_SET_DEPDIR): Select a valid deps dir name.\n\t(AM_DEPENDENCIES): Accept CC, CXX and OBJC.  Just determine the\n\tdependency mode and AC_SUBST [$1]DEPMODE.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Automatically call\n\tAM_DEPENDENCIES for CC and CXX, if the corresponding AC_PROG\n\tappears in configure.in, before or after AM_INIT_AUTOMAKE.\n\n1999-04-02  Raja R Harinath  <harinath@cs.umn.edu>\n\n\t* depout.m4: Fix sed expression for extracting `dirpart'.\n\n1999-03-29  Tom Tromey  <tromey@cygnus.com>\n\n\t* depend2.am (DEP_@FPFX@COMPILE): Use `!=' and not `-ne'.\n\n\t* compile.am (.c.obj): Also disabled when dependency tracking\n\tenabled.\n\t* depend2.am (@EXT@.obj): New target.\n\t* automake.in (get_object_extension): Added explanatory comment.\n\t(generate_dependency_code): Handle $seen_objext.\n\n\t* depend.am: Removed obsolete comment.\n\t* depend2.am: Minor formatting fix.\n\n1999-03-28  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/Makefile.am (dist_m4data_DATA): Renamed, and added new\n\tfiles.\n\t(EXTRA_DIST): Removed.\n\t* automake.in (dependency_macros): New global.\n\t(scan_one_configure_file): Recognize new dependency tracking\n\tmacros, and define new resulting configure variables.\n\t(generate_dependency_code): New sub.\n\t(handle_dependencies): Use it.\n\t* depend2.am (DEP_@FPFX@COMPILE): New macro.\n\t(@EXT@.o): Use it.\n\t(@EXT@.lo): Likewise.\n\t* m4/depvars.m4: New file.\n\t* m4/objcdepend.m4: New file.\n\t* m4/cxxdepend.m4: New file.\n\t* m4/init.m4: Moved dependency handling code into depout.m4.\n\t* m4/depout.m4: New file.\n\t* m4/ccdepend.m4: New file.\n\t* m4/depend.m4: New file.\n\n\t* depend2.am (@EXT@.o): Renamed to be old-style suffix pattern.\n\t(@EXT@.lo): Likewise.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Don't create `.deps/.P'; it is no\n\tlonger needed.\n\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Add code to config.status which\n\twill create the required .P files for dependency tracking.\n\t* automake.in (scan_dependency_file): Removed.\n\t(handle_dependencies): Never call scan_dependency_file.\n\t(generate_deps): Removed.\n\t(parse_arguments): Don't recognize --generate-deps, --build-dir,\n\t--srcdir-name, or --include-deps.  Do recognize --ignore-deps.\n\t(srcdir_name): Removed.\n\t(build_directory): Removed.\n\t(initialize_global_constants): Changed $USAGE to reflect argument\n\tparsing changes.\n\t(handle_dist_worker): Never run automake in `dist' rule.\n\t(handle_configure): Use --ignore-deps, not --include-deps.\n\t* depend.am (DEPS_MAGIC): Removed.\n\t(DEP_FILES): Unconditionally include.\n\n1999-03-27  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (saw_sources_p): Correctly count header extensions\n\tseen.\n\t(handle_headers): Fixed order of arguments to am_install_var.\n\n\t* automake.in (am_install_var): Don't error if EXTRA_foo is\n\tdefined uselessly.\n\n\t* scripts.am (install-@DIR@SCRIPTS): Use NDIR when appropriate.\n\t(uninstall-@DIR@SCRIPTS): Likewise.\n\t* progs.am (install-@DIR@PROGRAMS): Use NDIR when appropriate.\n\t(uninstall-@DIR@PROGRAMS): Likewise.\n\t* ltlib.am (install-@DIR@LTLIBRARIES): Use NDIR when appropriate.\n\t(uninstall-@DIR@LTLIBRARIES): Likewise.\n\t* lisp.am (install-@DIR@LISP): Use NDIR when appropriate.\n\t(uninstall-@DIR@LISP): Likewise.\n\t* libs.am (install-@DIR@LIBRARIES): Use NDIR when appropriate.\n\t(uninstall-@DIR@LIBRARIES): Likewise.\n\t* java.am (install-@DIR@JAVA): Use NDIR when appropriate.\n\t(uninstall-@DIR@JAVA): Likewise.\n\t* header.am (install-@DIR@HEADERS): Use NDIR when appropriate.\n\t(uninstall-@DIR@HEADERS): Likewise.\n\t* data.am (install-@DIR@DATA): Use NDIR when appropriate.\n\t(uninstall-@DIR@DATA): Likewise.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (dist_pkgdata_DATA): Renamed.\n\t(EXTRA_DIST): Removed.\n\t(install-data-hook): Added POST_INSTALL; print commands as they\n\tare run; respect DESTDIR.\n\t* dist-vars.am (DISTFILES): Removed $(HEADERS).\n\t* automake.in (am_install_var): Accept `-candist' and\n\t`-defaultdist' options.  Handle `dist_' and `nodist_' prefixes.\n\t(am_primary_prefixes): Added can_dist argument.  Recognize `dist_'\n\tand `nodist_' prefixes.\n\t(handle_scripts): Pass -candist to am_install_var.\n\t(handle_data): Pass -defaultdist to am_install_var.\n\t(handle_headers): Likewise.\n\t(handle_emacs_lisp): Pass -candist to am_install_var.\n\t(handle_java): Pass -candist to am_install_var.\n\n1999-03-26  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/init.m4: Fixed typo when invoking SHELL.\n\n\t* automake.in (lang_yacc_finish): Always use `.h' as suffix for\n\tyacc header file.  From Ralf Corsepius.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am: Updated to reflect removal of TAR subst.\n\t* automake.texi (Options): Document dist-bzip2.\n\t* automake.in (TAR): Removed global.\n\t(initialize_global_constants): Changed `dist' to use pipe with\n\tgzip; work with non-GNU tar.\n\t(handle_dist): Handle non-GNU tar.  Don't define TAR.\n\t(initialize_global_constants): Added `dist-bzip2' entry.\n\t(handle_options): Recognize dist-bzip2 option.\n\t(handle_dist): Likewise.\n\t* configure: Rebuilt.\n\t* configure.in: Don't check for tar.\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Check for `tar'.  Substitute\n\tAMTARFLAGS.\n\n\t* automake.in (am_install_var): Removed obsolete comment.\n\n\t* texinfos.am (uninstall-info): Don't print loop but instead print\n\tcommands.  Simplified pre-uninstall loop.\n\t* scripts.am (uninstall-@DIR@SCRIPTS): Don't print loop but\n\tinstead print commands.\n\t* progs.am (uninstall-@DIR@PROGRAMS): Don't print loop but instead\n\tprint commands.\n\t* ltlib.am (uninstall-@DIR@LTLIBRARIES): Don't print loop but\n\tinstead print commands.\n\t* lisp.am (install-@DIR@LISP): Strip subdir from file name.\n\t(uninstall-@DIR@LISP): Likewise.  Also, don't print loop but\n\tinstead print commands.\n\t* libs.am (uninstall-@DIR@LIBRARIES): Don't print loop but instead\n\tprint commands.\n\t* java.am (uninstall-@DIR@JAVA): Don't print loop but instead\n\tprint commands.\n\t* header.am (install-@DIR@HEADERS): Strip subdir from file name.\n\t(uninstall-@DIR@HEADERS): Likewise.  Also, don't print loop but\n\tinstead print commands.\n\t* data.am (install-@DIR@DATA): Strip subdir from file name.\n\t(uninstall-@DIR@DATA): Likewise.  Also, don't print loop but\n\tinstead print commands.\n\n\t* automake.in (handle_merge_targets): `install-strip' is a phony\n\ttarget.  From Michel de Ruiter.\n\n1999-03-25  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (define_compiler_variable): Don't define variable\n\twith trailing `_'.\n\n1999-03-25  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (LDADD): accept -dlopen and -dlpreopen here\n\t* automake.texi: ditto\n\n1999-03-25  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (TESTS): make from Solaris 7/x86 loses if srcdir\n\tis absolute and != objdir.  dir=\"\" or \"$(srcdir)/\" fixes it\n\n1999-03-24  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (define_compiler_variable): New sub.\n\t(finish_languages): Use it.\n\t(lang_cxx_finish): Likewise.\n\t(lang_f77_finish): Likewise.\n\t(lang_ppf77_finish): Likewise.\n\t(lang_ratfor_finish): Likewise.\n\t(lang_objc_finish): Likewise.\n\n1999-03-23  Tom Tromey  <tromey@cygnus.com>\n\n\t* progs.am (install-@DIR@PROGRAMS): Use `-e' instead of multiple\n\tsed invocations.  From Elrond.\n\t(uninstall-@DIR@PROGRAMS): Likewise.\n\n\t* automake.in (lang_lex_finish): Rewrite `l', not `y', to `c'.\n\tFrom Ralf Corsepius.\n\n1999-02-01  Thomas Tanner  <tanner@gmx.de>\n\n\t* automake.in: accept both A(C|M)_PROG_LIBTOOL, print a\n\twarning when AM_PROG_LIBTOOL was found\n\t* automake.texi: renamed AM_PROG_LIBTOOL to AC_PROG_LIBTOOL\n\n1999-03-22  Tom Tromey  <tromey@cygnus.com>\n\n\tMade `+=' more robust.  Fixes pluseq6.test and pluseq7.test.\n\t* automake.in (define_standard_variables): New sub.\n\t(read_main_am_file): Use two passes to scan standard variables.\n\t(read_am_file): Don't special-case configure variables with `+='.\n\t(initialize_per_input): Initialize %var_was_plus_eq.\n\t(read_am_file): Set var_was_plus_eq element correctly.\n\t(define_variable): Give error if variable assigned with `+=' is\n\tinternally defined.\n\t(initialize_per_input): Initialize %am_var_defs.\n\t(file_contents_with_transform): Set element in %am_var_defs.\n\t(read_am_file): Use %am_var_defs.\n\n1999-03-21  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (initialize_per_input): Initialize %object_map.\n\t(handle_single_transform_list): Allow source files in\n\tsubdirectories.\n\n1999-03-21  Jim Meyering  <meyering@na-net.ornl.gov>\n\n\t* automake.in (handle_dist): Add missing newline after the first\n\tsemicolon.\n\n1999-03-11  Tom Tromey  <tromey@cygnus.com>\n\n\t* m4/error.m4, m4/mktime.m4, m4/obstack.m4, m4/regex.m4,\n\tm4/strtod.m4: Use $ac_objext, not `.o'.  From Jim Meyering.\n\n\tFrom Jim Meyering:\n\t* automake.in (handle_dist): Add `;\\' to end of distcheck-hook\n\tline.\n\t(scan_one_configure_file): In LIBOBJS, recognize `$ac_objext' as\n\tlegitimate ending.  Fixes libobj9.test.\n\n\tFrom Ralf Corsepius.  Fixes lex3.test.\n\t* automake.in (lang_yacc_finish): Include `.' in name pushed onto\n\tmaintainer-clean list.\n\t(lang_lex_finish): Likewise.\n\n1999-03-02  Tom Tromey  <tromey@cygnus.com>\n\n\t* subdirs.am (maintainer-clean-recursive): Changed \"&&\" into \"if\"\n\tconstruct to work around FreeBSD make/sh problem.  From Rich Wales.\n\n1999-03-01  Tom Tromey  <tromey@cygnus.com>\n\n\tFixes from Pavel Roskin:\n\t* automake.in (variable_conditions_sub): Sort list passed to\n\tvariable_conditions_permutations.\n\t(variable_conditions): Sort list before returning.\n\n1999-02-27  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (lang_extensions): New sub.\n\t(handle_dependencies): Use it.\n\t(cxx_extensions): Removed.\n\t(lang_cxx_finish): Use lang_extensions.\n\t(f77_extensions): Removed.\n\t(lang_f77_finish): Use lang_extensions.\n\t(objc_extensions): Removed.\n\t(lang_ppf77_finish): Put `.' before extension.  Fixes ext.test.\n\tReport from Dave Morrison.\n\t(lang_ratfor_finish): Likewise.\n\n1999-02-26  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (finish_languages): Added AM_LDFLAGS.\n\t(lang_cxx_finish): Likewise.\n\t(lang_f77_finish): Likewise.\n\t(lang_ppf77_finish): Likewise.\n\t(lang_ratfor_finish): Likewise.\n\t(lang_objc_finish): Likewise.\n\n1999-02-11  Tom Tromey  <tromey@cygnus.com>\n\n\t* aclocal.in (obsolete_macros): Copied from automake.in.\n\t(obsolete_rx): Use only keys of obsolete_macros.\n\t(scan_configure): Report replacement macro for an obsolete macro.\n\t* automake.in (obsolete_macros): Added ud_GNU_GETTEXT.\n\n\t* automake.in (obsolete_macros): Corrected typo in AM_EXEEXT\n\tentry.  Fixes obsolete2.test.\n\n\t* automake.in (obsolete_macros): Use empty string to indicate no\n\tsubstitution.\n\t(scan_one_configure_file): Likewise.\n\n1999-02-07  Paul Eggert  <eggert@twinsun.com>\n\n\t* m4/ccstdc.m4 (AM_PROG_CC_STDC): Prefer -Ae to -Aa\n\t-D_HPUX_SOURCE, since -Ae allows `long long' and this is\n\tneeded by some programs.\n\n1999-02-10  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_texinfo): Added `pgs' to list of\n\textensions.  From NISHIDA Keisuke.\n\n1999-02-04  Akim Demaille  <demaille@inf.enst.fr>\n\n\t* automake.in (handle_texinfo): remove texinfo.tex from\n\tTEXINFODIR.\n\n1999-02-02  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_merge_targets): Use INSTALL_STRIP_FLAG.\n\t* progs.am (install-@DIR@PROGRAMS): Added INSTALL_STRIP_FLAG.\n\t* header-vars.am (INSTALL_PROGRAM): Removed\n\tAM_INSTALL_PROGRAM_FLAGS.\n\t(INSTALL_STRIP_FLAG): New macro.\n\n\t* automake.in: Handle `ypp' as C++ yacc source and `lpp' as C++\n\tlex source.\n\t(lang_yacc_finish): Likewise.\n\t(lang_lex_finish): Likewise.\n\n1999-02-01  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_dist_worker): Correctly find find in $$d,\n\tnot $$.  From Bill Davidson.\n\n\t* automake.in (finish_languages): Use \"&\", not \"do\".  From Pavel\n\tRoskin.\n\t(handle_single_transform_list): Likewise.\n\n1999-01-29  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_configure): Removed unused variable.  From\n\tPavel Roskin.\n\n\t* ansi2knr.c: New version from L. Peter Deutsch.\n\n1999-01-22  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (require_file_internal): Correctly examine return\n\tvalue of `system'.  From Andris Pavenis.  Fixes copy.test.\n\n\t* m4/init.m4 (AM_INIT_AUTOMAKE): Require autoconf 2.13.\n\n\t* automake.in (lang_ppf77_rewrite): New function.  From Jochen\n\tKuepper.  Fixes ppf77.test.\n\t(lang_ratfor_rewrite): New function\n\n\t* automake.in (handle_configure): Use `&' before sub calls (Perl 4\n\tfix).  From Erez Zadok.\n\n1999-01-15  Tom Tromey  <tromey@cygnus.com>\n\n\t* configure.in: Version 1.4a (oops).\n\n\t* configure.in: Updated version to 1.5a.\n\n1999-01-14  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (handle_configure): Compute $header_dir based on\n\t$one_name, not $one_hdr.  Reported by Erez Zadok.  Fixes\n\tconfh2.test.\n\t(handle_configure): Compute relative path to input header\n\tcorrectly in all cases.\n\n\t* automake.in (handle_tests): Avoid error messages from dejagnu\n\ttest rules.  From Karl Heuer.\n\n\t* automake.in (handle_texinfo): Add `/' to end of $conf_dir.\n\n\t* Makefile.am (AUTOMAKE_OPTIONS): Added `1.4'.\n\n\t* texi-vers.am ($(srcdir)/stamp-@VTI@): Find @TEXI@ in srcdir.\n\tFrom Alexandre Oliva and Erez Zadok.\n\n\t* automake.in (create): Renamed from touch.\n\t(handle_configure): Use create, not touch.\n\n\t* config.sub, config.guess: New versions from autoconf.\n\n\t* mkinstalldirs: New version from autoconf.\n\n1999-01-12  Tom Tromey  <tromey@cygnus.com>\n\n\t* config.sub, config.guess, COPYING, texinfo.tex: New versions\n\tfrom FSF.\n\n1999-01-11  Marcus G. Daniels  <mgd@chama.santafe.edu>\n\n\t* automake.in (PATH_PATTERN): New variable:\n\t(INCLUDE_PATTERN): Use it.  Ignore all include commands using\n\tsymbols besides $(top_srcdir) and $(srcdir).\n\n1999-01-11  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (handle_dist_worker): avoid failure in `make dist'\n\tif last file is a builddir-only file\n\n1999-01-11  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* missing (autoheader): `s' was missing from sed script; grr\n\n1999-01-11  Tom Tromey  <tromey@cygnus.com>\n\n\t* remake-hdr.am (@STAMP@): Reverted timestamp change.\n\t($(srcdir)/@STAMP@.in): Likewise.\n\n1999-01-10  Tom Tromey  <tromey@cygnus.com>\n\n\t* Makefile.am (scriptdir): New macro.\n\t(script_DATA): Likewise.\n\t(install-data-hook): Use them.\n\t(EXTRA_DIST): Added script_DATA.\n\t(installcheck-local): Use script_DATA.\n\n\t* Makefile.am (pkgdata_DATA): Removed duplicate definition.\n\n1999-01-10  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* missing (autoheader): accept multiple header files\n\t(automake): simplify sed processing\n\n1999-01-10  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* automake.in (handle_configure, stamp_dir): create only one stamp\n\tfile per header, instead of one in the top-level directory and one\n\tin the directory that contains the header.\n\n1999-01-10  Tom Tromey  <tromey@cygnus.com>\n\n\t* automake.in (lang_objc_finish): Formatting fix.\n\n\t* automake.in (objc_extensions): New sub.\n\t(handle_dependencies): Only generate dependency-tracking code for\n\tObjC when ObjC source seen.\n\n-----\n\nCopyright 1999-2020 Free Software Foundation, Inc.\n\nCopying and distribution of this file, with or without modification, are\npermitted provided the copyright notice and this notice are preserved.\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/t/cond14.sh": "#! /bin/sh\n# Copyright (C) 2001-2020 Free Software Foundation, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# Test for bug in conditionals.\n# Report from Robert Boehne.\n\n. test-init.sh\n\ncat >> configure.ac << 'END'\nAC_PROG_CC\nAM_CONDITIONAL([COND1], [true])\nEND\n\ncat > Makefile.am << 'END'\nif COND1\nBUILD_helldl = helldl\nhelldl_SOURCES = dlmain.c\nhelldl_DEPENDENCIES = libhello.la\nelse\nBUILD_helldl =\nbin_SCRIPTS = helldl\nhelldl$(EXEEXT):\n\trm -f $@\n\techo '#! /bin/sh' > $@\n\techo '-dlopen is unsupported' >> $@\n\tchmod +x $@\nendif\n\nbin_PROGRAMS = $(BUILD_helldl)\nEND\n\n$ACLOCAL\n$AUTOMAKE\n\n$FGREP helldl Makefile.in # For debugging.\ntest $($FGREP -c 'helldl$(EXEEXT):' Makefile.in) -eq 2\n\n:\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/t/libtool9.sh": "#! /bin/sh\n# Copyright (C) 2005-2020 Free Software Foundation, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# Make sure xxx_LINK is defined for each target that requires specific\n# flags.\n# Quite similar to 'libtool7.sh', using AM_LDFLAGS in addition to\n# xxx_LDFLAGS.\n\nrequired='cc libtoolize'\n. test-init.sh\n\ncat >> configure.ac << 'END'\nAC_PROG_CC\nAM_PROG_AR\nAC_LIBTOOL_DLOPEN\nAM_PROG_LIBTOOL\nAC_OUTPUT\nEND\n\ncat > Makefile.am << 'END'\nAM_LDFLAGS = -module\nlib_LTLIBRARIES = libmod1.la mod2.la\nlibmod1_la_SOURCES = mod1.c\nlibmod1_la_LDFLAGS =\nlibmod1_la_LIBADD = -dlopen mod2.la\nmod2_la_SOURCES = mod2.c\n\nbin_PROGRAMS = prg prg2\nprg_SOURCES = prg.c\nprg_LDADD = -dlopen libmod1.la -dlpreopen mod2.la\nprg_CPPFLAGS = -DXYZ=1\nprg2_SOURCES = prg.c\nprg2_CFLAGS =\n\nprint:\n\t@echo 1BEG: $(prg_DEPENDENCIES) :END1\n\t@echo 2BEG: $(libmod1_la_DEPENDENCIES) :END2\n\t@echo 3BEG: $(libmod1_la_LINK) :END3\n\t@echo 4BEG: $(mod2_la_LINK) :END4\n\t@echo 5BEG: $(prg_LINK) :END5\n\t@echo 6BEG: $(prg2_LINK) :END6\n\nEND\n\nmkdir liba\n\ncat > mod1.c << 'END'\nint mod1 (void)\n{\n   return 1;\n}\nEND\n\ncat > mod2.c << 'END'\nint mod2 (void)\n{\n   return 2;\n}\nEND\n\ncat > prg.c << 'END'\nint main (void)\n{\n   return 0;\n}\nEND\n\nlibtoolize --force --copy\n$ACLOCAL\n$AUTOCONF\n$AUTOMAKE --add-missing --copy\n\n./configure\nrun_make -M -- print \\\n  LDFLAGS=ldflags \\\n  AM_LDFLAGS=am_ldflags \\\n  libmod1_la_LDFLAGS=lm1_la_ldflags \\\n  CFLAGS=cflags \\\n  AM_CFLAGS=am_cflags \\\n  prg2_CFLAGS=prg2_cflags\n\ngrep '1BEG: libmod1.la mod2.la :END1' output\ngrep '2BEG: mod2.la :END2' output\ngrep '3BEG:.* am_cflags cflags .*lm1_la_ldflags ldflags.* :END3' output\ngrep '3BEG: .*am_ldflags.* :END3' output && exit 1\ngrep '4BEG: :END4' output\ngrep '5BEG: :END5' output\ngrep '6BEG:.* prg2_cflags cflags .*am_ldflags ldflags.* :END6' output\ngrep '6BEG: .*am_cflags.* :END6' output && exit 1\n\n$MAKE\n\n:\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/t/cond31.sh": "#!/bin/sh\n# Copyright (C) 2003-2020 Free Software Foundation, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# Make sure we define conditional _DEPENDENCIES correctly.\n\n. test-init.sh\n\ncat >>configure.ac <<'EOF'\nAC_SUBST([CC], [false])\nAC_SUBST([OBJEXT], [o])\nAM_CONDITIONAL([C1], [test -z \"$two\"])\nAM_CONDITIONAL([C2], [test -n \"$two\"])\nAC_OUTPUT\nEOF\n\ncat > Makefile.am <<'EOF'\nbin_PROGRAMS = a\na_LDADD = c0.o -L/some/where\nif C1\na_LDADD += c1.o -llibfoo.a\nendif\nif C2\na_LDADD += c2.o -dlopen c3.la\nendif\n\n.PHONY: test1 test2\ntest1:\n\tis $(a_DEPENDENCIES) == c0.o c1.o\ntest2:\n\tis $(a_DEPENDENCIES) == c0.o c2.o c3.la\nEOF\n\n$ACLOCAL\n$AUTOCONF\n$AUTOMAKE --ignore-deps\n\n./configure\n$MAKE test1\n\n./configure two=yes\n$MAKE test2\n\n:\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/t/cond15.sh": "#! /bin/sh\n# Copyright (C) 2001-2020 Free Software Foundation, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# Regression test for conditionally defined overriding of automatic rules.\n\n. test-init.sh\n\ncat >> configure.ac << 'END'\nAC_PROG_CC\nAM_CONDITIONAL([COND1], [true])\nAM_CONDITIONAL([COND2], [true])\nEND\n\ncat > Makefile.am << 'END'\nif COND1\nif COND2\nbin_SCRIPTS = helldl\nhelldl$(EXEEXT):\n\trm -f $@\n\techo '#! /bin/sh' > $@\n\techo '-dlopen is unsupported' >> $@\n\tchmod +x $@\nendif\nelse\nif COND2\nelse\nbin_SCRIPTS = helldl\nhelldl$(EXEEXT):\n\trm -f $@\n\techo '#! /bin/sh' > $@\n\techo '-dlopen is unsupported' >> $@\n\tchmod +x $@\nendif\nendif\n\nbin_PROGRAMS = helldl\nEND\n\n$ACLOCAL\n$AUTOMAKE\n\n$FGREP helldl Makefile.in # For debugging.\nnum1=$($FGREP -c 'helldl$(EXEEXT):' Makefile.in)\nnum2=$($FGREP -c '@COND1_FALSE@@COND2_TRUE@helldl$(EXEEXT):' Makefile.in)\ntest $num1 -eq 4\ntest $num2 -eq 1\n\n:\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/t/ltinit.sh": "#!/bin/sh\n# Copyright (C) 2011-2020 Free Software Foundation, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# Test that libtool support works correctly when \"newer\" libtool\n# interface (with LT_INIT etc.) is used (this interface has been\n# present since libtool 1.9b, circa 2004).\n\nrequired='cc libtoolize'\n. test-init.sh\n\ncat >>configure.ac <<'END'\nAC_PROG_CC\nAM_PROG_AR\ndnl Older libtool versions don't define LT_PREREQ :-(\nm4_ifdef([LT_PREREQ],\n    [LT_PREREQ([2.0])],\n    [m4_fatal([Libtool version too old], [63])])\nLT_INIT([dlopen])\nAC_OUTPUT\nEND\n\ncat >Makefile.am <<'END'\nlib_LTLIBRARIES = libfoo.la\nEND\n\ncat > libfoo.c <<'END'\nint foo (void)\n{\n  return 1;\n}\nEND\n\nlibtoolize\n# Skip if older libtool (pre-2.0) is used.\n{ $ACLOCAL && $AUTOCONF; } || {\n  if test $? -eq 63; then\n    skip_ \"libtool is too old (probably < 2.0)\"\n  else\n    exit 1\n  fi\n}\n$EGREP 'LT_(INIT|PREREQ)' configure && exit 1 # Sanity check.\n$AUTOMAKE -a\n\n./configure --prefix=\"$(pwd)/inst\" >stdout || { cat stdout; exit 1; }\ncat stdout\ngrep '^checking.*dlfcn\\.h.* no$' stdout || grep '^checking.*dlopen' stdout\n\n$MAKE\n$MAKE install\n$MAKE distcheck\n\n:\n",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/t/libtool7.sh": "#! /bin/sh\n# Copyright (C) 2003-2020 Free Software Foundation, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# Make sure we allow Libtool's -dlopen/-dlpreopen\n# Also check basic support for AM_LIBTOOLFLAGS/LIBTOOLFLAGS\n\nrequired='cc libtoolize'\n. test-init.sh\n\ncat >> configure.ac << 'END'\nAC_PROG_CC\nAM_PROG_AR\nAC_LIBTOOL_DLOPEN\nAM_PROG_LIBTOOL\nAC_OUTPUT\nEND\n\ncat > Makefile.am << 'END'\nAUTOMAKE_OPTIONS = subdir-objects\nAM_LIBTOOLFLAGS = --silent\nlib_LTLIBRARIES = libmod1.la mod2.la\nlibmod1_la_SOURCES = sub/mod1.c\nlibmod1_la_LDFLAGS = -module\nlibmod1_la_LIBADD = -dlopen mod2.la\nmod2_la_SOURCES = mod2.c\nmod2_la_LDFLAGS = -module\nmod2_la_LIBTOOLFLAGS =\n\nbin_PROGRAMS = prg\nprg_SOURCES = prg.c\nprg_LDADD = -dlopen libmod1.la -dlpreopen mod2.la\n\n.PHONY: print\nprint:\n\t@echo 1BEG: $(prg_DEPENDENCIES) :END1\n\t@echo 2BEG: $(libmod1_la_DEPENDENCIES) :END2\n\t@echo 3BEG: $(LTCOMPILE) :END3\nEND\n\nmkdir sub liba\n\ncat > sub/mod1.c << 'END'\nint mod1 (void)\n{\n   return 1;\n}\nEND\n\ncat > mod2.c << 'END'\nint mod2 (void)\n{\n   return 2;\n}\nEND\n\ncat > prg.c << 'END'\nint main (void)\n{\n   return 0;\n}\nEND\n\nlibtoolize --force --copy\n$ACLOCAL\n$AUTOCONF\n$AUTOMAKE --add-missing --copy\n\n./configure \"--prefix=$(pwd)/_inst\"\n\nrun_make -M print LIBTOOLFLAGS=--silent\ngrep '1BEG: libmod1.la mod2.la :END1' output\ngrep '2BEG: mod2.la :END2' output\ngrep '3BEG: .*silent.*silent.* :END3' output\ntest 2 -le $(grep mod2_la_LIBTOOLFLAGS Makefile | wc -l)\n\n$MAKE\n\nrun_make -M install LIBTOOLFLAGS=--silent\ngrep 'silent.*silent.*prg' output\ngrep 'silent.*silent.*libmod1' output\n\nrun_make -M uninstall LIBTOOLFLAGS=--silent\ngrep 'silent.*silent.*libmod1' output\n\n:\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/doc/amhello-1.0.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-automake-1.16.3-nnrqz4c4d7hzxfsk7ptcz75wdsxm5hgw/spack-src/old/ChangeLog.01"
    ],
    "total_files": 1498
}