{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cppad-develop-gvbvbe4v2b4wfynjalrrjhnrvcvcnyqi/spack-src/configure.ac": "# -----------------------------------------------------------------------------\n# CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-21 Bradley M. Bell\n#\n# CppAD is distributed under the terms of the\n#              Eclipse Public License Version 2.0.\n#\n# This Source Code may also be made available under the following\n# Secondary License when the conditions for such availability set forth\n# in the Eclipse Public License, Version 2.0 are satisfied:\n#       GNU General Public License, Version 2.0 or later.\n# -----------------------------------------------------------------------------\ndnl Process this file with autoconf to produce a configure script.\ndnl   package   version              bug-report\nAC_INIT([cppad], [20210208], [cppad@list.coin-or.org])\nAM_SILENT_RULES([no])\n\ndnl By defalut disable maintainer mode when running configure;\ndnl --enable-maintainer-mode will enable it.\ndnl This avoids the autoconf and automake tools being launched by make\nAM_MAINTAINER_MODE\n\ndnl Set the default install prefix to the installers home directory\nAC_PREFIX_DEFAULT(${HOME})\n\ndnl Run any macros required for proper operation of generated makefiles\ndnl Note this must come before AC_PROG_CC; see\ndnl http://lists.gnu.org/archive/html/automake/2010-08/msg00113.html\ndnl\ndnl nostdinc: Do not define standard include directories in generated makefiles\ndnl subdir-objects: create objects in sub-directories, same structure source\ndnl foreign: not GNU standard; no NEWS, AUTHORS, ...\nAM_INIT_AUTOMAKE([nostdinc subdir-objects -Wall foreign])\n\ndnl Have configure check source directory for the following file:\ndnl include/cppad/cppad.hpp\nAC_CONFIG_SRCDIR(include/cppad/cppad.hpp)\n\n# check if we have ar program and abort if it is not found\nAM_PROG_AR\n\ndnl -----------------------------------------------------------------------\ndnl The case where enable_msvc != no is defined and supported by Ted Ralphs\nAC_MSG_CHECKING([--enable-msvc])\nAC_ARG_ENABLE([msvc],\n    [AC_HELP_STRING([--enable-msvc],\n    [Prefer (i)cl/ifort/link over GNU on MinGW/Cygwin.])],\n    [enable_msvc=$enableval],\n    [enable_msvc=no]\n)\nAC_MSG_RESULT([$enable_msvc])\n\ndnl the prefix directory corresponding to CppAD -------------------------\ndnl The following seems to work but NONE is not in autoconf specifications\nAC_MSG_CHECKING([--prefix])\nif test \"$prefix\" = \"NONE\" ; then\n    AC_MSG_RESULT([$HOME])\nelse\n    AC_MSG_RESULT([$prefix])\nfi\n\ndnl Are we using standard vectors ----------------------------------------\nAC_MSG_CHECKING([--with-stdvector])\nAC_ARG_WITH(stdvector,\n    AC_HELP_STRING([--with-stdvector], [default is no]),\n    [stdvector=\"yes\"],\n    [stdvector=\"no\"]\n)\nif test \"$stdvector\" = \"yes\" ; then\n    AC_SUBST(cppad_stdvector, 1)\nelse\n    AC_SUBST(cppad_stdvector, 0)\nfi\nAC_MSG_RESULT([$stdvector])\n\ndnl Are we using boost vectors ----------------------------------------\nAC_MSG_CHECKING([--with-boostvector])\nAC_ARG_WITH(boostvector,\n    AC_HELP_STRING([--with-boostvector], [default is no]),\n    [boostvector=\"yes\"],\n    [boostvector=\"no\"]\n)\nAC_MSG_RESULT([$boostvector])\nif test \"$boostvector\" = \"yes\" ; then\n    if test \"$stdvector\" != \"no\" ; then\n        AC_MSG_ERROR([cannot --with both stdvector and boostvector])\n    fi\n    AC_SUBST(cppad_boostvector, 1)\nelse\n    AC_SUBST(cppad_boostvector, 0)\nfi\n\ndnl Are we using eigen vectors ----------------------------------------\nAC_MSG_CHECKING([--with-eigenvector])\nAC_ARG_WITH(eigenvector,\n    AC_HELP_STRING([--with-eigenvector], [default is no]),\n    [eigenvector=\"yes\"],\n    [eigenvector=\"no\"]\n)\nAC_MSG_RESULT([$eigenvector])\nif test \"$eigenvector\" = \"yes\" ; then\n    if test \"$stdvector\" != \"no\" ; then\n        AC_MSG_ERROR([cannot --with both stdvector and eigenvector])\n    fi\n    if test \"$boostvector\" != \"no\" ; then\n        AC_MSG_ERROR([cannot --with both boostvector and eigenvector])\n    fi\n    AC_SUBST(cppad_eigenvector, 1)\nelse\n    AC_SUBST(cppad_eigenvector, 0)\nfi\n\ndnl The postfix directiory corresponding to CppAD ------------------------\nAC_MSG_CHECKING([POSTFIX_DIR])\nAC_ARG_VAR(POSTFIX_DIR,\n    [postfix directory for CppAD installation]\n)\nAM_CONDITIONAL(CppAD_POSTFIX, test \"$POSTFIX_DIR\" != \"\")\nif test \"$POSTFIX_DIR\" != \"\" ; then\n    AC_MSG_RESULT([$POSTFIX_DIR])\nelse\n    AC_MSG_RESULT([no])\nfi\n\ndnl The prefix corresponding to the installation of Adolc ---------------\nAC_MSG_CHECKING([ADOLC_DIR])\nAC_ARG_VAR(ADOLC_DIR,\n    [value of configure prefix directory during Adolc install]\n)\nAM_CONDITIONAL(CppAD_ADOLC, test \"$ADOLC_DIR\" != \"\")\nif test \"$ADOLC_DIR\" != \"\" ; then\n    AC_MSG_RESULT([$ADOLC_DIR])\n    AC_SUBST(cppad_has_adolc, 1)\nelse\n    AC_MSG_RESULT([no])\n    AC_SUBST(cppad_has_adolc, 0)\nfi\n\ndnl The prefix corresponding to the installation of Eigen ---------------\nAC_MSG_CHECKING([EIGEN_DIR])\nAC_ARG_VAR(EIGEN_DIR,\n    [value of configure prefix directory during Eigen install]\n)\nAM_CONDITIONAL(CppAD_EIGEN, test \"$EIGEN_DIR\" != \"\")\nif test \"$EIGEN_DIR\" != \"\" ; then\n    AC_MSG_RESULT([$EIGEN_DIR])\n    AC_SUBST(EIGEN_INCLUDE, [-I$EIGEN_DIR/include])\n    AC_SUBST(cppad_has_eigen, 1)\nelse\n    AC_MSG_RESULT([no])\n    AC_SUBST(EIGEN_INCLUDE, [])\n    AC_SUBST(cppad_has_eigen, 0)\nfi\n\ndnl The directory corresponding to the installation of FADBAD -----------\nAC_MSG_CHECKING([FADBAD_DIR])\nAC_ARG_VAR(FADBAD_DIR,\n    [parent directory directly above FADBAD++ directory]\n)\nAM_CONDITIONAL(CppAD_FADBAD, test \"$FADBAD_DIR\" != \"\")\nif test \"$FADBAD_DIR\" != \"\" ; then\n    AC_MSG_RESULT([$FADBAD_DIR])\n    AC_SUBST(cppad_has_fadbad, 1)\nelse\n    AC_MSG_RESULT([no])\n    AC_SUBST(cppad_has_fadbad, 0)\nfi\n\ndnl The directory corresponding to the installation of SACADO -----------\nAC_MSG_CHECKING([SACADO_DIR])\nAC_ARG_VAR(SACADO_DIR,\n    [value of the configure prefix directory during Sacado install]\n)\nAM_CONDITIONAL(CppAD_SACADO, test \"$SACADO_DIR\" != \"\")\nif test \"$SACADO_DIR\" != \"\" ; then\n    AC_MSG_ERROR([CppAD autotools build no longer support sacado, use cmake])\nelse\n    AC_MSG_RESULT([no])\n    AC_SUBST(cppad_has_sacado, 0)\nfi\n\ndnl The directory corresponding to the installation of IPOPT -----------\nAC_MSG_CHECKING([IPOPT_DIR])\nAC_ARG_VAR(IPOPT_DIR,\n    [value of the configure prefix directory during Ipopt install]\n)\nAM_CONDITIONAL(CppAD_IPOPT, test \"$IPOPT_DIR\" != \"\")\nif test \"$IPOPT_DIR\" != \"\" ; then\n    AC_MSG_RESULT([$IPOPT_DIR])\n    AC_SUBST(cppad_has_ipopt, 1)\nelse\n    AC_MSG_RESULT([no])\n    AC_SUBST(cppad_has_ipopt, 0)\nfi\n\ndnl The directory corresponding to the installation of BOOST ------------\nAC_MSG_CHECKING([BOOST_DIR])\nAC_ARG_VAR(BOOST_DIR,\n    [parent directory directly above boost directory]\n)\nAM_CONDITIONAL(CppAD_BOOST_DIR, test \"$BOOST_DIR\" != \"\")\nif test \"$BOOST_DIR\" != \"\" ; then\n    AC_MSG_RESULT([$BOOST_DIR])\n    AC_SUBST(BOOST_INCLUDE, [-I$BOOST_DIR/include])\n    AC_SUBST(cppad_has_boost, 1)\nelse\n    AC_MSG_RESULT([no])\n    AC_SUBST(BOOST_INCLUDE,[])\n    AC_SUBST(cppad_has_boost, 0)\nfi\n\ndnl The C++ compiler flags CXX_FLAGS -------------------------------------\ndnl see AC_SUBST(CXXFLAGS, \"\") next to AC_PROG_CXX\n#\nAC_MSG_CHECKING([CXX_FLAGS])\nAC_ARG_VAR(CXX_FLAGS,\n    [ CXXFLAGS is ignored, use CXX_FLAGS for compiler flags]\n)\n# cxx_flags for fadbad and eigen\nif test \"$CXX_FLAGS\" != \"\" ; then\n    AC_MSG_RESULT([$CXX_FLAGS])\nelse\n    AC_MSG_RESULT([no])\nfi\n\ndnl The compiler OpenMP flags OPENMP_FLAGS ----------------------------------\nAC_MSG_CHECKING([OPENMP_FLAGS])\nAC_ARG_VAR(OPENMP_FLAGS,\n    [ flags that instruct compiler to interpret OpenMP directrives ]\n)\nif test \"$OPENMP_FLAGS\" != \"\" ; then\n    AC_MSG_RESULT([$OPENMP_FLAGS])\nelse\n    AC_MSG_RESULT([no])\nfi\nAM_CONDITIONAL(CppAD_OPENMP, test \"$OPENMP_FLAGS\" != \"\")\n\ndnl The compiler OpenMP flags MAX_NUM_THREADS -------------------------------\nAC_MSG_CHECKING([MAX_NUM_THREADS])\nAC_ARG_VAR(MAX_NUM_THREADS,\n    [ maximum number of threads that can be used with CppAD ]\n)\nif test \"$MAX_NUM_THREADS\" != \"\" ; then\n    AC_MSG_RESULT([$MAX_NUM_THREADS])\n    if test \"$MAX_NUM_THREADS\" -lt \"4\" ; then\n        AC_MSG_ERROR(\n            [ MAX_NUM_THREADS=$MAX_NUM_THREADS is less than 4 ]\n        )\n    fi\n    max_num_threads=\"$MAX_NUM_THREADS\"\nelse\n    max_num_threads=\"48\"\n    AC_MSG_RESULT([no, using default value $max_num_threads])\nfi\nAC_SUBST(cppad_max_num_threads, [$max_num_threads])\n\ndnl type used for addresses in AD tapes [ default = unsigned int ] -----------\nAC_MSG_CHECKING([TAPE_ADDR_TYPE])\nAC_ARG_VAR(TAPE_ADDR_TYPE, [type used for addresses in AD tapes])\nif test \"$TAPE_ADDR_TYPE\" == \"\" ; then\n    addr_t=\"unsigned int\"\nelse\n    addr_t=\"$TAPE_ADDR_TYPE\"\nfi\nAC_SUBST(cppad_tape_addr_type, [$addr_t])\nAC_MSG_RESULT([$addr_t])\nok=\"no\"\nif test \"$addr_t\" == \"size_t\" ; then\n    ok=\"yes\"\nfi\nif test \"$addr_t\" == \"int\" ; then\n    AC_MSG_WARN(\n        [TAPE_ADDR_TYPE=int is for CppAD developers (not users)]\n    )\n    ok=\"yes\"\nfi\nif test \"$addr_t\" == \"unsigned int\" ; then\n    ok=\"yes\"\nfi\nif test \"$addr_t\" == \"unsigned short int\" ; then\n    ok=\"yes\"\nfi\nif test \"$ok\" == \"no\" ; then\n    AC_MSG_ERROR(\n        [$addr_t is not a valid choice for TAPE_ADDR_TYPE]\n    )\nfi\n\ndnl type used for tape identifier [ default = unsigned int ] -----------\nAC_MSG_CHECKING([TAPE_ID_TYPE])\nAC_ARG_VAR(TAPE_ID_TYPE, [type used for addresses in AD tapes])\nif test \"$TAPE_ID_TYPE\" == \"\" ; then\n    tape_id_t=\"unsigned int\"\nelse\n    tape_id_t=\"$TAPE_ID_TYPE\"\nfi\nAC_SUBST(cppad_tape_id_type, [$tape_id_t])\nAC_MSG_RESULT([$tape_id_t])\nok=\"no\"\nif test \"$tape_id_t\" == \"size_t\" ; then\n    ok=\"yes\"\nfi\nif test \"$tape_id_t\" == \"int\" ; then\n    AC_MSG_WARN(\n        [TAPE_ID_TYPE=int is for CppAD developers (not users)]\n    )\n    ok=\"yes\"\nfi\nif test \"$tape_id_t\" == \"unsigned int\" ; then\n    ok=\"yes\"\nfi\nif test \"$tape_id_t\" == \"unsigned short int\" ; then\n    ok=\"yes\"\nfi\nif test \"$ok\" == \"no\" ; then\n    AC_MSG_ERROR(\n        [$tape_id_t is not a valid choice for TAPE_ID_TYPE]\n    )\nfi\nAC_MSG_NOTICE([********** End Checking Command Line arguments ***************])\n\ndnl --------------------------------------------------------------------------\nif test \"$enable_msvc\" == \"no\"\nthen\n    cxx_list=\"g++ clang++ CC pgCC icpc gpp cxx cc++\"\n    cc_list=\"gcc clang cc pgcc icc\"\n    fc_list=\"gfortran ifort g95 fort77 f77 g77 pgf90 pgf77 ifc frt af77\"\nelse\n    dnl This case defined and supported by Ted Ralphs\n    cxx_list=\"icl cl g++\"\n    cc_list=\"icl cl gcc\"\n    fc_list=\"ifort gfortran\"\nfi\ndnl --------------------------------------------------------------------------\n\ndnl AC_PROG_CXX([compiler-search-list]) outputs CXX as C++ compiler to use\nAC_PROG_CXX([$cxx_list])\ndnl erase any setting of CXXFLAGS, see CXX_FLAGS documentation\nAC_SUBST(CXXFLAGS, \"\")\n\ndnl AC_PROG_CC([compiler-search-list]) outputs CC as C++ compiler to use\nAC_PROG_CC([$cc_list])\ndnl erase any setting of CFLAGS\nAC_SUBST(CFLAGS, \"\")\n\ndnl AC_PROG_FC ([compiler-search-list], [dialect])\nAC_PROG_FC([$fc_list])\ndnl not compiling any fortran so no need to touch flags\n\ndnl Check for pkgconfig\nAC_CHECK_PROG(have_pkg_config, [pkg-config], [yes], [no])\nAM_CONDITIONAL(CppAD_PKG_CONFIG, test \"$have_pkg_config\" = \"yes\")\ndnl --------------------------------------------------------------------------\ndnl If the compiler does not support -c -o, wrap it with the compile script.\nAC_PROG_CXX_C_O\nif test $ac_cv_prog_cxx_c_o = no ; then\n   CXX=\"$am_aux_dir/compile $CXX\"\nfi\ndnl -------------------------------------------------------------------------\ndnl Setting that cmake finds but autotools not kept up to date on\nAC_SUBST(cppad_cxx_flags, \"\")\nAC_SUBST(cppad_has_colpack, 0)\nAC_SUBST(cppad_has_mkstemp, 0)\nAC_SUBST(cppad_has_tmpnam_s, 0)\nAC_SUBST(compiler_has_conversion_warn, 0)\n\ndnl -------------------------------------------------------------------------\ndnl Determine which definition we are using for CPPAD_TESTVECTOR\nif test \"$stdvector$boostvector$eigenvector\" = \"nonono\" ; then\n    AC_SUBST(cppad_cppadvector, 1)\nelse\n    AC_SUBST(cppad_cppadvector, 0)\nfi\n\ndnl the gettimeofday check automatically generates a yes / no configure msg\nAC_CHECK_FUNC(\n    gettimeofday,\n    [gettimeofday=\"yes\"],\n    [gettimeofday=\"no\"]\n)\nif test \"$gettimeofday\" = \"yes\" ; then\n    AC_SUBST(cppad_has_gettimeofday, 1)\nelse\n    AC_SUBST(cppad_has_gettimeofday, 0)\nfi\n\ndnl Use LIBTOOL for cppad_ipopt ?\ndnl AC_PROG_LIBTOOL\n\ndnl Determine if ranlib is present and where it is if present (set RANLIB)\nAC_PROG_RANLIB\n\nAC_MSG_CHECKING([whether using Microsoft C++ compiler])\nAM_CONDITIONAL(CppAD_MS_COMPILER, test \"$CXX\" == \"cl\" || test \"$CXX\" == \"icl\")\nif test \"$CXX\" == \"cl\" || test \"$CXX\" == \"icl\"; then\n    AC_MSG_RESULT([yes])\nelse\n    AC_MSG_RESULT([no])\nfi\n\ndnl AC_PROG_CP outputs CPP as command to run C preprocessor\nAC_PROG_CPP\n\ndnl Do nothing if complier supports inline, otherwise try to find a subsitute\ndnl definition or, if cannot, define inline as empty\nAC_C_INLINE\n\ndnl determine FCLIBS, flags necessary for linking C++ with modern fortran\nAC_FC_LIBRARY_LDFLAGS\n\ndnl absolute path corresponding to top_builddig and top_srcdir in makefile.am\ndnl (used by cppad-uninstalled.pc.in).\nabs_top_builddir=`pwd`\nAC_SUBST(ABS_TOP_BUILDDIR, \"$abs_top_builddir\")\nabs_top_srcdir=`cd $srcdir ; pwd`\nAC_SUBST(ABS_TOP_SRCDIR, \"$abs_top_srcdir\")\ndnl --------------------------------------------------------------------------\ndnl Check for C libraries\n\ndnl check for pthread library\nAC_CHECK_LIB(\n    [pthread],\n    [pthread_barrier_wait],\n    [pthread=\"yes\"],\n    [pthread=\"no\"]\n)\nAM_CONDITIONAL(CppAD_PTHREAD, test \"$pthread\" = \"yes\")\nif test \"$pthread\" == \"yes\" ; then\n    AC_SUBST(PTHREAD_LIB,\"-lpthread\")\nelse\n    AC_SUBST(PTHREAD_LIB,\"\")\nfi\n\ndnl check for dl library\nAC_SUBST(DL_LIB, \"\")\nAC_CHECK_LIB(\n    [dl],\n    [dlopen],\n    [DL_LIB=\"-ldl\"],\n    [DL_LIB=\"\"]\n)\ndnl --------------------------------------------------------------------------\ndnl check for boost thread library\nAC_LANG_PUSH([C++])\nLDFLAGS_save=$LDFLAGS\nCXXFLAGS_save=$CXXFLAGS\nboost_thread_found='no'\nif test \"$BOOST_DIR\" != '' ; then\n    CXXFLAGS=\"-I$BOOST_DIR/include $CXXFLAGS\"\nfi\nif test \"$BOOST_DIR\" == '' && test \"$boost_thread_found\" == 'no' ; then\n    bthread_lib='-lboost_thread-mt'\n    LDFLAGS=\"$LDFLAGS_save $bthread_lib\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(\n            [# include <boost/thread.hpp>],\n            [boost::barrier wait(1);]\n        )],\n        [boost_thread_found='yes'],\n        [boost_thread_found='no']\n    )\nfi\nif test \"$BOOST_DIR\" != '' && test \"$boost_thread_found\" == 'no' ; then\n    bthread_lib=\"$BOOST_DIR/lib/libboost_thread-mt.so\"\n    LDFLAGS=\"$LDFLAGS_save $bthread_lib\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(\n            [# include <boost/thread.hpp>],\n            [boost::barrier wait(1);]\n        )],\n        [boost_thread_found='yes'],\n        [boost_thread_found='no']\n    )\nfi\nif test \"$BOOST_DIR\" != '' && test \"$boost_thread_found\" == 'no' ; then\n    bthread_lib=\"$BOOST_DIR/lib/libboost_thread-mt.a\"\n    LDFLAGS=\"$LDFLAGS_save $bthread_lib\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(\n            [# include <boost/thread.hpp>],\n            [boost::barrier wait(1);]\n        )],\n        [boost_thread_found='yes'],\n        [boost_thread_found='no']\n    )\nfi\nif test \"$BOOST_DIR\" == '' && test \"$boost_thread_found\" == 'no' ; then\n    bthread_lib='-lboost_thread'\n    LDFLAGS=\"$LDFLAGS_save $bthread_lib\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(\n            [# include <boost/thread.hpp>],\n            [boost::barrier wait(1);]\n        )],\n        [boost_thread_found='yes'],\n        [boost_thread_found='no']\n    )\nfi\nif test \"$BOOST_DIR\" != '' && test \"$boost_thread_found\" == 'no' ; then\n    bthread_lib=\"$BOOST_DIR/lib/libboost_thread.so\"\n    LDFLAGS=\"$LDFLAGS_save $bthread_lib\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(\n            [# include <boost/thread.hpp>],\n            [boost::barrier wait(1);]\n        )],\n        [boost_thread_found='yes'],\n        [boost_thread_found='no']\n    )\nfi\nif test \"$BOOST_DIR\" != '' && test \"$boost_thread_found\" == 'no' ; then\n    bthread_lib=\"$BOOST_DIR/lib/libboost_thread.a\"\n    LDFLAGS=\"$LDFLAGS_save $bthread_lib\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(\n            [# include <boost/thread.hpp>],\n            [boost::barrier wait(1);]\n        )],\n        [boost_thread_found='yes'],\n        [boost_thread_found='no']\n    )\nfi\nAM_CONDITIONAL(CppAD_BTHREAD, test \"$boost_thread_found\" = 'yes')\nif test \"$boost_thread_found\" == 'yes' ; then\n    AC_SUBST(BTHREAD_LIB,\"$bthread_lib\")\n    AC_MSG_RESULT([boost::thread library... yes])\nelse\n    AC_SUBST(BTHREAD_LIB,'')\n    AC_MSG_RESULT([boost::thread library... no])\nfi\nLDFLAGS=$LDFLAGS_save\nCXXFLAGS=$CXXFLAGS_save\nAC_LANG_POP([C++])\n#\ndnl --------------------------------------------------------------------------\ndnl Library directories\nif test -e $IPOPT_DIR/lib/coin ; then\n    IPOPT_LIBS=\"-L $IPOPT_DIR/lib/coin -L $IPOPT_DIR/lib/coin-or/ThirdParty\"\n    IPOPT_LD_PATH=\"$IPOPT_DIR/lib/coin:$IPOPT_DIR/lib/coin-or/ThirdParty\"\nelse\n    IPOPT_LIBS=\"-L $IPOPT_DIR/lib\"\n    IPOPT_LD_PATH=\"$IPOPT_DIR/lib\"\nfi\nAC_SUBST(CPPAD_IPOPT_LD_PATH, \"$IPOPT_LD_PATH\")\n#\nAC_SUBST(CPPAD_IPOPT_LIBS, \"$IPOPT_LIBS -lipopt\")\nif test \"$have_pkg_config\" == \"yes\"; then\n    dnl set CPPAD_IPOPT_LIBS\n    PKG_CONFIG_PATH=\"$IPOPT_DIR/lib/pkgconfig:$IPOPT_DIR/share/pkgconfig\"\n    PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH:$IPOPT_DIR/lib64/pkgconfig\"\n    export PKG_CONFIG_PATH\n    if pkg-config --libs ipopt >& /dev/null ; then\n        CPPAD_IPOPT_LIBS=`pkg-config --libs ipopt`\n    else\n        dnl check for blas library\n        AC_LANG_PUSH([Fortran])\n        AC_CHECK_LIB(\n            [blas],\n            [ddot],\n            [CPPAD_IPOPT_LIBS=\"$CPPAD_IPOPT_LIBS -lblas\"],\n        )\n        dnl check for lapack library\n        AC_CHECK_LIB(\n            [lapack],\n            [dgesv],\n            [CPPAD_IPOPT_LIBS=\"$CPPAD_IPOPT_LIBS -llapack\"],\n        )\n        AC_LANG_POP([Fortran])\n    fi\nelse\n    dnl check for blas library\n    AC_LANG_PUSH([Fortran])\n    AC_CHECK_LIB(\n        [blas],\n        [ddot],\n        [CPPAD_IPOPT_LIBS=\"$CPPAD_IPOPT_LIBS -lblas\"],\n    )\n    dnl check for lapack library\n    AC_CHECK_LIB(\n        [lapack],\n        [dgesv],\n        [CPPAD_IPOPT_LIBS=\"$CPPAD_IPOPT_LIBS -llapack\"],\n    )\n    AC_LANG_POP([Fortran])\nfi\nAC_MSG_RESULT([cppad_ipopt_nlp libraries: $CPPAD_IPOPT_LIBS])\ndnl --------------------------------------------------------------------------\ndnl Set the values of the names needed by the files\ndnl pkgconfig/cppad.pc.in and pkgconfig/cppad-uninstalled.pc.in.\ndnl\ndnl These settings are an attempt to be the same as in CMakeLists.txt\ndnl and pkgconfig/CMakeLists.txt with the following restrictions:\ndnl 1. The default prefix for the autoconf install is $HOME.\ndnl 2. autoconf configuration does not allow for Colpack.\ndnl 3. Assume that libraries are being installed in prefix/lib.\ndnl 4. Only install pkgconfig files below prefix/lib (not in datadir).\ndnl\ndnl cppad_description\nAC_SUBST(cppad_description, \"Differentiation of C++ Algorithms\")\ndnl\ndnl cppad_version\nAC_SUBST(cppad_version, ${PACKAGE_VERSION} )\ndnl\ndnl cppad_url\nAC_SUBST(cppad_url, \"http://www.coin-or.org/CppAD\")\ndnl\ndnl cppad_pkgconfig_cflags_uninstalled\nAC_SUBST(cppad_pkgconfig_cflags_uninstalled, \"-I$abs_top_srcdir\")\ndnl\ndnl cppad_pkgconfig_cflags\nif test \"$prefix\" == \"NONE\" ; then\n    value=\"-I$HOME/include\"\nelse\n    value=\"-I$prefix/include\"\nfi\nif test \"$POSTFIX_DIR\" != \"\" ; then\n    value=\"$value/$POSTFIX_DIR\"\nfi\nAC_SUBST(cppad_pkgconfig_cflags, \"$value\")\ndnl\ndnl cppad_pkgconfig_libs_uninstalled\nif test \"$IPOPT_DIR\" == \"\" ; then\n    value=\"\"\nelse\n    value=\"-L$abs_top_builddir/cppad_ipopt/src -lcppad_ipopt\"\nfi\nAC_SUBST(cppad_pkgconfig_libs_uninstalled, \"$value\")\ndnl\ndnl cppad_pkgconfig_libs\nif test \"$prefix\" == \"NONE\" ; then\n    value=\"-L$HOME/lib\"\nelse\n    value=\"-L$prefix/lib\"\nfi\nif test \"$POSTFIX_DIR\" != \"\" ; then\n    value=\"$value/$POSTFIX_DIR\"\nfi\nif test \"$IPOPT_DIR\" == \"\" ; then\n    value=\"\"\nelse\n    value=\"$value -lcppad_ipopt\"\nfi\nAC_SUBST(cppad_pkgconfig_libs, \"$value\")\ndnl\ndnl cppad_pkgconfig_requires\ndnl cppad_pkgconfig_requires_uninstalled\nif test \"$IPOPT_DIR\" == \"\" ; then\n    value=\"\"\nelse\n    value=\"ipopt\"\nfi\nAC_SUBST(cppad_pkgconfig_requires, \"$value\")\nAC_SUBST(cppad_pkgconfig_requires_uninstalled, \"$value\")\ndnl\ndnl -------------------------------------------------------------------------\ndnl names set here so */test_one.sh.in works both with cmake and autoconf\ndnl (no longer used ?)\nAC_SUBST(adolc_prefix,      ${ADOLC_DIR} )\nAC_SUBST(eigen_prefix,      ${EIGEN_DIR} )\nAC_SUBST(ipopt_prefix,      ${IPOPT_DIR} )\ndnl\ndnl -----------------------------------------------------------------------\ndnl AC_CONFIG_FILES(file-list) for each file in the list, configure will\ndnl read file.in, do its substitutions, and create file\nAC_CONFIG_FILES([\n    include/cppad/configure.hpp\n    cppad_ipopt/example/test.sh\n    cppad_ipopt/speed/test.sh\n    cppad_ipopt/test/test.sh\n    example/ipopt_solve/test.sh\n    pkgconfig/cppad.pc\n    pkgconfig/cppad-uninstalled.pc\n\n    makefile\n    cppad_ipopt/src/makefile\n    cppad_ipopt/example/makefile\n    cppad_ipopt/speed/makefile\n    cppad_ipopt/test/makefile\n    cppad_lib/makefile\n    example/general/makefile\n    example/abs_normal/makefile\n    example/atomic_two/makefile\n    example/atomic_three/makefile\n    example/chkpoint_two/makefile\n    example/ipopt_solve/makefile\n    example/optimize/makefile\n    example/sparse/makefile\n    example/utility/makefile\n    example/get_started/makefile\n    include/makefile\n    introduction/makefile\n    example/multi_thread/makefile\n    example/print_for/makefile\n    speed/adolc/makefile\n    speed/cppad/makefile\n    speed/double/makefile\n    speed/example/makefile\n    speed/fadbad/makefile\n    speed/sacado/makefile\n    speed/src/makefile\n    speed/xpackage/makefile\n    test_more/compare_c/makefile\n    test_more/general/makefile\n    test_more/deprecated/makefile\n    test_more/deprecated/atomic_two/makefile\n    test_more/deprecated/chkpoint_one/makefile\n])\ndnl END AC_CONFIG_FILES\n\ndnl copy config.hpp to source directory\nAC_CONFIG_COMMANDS(\n    [configure.hpp],\n    [cp include/cppad/configure.hpp  \\\n        $abs_top_srcdir/include/cppad/configure.hpp],\n[abs_top_srcdir=$abs_top_srcdir]\n)\ndnl scripts that set library path before running test\nAC_CONFIG_COMMANDS(\n    [example_ipopt_solve_test.sh],\n    [chmod +x example/ipopt_solve/test.sh],\n    []\n)\nAC_CONFIG_COMMANDS(\n    [cppad_ipopt_example_test.sh],\n    [chmod +x cppad_ipopt/example/test.sh],\n    []\n)\nAC_CONFIG_COMMANDS(\n    [cppad_ipopt_speed_test.sh],\n    [chmod +x cppad_ipopt/speed/test.sh],\n    []\n)\nAC_CONFIG_COMMANDS(\n    [cppad_ipopt_test_test.sh],\n    [chmod +x cppad_ipopt/test/test.sh],\n    []\n)\n\ndnl create all the requested output files\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-cppad-develop-gvbvbe4v2b4wfynjalrrjhnrvcvcnyqi/spack-src/speed/sacado/CMakeLists.txt": "# -----------------------------------------------------------------------------\n# CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-20 Bradley M. Bell\n#\n# CppAD is distributed under the terms of the\n#              Eclipse Public License Version 2.0.\n#\n# This Source Code may also be made available under the following\n# Secondary License when the conditions for such availability set forth\n# in the Eclipse Public License, Version 2.0 are satisfied:\n#       GNU General Public License, Version 2.0 or later.\n# -----------------------------------------------------------------------------\n# Build the speed/sacado directory tests\n# Inherit build type from ../CMakeList.txt\n\n# assert sacado_prefix is defined\nassert( sacado_prefix )\n\n# Adds flags to the compiler command line for sources in the current directory\n# and below. This command can be used to add any flags, but it was originally\n# intended to add preprocessor definitions.\nADD_DEFINITIONS(\"-DCPPAD_SACADO_SPEED -DRAD_AUTO_AD_Const\")\n\n# Local include directories to search (not in package_prefix/includdir)\nINCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR}/../src )\n\n# add_executable(<name> [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL]\n#                 source1 source2 ... sourceN\n# )\nSET(source_list ../main.cpp\n    det_lu.cpp\n    det_minor.cpp\n    mat_mul.cpp\n    ode.cpp\n    poly.cpp\n    sparse_hessian.cpp\n    sparse_jacobian.cpp\n)\nset_compile_flags( speed_sacado \"${cppad_debug_which}\" \"${source_list}\" )\n#\nADD_EXECUTABLE( speed_sacado EXCLUDE_FROM_ALL ${source_list} )\n\n# determine libraries necessary to link Sacado\nSET(config_file \"${sacado_prefix}/include/Makefile.export.Sacado\")\nIF(NOT EXISTS ${config_file})\n    MESSAGE(FATAL_ERROR\n\"the file sacado_prefix/include/Makefile.export.Sacado does not exist\nwhere sacado_prefix=${sacado_prefix}\"\n    )\nENDIF(NOT EXISTS ${config_file})\nSET(cmd \"grep\" \"Sacado_LIBRARIES=\" \"${config_file}\")\nEXECUTE_PROCESS(\n    COMMAND         ${cmd}\n    OUTPUT_VARIABLE temp1\n)\nSTRING(REGEX REPLACE \"Sacado_LIBRARIES= *-l\" \"\" temp2  ${temp1})\nSTRING(STRIP ${temp2} temp3)\nSTRING(REGEX REPLACE \" *-l\" \";\" sacado_lib_list ${temp3})\n#\n# include the dl library if it is in the system path\nCHECK_LIBRARY_EXISTS( dl dlopen \"${CMAKE_SYSTEM_LIBRARY_PATH}\" dl_found )\nIF( dl_found )\n    TARGET_LINK_LIBRARIES(speed_sacado speed_src ${sacado_lib_list} dl)\nELSE( dl_found )\n    TARGET_LINK_LIBRARIES(speed_sacado speed_src ${sacado_lib_list})\nENDIF( dl_found )\n#\n# Add the check_speed_sacado target\nADD_CUSTOM_TARGET(check_speed_sacado\n    speed_sacado correct 54321\n    DEPENDS speed_sacado speed_src\n)\nMESSAGE(STATUS \"make check_speed_sacado: available\")\n\n# Change check depends in parent environment\nadd_to_list(check_speed_depends check_speed_sacado)\nSET(check_speed_depends \"${check_speed_depends}\" PARENT_SCOPE)\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cppad-develop-gvbvbe4v2b4wfynjalrrjhnrvcvcnyqi/spack-src/coin.png",
        "/tmp/vanessa/spack-stage/spack-stage-cppad-develop-gvbvbe4v2b4wfynjalrrjhnrvcvcnyqi/spack-src/.git/objects/pack/pack-cd43efb5fd906073d5210815f42725b1a23da941.idx",
        "/tmp/vanessa/spack-stage/spack-stage-cppad-develop-gvbvbe4v2b4wfynjalrrjhnrvcvcnyqi/spack-src/.git/objects/pack/pack-cd43efb5fd906073d5210815f42725b1a23da941.pack"
    ],
    "total_files": 1308
}