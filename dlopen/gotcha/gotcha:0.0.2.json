{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-gotcha-0.0.2-5oropja5g7oso3j6hsajbw3jywmnxfk7/spack-src/.travis.yml": "sudo: required\ndist: trusty\nlanguage: c\n\nmatrix:\n  include:\n   - compiler: gcc-4\n     addons:\n       apt:\n         sources:\n           - ubuntu-toolchain-r-test\n         packages:\n           - g++-4.9\n           - check\n     env: COMPILER=gcc-4.9\n   - compiler: gcc-5\n     addons:\n       apt:\n         sources:\n           - ubuntu-toolchain-r-test\n         packages:\n           - g++-5\n           - check\n     env: COMPILER=gcc-5\n   - compiler: gcc-6\n     addons:\n       apt:\n         sources:\n           - ubuntu-toolchain-r-test\n         packages:\n           - g++-6\n           - check\n     env: COMPILER=gcc-6\n         - CMAKE_EXTRA_FLAGS=\"-DCMAKE_EXE_LINKER_FLAGS='-coverage' -DCMAKE_C_FLAGS='-coverage'\"\n         - COVERAGE=t\n   - compiler: clang-3.6\n     addons:\n       apt:\n         sources:\n           - ubuntu-toolchain-r-test\n         packages:\n           - g++-5\n           - check\n     env: \n         - COMPILER=$HOME/llvm/clang+llvm-3.6.0-x86_64-linux-gnu/bin/clang\n         - DOWNLOAD=http://releases.llvm.org/3.6.0/clang+llvm-3.6.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n   - compiler: clang-3.7\n     addons:\n       apt:\n         sources:\n           - ubuntu-toolchain-r-test\n         packages:\n           - g++-5\n           - check\n     env: \n         - COMPILER=$HOME/llvm/clang+llvm-3.7.0-x86_64-linux-gnu-ubuntu-14.04/bin/clang\n         - DOWNLOAD=http://releases.llvm.org/3.7.0/clang+llvm-3.7.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n   - compiler: clang-3.8\n     addons:\n       apt:\n         sources:\n           - ubuntu-toolchain-r-test\n         packages:\n           - g++-5\n           - check\n     env: \n         - COMPILER=$HOME/llvm/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04/bin/clang\n         - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/llvm/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04/lib\n         - DOWNLOAD=http://releases.llvm.org/3.8.0/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\ncache:\n    directories:\n        - $HOME/llvm\nbefore_install:\n  - sudo apt-get update -qq\n  - if [[ -n \"$DOWNLOAD\" ]] ; then if [[ ! -e \"$COMPILER\" ]] ; then cd $HOME; curl -o tarball.tar.xz $DOWNLOAD && cd $HOME/llvm && tar xf $HOME/tarball.tar.xz ; fi ; fi\n  - CMAKE_URL=\"https://cmake.org/files/v3.7/cmake-3.7.0-rc2-Linux-x86_64.tar.gz\"\n  - cd $HOME && curl -o cmake-tarball.tar.gz ${CMAKE_URL} && mkdir -p $HOME/cmake && cd $HOME/cmake && tar xf $HOME/cmake-tarball.tar.gz --strip-components=1 && export PATH=${PWD}/bin:${PATH}\nscript:\n  - cd $TRAVIS_BUILD_DIR\n  - mkdir travis-build && cd travis-build\n  - cmake -DDEPENDENCIES_PREINSTALLED=ON -DCMAKE_C_COMPILER=\"$COMPILER\" -DGOTCHA_ENABLE_TESTS=TRUE $CMAKE_EXTRA_FLAGS ../\n  - make -j VERBOSE=1\n  - ctest --verbose -E dlopen\nafter_success:\n  - if [[ -n \"${COVERAGE}\" ]] ; then bash <(curl -s https://codecov.io/bash) ; fi\n",
        "/tmp/vanessa/spack-stage/spack-stage-gotcha-0.0.2-5oropja5g7oso3j6hsajbw3jywmnxfk7/spack-src/README.md": "GOTCHA v0.0.2 (alpha)\n============\n\n[![Build Status](https://travis-ci.org/LLNL/GOTCHA.svg?branch=master)](https://travis-ci.org/LLNL/GOTCHA)\n[![Coverage](https://img.shields.io/codecov/c/github/LLNL/GOTCHA/master.svg)](https://codecov.io/gh/LLNL/GOTCHA)\n\n\nGotcha is a library that wraps functions.  Tools can use gotcha to install hooks into other libraries, for example putting a wrapper function around libc's malloc.  \nIt is similar to LD_PRELOAD, but operates via a programable API.\nThis enables easy methods of accomplishing tasks like code instrumentation or wholesale replacement of mechanisms in programs\nwithout disrupting their source code.\n\nThis release of Gotcha is alpha software.  It should not be used in production, and there are numerous known issues that\nstill need to be fixed:\n\n  * \"Stacking,\" or having several tools each use Gotcha to wrap the same function. We eventually want to allow this,\n    and to have an API in which the order in which wrappers execute is configurable, but we aren't there\n    yet.\n  * Gotcha can be made to sabotage itself if it destructively replaces any functions that it relies on.\n  * Gotcha is not yet performant on applications with many shared libraries.\n  * Gotcha does not yet support dlopen, either wrapping symbols looked up by dlsym or modifying dlopen'd libraries.\n  * Full user docs. Right now you have this README, my email (poliakoff1@llnl.gov) and Doxygen as options for understanding the software. This is meant to be productized software, in the future we hope to give you better documentation resources.\n  * Automated wrapper generation. We have a pre-alpha Clang compiler plugin for generating libraries which use Gotcha\n    to wrap all the functions in a header file. We hope in the future to automate some of the scut work in Gotcha use\n\nQuick Start\n-----------\n\n*Building Gotcha* is trivial. In the root directory of the repo\n\n```\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX = <where you want the sofware> ..\nmake install\n```\n*Usage* is fairly simple. For us to wrap a function, we need to know its name, what you want it wrapped with (the wrapper), and we need to give you some ability to call the function you wrapped (wrappee). Gotcha works on triplets containing this information. We have [small sample uses](src/example/autotee/autotee.c), but the standard workflow looks like\n\n\n```\n  #include <gotcha/gotcha.h>\n  static int (*wrappee_puts)(const char*); //this lets you call the original\n  static int puts_wrapper(const char* str); //this is the declaration of your wrapper\n  static int (*wrappee_fputs)(const char*, FILE*);\n  static int fputs_wrapper(const char* str, FILE* f);\n  struct gotcha_binding_t wrap_actions [] = {\n    { \"puts\", puts_wrapper, &wrappee_puts },\n    { \"fputs\", fputs_wrapper, &wrappee_fputs },\n  };\n  int init_mytool(){\n    gotcha_wrap(wrap_actions, sizeof(wrap_actions)/sizeof(struct gotcha_binding_t), \"my_tool_name\");\n  }\n  static int fputs_wrapper(const char* str, FILE* f){\n    // insert clever tool logic here\n    return wrappee_fputs(str, f); //wrappee_fputs was directed to the original fputs by gotcha_wrap\n  }\n\n```\n\n*Building your tool* changes little, you just need to add the prefix you installed Gotcha to your include directories, the location\nthe library was installed (default is <that_prefix>/lib) to your library search directories (-L...), and link\nlibgotcha.so (-lgotcha) with your tool. Very often this becomes \"add -lgotcha to your link line,\" and nicer CMake integration is coming down the pipe.\n\nThat should represent all the work your application needs to do to use Gotcha\n\nContact/Legal\n-----------\n\nThe license is [LGPL](LGPL).\n\nPrimary contact/Lead developer\n\nDavid Poliakoff (poliakoff1@llnl.gov)\n\nOther developers\n\nMatt Legendre  (legendre1@llnl.gov)\n",
        "/tmp/vanessa/spack-stage/spack-stage-gotcha-0.0.2-5oropja5g7oso3j6hsajbw3jywmnxfk7/spack-src/test/CMakeLists.txt": "include(CheckCXXCompilerFlag)\nadd_subdirectory(rogot)\nadd_subdirectory(unit)\nadd_subdirectory(dlopen)\nCHECK_CXX_COMPILER_FLAG(\"-std=c++11\" COMPILER_SUPPORTS_CXX11)\nif(COMPILER_SUPPORTS_CXX11)\nadd_subdirectory(hammer)\nendif()\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-gotcha-0.0.2-5oropja5g7oso3j6hsajbw3jywmnxfk7/spack-src/test/dlopen/test_dlopen.c": "/*\nThis file is part of GOTCHA.  For copyright information see the COPYRIGHT\nfile in the top level directory, or at\nhttps://github.com/LLNL/gotcha/blob/master/COPYRIGHT\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU Lesser General Public License (as published by the Free\nSoftware Foundation) version 2.1 dated February 1999.  This program is\ndistributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\nwithout even the IMPLIED WARRANTY OF MERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE. See the terms and conditions of the GNU Lesser General Public License\nfor more details.  You should have received a copy of the GNU Lesser General\nPublic License along with this program; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n*/\n\n#include <dlfcn.h>\n#include <stdio.h>\n#include \"gotcha/gotcha.h\"\n\nint correct_return_four()\n{\n   return 4;\n}\n\nint return_five() \n{\n   /* Intentional bug, gotcha will correct this to return 5*/\n   return 3;\n}\n\nint correct_return_five()\n{\n   return 5;\n}\n\nstatic int (*buggy_return_four)(void);\nstatic int (*buggy_return_five)(void);\n\nstruct gotcha_binding_t funcs[] = {\n   { \"return_four\", correct_return_four, &buggy_return_four },\n   { \"return_five\", correct_return_five, &buggy_return_five }\n};\n\nint main(int argc, char *argv[])\n{\n   void *libnum;\n   int (*retfour)(void);\n   int (*test_retfive)(void);\n   int had_error = 0;\n   int result;\n\n   result = gotcha_wrap(funcs, 2, \"dlopen_test\");\n   if (result != 0) {\n      fprintf(stderr, \"ERROR: gotcha_wrap returned error code %d\\n\", result);\n      return -1;\n   }\n\n   libnum = dlopen(\"libnum.so\", RTLD_NOW);\n   if (!libnum) {\n      fprintf(stderr, \"ERROR: Test failed to dlopen libnum.so\\n\");\n      return -1;\n   }\n\n   /* Test 1: Check if a dlsym generated indirect call gets re-routed by gotcha */\n   retfour = (int (*)(void)) dlsym(libnum, \"return_four\");\n   if (retfour() != 4) {\n      fprintf(stderr, \"ERROR: dlsym returned original function, not wrapped\\n\");\n      had_error = -1;\n   }\n\n   /* Test 2: Does a call in a dlopen'd library get rerouted by gotcha */\n   test_retfive = (int (*)(void)) dlsym(libnum, \"test_return_five\");\n   if (test_retfive() != 5) {\n      fprintf(stderr, \"ERROR: call to return_five in libnum.so was not wrapped by correct_return_five\\n\");\n      had_error = -1;\n   }\n\n   return had_error;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gotcha-0.0.2-5oropja5g7oso3j6hsajbw3jywmnxfk7/spack-src/test/dlopen/CMakeLists.txt": "add_library(num SHARED num.c)\nadd_executable(test_dlopen test_dlopen.c)\ntarget_link_libraries(test_dlopen gotcha dl)\ngotcha_add_test(dlopen_test test_dlopen)\n"
    },
    "skipped": [],
    "total_files": 64
}