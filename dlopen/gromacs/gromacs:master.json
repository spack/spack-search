{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/python_packaging/src/external/pybind/include/pybind11/detail/internals.h": "/*\n    pybind11/detail/internals.h: Internal data structure and related functions\n\n    Copyright (c) 2017 Wenzel Jakob <wenzel.jakob@epfl.ch>\n\n    All rights reserved. Use of this source code is governed by a\n    BSD-style license that can be found in the LICENSE file.\n*/\n\n#pragma once\n\n#include \"../pytypes.h\"\n\nNAMESPACE_BEGIN(PYBIND11_NAMESPACE)\nNAMESPACE_BEGIN(detail)\n// Forward declarations\ninline PyTypeObject *make_static_property_type();\ninline PyTypeObject *make_default_metaclass();\ninline PyObject *make_object_base_type(PyTypeObject *metaclass);\n\n// The old Python Thread Local Storage (TLS) API is deprecated in Python 3.7 in favor of the new\n// Thread Specific Storage (TSS) API.\n#if PY_VERSION_HEX >= 0x03070000\n#    define PYBIND11_TLS_KEY_INIT(var) Py_tss_t *var = nullptr\n#    define PYBIND11_TLS_GET_VALUE(key) PyThread_tss_get((key))\n#    define PYBIND11_TLS_REPLACE_VALUE(key, value) PyThread_tss_set((key), (value))\n#    define PYBIND11_TLS_DELETE_VALUE(key) PyThread_tss_set((key), nullptr)\n#    define PYBIND11_TLS_FREE(key) PyThread_tss_free(key)\n#else\n    // Usually an int but a long on Cygwin64 with Python 3.x\n#    define PYBIND11_TLS_KEY_INIT(var) decltype(PyThread_create_key()) var = 0\n#    define PYBIND11_TLS_GET_VALUE(key) PyThread_get_key_value((key))\n#    if PY_MAJOR_VERSION < 3\n#        define PYBIND11_TLS_DELETE_VALUE(key)                               \\\n             PyThread_delete_key_value(key)\n#        define PYBIND11_TLS_REPLACE_VALUE(key, value)                       \\\n             do {                                                            \\\n                 PyThread_delete_key_value((key));                           \\\n                 PyThread_set_key_value((key), (value));                     \\\n             } while (false)\n#    else\n#        define PYBIND11_TLS_DELETE_VALUE(key)                               \\\n             PyThread_set_key_value((key), nullptr)\n#        define PYBIND11_TLS_REPLACE_VALUE(key, value)                       \\\n             PyThread_set_key_value((key), (value))\n#    endif\n#    define PYBIND11_TLS_FREE(key) (void)key\n#endif\n\n// Python loads modules by default with dlopen with the RTLD_LOCAL flag; under libc++ and possibly\n// other STLs, this means `typeid(A)` from one module won't equal `typeid(A)` from another module\n// even when `A` is the same, non-hidden-visibility type (e.g. from a common include).  Under\n// libstdc++, this doesn't happen: equality and the type_index hash are based on the type name,\n// which works.  If not under a known-good stl, provide our own name-based hash and equality\n// functions that use the type name.\n#if defined(__GLIBCXX__)\ninline bool same_type(const std::type_info &lhs, const std::type_info &rhs) { return lhs == rhs; }\nusing type_hash = std::hash<std::type_index>;\nusing type_equal_to = std::equal_to<std::type_index>;\n#else\ninline bool same_type(const std::type_info &lhs, const std::type_info &rhs) {\n    return lhs.name() == rhs.name() || std::strcmp(lhs.name(), rhs.name()) == 0;\n}\n\nstruct type_hash {\n    size_t operator()(const std::type_index &t) const {\n        size_t hash = 5381;\n        const char *ptr = t.name();\n        while (auto c = static_cast<unsigned char>(*ptr++))\n            hash = (hash * 33) ^ c;\n        return hash;\n    }\n};\n\nstruct type_equal_to {\n    bool operator()(const std::type_index &lhs, const std::type_index &rhs) const {\n        return lhs.name() == rhs.name() || std::strcmp(lhs.name(), rhs.name()) == 0;\n    }\n};\n#endif\n\ntemplate <typename value_type>\nusing type_map = std::unordered_map<std::type_index, value_type, type_hash, type_equal_to>;\n\nstruct overload_hash {\n    inline size_t operator()(const std::pair<const PyObject *, const char *>& v) const {\n        size_t value = std::hash<const void *>()(v.first);\n        value ^= std::hash<const void *>()(v.second)  + 0x9e3779b9 + (value<<6) + (value>>2);\n        return value;\n    }\n};\n\n/// Internal data structure used to track registered instances and types.\n/// Whenever binary incompatible changes are made to this structure,\n/// `PYBIND11_INTERNALS_VERSION` must be incremented.\nstruct internals {\n    type_map<type_info *> registered_types_cpp; // std::type_index -> pybind11's type information\n    std::unordered_map<PyTypeObject *, std::vector<type_info *>> registered_types_py; // PyTypeObject* -> base type_info(s)\n    std::unordered_multimap<const void *, instance*> registered_instances; // void * -> instance*\n    std::unordered_set<std::pair<const PyObject *, const char *>, overload_hash> inactive_overload_cache;\n    type_map<std::vector<bool (*)(PyObject *, void *&)>> direct_conversions;\n    std::unordered_map<const PyObject *, std::vector<PyObject *>> patients;\n    std::forward_list<void (*) (std::exception_ptr)> registered_exception_translators;\n    std::unordered_map<std::string, void *> shared_data; // Custom data to be shared across extensions\n    std::vector<PyObject *> loader_patient_stack; // Used by `loader_life_support`\n    std::forward_list<std::string> static_strings; // Stores the std::strings backing detail::c_str()\n    PyTypeObject *static_property_type;\n    PyTypeObject *default_metaclass;\n    PyObject *instance_base;\n#if defined(WITH_THREAD)\n    PYBIND11_TLS_KEY_INIT(tstate);\n    PyInterpreterState *istate = nullptr;\n    ~internals() {\n        // This destructor is called *after* Py_Finalize() in finalize_interpreter().\n        // That *SHOULD BE* fine. The following details what happens whe PyThread_tss_free is called.\n        // PYBIND11_TLS_FREE is PyThread_tss_free on python 3.7+. On older python, it does nothing.\n        // PyThread_tss_free calls PyThread_tss_delete and PyMem_RawFree.\n        // PyThread_tss_delete just calls TlsFree (on Windows) or pthread_key_delete (on *NIX). Neither\n        // of those have anything to do with CPython internals.\n        // PyMem_RawFree *requires* that the `tstate` be allocated with the CPython allocator.\n        PYBIND11_TLS_FREE(tstate);\n    }\n#endif\n};\n\n/// Additional type information which does not fit into the PyTypeObject.\n/// Changes to this struct also require bumping `PYBIND11_INTERNALS_VERSION`.\nstruct type_info {\n    PyTypeObject *type;\n    const std::type_info *cpptype;\n    size_t type_size, type_align, holder_size_in_ptrs;\n    void *(*operator_new)(size_t);\n    void (*init_instance)(instance *, const void *);\n    void (*dealloc)(value_and_holder &v_h);\n    std::vector<PyObject *(*)(PyObject *, PyTypeObject *)> implicit_conversions;\n    std::vector<std::pair<const std::type_info *, void *(*)(void *)>> implicit_casts;\n    std::vector<bool (*)(PyObject *, void *&)> *direct_conversions;\n    buffer_info *(*get_buffer)(PyObject *, void *) = nullptr;\n    void *get_buffer_data = nullptr;\n    void *(*module_local_load)(PyObject *, const type_info *) = nullptr;\n    /* A simple type never occurs as a (direct or indirect) parent\n     * of a class that makes use of multiple inheritance */\n    bool simple_type : 1;\n    /* True if there is no multiple inheritance in this type's inheritance tree */\n    bool simple_ancestors : 1;\n    /* for base vs derived holder_type checks */\n    bool default_holder : 1;\n    /* true if this is a type registered with py::module_local */\n    bool module_local : 1;\n};\n\n/// Tracks the `internals` and `type_info` ABI version independent of the main library version\n#define PYBIND11_INTERNALS_VERSION 4\n\n/// On MSVC, debug and release builds are not ABI-compatible!\n#if defined(_MSC_VER) && defined(_DEBUG)\n#   define PYBIND11_BUILD_TYPE \"_debug\"\n#else\n#   define PYBIND11_BUILD_TYPE \"\"\n#endif\n\n/// Let's assume that different compilers are ABI-incompatible.\n#if defined(_MSC_VER)\n#   define PYBIND11_COMPILER_TYPE \"_msvc\"\n#elif defined(__INTEL_COMPILER)\n#   define PYBIND11_COMPILER_TYPE \"_icc\"\n#elif defined(__clang__)\n#   define PYBIND11_COMPILER_TYPE \"_clang\"\n#elif defined(__PGI)\n#   define PYBIND11_COMPILER_TYPE \"_pgi\"\n#elif defined(__MINGW32__)\n#   define PYBIND11_COMPILER_TYPE \"_mingw\"\n#elif defined(__CYGWIN__)\n#   define PYBIND11_COMPILER_TYPE \"_gcc_cygwin\"\n#elif defined(__GNUC__)\n#   define PYBIND11_COMPILER_TYPE \"_gcc\"\n#else\n#   define PYBIND11_COMPILER_TYPE \"_unknown\"\n#endif\n\n#if defined(_LIBCPP_VERSION)\n#  define PYBIND11_STDLIB \"_libcpp\"\n#elif defined(__GLIBCXX__) || defined(__GLIBCPP__)\n#  define PYBIND11_STDLIB \"_libstdcpp\"\n#else\n#  define PYBIND11_STDLIB \"\"\n#endif\n\n/// On Linux/OSX, changes in __GXX_ABI_VERSION__ indicate ABI incompatibility.\n#if defined(__GXX_ABI_VERSION)\n#  define PYBIND11_BUILD_ABI \"_cxxabi\" PYBIND11_TOSTRING(__GXX_ABI_VERSION)\n#else\n#  define PYBIND11_BUILD_ABI \"\"\n#endif\n\n#if defined(WITH_THREAD)\n#  define PYBIND11_INTERNALS_KIND \"\"\n#else\n#  define PYBIND11_INTERNALS_KIND \"_without_thread\"\n#endif\n\n#define PYBIND11_INTERNALS_ID \"__pybind11_internals_v\" \\\n    PYBIND11_TOSTRING(PYBIND11_INTERNALS_VERSION) PYBIND11_INTERNALS_KIND PYBIND11_COMPILER_TYPE PYBIND11_STDLIB PYBIND11_BUILD_ABI PYBIND11_BUILD_TYPE \"__\"\n\n#define PYBIND11_MODULE_LOCAL_ID \"__pybind11_module_local_v\" \\\n    PYBIND11_TOSTRING(PYBIND11_INTERNALS_VERSION) PYBIND11_INTERNALS_KIND PYBIND11_COMPILER_TYPE PYBIND11_STDLIB PYBIND11_BUILD_ABI PYBIND11_BUILD_TYPE \"__\"\n\n/// Each module locally stores a pointer to the `internals` data. The data\n/// itself is shared among modules with the same `PYBIND11_INTERNALS_ID`.\ninline internals **&get_internals_pp() {\n    static internals **internals_pp = nullptr;\n    return internals_pp;\n}\n\ninline void translate_exception(std::exception_ptr p) {\n    try {\n        if (p) std::rethrow_exception(p);\n    } catch (error_already_set &e)           { e.restore();                                    return;\n    } catch (const builtin_exception &e)     { e.set_error();                                  return;\n    } catch (const std::bad_alloc &e)        { PyErr_SetString(PyExc_MemoryError,   e.what()); return;\n    } catch (const std::domain_error &e)     { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::invalid_argument &e) { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::length_error &e)     { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::out_of_range &e)     { PyErr_SetString(PyExc_IndexError,    e.what()); return;\n    } catch (const std::range_error &e)      { PyErr_SetString(PyExc_ValueError,    e.what()); return;\n    } catch (const std::overflow_error &e)   { PyErr_SetString(PyExc_OverflowError, e.what()); return;\n    } catch (const std::exception &e)        { PyErr_SetString(PyExc_RuntimeError,  e.what()); return;\n    } catch (...) {\n        PyErr_SetString(PyExc_RuntimeError, \"Caught an unknown exception!\");\n        return;\n    }\n}\n\n#if !defined(__GLIBCXX__)\ninline void translate_local_exception(std::exception_ptr p) {\n    try {\n        if (p) std::rethrow_exception(p);\n    } catch (error_already_set &e)       { e.restore();   return;\n    } catch (const builtin_exception &e) { e.set_error(); return;\n    }\n}\n#endif\n\n/// Return a reference to the current `internals` data\nPYBIND11_NOINLINE inline internals &get_internals() {\n    auto **&internals_pp = get_internals_pp();\n    if (internals_pp && *internals_pp)\n        return **internals_pp;\n\n    // Ensure that the GIL is held since we will need to make Python calls.\n    // Cannot use py::gil_scoped_acquire here since that constructor calls get_internals.\n    struct gil_scoped_acquire_local {\n        gil_scoped_acquire_local() : state (PyGILState_Ensure()) {}\n        ~gil_scoped_acquire_local() { PyGILState_Release(state); }\n        const PyGILState_STATE state;\n    } gil;\n\n    constexpr auto *id = PYBIND11_INTERNALS_ID;\n    auto builtins = handle(PyEval_GetBuiltins());\n    if (builtins.contains(id) && isinstance<capsule>(builtins[id])) {\n        internals_pp = static_cast<internals **>(capsule(builtins[id]));\n\n        // We loaded builtins through python's builtins, which means that our `error_already_set`\n        // and `builtin_exception` may be different local classes than the ones set up in the\n        // initial exception translator, below, so add another for our local exception classes.\n        //\n        // libstdc++ doesn't require this (types there are identified only by name)\n#if !defined(__GLIBCXX__)\n        (*internals_pp)->registered_exception_translators.push_front(&translate_local_exception);\n#endif\n    } else {\n        if (!internals_pp) internals_pp = new internals*();\n        auto *&internals_ptr = *internals_pp;\n        internals_ptr = new internals();\n#if defined(WITH_THREAD)\n        PyEval_InitThreads();\n        PyThreadState *tstate = PyThreadState_Get();\n        #if PY_VERSION_HEX >= 0x03070000\n            internals_ptr->tstate = PyThread_tss_alloc();\n            if (!internals_ptr->tstate || PyThread_tss_create(internals_ptr->tstate))\n                pybind11_fail(\"get_internals: could not successfully initialize the TSS key!\");\n            PyThread_tss_set(internals_ptr->tstate, tstate);\n        #else\n            internals_ptr->tstate = PyThread_create_key();\n            if (internals_ptr->tstate == -1)\n                pybind11_fail(\"get_internals: could not successfully initialize the TLS key!\");\n            PyThread_set_key_value(internals_ptr->tstate, tstate);\n        #endif\n        internals_ptr->istate = tstate->interp;\n#endif\n        builtins[id] = capsule(internals_pp);\n        internals_ptr->registered_exception_translators.push_front(&translate_exception);\n        internals_ptr->static_property_type = make_static_property_type();\n        internals_ptr->default_metaclass = make_default_metaclass();\n        internals_ptr->instance_base = make_object_base_type(internals_ptr->default_metaclass);\n    }\n    return **internals_pp;\n}\n\n/// Works like `internals.registered_types_cpp`, but for module-local registered types:\ninline type_map<type_info *> &registered_local_types_cpp() {\n    static type_map<type_info *> locals{};\n    return locals;\n}\n\n/// Constructs a std::string with the given arguments, stores it in `internals`, and returns its\n/// `c_str()`.  Such strings objects have a long storage duration -- the internal strings are only\n/// cleared when the program exits or after interpreter shutdown (when embedding), and so are\n/// suitable for c-style strings needed by Python internals (such as PyTypeObject's tp_name).\ntemplate <typename... Args>\nconst char *c_str(Args &&...args) {\n    auto &strings = get_internals().static_strings;\n    strings.emplace_front(std::forward<Args>(args)...);\n    return strings.front().c_str();\n}\n\nNAMESPACE_END(detail)\n\n/// Returns a named pointer that is shared among all extension modules (using the same\n/// pybind11 version) running in the current interpreter. Names starting with underscores\n/// are reserved for internal usage. Returns `nullptr` if no matching entry was found.\ninline PYBIND11_NOINLINE void *get_shared_data(const std::string &name) {\n    auto &internals = detail::get_internals();\n    auto it = internals.shared_data.find(name);\n    return it != internals.shared_data.end() ? it->second : nullptr;\n}\n\n/// Set the shared data that can be later recovered by `get_shared_data()`.\ninline PYBIND11_NOINLINE void *set_shared_data(const std::string &name, void *data) {\n    detail::get_internals().shared_data[name] = data;\n    return data;\n}\n\n/// Returns a typed reference to a shared data entry (by using `get_shared_data()`) if\n/// such entry exists. Otherwise, a new object of default-constructible type `T` is\n/// added to the shared data under the given name and a reference to it is returned.\ntemplate<typename T>\nT &get_or_create_shared_data(const std::string &name) {\n    auto &internals = detail::get_internals();\n    auto it = internals.shared_data.find(name);\n    T *ptr = (T *) (it != internals.shared_data.end() ? it->second : nullptr);\n    if (!ptr) {\n        ptr = new T();\n        internals.shared_data[name] = ptr;\n    }\n    return *ptr;\n}\n\nNAMESPACE_END(PYBIND11_NAMESPACE)\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/external/vmd_molfile/vmddlopen.cpp": "/* -*- mode: c; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; c-file-style: \"stroustrup\"; -*-\n *\n * \n * This file is part of Gromacs        Copyright (c) 1991-2008\n * David van der Spoel, Erik Lindahl, Berk Hess, University of Groningen.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * To help us fund GROMACS development, we humbly ask that you cite\n * the research papers on the package. Check out http://www.gromacs.org\n * \n * And Hey:\n * Gnomes, ROck Monsters And Chili Sauce\n */\n\n/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2009 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\nDeveloped by:           Theoretical and Computational Biophysics Group\n                        University of Illinois at Urbana-Champaign\n                        http://www.ks.uiuc.edu/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the Software), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to\ndo so, subject to the following conditions:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimers.\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimers in the documentation\nand/or other materials provided with the distribution.\n\nNeither the names of Theoretical and Computational Biophysics Group,\nUniversity of Illinois at Urbana-Champaign, nor the names of its contributors\nmay be used to endorse or promote products derived from this Software without\nspecific prior written permission.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS WITH THE SOFTWARE.\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmddlopen.c,v $\n *      $Author: johns $        $Locker:  $             $State: Exp $\n *      $Revision: 1.18 $      $Date: 2009/07/07 02:40:05 $\n *\n ***************************************************************************\n * DESCRIPTION:\n *   Routines for loading dynamic link libraries and shared object files\n *   on various platforms, abstracting from machine dependent APIs.\n *\n ***************************************************************************/\n\n#include <stdio.h> \n#include <stdlib.h>\n#include <string.h>\n#include \"vmddlopen.h\"\n\n#if defined(__hpux)\n\n#include <dl.h>\n#include <errno.h>\n#include <string.h>\n\nvoid *vmddlopen( const char *path) {\n    void *ret;\n    ret = shl_load( path, BIND_IMMEDIATE | BIND_FIRST | BIND_VERBOSE, 0);\n    return ret;\n}\n\nint vmddlclose( void *handle ) {\n    return shl_unload( (shl_t) handle );\n}\n\nvoid *vmddlsym( void *handle, const char *sym ) {\n    void *value=0;\n\n    if ( shl_findsym( (shl_t*)&handle, sym, TYPE_UNDEFINED, &value ) != 0 ) \n\treturn 0;\n    return value;\n}\n\nconst char *vmddlerror( void  ) {\n    return strerror( errno );\n}\n\n#elif 0 && defined(__APPLE__)\n/*\n * This is only needed for MacOS X version 10.3 or older\n */\n#include <mach-o/dyld.h>\n\nvoid *vmddlopen( const char *path) {\n  NSObjectFileImage image;\n  NSObjectFileImageReturnCode retval;\n  NSModule module;\n\n  retval = NSCreateObjectFileImageFromFile(path, &image);\n  if (retval != NSObjectFileImageSuccess)\n    return NULL;\n\n  module = NSLinkModule(image, path,\n            NSLINKMODULE_OPTION_BINDNOW | NSLINKMODULE_OPTION_PRIVATE\n            | NSLINKMODULE_OPTION_RETURN_ON_ERROR);\n  return module;  /* module will be NULL on error */\n}\n\nint vmddlclose( void *handle ) {\n  NSModule module = (NSModule *)handle;\n  NSUnLinkModule(module, NSUNLINKMODULE_OPTION_NONE);\n  return 0;\n}\n\nvoid *vmddlsym( void *handle, const char *symname ) {\n  char *realsymname;\n  NSModule module;\n  NSSymbol sym;\n  /* Hack around the leading underscore in the symbol name */\n  realsymname = (char *)malloc(strlen(symname)+2);\n  strcpy(realsymname, \"_\");\n  strcat(realsymname, symname);\n  module = (NSModule)handle;\n  sym = NSLookupSymbolInModule(module, realsymname);\n  free(realsymname);\n  if (sym) \n    return (void *)(NSAddressOfSymbol(sym));\n  return NULL;\n}\n\nconst char *vmddlerror( void  ) {\n  NSLinkEditErrors c;\n  int errorNumber;\n  const char *fileName;\n  const char *errorString = NULL;\n  NSLinkEditError(&c, &errorNumber, &fileName, &errorString);\n  return errorString;\n}\n\n#elif defined( _WIN32 ) || defined( _WIN64 )\n\n#include <windows.h>\n\nvoid *vmddlopen(const char *fname) {\n  return (void *)LoadLibrary(fname);\n}\n\nconst char *vmddlerror(void) {\n  static CHAR szBuf[80]; \n  DWORD dw = GetLastError(); \n \n  sprintf(szBuf, \"vmddlopen failed: GetLastError returned %lu\\n\", dw);\n  return szBuf;\n}\n\nvoid *vmddlsym(void *h, const char *sym) {\n  return (void *)GetProcAddress((HINSTANCE)h, sym);\n}\n\nint vmddlclose(void *h) {\n  /* FreeLibrary returns nonzero on success */\n  return !FreeLibrary((HINSTANCE)h);\n}\n\n#else\n\n/* All remaining platforms (not Windows, HP-UX, or MacOS X <= 10.3) */\n#include <dlfcn.h>\n\nvoid *vmddlopen(const char *fname) {\n  return dlopen(fname, RTLD_NOW);\n}\nconst char *vmddlerror(void) {\n  return dlerror();\n}\nvoid *vmddlsym(void *h, const char *sym) {\n  return dlsym(h, sym);\n}\nint vmddlclose(void *h) {\n  return dlclose(h);\n}\n#endif \n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/external/vmd_molfile/vmdplugin.h": "/* -*- mode: c; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; c-file-style: \"stroustrup\"; -*-\n *\n * \n * This file is part of Gromacs        Copyright (c) 1991-2008\n * David van der Spoel, Erik Lindahl, Berk Hess, University of Groningen.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * To help us fund GROMACS development, we humbly ask that you cite\n * the research papers on the package. Check out http://www.gromacs.org\n * \n * And Hey:\n * Gnomes, ROck Monsters And Chili Sauce\n */\n\n/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2006 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\nDeveloped by:           Theoretical and Computational Biophysics Group\n                        University of Illinois at Urbana-Champaign\n                        http://www.ks.uiuc.edu/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the Software), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to\ndo so, subject to the following conditions:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimers.\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimers in the documentation\nand/or other materials provided with the distribution.\n\nNeither the names of Theoretical and Computational Biophysics Group,\nUniversity of Illinois at Urbana-Champaign, nor the names of its contributors\nmay be used to endorse or promote products derived from this Software without\nspecific prior written permission.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS WITH THE SOFTWARE.\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmdplugin.h,v $\n *      $Author: johns $       $Locker:  $             $State: Exp $\n *      $Revision: 1.32 $       $Date: 2009/02/24 05:12:35 $\n *\n ***************************************************************************/\n\n/** @file\n * This header must be included by every VMD plugin library.  It defines the\n * API for every plugin so that VMD can organize the plugins it finds.  \n */\n\n#ifndef VMD_PLUGIN_H\n#define VMD_PLUGIN_H\n\n\n/* \n * Preprocessor tricks to make it easier for us to redefine the names of\n * functions when building static plugins.\n */\n#if !defined(VMDPLUGIN)\n/** \n  * macro defining VMDPLUGIN if it hasn't already been set to the name of \n  * a static plugin that is being compiled.  This is the catch-all case.\n  */\n#define VMDPLUGIN vmdplugin\n#endif\n/** concatenation macro, joins args x and y together as a single string */\n#define xcat(x, y) cat(x, y)\n/** concatenation macro, joins args x and y together as a single string */\n#define cat(x, y) x ## y \n\n/*\n *  macros to correctly define plugin function names depending on whether \n *  the plugin is being compiled for static linkage or dynamic loading. \n *  When compiled for static linkage, each plugin needs to have unique\n *  function names for all of its entry points.  When compiled for dynamic\n *  loading, the plugins must name their entry points consistently so that\n *  the plugin loading mechanism can find the register, register_tcl, init,\n *  and fini routines via dlopen() or similar operating system interfaces.\n */\n/*@{*/\n/** Macro names entry points correctly for static linkage or dynamic loading */\n#define VMDPLUGIN_register     xcat(VMDPLUGIN, _register)\n#define VMDPLUGIN_register_tcl xcat(VMDPLUGIN, _register_tcl)\n#define VMDPLUGIN_init         xcat(VMDPLUGIN, _init)\n#define VMDPLUGIN_fini         xcat(VMDPLUGIN, _fini)\n/*@}*/\n\n\n/** \"WIN32\" is defined on both WIN32 and WIN64 platforms... */\n#if (defined(WIN32)) \n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n\n#if !defined(STATIC_PLUGIN)\n#if defined(VMDPLUGIN_EXPORTS)\n/** \n *  Only define DllMain for plugins, not in VMD or in statically linked plugins\n *  VMDPLUGIN_EXPORTS is only defined when compiling dynamically loaded plugins\n */\nBOOL APIENTRY DllMain( HANDLE hModule,\n                       DWORD ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n  return TRUE;\n}\n\n#define VMDPLUGIN_API __declspec(dllexport)\n#else\n#define VMDPLUGIN_API __declspec(dllimport)\n#endif /* VMDPLUGIN_EXPORTS */\n#else  /* ! STATIC_PLUGIN */\n#define VMDPLUGIN_API\n#endif /* ! STATIC_PLUGIN */\n#else\n/** If we're not compiling on Windows, then this macro is defined empty */\n#define VMDPLUGIN_API \n#endif\n\n/** define plugin linkage correctly for both C and C++ based plugins */\n#ifdef __cplusplus\n#define VMDPLUGIN_EXTERN extern \"C\" VMDPLUGIN_API\n#else\n#define VMDPLUGIN_EXTERN extern VMDPLUGIN_API\n#endif  /* __cplusplus */\n\n/* \n * Plugin API functions start here \n */\n\n\n/** \n * Init routine: called the first time the library is loaded by the \n * application and before any other API functions are referenced.\n * Return 0 on success.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_init(void);\n\n/**\n * Macro for creating a struct header used in all plugin structures.\n * \n * This header should be placed at the top of every plugin API definition \n * so that it can be treated as a subtype of the base plugin type.\n *\n * abiversion: Defines the ABI for the base plugin type (not for other plugins)\n * type: A string descriptor of the plugin type.\n * name: A name for the plugin.\n * author: A string identifier, possibly including newlines.\n * Major and minor version.  \n * is_reentrant: Whether this library can be run concurrently with itself.\n */\n#define vmdplugin_HEAD \\\n  int abiversion; \\\n  const char *type; \\\n  const char *name; \\\n  const char *prettyname; \\\n  const char *author; \\\n  int majorv; \\\n  int minorv; \\\n  int is_reentrant\n\n/** \n  * Typedef for generic plugin header, individual plugins can\n  * make their own structures as long as the header info remains \n  * the same as the generic plugin header, most easily done by \n  * using the vmdplugin_HEAD macro.\n  */\ntypedef struct {\n  vmdplugin_HEAD;\n} vmdplugin_t;\n\n/**\n * Use this macro to initialize the abiversion member of each plugin\n */\n#define vmdplugin_ABIVERSION  16\n\n/*@{*/\n/** Use this macro to indicate a plugin's thread-safety at registration time */\n#define VMDPLUGIN_THREADUNSAFE 0\n#define VMDPLUGIN_THREADSAFE   1\n/*@}*/\n\n/*@{*/\n/** Error return code for use in the plugin registration and init functions */\n#define VMDPLUGIN_SUCCESS      0\n#define VMDPLUGIN_ERROR       (-1)\n/*@}*/\n\n/** \n * Function pointer typedef for register callback functions\n */\ntypedef int (*vmdplugin_register_cb)(void *, vmdplugin_t *);\n\n/**\n * Allow the library to register plugins with the application.\n * The callback should be called using the passed-in void pointer, which\n * should not be interpreted in any way by the library.  Each vmdplugin_t\n * pointer passed to the application should point to statically-allocated\n * or heap-allocated memory and should never be later modified by the plugin.\n * Applications must be permitted to retain only a copy of the the plugin\n * pointer, without making any deep copy of the items in the struct.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register(void *, vmdplugin_register_cb);\n\n/**\n * Allow the library to register Tcl extensions.  \n * This API is optional; if found by dlopen, it will be called after first\n * calling init and register.  \n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register_tcl(void *, void *tcl_interp, \n    vmdplugin_register_cb);\n\n/**\n * The Fini method is called when the application will no longer use \n * any plugins in the library.  \n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_fini(void);\n\n#endif   /* VMD_PLUGIN_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/external/vmd_molfile/vmddlopen.h": "/* -*- mode: c; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; c-file-style: \"stroustrup\"; -*-\n *\n * \n * This file is part of Gromacs        Copyright (c) 1991-2008\n * David van der Spoel, Erik Lindahl, Berk Hess, University of Groningen.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * To help us fund GROMACS development, we humbly ask that you cite\n * the research papers on the package. Check out http://www.gromacs.org\n * \n * And Hey:\n * Gnomes, ROck Monsters And Chili Sauce\n */\n\n/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2009 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\nDeveloped by:           Theoretical and Computational Biophysics Group\n                        University of Illinois at Urbana-Champaign\n                        http://www.ks.uiuc.edu/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the Software), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to\ndo so, subject to the following conditions:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimers.\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimers in the documentation\nand/or other materials provided with the distribution.\n\nNeither the names of Theoretical and Computational Biophysics Group,\nUniversity of Illinois at Urbana-Champaign, nor the names of its contributors\nmay be used to endorse or promote products derived from this Software without\nspecific prior written permission.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS WITH THE SOFTWARE.\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmddlopen.h,v $\n *      $Author: johns $        $Locker:  $             $State: Exp $\n *      $Revision: 1.9 $      $Date: 2009/07/07 02:40:05 $\n *\n ***************************************************************************\n * DESCRIPTION:\n *   Routines for loading dynamic link libraries and shared object files\n *   on various platforms, abstracting from machine dependent APIs.\n *\n * LICENSE:\n *   UIUC Open Source License \n *   http://www.ks.uiuc.edu/Research/vmd/plugins/pluginlicense.html\n *\n ***************************************************************************/\n\n/*\n * vmddlopen: thin multi-platform wrapper around dlopen/LoadLibrary\n */\n\n#ifndef VMD_DLOPEN__\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* Try to open the specified library.  All symbols must be resolved or the \n * load will fail (RTLD_NOW).  \n */\nvoid *vmddlopen(const char *fname);\n\n/* Try to load the specified symbol using the given handle.  Returns NULL if \n * the symbol cannot be loaded.\n */\nvoid *vmddlsym(void *h, const char *sym);\n\n/* Unload the library.  Return 0 on success, nonzero on error. \n */\nint vmddlclose(void *h);\n\n/* Return last error from any of the above functions.  Not thread-safe on\n * Windows due to static buffer in our code. \n */ \nconst char *vmddlerror(void);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/external/clFFT/src/CMakeLists.txt": "project( clFFT )\n\n# get sources\nfile(GLOB CLFFT_SOURCES statTimer/*.cpp library/*.cpp library/*.c)\nfile(GLOB CLFFT_SOURCES_UNWANTED statTimer/dllmain.cpp library/dllmain.cpp)\nlist(REMOVE_ITEM CLFFT_SOURCES ${CLFFT_SOURCES_UNWANTED})\n\nadd_library(clFFT OBJECT ${CLFFT_SOURCES})\n\n# disable all warnings\ntarget_compile_options(clFFT PRIVATE \"-w\")\nif (BUILD_SHARED_LIBS)\n    set_target_properties(clFFT PROPERTIES\n        POSITION_INDEPENDENT_CODE ON\n        )\nendif()\n\n# Windows doesn't need anything special to load the dynamic libraries\n# that the AMD clFFT implementation uses, but *nix and BSD do.\nif (NOT WIN32)\n    include(gmxTestdlopen)\n    gmx_test_dlopen(HAVE_DLOPEN)\n    if (NOT HAVE_DLOPEN)\n        message(FATAL_ERROR \"Cannot use clFFT for OpenCL support unless dlopen is available\")\n    endif()\nendif()\n\ntarget_include_directories(clFFT\n    PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}/include\n    PRIVATE\n        ${CMAKE_CURRENT_SOURCE_DIR}/library\n        ${CMAKE_CURRENT_SOURCE_DIR}/statTimer\n        )\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/external/clFFT/src/include/sharedLibrary.h": "/* ************************************************************************\n * Copyright 2013 Advanced Micro Devices, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ************************************************************************/\n\n\n#pragma once\n#ifndef _SHAREDLIBRARY_H_\n#define _SHAREDLIBRARY_H_\n#include <string>\n\n//\t_WIN32 is defined for both 32 & 64 bit environments\n#if defined( _WIN32 )\n\t#define WIN32_LEAN_AND_MEAN\t\t\t// Exclude rarely-used stuff from Windows headers\n\t// Windows Header Files:\n\t#include <windows.h>\n#else\n\t#include <dlfcn.h>\n#endif\n\ninline void* LoadSharedLibrary( std::string unixPrefix, std::string libraryName, bool quiet )\n{\n#if defined( _WIN32 )\n\tlibraryName += \".dll\";\n\n\t//\tHMODULE is actually the load address; function returns NULL if it cannot find the shared library\n\tHMODULE fileHandle\t= ::LoadLibraryExA( libraryName.c_str( ), NULL, NULL );\n#elif defined(__linux__) || defined(__GNU__) || (defined(__FreeBSD_kernel__) && defined(__GLIBC__))\n        tstring linuxName = unixPrefix;\n\tlinuxName += libraryName += \".so\";\n\tvoid* fileHandle = ::dlopen( linuxName.c_str( ), RTLD_NOW );\n\tif( !quiet && !fileHandle )\n\t{\n\t\tstd::cerr << ::dlerror( ) << std::endl;\n\t}\n#elif defined(__APPLE__)\n  tstring appleName = unixPrefix;\n  appleName += libraryName += \".dylib\";\n  void* fileHandle = ::dlopen( appleName.c_str( ), RTLD_NOW );\n  if( !quiet && !fileHandle )\n  {\n          std::cerr << ::dlerror( ) << std::endl;\n  }\n#elif defined(__FreeBSD__)\n        tstring freebsdName = unixPrefix;\n        freebsdName += libraryName += \".so\";\n        void* fileHandle = ::dlopen( freebsdName.c_str( ), RTLD_NOW );\n        if( !quiet && !fileHandle )\n        {\n                std::cerr << ::dlerror( ) << std::endl;\n        }\n#else\n        #error \"unsupported platform\"\n#endif\n\n\treturn fileHandle;\n}\n\n//\tIf the function succeeds, the return value is nonzero.\n//\tIf the function fails, the return value is zero.\ninline int FreeSharedLibrary( void*& libHandle )\n{\n\tint result\t= 0;\n\n#if defined( _WIN32 )\n\tif( libHandle != 0 )\n\t\tresult = ::FreeLibrary( reinterpret_cast< HMODULE >( libHandle ) );\n#else\n\tif( libHandle != 0 )\n\t\tresult = ( ::dlclose( libHandle ) == 0 );\n#endif\n\n\tlibHandle\t= NULL;\n\n\treturn result;\n}\n\n//\tThis takes a shared module handle returned from LoadSharedLibrary, and a text string of a symbol\n//\tto load from the module, and returns a pointer to that symbol.  If the symbol is not found, NULL\n//\tis returned.  If the module handle is NULL, NULL is returned.\ninline void* LoadFunctionAddr( void* libHandle, std::string funcName )\n{\n\tif( libHandle == NULL )\n\t\treturn NULL;\n\n#if defined( _WIN32 )\n\tHMODULE fileHandle = reinterpret_cast< HMODULE >( libHandle );\n\n\tvoid* pFunc\t= reinterpret_cast< void* >( ::GetProcAddress( fileHandle, funcName.c_str( ) ) );\n#else\n\tvoid* pFunc = ::dlsym( libHandle, funcName.c_str( ) );\n#endif\n\n\treturn pFunc;\n}\n\n#endif // _SHAREDLIBRARY_H_\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/CMakeLists.txt": "#\n# This file is part of the GROMACS molecular simulation package.\n#\n# Copyright (c) 2010,2011,2012,2013,2014 by the GROMACS development team.\n# Copyright (c) 2015,2016,2017,2018,2019,2020,2021, by the GROMACS development team, led by\n# Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,\n# and including many others, as listed in the AUTHORS file in the\n# top-level source directory and at http://www.gromacs.org.\n#\n# GROMACS is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public License\n# as published by the Free Software Foundation; either version 2.1\n# of the License, or (at your option) any later version.\n#\n# GROMACS is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with GROMACS; if not, see\n# http://www.gnu.org/licenses, or write to the Free Software Foundation,\n# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.\n#\n# If you want to redistribute modifications to GROMACS, please\n# consider that scientific software is very special. Version\n# control is crucial - bugs must be traceable. We will be happy to\n# consider code for inclusion in the official distribution, but\n# derived work must not be called official GROMACS. Details are found\n# in the README & COPYING files - if they are missing, get the\n# official version at http://www.gromacs.org.\n#\n# To help us fund GROMACS development, we humbly ask that you cite\n# the research papers on the package. Check out http://www.gromacs.org.\n\nset(LIBGROMACS_SOURCES)\n\nif (GMX_CLANG_CUDA)\n    include(gmxClangCudaUtils)\nendif()\n\nset_property(GLOBAL PROPERTY GMX_LIBGROMACS_SOURCES)\nset_property(GLOBAL PROPERTY CUDA_SOURCES)\nset_property(GLOBAL PROPERTY GMX_INSTALLED_HEADERS)\nset_property(GLOBAL PROPERTY GMX_AVX_512_SOURCE)\n\nset(libgromacs_object_library_dependencies \"\")\nfunction (_gmx_add_files_to_property PROPERTY)\n    foreach (_file ${ARGN})\n        if (IS_ABSOLUTE \"${_file}\")\n            set_property(GLOBAL APPEND PROPERTY ${PROPERTY} ${_file})\n        else()\n            set_property(GLOBAL APPEND PROPERTY ${PROPERTY}\n                         ${CMAKE_CURRENT_LIST_DIR}/${_file})\n        endif()\n    endforeach()\nendfunction ()\n\nfunction (gmx_add_libgromacs_sources)\n    _gmx_add_files_to_property(GMX_LIBGROMACS_SOURCES ${ARGN})\nendfunction ()\n\n# Permit the configuration to disable compiling the many nbnxm kernels\n# and others involved in force calculations. Currently only\n# short-ranged and bonded kernels are disabled this way, but in future\n# others may be appropriate. Thus the cmake option is not specific to\n# nbnxm module.\noption(GMX_USE_SIMD_KERNELS \"Whether to compile NBNXM and other SIMD kernels\" ON)\nmark_as_advanced(GMX_USE_SIMD_KERNELS)\n\n# Add these contents first because linking their tests can take a lot\n# of time, so we want lots of parallel work still available after\n# linking starts.\nadd_subdirectory(utility)\n# Add normal contents\nadd_subdirectory(gmxlib)\nadd_subdirectory(mdlib)\nadd_subdirectory(applied_forces)\nadd_subdirectory(listed_forces)\nadd_subdirectory(nbnxm)\nadd_subdirectory(commandline)\nadd_subdirectory(domdec)\nadd_subdirectory(ewald)\nadd_subdirectory(fft)\nadd_subdirectory(gpu_utils)\nadd_subdirectory(hardware)\nadd_subdirectory(linearalgebra)\nadd_subdirectory(math)\nadd_subdirectory(mdrun)\nadd_subdirectory(mdrunutility)\nadd_subdirectory(mdspan)\nadd_subdirectory(mdtypes)\nadd_subdirectory(onlinehelp)\nadd_subdirectory(options)\nadd_subdirectory(pbcutil)\nadd_subdirectory(random)\nadd_subdirectory(restraint)\nadd_subdirectory(tables)\nadd_subdirectory(taskassignment)\nadd_subdirectory(timing)\nadd_subdirectory(topology)\nadd_subdirectory(trajectory)\nadd_subdirectory(swap)\nadd_subdirectory(essentialdynamics)\nadd_subdirectory(pulling)\nadd_subdirectory(simd)\nadd_subdirectory(imd)\nadd_subdirectory(compat)\nadd_subdirectory(mimic)\nadd_subdirectory(modularsimulator)\nadd_subdirectory(gmxana)\nadd_subdirectory(gmxpreprocess)\nadd_subdirectory(correlationfunctions)\nadd_subdirectory(statistics)\nadd_subdirectory(analysisdata)\nadd_subdirectory(coordinateio)\nadd_subdirectory(trajectoryanalysis)\nadd_subdirectory(energyanalysis)\nadd_subdirectory(tools)\n\nget_property(PROPERTY_SOURCES GLOBAL PROPERTY GMX_LIBGROMACS_SOURCES)\nlist(APPEND LIBGROMACS_SOURCES ${GMXLIB_SOURCES} ${MDLIB_SOURCES} ${PROPERTY_SOURCES})\n\n# This would be the standard way to include thread_mpi, but\n# we want libgromacs to link the functions directly\n#if(GMX_THREAD_MPI)\n#    add_subdirectory(thread_mpi)\n#endif()\n#target_link_libraries(gmx ${GMX_EXTRA_LIBRARIES} ${THREAD_MPI_LIB})\ntmpi_get_source_list(THREAD_MPI_SOURCES ${PROJECT_SOURCE_DIR}/src/external/thread_mpi/src)\nadd_library(thread_mpi OBJECT ${THREAD_MPI_SOURCES})\ntarget_compile_definitions(thread_mpi PRIVATE HAVE_CONFIG_H)\nif(CYGWIN)\n    # Needs POSIX-isms for strdup, not just std-isms\n    target_compile_definitions(thread_mpi PRIVATE _POSIX_C_SOURCE=200809L)\nendif()\ngmx_target_compile_options(thread_mpi)\nif (WIN32)\n    gmx_target_warning_suppression(thread_mpi /wd4996 HAS_NO_MSVC_UNSAFE_FUNCTION)\nendif()\nlist(APPEND libgromacs_object_library_dependencies thread_mpi)\n\nif(GMX_INSTALL_LEGACY_API)\n  install(FILES\n\t  analysisdata.h\n\t  options.h\n\t  selection.h\n\t  trajectoryanalysis.h\n          DESTINATION include/gromacs)\nendif()\n\n# This code is here instead of utility/CMakeLists.txt, because CMake\n# custom commands and source file properties can only be set in the directory\n# that contains the target that uses them.\n# TODO: Generate a header instead that can be included from baseversion.cpp.\n# That probably simplifies things somewhat.\nset(GENERATED_VERSION_FILE utility/baseversion-gen.cpp)\ngmx_configure_version_file(\n    utility/baseversion-gen.cpp.cmakein ${GENERATED_VERSION_FILE}\n    REMOTE_HASH\n    EXTRA_VARS\n        GMX_SOURCE_DOI\n        GMX_RELEASE_HASH\n        GMX_SOURCE_HASH\n        )\nlist(APPEND LIBGROMACS_SOURCES ${GENERATED_VERSION_FILE})\n\n# Mark some shared GPU implementation files to compile with CUDA if needed\nif (GMX_GPU_CUDA)\n    get_property(CUDA_SOURCES GLOBAL PROPERTY CUDA_SOURCES)\n    set_source_files_properties(${CUDA_SOURCES} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)\nendif()\n\nif (GMX_GPU_CUDA)\n    # Work around FindCUDA that prevents using target_link_libraries()\n    # with keywords otherwise...\n    set(CUDA_LIBRARIES PRIVATE ${CUDA_LIBRARIES})\n    if (NOT GMX_CLANG_CUDA)\n        gmx_cuda_add_library(libgromacs ${LIBGROMACS_SOURCES})\n    else()\n        add_library(libgromacs ${LIBGROMACS_SOURCES})\n    endif()\n    target_link_libraries(libgromacs PRIVATE ${CUDA_CUFFT_LIBRARIES})\nelse()\n    add_library(libgromacs ${LIBGROMACS_SOURCES})\nendif()\ntarget_link_libraries(libgromacs PRIVATE $<BUILD_INTERFACE:common>)\n# As long as the libgromacs target has source files that reference headers from\n# modules that don't provide CMake targets, libgromacs needs to use `src/`\n# amongst its include directories (to support `#include \"gromacs/module/header.h\"`).\nadd_library(legacy_modules INTERFACE)\ntarget_include_directories(legacy_modules INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/src>)\ntarget_link_libraries(libgromacs PRIVATE $<BUILD_INTERFACE:legacy_modules>)\n\n# Add these contents first because linking their tests can take a lot\n# of time, so we want lots of parallel work still available after\n# linking starts.\nadd_subdirectory(fileio)\nadd_subdirectory(selection)\n\n# Suppress a warning about our abuse of t_inputrec\ngmx_source_file_warning_suppression(mdtypes/inputrec.cpp -Wno-class-memaccess HAS_NO_CLASS_MEMACCESS)\n\n# Handle the object libraries that contain the source file\n# dependencies that need special handling because they are generated\n# or external code.\nforeach(object_library ${libgromacs_object_library_dependencies})\n    if (BUILD_SHARED_LIBS)\n        set_target_properties(${object_library} PROPERTIES POSITION_INDEPENDENT_CODE true)\n    endif()\n    target_include_directories(${object_library} SYSTEM BEFORE PRIVATE ${PROJECT_SOURCE_DIR}/src/external/thread_mpi/include)\n    target_link_libraries(${object_library} PRIVATE common)\n\n    # Add the sources from the object libraries to the main library.\n    target_sources(libgromacs PRIVATE $<TARGET_OBJECTS:${object_library}>)\nendforeach()\ngmx_target_compile_options(libgromacs)\ntarget_compile_definitions(libgromacs PRIVATE HAVE_CONFIG_H)\ntarget_include_directories(libgromacs SYSTEM BEFORE PRIVATE ${PROJECT_SOURCE_DIR}/src/external/thread_mpi/include)\n\nif (GMX_GPU_OPENCL)\n    option(GMX_EXTERNAL_CLFFT \"True if an external clFFT is required to be used\" FALSE)\n    mark_as_advanced(GMX_EXTERNAL_CLFFT)\n\n    # Default to using clFFT found on the system\n    # switch to quiet at the second run.\n    if (DEFINED clFFT_LIBRARY)\n        set (clFFT_FIND_QUIETLY TRUE)\n    endif()\n    find_package(clFFT)\n    if (NOT clFFT_FOUND)\n        if (GMX_EXTERNAL_CLFFT)\n            message(FATAL_ERROR \"Did not find required external clFFT library, consider setting clFFT_ROOT_DIR\")\n        endif()\n\n        if(MSVC)\n            message(FATAL_ERROR\n\"An OpenCL build was requested with Visual Studio compiler, but GROMACS\nrequires clFFT, which was not found on your system. GROMACS does bundle\nclFFT to help with building for OpenCL, but that clFFT has not yet been\nported to the more recent versions of that compiler that GROMACS itself\nrequires. Thus for now, OpenCL is not available with MSVC and the internal\nbuild of clFFT in GROMACS 2019. Either change compiler, try installing\na clFFT package, or use the latest GROMACS 2018 point release.\")\n        endif()\n\n        # Fall back on the internal version\n        set (_clFFT_dir ../external/clFFT/src)\n        add_subdirectory(${_clFFT_dir} clFFT-build)\n        target_sources(libgromacs PRIVATE\n            $<TARGET_OBJECTS:clFFT>\n        )\n        target_include_directories(libgromacs SYSTEM PRIVATE ${_clFFT_dir}/include)\n        # Use the magic variable for how to link any library needed for\n        # dlopen, etc.  which is -ldl where needed, and empty otherwise\n        # (e.g. Windows, BSD, Mac).\n        target_link_libraries(libgromacs PRIVATE \"${CMAKE_DL_LIBS}\")\n    else()\n        target_link_libraries(libgromacs PRIVATE clFFT)\n    endif()\nendif()\n\n# Permit GROMACS code to include externally developed headers, such as\n# the functionality from the nonstd project that we use for\n# gmx::compat::optional. These are included as system headers so that\n# no warnings are issued from them.\n#\n# TODO Perhaps generalize this for all headers from src/external\ntarget_include_directories(libgromacs SYSTEM PRIVATE ${PROJECT_SOURCE_DIR}/src/external)\n\nif(SIMD_AVX_512_CXX_SUPPORTED AND NOT (\"${GMX_SIMD_ACTIVE}\" STREQUAL \"AVX_512_KNL\"))\n    # Since we might be overriding -march=core-avx2, add a flag so we don't warn for this specific file.\n    # On KNL this can cause illegal instruction because the compiler might use non KNL AVX instructions\n    # with the SIMD_AVX_512_CXX_FLAGS flags.\n    set_source_files_properties(hardware/identifyavx512fmaunits.cpp PROPERTIES COMPILE_FLAGS \"${SIMD_AVX_512_CXX_FLAGS} ${CXX_NO_UNUSED_OPTION_WARNING_FLAGS}\")\nendif()\n\n# Do any special handling needed for .cpp files that use\n# CUDA runtime headers\nif (GMX_GPU_CUDA AND CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    # CUDA header cuda_runtime_api.h in at least CUDA 10.1 uses 0\n    # where nullptr would be preferable. GROMACS can't fix these, so\n    # must suppress them.\n    GMX_TEST_CXXFLAG(CXXFLAGS_NO_ZERO_AS_NULL_POINTER_CONSTANT \"-Wno-zero-as-null-pointer-constant\" NVCC_CLANG_SUPPRESSIONS_CXXFLAGS)\n\n    foreach(_compile_flag ${NVCC_CLANG_SUPPRESSIONS_CXXFLAGS})\n        set(GMX_CUDA_CLANG_FLAGS \"${GMX_CUDA_CLANG_FLAGS} ${_compile_flag}\")\n    endforeach()\n    if (GMX_CLANG_CUDA)\n        foreach (_file ${LIBGROMACS_SOURCES})\n            get_filename_component(_ext ${_file} EXT)\n            get_source_file_property(_cuda_source_format ${_file} CUDA_SOURCE_PROPERTY_FORMAT)\n            if (\"${_ext}\" STREQUAL \".cu\" OR _cuda_source_format)\n                gmx_compile_cuda_file_with_clang(${_file})\n            endif()\n        endforeach()\n    else()\n        get_property(CUDA_SOURCES GLOBAL PROPERTY CUDA_SOURCES)\n        set_source_files_properties(${CUDA_SOURCES} PROPERTIES COMPILE_FLAGS ${GMX_CUDA_CLANG_FLAGS})\n    endif()\nendif()\n\n# Only add the -fsycl flag to sources that really need it\nif (GMX_GPU_SYCL)\n    get_property(SYCL_SOURCES GLOBAL PROPERTY SYCL_SOURCES)\n    set_source_files_properties(${SYCL_SOURCES} PROPERTIES COMPILE_FLAGS \"${SYCL_CXX_FLAGS}\")\nendif()\n\ngmx_setup_tng_for_libgromacs()\n\n# We apply the SYCL flag explicitly just for libgromacs, since bugs in the beta versions of\n# icpx/dpcpp leads to crashes if we try to link an library without any SYCL code with the\n# -fsycl flag enabled. Once that bug is fixed, we should change it to simply add\n# SYCL_CXX_FLAGS to GMX_SHARED_LINKER_FLAGS.\ntarget_link_libraries(libgromacs\n                      PRIVATE\n                      ${EXTRAE_LIBRARIES}\n                      ${GMX_EXTRA_LIBRARIES}\n                      ${GMX_COMMON_LIBRARIES}\n                      ${FFT_LIBRARIES} ${LINEAR_ALGEBRA_LIBRARIES}\n                      ${THREAD_LIB} ${GMX_SHARED_LINKER_FLAGS}\n                      ${SYCL_CXX_FLAGS}\n                      ${OpenCL_LIBRARIES}\n                      $<$<PLATFORM_ID:SunOS>:socket>\n                      PUBLIC\n                      ${GMX_PUBLIC_LIBRARIES}\n                      )\ntarget_link_libraries(libgromacs PUBLIC legacy_api)\n# Dependencies from libgromacs to the modules are set up here, but\n# once the add_subdirectory() commands are re-ordered then\n# responsibility for setting this up will move to the respective\n# modules.\ntarget_link_libraries(libgromacs PRIVATE\n                      $<BUILD_INTERFACE:analysisdata>\n                      $<BUILD_INTERFACE:applied_forces>\n                      $<BUILD_INTERFACE:commandline>\n                      $<BUILD_INTERFACE:compat>\n                      $<BUILD_INTERFACE:coordinateio>\n                      $<BUILD_INTERFACE:correlationfunctions>\n                      $<BUILD_INTERFACE:domdec>\n#                      $<BUILD_INTERFACE:energyanalysis>\n                      $<BUILD_INTERFACE:essentialdynamics>\n                      $<BUILD_INTERFACE:ewald>\n                      $<BUILD_INTERFACE:fft>\n                      $<BUILD_INTERFACE:fileio>\n                      $<BUILD_INTERFACE:gmxana>\n                      $<BUILD_INTERFACE:gmxlib>\n                      $<BUILD_INTERFACE:gmxpreprocess>\n                      $<BUILD_INTERFACE:gpu_utils>\n                      $<BUILD_INTERFACE:hardware>\n                      $<BUILD_INTERFACE:imd>\n                      $<BUILD_INTERFACE:linearalgebra>\n                      $<BUILD_INTERFACE:listed_forces>\n                      $<BUILD_INTERFACE:math>\n                      $<BUILD_INTERFACE:mdlib>\n                      $<BUILD_INTERFACE:mdrun>\n                      $<BUILD_INTERFACE:mdrunutility>\n                      $<BUILD_INTERFACE:mdspan>\n                      $<BUILD_INTERFACE:mdtypes>\n                      $<BUILD_INTERFACE:mimic>\n                      $<BUILD_INTERFACE:modularsimulator>\n                      $<BUILD_INTERFACE:nbnxm>\n                      $<BUILD_INTERFACE:onlinehelp>\n                      $<BUILD_INTERFACE:options>\n                      $<BUILD_INTERFACE:pbcutil>\n                      $<BUILD_INTERFACE:pulling>\n                      $<BUILD_INTERFACE:random>\n                      $<BUILD_INTERFACE:restraint>\n                      $<BUILD_INTERFACE:selection>\n                      $<BUILD_INTERFACE:simd>\n                      $<BUILD_INTERFACE:statistics>\n                      $<BUILD_INTERFACE:swap>\n                      $<BUILD_INTERFACE:tables>\n                      $<BUILD_INTERFACE:taskassignment>\n                      $<BUILD_INTERFACE:timing>\n                      $<BUILD_INTERFACE:tools>\n                      $<BUILD_INTERFACE:topology>\n                      $<BUILD_INTERFACE:trajectory>\n                      $<BUILD_INTERFACE:trajectoryanalysis>\n                      $<BUILD_INTERFACE:utility>\n    )\nif (GMX_OPENMP)\n    target_link_libraries(libgromacs PUBLIC OpenMP::OpenMP_CXX)\nendif()\nset_target_properties(libgromacs PROPERTIES\n                      OUTPUT_NAME \"gromacs${GMX_LIBS_SUFFIX}\"\n                      SOVERSION ${LIBRARY_SOVERSION_MAJOR}\n                      VERSION ${LIBRARY_VERSION}\n                      )\n\ngmx_manage_lmfit()\ntarget_link_libraries(libgromacs PRIVATE lmfit)\n\n# Make sure we fix \"everything\" found by more recent versions of clang.\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER \"7\")\n   target_compile_options(libgromacs PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-Weverything ${IGNORED_CLANG_ALL_WARNINGS}>)\nendif()\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n   target_compile_options(libgromacs PRIVATE $<$<COMPILE_LANGUAGE:CXX>:/analyze /analyze:stacksize 70000\n     #Control flow warnings are disabled because the commond line output is insufficient. There is no tool\n     #to convert the xml report to e.g. HTML and even in Visual Studio the viewer doesn't work with cmake support.\n     /wd6001  #unitialized memory\n     /wd6011  #derefencing NULL\n     /wd6053  #prior call not zero-terminate\n     /wd6054  #might not be zero-terminated\n     /wd6385  #reading invalid data\n     /wd6386  #buffer overrun\n     /wd6387  #could be '0'\n     /wd28199 #uninitialized memory\n     # For compile time constant (e.g. templates) the following warnings have flase postives\n     /wd6239  #(<non-zero> && <expr>)\n     /wd6240  #(<expr> && <non-zero>)\n     /wd6294  #Ill-defined for-loop\n     /wd6326  #comparison of constant with other constant\n     /wd28020 #expression involving paramter is not true\n     # Misc\n     /wd6330  #incorrect type to function (warns for char (instead of unsigned) for isspace/isalpha/isdigit/..))\n     /wd6993  #OpenMP ignored\n     #TODO\n     /wd6031  #return value ignored (important - mostly warnigns about sscanf)\n     /wd6244  #hides declaration (known issue - we ingore similar warnings for other compilers)\n     /wd6246  #hides declaration\n     >\n   )\nendif()\n\nif (GMX_CLANG_TIDY)\n   set_target_properties(libgromacs PROPERTIES CXX_CLANG_TIDY\n       \"${CLANG_TIDY_EXE};-warnings-as-errors=*\")\nendif()\n\n# clang-3.6 warns about a number of issues that are not reported by more modern compilers\n# and we know they are not real issues. So we only check that it can compile without error\n# but ignore all warnings.\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND CMAKE_CXX_COMPILER_VERSION MATCHES \"^3\\.6\")\n    target_compile_options(libgromacs PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-w>)\nendif()\n\n# TODO: Stop installing libgromacs. Possibly allow installation during deprecation period with GMX_INSTALL_LEGACY_API.\nif (BUILD_SHARED_LIBS)\n    install(TARGETS libgromacs\n            EXPORT libgromacs\n            LIBRARY\n                DESTINATION ${CMAKE_INSTALL_LIBDIR}\n                COMPONENT libraries\n            RUNTIME\n                DESTINATION ${CMAKE_INSTALL_BINDIR}\n                COMPONENT libraries\n            ARCHIVE\n                DESTINATION ${CMAKE_INSTALL_LIBDIR}\n                COMPONENT libraries\n            INCLUDES DESTINATION include)\n    target_compile_definitions(libgromacs PUBLIC $<INSTALL_INTERFACE:GMX_DOUBLE=${GMX_DOUBLE_VALUE}>)\n    # legacy headers use c++17 features, so consumer codes need to use that standard, too\n    if(GMX_INSTALL_LEGACY_API)\n        target_compile_features(libgromacs INTERFACE cxx_std_${CMAKE_CXX_STANDARD})\n    endif()\nendif()\nadd_library(Gromacs::libgromacs ALIAS libgromacs)\n\ninclude(InstallLibInfo.cmake)\n\n# Technically, the user could want to do this for an OpenCL build\n# using the CUDA runtime, but currently there's no reason to want to\n# do that.\nif (INSTALL_CUDART_LIB) #can be set manual by user\n    if (GMX_GPU_CUDA)\n        foreach(CUDA_LIB ${CUDA_LIBRARIES})\n            string(REGEX MATCH \"cudart\" IS_CUDART ${CUDA_LIB})\n            if(IS_CUDART) #libcuda should not be installed\n                #install also name-links (linker uses those)\n                file(GLOB CUDA_LIBS ${CUDA_LIB}*)\n                install(FILES ${CUDA_LIBS} DESTINATION\n                    ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries)\n            endif()\n        endforeach()\n    else()\n        message(WARNING \"INSTALL_CUDART_LIB only makes sense when configuring for CUDA support\")\n    endif()\nendif()\n\nif(GMX_GPU_OPENCL)\n    # Install the utility headers\n    file(GLOB OPENCL_INSTALLED_FILES\n        gpu_utils/vectype_ops.clh\n        gpu_utils/device_utils.clh\n        )\n    install(FILES ${OPENCL_INSTALLED_FILES}\n        DESTINATION ${GMX_INSTALL_OCLDIR}/gromacs/gpu_utils\n        COMPONENT libraries)\n    file(GLOB OPENCL_INSTALLED_FILES\n        pbcutil/ishift.h\n        )\n    install(FILES ${OPENCL_INSTALLED_FILES}\n        DESTINATION ${GMX_INSTALL_OCLDIR}/gromacs/pbcutil\n        COMPONENT libraries)\n\n    # Install the NBNXM source and headers\n    file(GLOB OPENCL_INSTALLED_FILES\n        nbnxm/constants.h\n        )\n    install(FILES ${OPENCL_INSTALLED_FILES}\n        DESTINATION ${GMX_INSTALL_OCLDIR}/gromacs/nbnxm\n        COMPONENT libraries)\n    file(GLOB OPENCL_INSTALLED_FILES\n        nbnxm/opencl/nbnxm_ocl_kernels.cl\n        nbnxm/opencl/nbnxm_ocl_kernel.clh\n        nbnxm/opencl/nbnxm_ocl_kernel_pruneonly.clh\n        nbnxm/opencl/nbnxm_ocl_kernels.clh\n        nbnxm/opencl/nbnxm_ocl_kernels_fastgen.clh\n        nbnxm/opencl/nbnxm_ocl_kernels_fastgen_add_twincut.clh\n        nbnxm/opencl/nbnxm_ocl_kernel_utils.clh\n        nbnxm/opencl/nbnxm_ocl_consts.h\n        )\n    install(FILES ${OPENCL_INSTALLED_FILES}\n        DESTINATION ${GMX_INSTALL_OCLDIR}/gromacs/nbnxm/opencl\n        COMPONENT libraries)\n\n    # Install the PME source and headers\n    file(GLOB OPENCL_INSTALLED_FILES\n        ewald/pme_spread.clh\n        ewald/pme_solve.clh\n        ewald/pme_gather.clh\n        ewald/pme_gpu_calculate_splines.clh\n        ewald/pme_program.cl\n        ewald/pme_gpu_types.h\n        )\n    install(FILES ${OPENCL_INSTALLED_FILES}\n        DESTINATION ${GMX_INSTALL_OCLDIR}/gromacs/ewald\n        COMPONENT libraries)\nendif()\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/fileio/vmdio.cpp": "/*\n * This file is part of the GROMACS molecular simulation package.\n *\n * Copyright (c) 2009-2018, The GROMACS development team.\n * Copyright (c) 2019,2020, by the GROMACS development team, led by\n * Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,\n * and including many others, as listed in the AUTHORS file in the\n * top-level source directory and at http://www.gromacs.org.\n *\n * GROMACS is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public License\n * as published by the Free Software Foundation; either version 2.1\n * of the License, or (at your option) any later version.\n *\n * GROMACS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with GROMACS; if not, see\n * http://www.gnu.org/licenses, or write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.\n *\n * If you want to redistribute modifications to GROMACS, please\n * consider that scientific software is very special. Version\n * control is crucial - bugs must be traceable. We will be happy to\n * consider code for inclusion in the official distribution, but\n * derived work must not be called official GROMACS. Details are found\n * in the README & COPYING files - if they are missing, get the\n * official version at http://www.gromacs.org.\n *\n * To help us fund GROMACS development, we humbly ask that you cite\n * the research papers on the package. Check out http://www.gromacs.org.\n */\n#include \"gmxpre.h\"\n\n#include \"vmdio.h\"\n\n#include \"config.h\"\n\n#include \"gromacs/utility/path.h\"\n#include \"gromacs/utility/stringutil.h\"\n\n/* Derived from PluginMgr.C and catdcd.c */\n\n/* PluginMgr.C: Copyright: */\n/***************************************************************************\n * cr\n * cr            (C) Copyright 1995-2009 The Board of Trustees of the\n * cr                        University of Illinois\n * cr                         All Rights Reserved\n * cr\n   Developed by:           Theoretical and Computational Biophysics Group\n                        University of Illinois at Urbana-Champaign\n                        http://www.ks.uiuc.edu/\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy of\n   this software and associated documentation files (the Software), to deal with\n   the Software without restriction, including without limitation the rights to\n   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n   of the Software, and to permit persons to whom the Software is furnished to\n   do so, subject to the following conditions:\n\n   Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimers.\n\n   Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimers in the documentation\n   and/or other materials provided with the distribution.\n\n   Neither the names of Theoretical and Computational Biophysics Group,\n   University of Illinois at Urbana-Champaign, nor the names of its contributors\n   may be used to endorse or promote products derived from this Software without\n   specific prior written permission.\n\n   THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n   THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n   OTHER DEALINGS WITH THE SOFTWARE.\n ***************************************************************************/\n\n/* catdcd.c: Copyright: */\n/*****************************************************************************/\n/*                                                                           */\n/* (C) Copyright 2001-2005 Justin Gullingsrud and the University of Illinois.*/\n/*                                                                           */\n/*****************************************************************************/\n\n#include <cassert>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\n/*\n * Plugin header files; get plugin source from www.ks.uiuc.edu/Research/vmd\"\n */\n#include \"external/vmd_molfile/molfile_plugin.h\"\n#include \"external/vmd_molfile/vmddlopen.h\"\n#if !GMX_NATIVE_WINDOWS\n#    include <glob.h>\n#else\n#    ifndef _WIN32_IE\n#        define _WIN32_IE 0x0500 /* SHGetFolderPath is available since WinXP/IE5 */\n#    endif\n#    include <shlobj.h>\n#    include <windows.h>\n#endif\n\n#include \"gromacs/fileio/gmxfio.h\"\n#include \"gromacs/math/vec.h\"\n#include \"gromacs/pbcutil/pbc.h\"\n#include \"gromacs/trajectory/trajectoryframe.h\"\n#include \"gromacs/utility/basedefinitions.h\"\n#include \"gromacs/utility/fatalerror.h\"\n#include \"gromacs/utility/futil.h\"\n#include \"gromacs/utility/smalloc.h\"\n\n\ntypedef int (*initfunc)();\ntypedef int (*regfunc)(void*, vmdplugin_register_cb);\ntypedef int (*finifunc)();\n\n\nstatic int register_cb(void* v, vmdplugin_t* p)\n{\n    const char*      key       = p->name;\n    gmx_vmdplugin_t* vmdplugin = static_cast<gmx_vmdplugin_t*>(v);\n\n    if (strcmp(key, vmdplugin->filetype) == 0)\n    {\n        vmdplugin->api = reinterpret_cast<molfile_plugin_t*>(p);\n    }\n    return VMDPLUGIN_SUCCESS;\n}\n\nstatic int load_sharedlibrary_plugins(const char* fullpath, gmx_vmdplugin_t* vmdplugin)\n{\n    /* Open the dll; try to execute the init function. */\n    void *handle, *ifunc, *registerfunc;\n    handle = vmddlopen(fullpath);\n    if (!handle)\n    {\n        if (debug)\n        {\n            fprintf(debug, \"\\nUnable to open dynamic library %s.\\n%s\\n\", fullpath, vmddlerror()); /*only to debug because of stdc++ erros */\n        }\n        return 0;\n    }\n\n    ifunc = vmddlsym(handle, \"vmdplugin_init\");\n    if (!ifunc || (reinterpret_cast<initfunc>(ifunc))())\n    {\n        printf(\"\\nvmdplugin_init() for %s returned an error; plugin(s) not loaded.\\n\", fullpath);\n        vmddlclose(handle);\n        return 0;\n    }\n\n    registerfunc = vmddlsym(handle, \"vmdplugin_register\");\n    if (!registerfunc)\n    {\n        printf(\"\\nDidn't find the register function in %s; plugin(s) not loaded.\\n\", fullpath);\n        vmddlclose(handle);\n        return 0;\n    }\n    else\n    {\n        /* Load plugins from the library.*/\n        (reinterpret_cast<regfunc>(registerfunc))(vmdplugin, register_cb);\n    }\n\n    /* in case this library does not support the filetype, close it */\n    if (vmdplugin->api == nullptr)\n    {\n        vmddlclose(handle);\n    }\n\n    return 1;\n}\n\n/*return: 1: success, 0: last frame, -1: error*/\ngmx_bool read_next_vmd_frame(gmx_vmdplugin_t* vmdplugin, t_trxframe* fr)\n{\n    int                rc, i;\n    rvec               vec, angle;\n    molfile_timestep_t ts;\n\n\n    fr->bV = vmdplugin->bV;\n\n#if GMX_DOUBLE\n    snew(ts.coords, fr->natoms * 3);\n    if (fr->bV)\n    {\n        snew(ts.velocities, fr->natoms * 3);\n    }\n#else\n    ts.coords = reinterpret_cast<float*>(fr->x);\n    if (fr->bV)\n    {\n        ts.velocities = reinterpret_cast<float*>(fr->v);\n    }\n#endif\n\n    rc = vmdplugin->api->read_next_timestep(vmdplugin->handle, fr->natoms, &ts);\n\n    if (rc < -1)\n    {\n        fprintf(stderr, \"\\nError reading input file (error code %d)\\n\", rc);\n    }\n    if (rc < 0)\n    {\n        vmdplugin->api->close_file_read(vmdplugin->handle);\n        return false;\n    }\n\n#if GMX_DOUBLE\n    for (i = 0; i < fr->natoms; i++)\n    {\n        fr->x[i][0] = .1 * ts.coords[i * 3];\n        fr->x[i][1] = .1 * ts.coords[i * 3 + 1];\n        fr->x[i][2] = .1 * ts.coords[i * 3 + 2];\n        if (fr->bV)\n        {\n            fr->v[i][0] = .1 * ts.velocities[i * 3];\n            fr->v[i][1] = .1 * ts.velocities[i * 3 + 1];\n            fr->v[i][2] = .1 * ts.velocities[i * 3 + 2];\n        }\n    }\n    sfree(ts.coords);\n    if (fr->bV)\n    {\n        sfree(ts.velocities);\n    }\n#else\n    for (i = 0; i < fr->natoms; i++)\n    {\n        svmul(.1, fr->x[i], fr->x[i]);\n        if (fr->bV)\n        {\n            svmul(.1, fr->v[i], fr->v[i]);\n        }\n    }\n#endif\n\n    fr->bX   = true;\n    fr->bBox = true;\n    vec[0]   = .1 * ts.A;\n    vec[1]   = .1 * ts.B;\n    vec[2]   = .1 * ts.C;\n    angle[0] = ts.alpha;\n    angle[1] = ts.beta;\n    angle[2] = ts.gamma;\n    matrix_convert(fr->box, vec, angle);\n    if (vmdplugin->api->abiversion > 10)\n    {\n        fr->bTime = TRUE;\n        fr->time  = ts.physical_time;\n    }\n    else\n    {\n        fr->bTime = FALSE;\n    }\n\n\n    return true;\n}\n\nstatic int load_vmd_library(const char* fn, gmx_vmdplugin_t* vmdplugin)\n{\n    const char* err;\n    int         ret = 0;\n#if !GMX_NATIVE_WINDOWS\n    glob_t            globbuf;\n    const std::string defpath_suffix = \"/plugins/*/molfile\";\n    const std::string defpathenv     = GMX_VMD_PLUGIN_PATH;\n#else\n    WIN32_FIND_DATA ffd;\n    HANDLE          hFind = INVALID_HANDLE_VALUE;\n    char            progfolder[GMX_PATH_MAX];\n    std::string     defpath_suffix = \"\\\\plugins\\\\WIN32\\\\molfile\";\n    SHGetFolderPath(NULL, CSIDL_PROGRAM_FILES, NULL, SHGFP_TYPE_CURRENT, progfolder);\n    std::string defpathenv =\n            gmx::formatString(\"%s\\\\University of Illinois\\\\VMD\\\\plugins\\\\WIN32\\\\molfile\", progfolder);\n#endif\n\n    vmdplugin->api      = nullptr;\n    vmdplugin->filetype = strrchr(fn, '.');\n    if (!vmdplugin->filetype)\n    {\n        return 0;\n    }\n    vmdplugin->filetype++;\n\n    /* First look for an explicit path given at run time for the\n     * plugins, then an implicit run-time path, and finally for one\n     * given at configure time. This last might be hard-coded to the\n     * default for VMD installs. */\n    std::string pathenv = getenv(\"VMD_PLUGIN_PATH\");\n    if (pathenv.empty())\n    {\n        pathenv = getenv(\"VMDDIR\");\n        if (pathenv.empty())\n        {\n            printf(\"\\nNeither VMD_PLUGIN_PATH or VMDDIR set. \");\n            printf(\"Using default location:\\n%s\\n\", defpathenv.c_str());\n            pathenv = defpathenv;\n        }\n        else\n        {\n            printf(\"\\nVMD_PLUGIN_PATH no set, but VMDDIR is set. \");\n            pathenv = gmx::Path::join(pathenv, defpath_suffix);\n            printf(\"Using semi-default location:\\n%s\\n\", pathenv.c_str());\n        }\n    }\n#if !GMX_NATIVE_WINDOWS\n    std::string pathname = gmx::Path::join(pathenv, \"/*.so\");\n    glob(pathname.c_str(), 0, nullptr, &globbuf);\n    if (globbuf.gl_pathc == 0)\n    {\n        printf(\"\\nNo VMD Plugins found\\n\"\n               \"Set the environment variable VMD_PLUGIN_PATH to the molfile folder within the\\n\"\n               \"VMD installation.\\n\"\n               \"The architecture (e.g. 32bit versus 64bit) of GROMACS and VMD has to match.\\n\");\n        return 0;\n    }\n    for (size_t i = 0; i < globbuf.gl_pathc && vmdplugin->api == nullptr; i++)\n    {\n        /* FIXME: Undefined which plugin is chosen if more than one plugin\n           can read a certain file ending. Requires some additional command\n           line option or enviroment variable to specify which plugin should\n           be picked.\n         */\n        ret |= load_sharedlibrary_plugins(globbuf.gl_pathv[i], vmdplugin);\n    }\n    globfree(&globbuf);\n#else\n    std::string pathname = gmx::Path::join(pathenv, \"\\\\*.so\");\n    hFind                = FindFirstFile(pathname.c_str(), &ffd);\n    if (INVALID_HANDLE_VALUE == hFind)\n    {\n        printf(\"\\nNo VMD Plugins found\\n\");\n        return 0;\n    }\n    do\n    {\n        std::string filename = gmx::Path::join(pathenv, ffd.cFileName);\n        ret |= load_sharedlibrary_plugins(filename.c_str(), vmdplugin);\n    } while (FindNextFile(hFind, &ffd) != 0 && vmdplugin->api == NULL);\n    FindClose(hFind);\n#endif\n\n    if (!ret)\n    {\n        printf(\"\\nCould not open any VMD library.\\n\");\n        err = vmddlerror();\n        if (!err)\n        {\n            printf(\"Compiled with dlopen?\\n\");\n        }\n        else\n        {\n            printf(\"Last error:\\n%s\\n\", err);\n        }\n        return 0;\n    }\n\n    if (vmdplugin->api == nullptr)\n    {\n        printf(\"\\nNo plugin for %s found\\n\", vmdplugin->filetype);\n        return 0;\n    }\n\n    if (vmdplugin->api->abiversion < 10)\n    {\n        printf(\"\\nPlugin and/or VMD is too old. At least VMD 1.8.6 is required.\\n\");\n        return 0;\n    }\n\n    printf(\"\\nUsing VMD plugin: %s (%s)\\n\", vmdplugin->api->name, vmdplugin->api->prettyname);\n\n    return 1;\n}\n\nint read_first_vmd_frame(const char* fn, gmx_vmdplugin_t** vmdpluginp, t_trxframe* fr)\n{\n    molfile_timestep_metadata_t* metadata = nullptr;\n    gmx_vmdplugin_t*             vmdplugin;\n\n    snew(vmdplugin, 1);\n    *vmdpluginp = vmdplugin;\n    if (!load_vmd_library(fn, vmdplugin))\n    {\n        return 0;\n    }\n\n    vmdplugin->handle = vmdplugin->api->open_file_read(fn, vmdplugin->filetype, &fr->natoms);\n\n    if (!vmdplugin->handle)\n    {\n        fprintf(stderr, \"\\nError: could not open file '%s' for reading.\\n\", fn);\n        return 0;\n    }\n\n    if (fr->natoms == MOLFILE_NUMATOMS_UNKNOWN)\n    {\n        fprintf(stderr, \"\\nFormat of file %s does not record number of atoms.\\n\", fn);\n        return 0;\n    }\n    else if (fr->natoms == MOLFILE_NUMATOMS_NONE)\n    {\n        fprintf(stderr, \"\\nNo atoms found by VMD plugin in file %s.\\n\", fn);\n        return 0;\n    }\n    else if (fr->natoms < 1) /*should not be reached*/\n    {\n        fprintf(stderr, \"\\nUnknown number of atoms %d for VMD plugin opening file %s.\\n\", fr->natoms, fn);\n        return 0;\n    }\n\n    snew(fr->x, fr->natoms);\n\n    vmdplugin->bV = false;\n    if (vmdplugin->api->abiversion > 10 && vmdplugin->api->read_timestep_metadata)\n    {\n        vmdplugin->api->read_timestep_metadata(vmdplugin->handle, metadata);\n        assert(metadata);\n        vmdplugin->bV = (metadata->has_velocities != 0);\n        if (vmdplugin->bV)\n        {\n            snew(fr->v, fr->natoms);\n        }\n    }\n    else\n    {\n        fprintf(stderr,\n                \"\\nThis trajectory is being read with a VMD plug-in from before VMD\"\n                \"\\nversion 1.8, or from a trajectory that lacks time step metadata.\"\n                \"\\nEither way, GROMACS cannot tell whether the trajectory has velocities.\\n\");\n    }\n    return 1;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/fileio/CMakeLists.txt": "#\n# This file is part of the GROMACS molecular simulation package.\n#\n# Copyright (c) 2013,2014,2015,2016,2019,2020, by the GROMACS development team, led by\n# Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,\n# and including many others, as listed in the AUTHORS file in the\n# top-level source directory and at http://www.gromacs.org.\n#\n# GROMACS is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public License\n# as published by the Free Software Foundation; either version 2.1\n# of the License, or (at your option) any later version.\n#\n# GROMACS is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with GROMACS; if not, see\n# http://www.gnu.org/licenses, or write to the Free Software Foundation,\n# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.\n#\n# If you want to redistribute modifications to GROMACS, please\n# consider that scientific software is very special. Version\n# control is crucial - bugs must be traceable. We will be happy to\n# consider code for inclusion in the official distribution, but\n# derived work must not be called official GROMACS. Details are found\n# in the README & COPYING files - if they are missing, get the\n# official version at http://www.gromacs.org.\n#\n# To help us fund GROMACS development, we humbly ask that you cite\n# the research papers on the package. Check out http://www.gromacs.org.\n\n# Set up the module library\nadd_library(fileio INTERFACE)\nfile(GLOB FILEIO_SOURCES *.cpp)\n\nif(GMX_USE_PLUGINS)\n    add_library(vmddlopen OBJECT ${CMAKE_SOURCE_DIR}/src/external/vmd_molfile/vmddlopen.cpp)\n    gmx_target_compile_options(vmddlopen)\n    if (WIN32)\n        gmx_target_warning_suppression(vmddlopen /wd4996 HAS_NO_MSVC_UNSAFE_FUNCTION)\n    endif()\n    list(APPEND libgromacs_object_library_dependencies vmddlopen)\n    set(libgromacs_object_library_dependencies ${libgromacs_object_library_dependencies} PARENT_SCOPE)\nelse()\n    # Remove vmdio.cpp from sources since we do not have plugin support\n    list(FILTER FILEIO_SOURCES EXCLUDE REGEX \".*vmdio.cpp$\")\nendif()\n\n# Source files have the following private module dependencies.\ntarget_link_libraries(fileio PRIVATE\n#                      gmxlib\n#                      math\n#                      mdtypes\n#                      tng_io\n                      )\n\n# Public interface for modules, including dependencies and interfaces\n#target_include_directories(fileio PUBLIC\ntarget_include_directories(fileio INTERFACE\n                           $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)\n#target_link_libraries(fileio PUBLIC\ntarget_link_libraries(fileio INTERFACE\n                      legacy_api\n                      )\n\n# TODO: when fileio is an OBJECT target\n#target_link_libraries(fileio PUBLIC legacy_api)\n#target_link_libraries(fileio PRIVATE common)\n\n# Module dependencies\n# fileio interfaces convey transitive dependence on these modules.\n#target_link_libraries(fileio PUBLIC\ntarget_link_libraries(fileio INTERFACE\n                      utility\n                      )\n# Source files have the following private module dependencies.\n#target_link_libraries(fileio PRIVATE tng_io)\n# TODO: Explicitly link specific modules.\n#target_link_libraries(fileio PRIVATE legacy_modules)\n\ntarget_sources(libgromacs PRIVATE ${FILEIO_SOURCES})\n\nif (BUILD_TESTING)\n     add_subdirectory(tests)\nendif()\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/cmake/TestVMD.cpp": "#include \"molfile_plugin.h\"\n#include \"vmddlopen.cpp\"\n#include \"stdio.h\"\n\nstatic int register_cb(void *v, vmdplugin_t *p) {\n    *(molfile_plugin_t**)v = (molfile_plugin_t *)p;\n    return VMDPLUGIN_SUCCESS;\n}\n\ntypedef int (*initfunc)(void);\ntypedef int (*regfunc)(void *, vmdplugin_register_cb);\n\n/*run: gcc TestVMD.cpp -DGMX_USE_PLUGINS -Wall -ldl -I../src/external/vmd_molfile  -lm && ./a.out .../xyzplugin.so ; echo $?*/\nint main(int argc, char** argv)\n{\n    void *handle, *ifunc, *registerfunc;\n    molfile_plugin_t* api;\n    if (argc!=2) return -1;\n    handle = vmddlopen(argv[1]);\n    if (!handle)\n    {\n        fprintf(stderr,\"%s\\n\",vmddlerror());\n        return 1;\n    }\n    ifunc = vmddlsym(handle, \"vmdplugin_init\");\n    if (!ifunc || ((initfunc)(ifunc))()) return 2;\n    registerfunc = vmddlsym(handle, \"vmdplugin_register\");\n    if (!registerfunc) return 3;\n    ((regfunc)registerfunc)(&api, register_cb);\n    if (!api) return 4;\n    if (api->abiversion<10) return 5;\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/cmake/gmxManagePluginSupport.cmake": "#\n# This file is part of the GROMACS molecular simulation package.\n#\n# Copyright (c) 2016,2017,2020, by the GROMACS development team, led by\n# Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,\n# and including many others, as listed in the AUTHORS file in the\n# top-level source directory and at http://www.gromacs.org.\n#\n# GROMACS is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public License\n# as published by the Free Software Foundation; either version 2.1\n# of the License, or (at your option) any later version.\n#\n# GROMACS is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with GROMACS; if not, see\n# http://www.gnu.org/licenses, or write to the Free Software Foundation,\n# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.\n#\n# If you want to redistribute modifications to GROMACS, please\n# consider that scientific software is very special. Version\n# control is crucial - bugs must be traceable. We will be happy to\n# consider code for inclusion in the official distribution, but\n# derived work must not be called official GROMACS. Details are found\n# in the README & COPYING files - if they are missing, get the\n# official version at http://www.gromacs.org.\n#\n# To help us fund GROMACS development, we humbly ask that you cite\n# the research papers on the package. Check out http://www.gromacs.org.\n\n# Executing this macro will add the option GMX_USE_PLUGINS, which\n# makes it possible to dynamically load modules at runtime.\n# This is a very neat feature, and should virtually always work\n# on Linux, but for now it will not work without shared libraries.\n# For this reason we disable it by default, to avoid triggering\n# errors here when dynamic libraries are disabled elsewhere.\nmacro(gmx_manage_plugin_support)\n    option(GMX_USE_PLUGINS \"Enable support for dynamic plugins (e.g. VMD-supported file formats)\" OFF)\n    mark_as_advanced(GMX_USE_PLUGINS)\n\n    if(GMX_USE_PLUGINS)\n\n        message(STATUS \"Checking build environment for dynamic plugins\")\n\n        if(NOT BUILD_SHARED_LIBS)\n            message(FATAL_ERROR \"Shared libraries not built - required for dynamic plugins\")\n        endif()\n\n        # Plugins are supported natively on Windows, so nothing to check if WIN32 is set\n\n        if (NOT WIN32)\n            include(gmxTestdlopen)\n            gmx_test_dlopen(HAVE_DLOPEN)\n\t    if(NOT HAVE_DLOPEN)\n\t        message(FATAL_ERROR \"dlopen() support missing - required for dynamic plugins\")\n            endif()\n        endif()\n\n\tmessage(STATUS \"Checking build environment for dynamic plugins - supported\")\n\n\tlist(APPEND GMX_EXTRA_LIBRARIES ${CMAKE_DL_LIBS}) # magic cross-platform pre-set variable for dlopen library\n\tset(PKG_DL_LIBS \"-l${CMAKE_DL_LIBS}\")\n\n    endif()\nendmacro()\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/cmake/gmxTestdlopen.cmake": "#\n# This file is part of the GROMACS molecular simulation package.\n#\n# Copyright (c) 2012,2015,2020, by the GROMACS development team, led by\n# Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,\n# and including many others, as listed in the AUTHORS file in the\n# top-level source directory and at http://www.gromacs.org.\n#\n# GROMACS is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public License\n# as published by the Free Software Foundation; either version 2.1\n# of the License, or (at your option) any later version.\n#\n# GROMACS is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with GROMACS; if not, see\n# http://www.gnu.org/licenses, or write to the Free Software Foundation,\n# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.\n#\n# If you want to redistribute modifications to GROMACS, please\n# consider that scientific software is very special. Version\n# control is crucial - bugs must be traceable. We will be happy to\n# consider code for inclusion in the official distribution, but\n# derived work must not be called official GROMACS. Details are found\n# in the README & COPYING files - if they are missing, get the\n# official version at http://www.gromacs.org.\n#\n# To help us fund GROMACS development, we humbly ask that you cite\n# the research papers on the package. Check out http://www.gromacs.org.\n\n# - Define macro to check if DLOPEN is defined\n#\n#  GMX_TEST_DLOPEN(VARIABLE)\n#\n#  VARIABLE will be set if dlopen is present in dlfcn.h\n#\n\nMACRO(GMX_TEST_DLOPEN VARIABLE)\n  IF(NOT DEFINED ${VARIABLE})\n    MESSAGE(STATUS \"Checking for dlopen\")\n\n    set(CMAKE_REQUIRED_INCLUDES \"dlfcn.h\")\n    # TODO Make a proper find_package for dlopen to find\n    # dlfcn.h. The CMake variable CMAKE_DL_LIBS works magically\n    # for the library, however.\n    set(CMAKE_REQUIRED_LIBRARIES \"dl\")\n    check_c_source_compiles(\n      \"#include <dlfcn.h>\nint main(void) {\n  dlopen(0,0);\n  return 0;\n}\" ${VARIABLE})\n\n    IF(${VARIABLE})\n      MESSAGE(STATUS \"Checking for dlopen - found\")\n      set(${VARIABLE} 1 CACHE INTERNAL \"Result of test for dlopen\" FORCE)\n    ELSE()\n      MESSAGE(STATUS \"Checking for dlopen - not found\")\n      set(${VARIABLE} 0 CACHE INTERNAL \"Result of test for dlopen\" FORCE)\n    ENDIF()\n    set(CMAKE_REQUIRED_INCLUDES)\n    set(CMAKE_REQUIRED_LIBRARIES)\n  ENDIF()\nENDMACRO()\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/vmd-imd.rst": "\n.. this really does not belong here in my opinion\n\nUsing VMD plug-ins for trajectory file I/O\n------------------------------------------\n\n|Gromacs|\ntools are able to use the plug-ins found in an existing installation of\n`VMD`_ in order to read and write\ntrajectory files in formats that are not native to |Gromacs|. You will be\nable to supply an AMBER DCD-format trajectory filename directly to\n|Gromacs| tools, for example.\n\nThis requires a VMD installation not older than version 1.8, that your\nsystem provides the dlopen function so that programs can determine at\nrun time what plug-ins exist, and that you build shared libraries when\nbuilding |Gromacs|. CMake will find the vmd executable in your path, and\nfrom it, or the environment variable ``VMDDIR`` at\nconfiguration or run time, locate the plug-ins. Alternatively, the\n``VMD_PLUGIN_PATH`` can be used at run time to specify a\npath where these plug-ins can be found. Note that these plug-ins are in\na binary format, and that format must match the architecture of the\nmachine attempting to use them.\n\nInteractive Molecular Dynamics\n------------------------------\n\n|Gromacs| supports the interactive molecular dynamics (IMD) protocol as\nimplemented by `VMD`_ to control\na running simulation in NAMD. IMD allows to monitor a running |Gromacs|\nsimulation from a VMD client. In addition, the user can interact with\nthe simulation by pulling on atoms, residues or fragments with a mouse\nor a force-feedback device. Additional information about the |Gromacs|\nimplementation and an exemplary |Gromacs| IMD system can be found `on this\nhomepage <http://www.mpibpc.mpg.de/grubmueller/interactivemd>`__.\n\nSimulation input preparation\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe |Gromacs| implementation allows transmission and interaction with a\npart of the running simulation only, e.g.\u00a0in cases where no water\nmolecules should be transmitted or pulled. The group is specified via\nthe :ref:`mdp` option ``IMD-group``. When\n``IMD-group`` is empty, the IMD protocol is disabled and\ncannot be enabled via the switches in :ref:`mdrun <gmx mdrun>`. To interact\nwith the entire system, ``IMD-group`` can be set to\n``System``. When using :ref:`grompp <gmx grompp>`, a\n:ref:`gro` file to be used as VMD input is written out\n(``-imd`` switch of :ref:`grompp <gmx grompp>`).\n\nStarting the simulation\n^^^^^^^^^^^^^^^^^^^^^^^\n\nCommunication between VMD and |Gromacs| is achieved via TCP sockets and\nthus enables controlling an :ref:`mdrun <gmx mdrun>` running locally or on\na remote cluster. The port for the connection can be specified with the\n``-imdport`` switch of :ref:`mdrun <gmx mdrun>`, 8888 is the\ndefault. If a port number of 0 or smaller is provided, |Gromacs|\nautomatically assigns a free port to use with IMD.\n\nEvery :math:`N` steps, the :ref:`mdrun <gmx mdrun>` client receives the\napplied forces from VMD and sends the new positions to the client. VMD\npermits increasing or decreasing the communication frequency\ninteractively. By default, the simulation starts and runs even if no IMD\nclient is connected. This behavior is changed by the\n``-imdwait`` switch of :ref:`mdrun <gmx mdrun>`. After startup\nand whenever the client has disconnected, the integration stops until\nreconnection of the client. When the ``-imdterm`` switch is\nused, the simulation can be terminated by pressing the stop button in\nVMD. This is disabled by default. Finally, to allow interacting with the\nsimulation (i.e. pulling from VMD) the ``-imdpull`` switch\nhas to be used. Therefore, a simulation can only be monitored but not\ninfluenced from the VMD client when none of ``-imdwait``,\n``-imdterm`` or ``-imdpull`` are set. However,\nsince the IMD protocol requires no authentication, it is not advisable\nto run simulations on a host directly reachable from an insecure\nenvironment. Secure shell forwarding of TCP can be used to connect to\nrunning simulations not directly reachable from the interacting host.\nNote that the IMD command line switches of :ref:`mdrun <gmx mdrun>` are\nhidden by default and show up in the help text only with\n:ref:`gmx mdrun` ``-h -hidden``.\n\nConnecting from VMD\n^^^^^^^^^^^^^^^^^^^\n\nIn VMD, first the structure corresponding to the IMD group has to be\nloaded (*File* :math:`\\rightarrow` *New Molecule*). Then the IMD\nconnection window has to be used (*Extensions* :math:`\\rightarrow`\n*Simulation* :math:`\\rightarrow` *IMD Connect (NAMD)*). In the IMD\nconnection window, hostname and port have to be specified and followed\nby pressing *Connect*. *Detach Sim* allows disconnecting without\nterminating the simulation, while *Stop Sim* ends the simulation on the\nnext neighbor searching step (if allowed by ``-imdterm``).\n\nThe timestep transfer rate allows adjusting the communication frequency\nbetween simulation and IMD client. Setting the keep rate loads every\n:math:`N^\\mathrm{th}` frame into VMD instead of discarding them when a\nnew one is received. The displayed energies are in SI units in contrast\nto energies displayed from NAMD simulations.s\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/testutils/simulationdatabase/spc2.trr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/testutils/simulationdatabase/spc2-traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/testutils/simulationdatabase/spc2-traj.tng",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/testutils/simulationdatabase/spc2-traj.g96",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/testutils/simulationdatabase/ellipsoid-density.mrc",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/testutils/simulationdatabase/spc2-traj.trr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/external/tng_io/example_files/tng_example.tng",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/external/clFFT/src/library/plan.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/fileio/tests/spc2-traj.tng",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/gmxana/tests/msd_traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/trajectoryanalysis/tests/clustsize.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/trajectoryanalysis/tests/freevolume.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/trajectoryanalysis/tests/freevolume.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/trajectoryanalysis/tests/extract_cluster.trr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/energyanalysis/tests/dhdl.edr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/energyanalysis/tests/ener.edr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/energyanalysis/tests/dhdl.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/energyanalysis/tests/orires.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/src/gromacs/energyanalysis/tests/orires.edr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/.git/objects/pack/pack-49ce132f96c89573212bc1fa2c227897f83bbe7a.idx",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/.git/objects/pack/pack-49ce132f96c89573212bc1fa2c227897f83bbe7a.pack",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/cmake/TestImageMagickConvert.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/dev-manual/redmine-states.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/lambda-values.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/awh-pmfs.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/field.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/pullref.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/awh-sampleweights.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/pulldirrel.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/awh-invN.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/equipotential.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/compelsetup.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/dumaro.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/gaussians.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/pull.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/rotation.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/awh-traj.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/special/plots/dumtypes.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/peregrine-old.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/plotje.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/fp-highres.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/shiftf.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/peregrine-old.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/ring.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/f-bond.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/f-angle.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/parsort.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/xvgr.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/mdpar.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/adress.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/fp-highres.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/drift-all.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/int-mat.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/decomp.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/dih.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/GMX_logos/gmx_logo_white.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/GMX_logos/gmx_falcon_blue.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/GMX_logos/gmx_falcon_waterstamp.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/GMX_logos/gmx_logo_black.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/GMX_logos/gmx_logo_blue.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/GMX_logos/gmx_falcon_white.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/GMX_logos/gmx_logo_waterstamp.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/plots/GMX_logos/gmx_falcon_black.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/maxwell.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/dd-tric.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/dd-cells.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/leapfrog.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/rhododec.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/nstric.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/truncoct.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/mpmd-pme.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/verlet-drift.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/pbctric.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/free1.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/lincs.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/flowchart.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/free2.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/algorithms/plots/par-lincs2.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/vsite-4fdn.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/fbposres.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/f-dih.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/fig-02.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/dummies.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/f-lj.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/f-dr.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/f-morse.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/angle.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/vcrf.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/f-pr.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/fig-04.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/f-bham.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/f-imps.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/ring-imp.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/tetra-im.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/f-rbs.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/bstretch.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/subst-im.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/softcore.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/functions/plots/chain.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/rdfO-O.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/hpr-wheel.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/rdf.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/rama.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/dssp.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/hbond.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/msdwater.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/hbond-insert.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/dih-def.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/phipsi.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/ngmxdump.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/distm.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/reference-manual/analysis/plots/sgangle.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/user-guide/plotje.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-master-dvqrkawmdn7zbtfl526szp2ff7w47osp/spack-src/docs/user-guide/xvgr.gif"
    ],
    "total_files": 5642
}