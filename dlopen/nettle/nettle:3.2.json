{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-nettle-3.2-iiqwwhepjqx6vybmvsv3hdbtscomlyhz/spack-src/config.h.in": "/* config.h.in.  Generated from configure.ac by autoheader.  */\n\n/* Define if building universal (internal helper macro) */\n#undef AC_APPLE_UNIVERSAL_BUILD\n\n/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n   systems. This function is required for `alloca.c' support on those systems.\n   */\n#undef CRAY_STACKSEG_END\n\n/* Define to 1 if using `alloca.c'. */\n#undef C_ALLOCA\n\n/* Define to 1 if you have `alloca', as a function or macro. */\n#undef HAVE_ALLOCA\n\n/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n   */\n#undef HAVE_ALLOCA_H\n\n/* Define if clock_gettime is available */\n#undef HAVE_CLOCK_GETTIME\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#undef HAVE_DLFCN_H\n\n/* Define if fcntl file locking is available */\n#undef HAVE_FCNTL_LOCKING\n\n/* Define if the compiler understands __attribute__ */\n#undef HAVE_GCC_ATTRIBUTE\n\n/* Define to 1 if you have the `getline' function. */\n#undef HAVE_GETLINE\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Define to 1 if you have dlopen (with -ldl). */\n#undef HAVE_LIBDL\n\n/* Define to 1 if you have the `gmp' library (-lgmp). */\n#undef HAVE_LIBGMP\n\n/* Define if compiler and linker supports __attribute__ ifunc */\n#undef HAVE_LINK_IFUNC\n\n/* Define to 1 if you have the <malloc.h> header file. */\n#undef HAVE_MALLOC_H\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Define to 1 each of the following for which a native (ie. CPU specific)\n    implementation of the corresponding routine exists.  */\n#undef HAVE_NATIVE_ecc_192_modp\n#undef HAVE_NATIVE_ecc_192_redc\n#undef HAVE_NATIVE_ecc_224_modp\n#undef HAVE_NATIVE_ecc_224_redc\n#undef HAVE_NATIVE_ecc_25519_modp\n#undef HAVE_NATIVE_ecc_256_modp\n#undef HAVE_NATIVE_ecc_256_redc\n#undef HAVE_NATIVE_ecc_384_modp\n#undef HAVE_NATIVE_ecc_384_redc\n#undef HAVE_NATIVE_ecc_521_modp\n#undef HAVE_NATIVE_ecc_521_redc\n#undef HAVE_NATIVE_gcm_hash8\n#undef HAVE_NATIVE_salsa20_core\n#undef HAVE_NATIVE_sha1_compress\n#undef HAVE_NATIVE_sha256_compress\n#undef HAVE_NATIVE_sha512_compress\n#undef HAVE_NATIVE_sha3_permute\n#undef HAVE_NATIVE_umac_nh\n#undef HAVE_NATIVE_umac_nh_n\n\n/* Define to 1 if you have the <openssl/aes.h> header file. */\n#undef HAVE_OPENSSL_AES_H\n\n/* Define to 1 if you have the <openssl/blowfish.h> header file. */\n#undef HAVE_OPENSSL_BLOWFISH_H\n\n/* Define to 1 if you have the <openssl/cast.h> header file. */\n#undef HAVE_OPENSSL_CAST_H\n\n/* Define to 1 if you have the <openssl/des.h> header file. */\n#undef HAVE_OPENSSL_DES_H\n\n/* Define to 1 if you have the <openssl/ecdsa.h> header file. */\n#undef HAVE_OPENSSL_ECDSA_H\n\n/* Define to 1 if you have the `secure_getenv' function. */\n#undef HAVE_SECURE_GETENV\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Define to 1 if you have the `strerror' function. */\n#undef HAVE_STRERROR\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define to 1 if you have the <valgrind/memcheck.h> header file. */\n#undef HAVE_VALGRIND_MEMCHECK_H\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* The size of `char', as computed by sizeof. */\n#undef SIZEOF_CHAR\n\n/* The size of `int', as computed by sizeof. */\n#undef SIZEOF_INT\n\n/* The size of `long', as computed by sizeof. */\n#undef SIZEOF_LONG\n\n/* The size of `short', as computed by sizeof. */\n#undef SIZEOF_SHORT\n\n/* The size of `size_t', as computed by sizeof. */\n#undef SIZEOF_SIZE_T\n\n/* The size of `void*', as computed by sizeof. */\n#undef SIZEOF_VOIDP\n\n/* If using the C implementation of alloca, define if you know the\n   direction of stack growth for your system; otherwise it will be\n   automatically deduced at runtime.\n\tSTACK_DIRECTION > 0 => grows toward higher addresses\n\tSTACK_DIRECTION < 0 => grows toward lower addresses\n\tSTACK_DIRECTION = 0 => direction of growth unknown */\n#undef STACK_DIRECTION\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */\n#undef TIME_WITH_SYS_TIME\n\n/* Defined if public key features are enabled */\n#undef WITH_HOGWEED\n\n/* Define if you have openssl's libcrypto (used for benchmarking) */\n#undef WITH_OPENSSL\n\n/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n   significant byte first (like Motorola and SPARC, unlike Intel). */\n#if defined AC_APPLE_UNIVERSAL_BUILD\n# if defined __BIG_ENDIAN__\n#  define WORDS_BIGENDIAN 1\n# endif\n#else\n# ifndef WORDS_BIGENDIAN\n#  undef WORDS_BIGENDIAN\n# endif\n#endif\n\n/* Define to empty if `const' does not conform to ANSI C. */\n#undef const\n\n/* Define to `int' if <sys/types.h> doesn't define. */\n#undef gid_t\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n#undef inline\n#endif\n\n/* Define to `unsigned int' if <sys/types.h> does not define. */\n#undef size_t\n\n/* Define to `int' if <sys/types.h> doesn't define. */\n#undef uid_t\n\n/* AIX requires this to be the first thing in the file.  */\n#ifndef __GNUC__\n# if HAVE_ALLOCA_H\n#  include <alloca.h>\n# else\n#  ifdef _AIX\n #pragma alloca\n#  else\n#   ifndef alloca /* predefined by HP cc +Olibcalls */\nchar *alloca ();\n#   endif\n#  endif\n/* Needed for alloca on windows */\n#  if HAVE_MALLOC_H\n#   include <malloc.h>\n#  endif\n# endif\n#else /* defined __GNUC__ */\n# if HAVE_ALLOCA_H\n#  include <alloca.h>\n# else\n/* Needed for alloca on windows, also with gcc */\n#  if HAVE_MALLOC_H\n#   include <malloc.h>\n#  endif\n# endif\n#endif\n\n\n#if HAVE_STRERROR\n#define STRERROR strerror\n#else\n#define STRERROR(x) (sys_errlist[x])\n#endif\n\n\n#if __GNUC__ && HAVE_GCC_ATTRIBUTE\n# define NORETURN __attribute__ ((__noreturn__))\n# define PRINTF_STYLE(f, a) __attribute__ ((__format__ (__printf__, f, a)))\n# define UNUSED __attribute__ ((__unused__))\n#else\n# define NORETURN\n# define PRINTF_STYLE(f, a)\n# define UNUSED\n#endif\n\n\n#if defined(__x86_64__) || defined(__arch64__)\n# define HAVE_NATIVE_64_BIT 1\n#else\n/* Needs include of <limits.h> before use. */\n# define HAVE_NATIVE_64_BIT (SIZEOF_LONG * CHAR_BIT >= 64)\n#endif\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-nettle-3.2-iiqwwhepjqx6vybmvsv3hdbtscomlyhz/spack-src/configure.ac": "dnl -*- mode: shell-script; sh-indentation: 2; -*-\n\ndnl Process this file with autoconf to produce a configure script.\n\nAC_INIT([nettle], [3.2], [nettle-bugs@lists.lysator.liu.se])\nAC_PREREQ(2.61)\nAC_CONFIG_SRCDIR([arcfour.c])\n# Needed to stop autoconf from looking for files in parent directories.\nAC_CONFIG_AUX_DIR([.])\n\nAC_CONFIG_HEADER([config.h])\n\nLIBNETTLE_MAJOR=6\nLIBNETTLE_MINOR=2\n\nLIBHOGWEED_MAJOR=4\nLIBHOGWEED_MINOR=2\n\ndnl Note double square brackets, for extra m4 quoting.\nMAJOR_VERSION=`echo $PACKAGE_VERSION | sed 's/^\\([[^.]]*\\)\\..*/\\1/'`\nMINOR_VERSION=`echo $PACKAGE_VERSION | sed 's/^[[^.]]*\\.\\([[0-9]]*\\).*/\\1/'`\nAC_SUBST([MAJOR_VERSION])\nAC_SUBST([MINOR_VERSION])\n\nAC_CANONICAL_HOST\n\n# Command line options\nAC_ARG_WITH(include-path,\n  AC_HELP_STRING([--with-include-path], [A colon-separated list of directories to search for include files]),,\n  [with_include_path=''])\n\nif test x$with_include_path != x ; then\n  CPPFLAGS=\"$CPPFLAGS -I`echo $with_include_path | sed 's/:/ -I/g'`\"\nfi\n\nAC_ARG_WITH(lib-path,\n  AC_HELP_STRING([--with-lib-path], [A colon-separated list of directories to search for libraries]),,\n  [with_lib_path=''])\n\nif test x$with_lib_path != x ; then\n  LDFLAGS=\"$LDFLAGS -L`echo $with_lib_path | sed 's/:/ -L/g'`\"\nfi\n\nAC_ARG_ENABLE(public-key,\n  AC_HELP_STRING([--disable-public-key], [Disable public key algorithms]),,\n  [enable_public_key=yes])\n\nAC_ARG_ENABLE(assembler,\n  AC_HELP_STRING([--disable-assembler],[Disable assembler code]),,\n  [enable_assembler=yes])\n\nAC_ARG_ENABLE(static,\n  AC_HELP_STRING([--disable-static], [Do not build any static library]),,\n  [enable_static=yes])\n\nAC_ARG_ENABLE(shared,\n  AC_HELP_STRING([--disable-shared], [Do not build any shared library]),,\n  [enable_shared=yes])\n\nAC_ARG_ENABLE(pic,\n  AC_HELP_STRING([--disable-pic],\n  [Do not try to compile library files as position independent code]),,\n  [enable_pic=yes])\n\nAC_ARG_ENABLE(openssl,\n  AC_HELP_STRING([--disable-openssl], [Do not include openssl glue in the benchmark program]),,\n  [enable_openssl=yes])\n\nAC_ARG_ENABLE(gcov,\n  AC_HELP_STRING([--enable-gcov], [Instrument for gcov (requires a modern gcc)]),,\n  [enable_gcov=no])\n\nAC_ARG_ENABLE(documentation,\n  AC_HELP_STRING([--disable-documentation], [Omit building and installing the documentation. (default=auto)]),,\n  [enable_documentation=auto])\n\nAC_ARG_ENABLE(fat, AC_HELP_STRING([--enable-fat], [Enable fat library build (default=no)]),,\n  [enable_fat=no])\n\nAC_ARG_ENABLE(arm-neon,\n  AC_HELP_STRING([--enable-arm-neon], [Enable ARM Neon assembly. (default=auto)]),,\n  [enable_arm_neon=auto])\n\nAC_ARG_ENABLE(x86-aesni,\n  AC_HELP_STRING([--enable-x86-aesni], [Enable x86_64 aes instructions. (default=no)]),,\n  [enable_x86_aesni=no])\n\nAC_ARG_ENABLE(mini-gmp,\n  AC_HELP_STRING([--enable-mini-gmp], [Enable mini-gmp, used instead of libgmp.]),,\n  [enable_mini_gmp=no])\n\nif test \"x$enable_mini_gmp\" = xyes ; then\n  NETTLE_USE_MINI_GMP=1\n  HOGWEED_EXTRA_SYMBOLS=\"mpz_*;gmp_*;mpn_*;\"\nelse\n  NETTLE_USE_MINI_GMP=0\n  HOGWEED_EXTRA_SYMBOLS=\"\"\nfi\nAC_SUBST([NETTLE_USE_MINI_GMP])\nAC_SUBST([HOGWEED_EXTRA_SYMBOLS])\n\nLSH_RPATH_INIT([`echo $with_lib_path | sed 's/:/ /g'` \\\n    `echo $exec_prefix | sed \"s@^NONE@$prefix/lib@g\" | sed \"s@^NONE@$ac_default_prefix/lib@g\"` \\\n    /usr/local/lib /sw/local/lib /sw/lib \\\n    /usr/gnu/lib /opt/gnu/lib /sw/gnu/lib /usr/freeware/lib /usr/pkg/lib])\n\n# Checks for programs.\nAC_PROG_CC\n\nNETTLE_CHECK_IFUNC\n\n# When $CC foo.c -o foo creates both foo and foo.exe, autoconf picks\n# up the foo.exe and sets exeext to .exe. That is correct for cygwin,\n# which has some kind of magic link from foo to foo.exe, but not for\n# rntcl. A better check for the cygwin case would check if the\n# contents of foo and foo.exe are equal; in the rntcl case, foo is a\n# sh script, and foo.exe is a windows executable.\n\nif test \"x$CC\" = xrntcl ; then\n    AC_MSG_NOTICE([Compiling with rntcl; clearing EXEEXT and disabling assembler])\n    ac_exeext=''\n    ac_cv_exeext=''\n    EXEEXT=''\n    enable_assembler=no\nfi\n\n# Used by the testsuite only\nAC_PROG_CXX\n\nAC_LANG_PUSH(C++)\nAC_TRY_COMPILE([],[return 0;],[IF_CXX=''], [IF_CXX='#'])\nAC_SUBST([IF_CXX])\nAC_LANG_POP\n\nLD_VERSION_SCRIPT\n\nAC_PROG_MAKE_SET\nAC_PROG_RANLIB\nAC_CHECK_TOOL(NM, nm, strings)\n# Used only for the GNU-stack configure test.\nAC_CHECK_TOOL(OBJDUMP, objdump, false)\nAC_CHECK_TOOL(AR, ar, false)\n\nif test \"x$ac_cv_prog_cc_stdc\" = xno ; then\n  AC_ERROR([the C compiler doesn't handle ANSI-C]) #'\nfi\n\nAC_PROG_INSTALL\n\n# According to the autoconf manual, needs install-sh from\n# autoconf-2.60 or automake-1.10 to avoid races.\nAC_PROG_MKDIR_P\n\nAC_PROG_LN_S\n\n# Compiler tests for the build system\nGMP_PROG_CC_FOR_BUILD\nGMP_PROG_EXEEXT_FOR_BUILD\n\nLSH_DEPENDENCY_TRACKING\n\nif test x$enable_dependency_tracking = xyes ; then\n  # Since the makefiles use include to get the dependency files, we must\n  # make sure that the files exist. We generate some more files than are\n  # actually needed.\n\n  AC_CONFIG_COMMANDS([dummy-dep-files],\n  [(cd \"$srcdir\" && find . '(' -name '*.c' -o -name '*.cxx' ')' -print) \\\n | sed 's/\\.cx*$//' | (while read f; do \\\n      test -f \"$f.o.d\" || echo > \"$f.o.d\"; \\\n   done)\n])\nfi\n\nif test \"x$enable_gcov\" = \"xyes\"; then\n  CFLAGS=\"$CFLAGS -ftest-coverage -fprofile-arcs\"\nfi\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_C_INLINE\nAC_TYPE_UID_T\nAC_TYPE_SIZE_T\nAC_HEADER_TIME\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(size_t)\n\nAC_CHECK_HEADERS([openssl/blowfish.h openssl/des.h openssl/cast.h openssl/aes.h openssl/ecdsa.h],,\n[enable_openssl=no\n break])\n\n# For use by the testsuite\nAC_CHECK_HEADERS([valgrind/memcheck.h])\nAC_CHECK_HEADERS([dlfcn.h])\nAC_CHECK_LIB([dl], [dlopen],\n\t     [AC_DEFINE([HAVE_LIBDL], 1,\n\t\t\t[Define to 1 if you have dlopen (with -ldl).])])\n\nLSH_FUNC_ALLOCA\nLSH_FUNC_STRERROR\n# getenv_secure is used for fat overrides,\n# getline is used in the testsuite\nAC_CHECK_FUNCS(secure_getenv getline)\nAC_C_BIGENDIAN\n\nLSH_GCC_ATTRIBUTES\n\n# According to Simon Josefsson, looking for uint32_t and friends in\n# sys/types.h is needed on some systems, in particular cygwin.\nAX_CREATE_STDINT_H([nettle-stdint.h], [sys/types.h])\n\n# Check for file locking. We (AC_PROG_CC?) have already checked for\n# sys/types.h and unistd.h.\nAC_CACHE_CHECK([for fcntl file locking],\n\t\tnettle_cv_fcntl_locking,\n[AC_TRY_COMPILE([\n#if HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#if HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#include <fcntl.h>\n],[\nint op = F_SETLKW;\nstruct flock fl;\n],\nnettle_cv_fcntl_locking=yes,\nnettle_cv_fcntl_locking=no)])\n\nAH_TEMPLATE([HAVE_FCNTL_LOCKING], [Define if fcntl file locking is available])\nif test \"x$nettle_cv_fcntl_locking\" = \"xyes\" ; then\n  AC_DEFINE(HAVE_FCNTL_LOCKING)\nfi\n\n# Checks for libraries\nif test \"x$enable_public_key\" = \"xyes\" ; then\n  if test \"x$enable_mini_gmp\" = \"xno\" ; then\n    AC_CHECK_LIB(gmp, __gmpz_getlimbn,,\n        [AC_MSG_WARN(\n    [GNU MP not found, or not 3.1 or up, see http://gmplib.org/.\n    Support for public key algorithms will be unavailable.])]\n        enable_public_key=no)\n\n    # Add -R flags needed to run programs linked with gmp\n    LSH_RPATH_FIX\n  fi\nfi\n\nnettle_cv_gmp_numb_bits=0\nif test \"x$enable_public_key\" = \"xyes\" ; then\n  # Check for gmp limb size\n  if test \"x$enable_mini_gmp\" = \"xyes\" ; then\n    AC_MSG_CHECKING([for mini-gmp limb size])\n    # With mini-gmp, mp_limb_t is always unsigned long.\n    AC_COMPUTE_INT(nettle_cv_gmp_numb_bits, [(sizeof(unsigned long) * CHAR_BIT)],\n        [#include <limits.h>],\n        [AC_MSG_FAILURE([cannot find value of GMP_NUMB_BITS])])\n\n    AC_MSG_RESULT([$nettle_cv_gmp_numb_bits bits])\n  else\n    AC_MSG_CHECKING([for GMP limb size])\n    AC_COMPUTE_INT(nettle_cv_gmp_numb_bits, [GMP_NUMB_BITS],\n        [#include <gmp.h>],\n        [AC_MSG_FAILURE([cannot find value of GMP_NUMB_BITS])])\n\n    AC_MSG_RESULT([$nettle_cv_gmp_numb_bits bits])\n  fi\nfi\n\nGMP_NUMB_BITS=\"$nettle_cv_gmp_numb_bits\"\nAC_SUBST([GMP_NUMB_BITS])\n\n# Figure out ABI. Currently, configurable only by setting CFLAGS.\nABI=standard\n\ncase \"$host_cpu\" in\n  [x86_64 | amd64])\n    AC_TRY_COMPILE([\n#if defined(__x86_64__) || defined(__arch64__)\n#error 64-bit x86\n#endif\n    ], [], [\n      ABI=32\n    ], [\n      ABI=64\n    ])\n    ;;\n  *sparc*)\n    AC_TRY_COMPILE([\n#if defined(__sparcv9) || defined(__arch64__)\n#error 64-bit sparc\n#endif\n    ], [], [\n      ABI=32\n    ], [\n      ABI=64\n    ])\n    ;;\n  *mips*)\n    AC_TRY_COMPILE([\n#if defined(__sgi) && defined(__LP64__)\n#error 64-bit mips\n#endif\n    ], [], [\n      ABI=32\n    ], [\n      ABI=64\n    ])\n    ;;\nesac\n\nif test \"x$ABI\" != xstandard ; then\n  AC_MSG_NOTICE([Compiler uses $ABI-bit ABI. To change, set CC.])\n  if test \"$libdir\" = '${exec_prefix}/lib' ; then\n    # Try setting a better default\n    case \"$host_cpu:$host_os:$ABI\" in\n      *:solaris*:32|*:sunos*:32)\n\tlibdir='${exec_prefix}/lib'\n\t;;\n      *:solaris*:64|*:sunos*:64)\n\tlibdir='${exec_prefix}/lib/64'\n\t;;\n      # Linux conventions are a mess... According to the Linux File\n      # Hierarchy Standard, all architectures except IA64 puts 32-bit\n      # libraries in lib, and 64-bit in lib64. Some distributions,\n      # e.g., Fedora and Gentoo, adhere to this standard, while at\n      # least Debian has decided to put 64-bit libraries in lib and\n      # 32-bit libraries in lib32.\n      \n      # We try to figure out the convention, except if we're cross\n      # compiling. We use lib${ABI} if /usr/lib${ABI} exists and\n      # appears to not be a symlink to a different name.\n      *:linux*:32|*:linux*:64)\n\tif test \"$cross_compiling\" = yes ; then\n          AC_MSG_WARN([Cross compiling for linux. Can't guess if libraries go in lib${ABI} or lib.]); dnl '\n\telse\n\t  # The dash builtin pwd tries to be \"helpful\" and remember\n\t  # symlink names. Use -P option, and hope it's portable enough.\n\t  test -d /usr/lib${ABI} \\\n\t    && (cd /usr/lib${ABI} && pwd -P | grep >/dev/null \"/lib${ABI}\"'$') \\\n\t    && libdir='${exec_prefix}/'\"lib${ABI}\"\n\tfi\n\t;;\n      # On freebsd, it seems 32-bit libraries are in lib32,\n      # and 64-bit in lib. Don't know about \"kfreebsd\", does\n      # it follow the Linux fhs conventions?\n      *:freebsd*:32)\n\tlibdir='${exec_prefix}/lib32'\n\t;;\n      *:freebsd*:64)\n\tlibdir='${exec_prefix}/lib'\n\t;;\n      *:irix*:32)\n\tlibdir='${exec_prefix}/lib32'\n\t;;\n      *:irix*:64)\n\tlibdir='${exec_prefix}/lib64'\n\t;;\n      *)\n        AC_MSG_WARN([Don't know where to install $ABI-bit libraries on this system.]); dnl '\n\n    esac\n    AC_MSG_NOTICE([Libraries to be installed in $libdir.])\n  fi\nfi\n\nOPT_NETTLE_SOURCES=\"\"\n\n# Select assembler code\nasm_path=\nif test \"x$enable_assembler\" = xyes ; then\n  case \"$host_cpu\" in\n    [i?86* | k[5-8]* | pentium* | athlon])\n      asm_path=x86\n      ;;\n    [x86_64 | amd64])\n      if test \"$ABI\" = 64 ; then\n\tasm_path=x86_64\n\tif test \"x$enable_fat\" = xyes ; then\n\t  asm_path=\"x86_64/fat $asm_path\"\n\t  OPT_NETTLE_SOURCES=\"fat-x86_64.c $OPT_NETTLE_SOURCES\"\n\telif test \"x$enable_x86_aesni\" = xyes ; then\n\t  asm_path=\"x86_64/aesni $asm_path\"\n\tfi\n      else\n\tasm_path=x86\n      fi\n      ;;\n    *sparc*)\n      if test \"$ABI\" = 64 ; then\n\tasm_path=sparc64\n      else\n\tasm_path=sparc32\n      fi\n      ;;\n    arm*)\n      asm_path=arm\n      if test \"x$enable_fat\" = xyes ; then\n\tasm_path=\"arm/fat $asm_path\"\n\tOPT_NETTLE_SOURCES=\"fat-arm.c $OPT_NETTLE_SOURCES\"\n      else\n\tcase \"$host_cpu\" in\n\t  armv6* | armv7*)\n\t    NETTLE_CHECK_ARM_NEON\n\n\t    asm_path=\"arm/v6 arm\"\n      \n\t    if test \"x$enable_arm_neon\" = xyes ; then\n\t      asm_path=\"arm/neon $asm_path\"\n\t    fi\n\t    ;;\n\tesac\n      fi\n      ;;\n    *)\n      enable_assembler=no\n      ;;\n  esac\nfi\n\n# Files which replace a C source file (or otherwise don't correspond\n# to a new object file).\nasm_replace_list=\"aes-encrypt-internal.asm aes-decrypt-internal.asm \\\n\t\tarcfour-crypt.asm camellia-crypt-internal.asm \\\n\t\tmd5-compress.asm memxor.asm memxor3.asm \\\n\t\tpoly1305-internal.asm \\\n\t\tchacha-core-internal.asm \\\n\t\tsalsa20-crypt.asm salsa20-core-internal.asm \\\n\t\tserpent-encrypt.asm serpent-decrypt.asm \\\n\t\tsha1-compress.asm sha256-compress.asm sha512-compress.asm \\\n\t\tsha3-permute.asm umac-nh.asm umac-nh-n.asm machine.m4\"\n\n# Assembler files which generate additional object files if they are used.\nasm_nettle_optional_list=\"gcm-hash8.asm cpuid.asm \\\n  aes-encrypt-internal-2.asm aes-decrypt-internal-2.asm memxor-2.asm \\\n  salsa20-core-internal-2.asm sha1-compress-2.asm sha256-compress-2.asm \\\n  sha3-permute-2.asm sha512-compress-2.asm \\\n  umac-nh-n-2.asm umac-nh-2.asm\"\n\nasm_hogweed_optional_list=\"\"\nif test \"x$enable_public_key\" = \"xyes\" ; then\n  asm_hogweed_optional_list=\"ecc-192-modp.asm ecc-224-modp.asm \\\n    ecc-25519-modp.asm ecc-256-redc.asm ecc-384-modp.asm ecc-521-modp.asm\"\nfi\n\nOPT_NETTLE_OBJS=\"\"\nOPT_HOGWEED_OBJS=\"\"\n\nasm_file_list=\"\"\n\nif test \"x$enable_assembler\" = xyes ; then\n  if test -n \"$asm_path\"; then\n    AC_MSG_NOTICE([Looking for assembler files in $asm_path.])\n    for tmp_f in $asm_replace_list ; do\n      for asm_dir in $asm_path ; do\n        if test -f \"$srcdir/$asm_dir/$tmp_f\"; then\n\t  asm_file_list=\"$asm_file_list $tmp_f\"\n          AC_CONFIG_LINKS($tmp_f:$asm_dir/$tmp_f)\n\t  break\n        fi\n      done\n    done\n    dnl Workaround for AC_CONFIG_LINKS, which complains if we use the\n    dnl same destination argument $tmp_f multiple times.\n    for tmp_n in $asm_nettle_optional_list ; do\n      dnl Note extra pair of [] in sed expression\n      tmp_b=`echo \"$tmp_n\" | sed 's/\\.[[^.]]*$//'`\n      for asm_dir in $asm_path ; do\n\tif test -f \"$srcdir/$asm_dir/$tmp_n\"; then\n\t  asm_file_list=\"$asm_file_list $tmp_n\"\n\t  AC_CONFIG_LINKS($tmp_n:$asm_dir/$tmp_n)\n\t  while read tmp_func ; do\n\t    AC_DEFINE_UNQUOTED(HAVE_NATIVE_$tmp_func)\n\t    eval HAVE_NATIVE_$tmp_func=yes\n\t  done <<EOF\n[`sed -n 's/^.*[^ \t]*PROLOGUE(_*\\(nettle_\\)*\\([^)]*\\)).*$/\\2/p' < \"$srcdir/$asm_dir/$tmp_n\"`]\nEOF\n\t  OPT_NETTLE_OBJS=\"$OPT_NETTLE_OBJS $tmp_b\"'.$(OBJEXT)'\n\t  break\n\tfi\n      done\n    done\t\n    for tmp_h in $asm_hogweed_optional_list ; do\n      dnl Note extra pair of [] in sed expression\n      tmp_b=`echo \"$tmp_h\" | sed 's/\\.[[^.]]*$//'`\n      for asm_dir in $asm_path ; do\n\tif test -f \"$srcdir/$asm_dir/$tmp_h\"; then\n\t  dnl Note double square brackets, for extra m4 quoting.\n\t  tmp_bits=`grep GMP_NUMB_BITS \"$srcdir/$asm_dir/$tmp_h\" \\\n            | sed 's/^.*GMP_NUMB_BITS(\\([[0-9]]*\\)).*$/\\1/'`\n\t  if test \"$tmp_bits\" && test \"$tmp_bits\" != \"${GMP_NUMB_BITS}\" ; then\n\t     AC_MSG_WARN([skipping $tmp_h, because GMP_NUMB_BITS != $tmp_bits])\n\t     continue\n\t  fi\n\t  asm_file_list=\"$asm_file_list $tmp_h\"\n\t  AC_CONFIG_LINKS($tmp_h:$asm_dir/$tmp_h)\n\t  while read tmp_func ; do\n\t    AC_DEFINE_UNQUOTED(HAVE_NATIVE_$tmp_func)\n\t    eval HAVE_NATIVE_$tmp_func=yes\n\t  done <<EOF\n[`sed -n 's/[^ \t]*PROLOGUE(_*\\(nettle_\\)*\\([^)]*\\)).*$/\\2/p' < \"$srcdir/$asm_dir/$tmp_h\"`]\nEOF\n\t  OPT_HOGWEED_OBJS=\"$OPT_HOGWEED_OBJS $tmp_b\"'.$(OBJEXT)'\n\t  break\n\tfi\n      done\n    done\t\n    if test -z \"$asm_file_list\"; then\n      enable_assembler=no\n      AC_MSG_WARN([No assembler files found.])\n    fi\n  fi\n  case \"$host_os\" in\n    darwin*)\n      ASM_RODATA='.section __TEXT,__const'\n      ;;\n    *)\n      ASM_RODATA='.section .rodata'\n      ;;\n  esac\nfi\n\nAC_SUBST([OPT_NETTLE_OBJS])\nAC_SUBST([OPT_HOGWEED_OBJS])\nAC_SUBST([OPT_NETTLE_SOURCES])\nAC_SUBST([ASM_RODATA])\nif test \"x$enable_assembler\" = xyes ; then\n  IF_ASM=''\nelse\n  IF_ASM='#'\nfi\nAC_SUBST([IF_ASM])\n\nAH_VERBATIM([HAVE_NATIVE],\n[/* Define to 1 each of the following for which a native (ie. CPU specific)\n    implementation of the corresponding routine exists.  */\n#undef HAVE_NATIVE_ecc_192_modp\n#undef HAVE_NATIVE_ecc_192_redc\n#undef HAVE_NATIVE_ecc_224_modp\n#undef HAVE_NATIVE_ecc_224_redc\n#undef HAVE_NATIVE_ecc_25519_modp\n#undef HAVE_NATIVE_ecc_256_modp\n#undef HAVE_NATIVE_ecc_256_redc\n#undef HAVE_NATIVE_ecc_384_modp\n#undef HAVE_NATIVE_ecc_384_redc\n#undef HAVE_NATIVE_ecc_521_modp\n#undef HAVE_NATIVE_ecc_521_redc\n#undef HAVE_NATIVE_gcm_hash8\n#undef HAVE_NATIVE_salsa20_core\n#undef HAVE_NATIVE_sha1_compress\n#undef HAVE_NATIVE_sha256_compress\n#undef HAVE_NATIVE_sha512_compress\n#undef HAVE_NATIVE_sha3_permute\n#undef HAVE_NATIVE_umac_nh\n#undef HAVE_NATIVE_umac_nh_n])\n\nif test \"x$enable_pic\" = xyes; then\n    LSH_CCPIC\nelse\n    CCPIC=''\nfi\nAC_SUBST(CCPIC)\n\nIF_DLL='#'\nLIBNETTLE_FILE_SRC='$(LIBNETTLE_FORLINK)'\nLIBHOGWEED_FILE_SRC='$(LIBHOGWEED_FORLINK)'\nEMULATOR=''\nW64_ABI=no\n\ncase \"$host_os\" in\n  mingw32*|cygwin*)\n    # The actual DLLs, e.g. libnettle-$major-$minor.dll, are normally\n    # installed into the bin dir (or more exactly $libdir/../bin, for\n    # automake), while libnettle.dll.a, which is a stub file for\n    # linking to the DLL, is installed into the lib dir.\n    case \"$host_os\" in\n      mingw32*)\n        LIBNETTLE_FORLINK='libnettle-$(LIBNETTLE_MAJOR)-$(LIBNETTLE_MINOR).dll'\n        LIBHOGWEED_FORLINK='libhogweed-$(LIBHOGWEED_MAJOR)-$(LIBHOGWEED_MINOR).dll'\n        ;;\n      cygwin*)\n        LIBNETTLE_FORLINK='cygnettle-$(LIBNETTLE_MAJOR)-$(LIBNETTLE_MINOR).dll'\n        LIBHOGWEED_FORLINK='cyghogweed-$(LIBHOGWEED_MAJOR)-$(LIBHOGWEED_MINOR).dll'\n        ;;\n    esac\n    if test \"x$cross_compiling\" = xyes ; then\n\tcase \"$ABI\" in\n\t    64)\n\t\tEMULATOR=wine64\n\t\t;;\n\t    *)\n\t\tEMULATOR=wine\n\t\t;;\n\tesac\n    fi\n    if test \"x$ABI\" = x64 ; then\n        W64_ABI=yes\n    fi\n    LIBNETTLE_SONAME=''\n    LIBNETTLE_FILE='libnettle.dll.a'\n    LIBNETTLE_FILE_SRC='$(LIBNETTLE_FILE)'\n    LIBNETTLE_LINK='$(CC) $(CFLAGS) $(LDFLAGS) -shared -Wl,--out-implib=$(LIBNETTLE_FILE) -Wl,--export-all-symbols -Wl,--enable-auto-import -Wl,--whole-archive'\n    LIBNETTLE_LIBS='-Wl,--no-whole-archive $(LIBS)'\n\n    LIBHOGWEED_SONAME=''\n    LIBHOGWEED_FILE='libhogweed.dll.a'\n    LIBHOGWEED_FILE_SRC='$(LIBHOGWEED_FILE)'\n    LIBHOGWEED_LINK='$(CC) $(CFLAGS) $(LDFLAGS) -shared -Wl,--out-implib=$(LIBHOGWEED_FILE) -Wl,--export-all-symbols -Wl,--enable-auto-import -Wl,--whole-archive'\n    LIBHOGWEED_LIBS='-Wl,--no-whole-archive $(LIBS) libnettle.dll.a'\n    IF_DLL=''\n    ;;\n  darwin*)\n    LIBNETTLE_FORLINK=libnettle.dylib\n    LIBNETTLE_SONAME='libnettle.$(LIBNETTLE_MAJOR).dylib'\n    LIBNETTLE_FILE='libnettle.$(LIBNETTLE_MAJOR).$(LIBNETTLE_MINOR).dylib'\n    LIBNETTLE_LINK='$(CC) $(CFLAGS) -dynamiclib $(LDFLAGS) -install_name ${libdir}/$(LIBNETTLE_SONAME) -compatibility_version $(LIBNETTLE_MAJOR) -current_version $(LIBNETTLE_MAJOR).$(LIBNETTLE_MINOR)'\n    LIBNETTLE_LIBS=''\n\n    LIBHOGWEED_FORLINK=libhogweed.dylib\n    LIBHOGWEED_SONAME='libhogweed.$(LIBHOGWEED_MAJOR).dylib'\n    LIBHOGWEED_FILE='libhogweed.$(LIBHOGWEED_MAJOR).$(LIBHOGWEED_MINOR).dylib'\n    LIBHOGWEED_LINK='$(CC) $(CFLAGS) -dynamiclib -L. $(LDFLAGS) -install_name ${libdir}/$(LIBHOGWEED_SONAME) -compatibility_version $(LIBHOGWEED_MAJOR) -current_version $(LIBHOGWEED_MAJOR).$(LIBHOGWEED_MINOR)'\n    LIBHOGWEED_LIBS='-lnettle $(LIBS)'\n    ;;\n  solaris*)\n    # Sun's ld uses -h to set the soname, and this option is passed\n    # through by both Sun's compiler and gcc. Might not work with GNU\n    # ld, but it's unusual to use GNU ld on Solaris.\n    LIBNETTLE_FORLINK=libnettle.so\n    LIBNETTLE_SONAME='$(LIBNETTLE_FORLINK).$(LIBNETTLE_MAJOR)'\n    LIBNETTLE_FILE='$(LIBNETTLE_SONAME).$(LIBNETTLE_MINOR)'\n    LIBNETTLE_LINK='$(CC) $(CFLAGS) $(LDFLAGS) -G -h $(LIBNETTLE_SONAME)'\n    LIBNETTLE_LIBS=''\n\n    LIBHOGWEED_FORLINK=libhogweed.so\n    LIBHOGWEED_SONAME='$(LIBHOGWEED_FORLINK).$(LIBHOGWEED_MAJOR)'\n    LIBHOGWEED_FILE='$(LIBHOGWEED_SONAME).$(LIBHOGWEED_MINOR)'\n    LIBHOGWEED_LINK='$(CC) $(CFLAGS) $(LDFLAGS) -G -h $(LIBHOGWEED_SONAME)'\n    LIBHOGWEED_LIBS='libnettle.so $(LIBS)'\n    ;;\n  *)\n    LIBNETTLE_FORLINK=libnettle.so\n    LIBNETTLE_SONAME='$(LIBNETTLE_FORLINK).$(LIBNETTLE_MAJOR)'\n    LIBNETTLE_FILE='$(LIBNETTLE_SONAME).$(LIBNETTLE_MINOR)'\n    LIBNETTLE_LINK='$(CC) $(CFLAGS) $(LDFLAGS) -shared -Wl,-soname=$(LIBNETTLE_SONAME)'\n    LIBNETTLE_LIBS=''\n\n    LIBHOGWEED_FORLINK=libhogweed.so\n    LIBHOGWEED_SONAME='$(LIBHOGWEED_FORLINK).$(LIBHOGWEED_MAJOR)'\n    LIBHOGWEED_FILE='$(LIBHOGWEED_SONAME).$(LIBHOGWEED_MINOR)'\n    LIBHOGWEED_LINK='$(CC) $(CFLAGS) $(LDFLAGS) -shared -Wl,-soname=$(LIBHOGWEED_SONAME)'\n    # Requested by debian, to make linking with only -lhogweed work\n    # (does not work in general, e.g., with static linking all of\n    # -lhogweed -lgmp -lnettle are still required). Also makes dlopen\n    # of libhogweed.so work, without having to use RTLD_GLOBAL.\n    LIBHOGWEED_LIBS='libnettle.so $(LIBS)'\n    ;;\nesac\n\nASM_SYMBOL_PREFIX=''\nASM_ELF_STYLE='no'\nASM_COFF_STYLE='no'\n# GNU as default is to use @\nASM_TYPE_FUNCTION='@function'\nASM_TYPE_PROGBITS='@progbits'\nASM_MARK_NOEXEC_STACK=''\nASM_ALIGN_LOG=''\n\nif test x$enable_assembler = xyes ; then\n  AC_CACHE_CHECK([if globals are prefixed by underscore],\n  nettle_cv_asm_underscore,\n  [ # Default is no underscore\n    nettle_cv_asm_underscore=no\n    AC_COMPILE_IFELSE(\n      [AC_LANG_SOURCE([int a_global_symbol;])],\n      [ $NM conftest.$OBJEXT >conftest.out\n        if grep _a_global_symbol conftest.out >/dev/null ; then\n          nettle_cv_asm_underscore=yes\n        elif grep a_global_symbol conftest.out >/dev/null ; then\n          nettle_cv_asm_underscore=no\n        else\n          AC_MSG_WARN([nm does not list a_global_symbol at all])\n\tfi],\n      [AC_MSG_WARN([test program with a single global could not be compiled!?])])])\n  if test x$nettle_cv_asm_underscore = xyes ; then\n    ASM_SYMBOL_PREFIX='_'\n  fi\n\n  AC_CACHE_CHECK([for ELF-style .type,%function pseudo-ops],\n    [nettle_cv_asm_type_percent_function],\n    [GMP_TRY_ASSEMBLE([\n.text\n.globl foo\n.type foo,%function\nfoo:\n.Lend:\n\n.size foo, .Lend - foo\n],\n       [nettle_cv_asm_type_percent_function=yes],\n       [nettle_cv_asm_type_percent_function=no])])\n\ndnl Needs double quote for the # character\n  AC_CACHE_CHECK([[for ELF-style .type,#function pseudo-ops]],\n    [nettle_cv_asm_type_hash_function],\n    [GMP_TRY_ASSEMBLE([\n.text\n.globl foo\n.type foo,#function\nfoo:\n.Lend:\n\n.size foo, .Lend - foo\n],\n       [nettle_cv_asm_type_hash_function=yes],\n       [nettle_cv_asm_type_hash_function=no])])\n\n  if test x$nettle_cv_asm_type_percent_function = xyes ; then\n    ASM_ELF_STYLE='yes'\n    ASM_TYPE_FUNCTION='%function'\n    ASM_TYPE_PROGBITS='%progbits'\n  else\n    if test x$nettle_cv_asm_type_hash_function = xyes ; then\n      ASM_ELF_STYLE='yes'\n      ASM_TYPE_FUNCTION='#function'\n      ASM_TYPE_PROGBITS='#progbits'\n    fi\n  fi\n\n  AC_CACHE_CHECK([for COFF-style .type directive],\n    [nettle_cv_asm_coff_type],\n      [GMP_TRY_ASSEMBLE([\n.text\n.globl _foo\n.def _foo\n.scl 2\n.type 32\n.endef\n_foo:\n],\n        [nettle_cv_asm_coff_type=yes],\n        [nettle_cv_asm_coff_type=no])])\n  if test \"x$nettle_cv_asm_coff_type\" = \"xyes\" ; then\n    ASM_COFF_STYLE=yes\n  fi\n\n  AC_CACHE_CHECK([if we should use a .note.GNU-stack section],\n  nettle_cv_asm_gnu_stack,\n  [ # Default\n    nettle_cv_asm_gnu_stack=no\n\n    cat >conftest.c <<EOF\nint foo() { return 0; }\nEOF\n    nettle_compile=\"$CC $CFLAGS $CPPFLAGS -c conftest.c >conftest.out 2>&1\"\n    if AC_TRY_EVAL(nettle_compile); then\n      cat conftest.out >&AC_FD_CC\n      $OBJDUMP -x conftest.o | grep '\\.note\\.GNU-stack' > /dev/null \\\n      && nettle_cv_asm_gnu_stack=yes\n    else\n      cat conftest.out >&AC_FD_CC\n      echo \"configure: failed program was:\" >&AC_FD_CC\n      cat conftest.s >&AC_FD_CC\n    fi\n    rm -f conftest.*])\n  if test x$nettle_cv_asm_gnu_stack = xyes ; then\n    ASM_MARK_NOEXEC_STACK='.section .note.GNU-stack,\"\",TYPE_PROGBITS'\n  fi\n\n  AC_CACHE_CHECK([if .align assembly directive is logarithmic],\n    [nettle_cv_asm_align_log],\n    [GMP_TRY_ASSEMBLE([\n.align 3\n],\n       [nettle_cv_asm_align_log=yes],\n       [nettle_cv_asm_align_log=no])])\n  ASM_ALIGN_LOG=\"$nettle_cv_asm_align_log\"\nfi\n\nAC_SUBST(ASM_SYMBOL_PREFIX)\nAC_SUBST(ASM_ELF_STYLE)\nAC_SUBST(ASM_COFF_STYLE)\nAC_SUBST(ASM_TYPE_FUNCTION)\nAC_SUBST(ASM_TYPE_PROGBITS)\nAC_SUBST(ASM_MARK_NOEXEC_STACK)\nAC_SUBST(ASM_ALIGN_LOG)\nAC_SUBST(W64_ABI)\nAC_SUBST(EMULATOR)\n\nAC_SUBST(LIBNETTLE_MAJOR)\nAC_SUBST(LIBNETTLE_MINOR)\nAC_SUBST(LIBNETTLE_FORLINK)\nAC_SUBST(LIBNETTLE_SONAME)\nAC_SUBST(LIBNETTLE_FILE)\nAC_SUBST(LIBNETTLE_FILE_SRC)\nAC_SUBST(LIBNETTLE_LINK)\nAC_SUBST(LIBNETTLE_LIBS)\n\nAC_SUBST(LIBHOGWEED_MAJOR)\nAC_SUBST(LIBHOGWEED_MINOR)\nAC_SUBST(LIBHOGWEED_FORLINK)\nAC_SUBST(LIBHOGWEED_SONAME)\nAC_SUBST(LIBHOGWEED_FILE)\nAC_SUBST(LIBHOGWEED_FILE_SRC)\nAC_SUBST(LIBHOGWEED_LINK)\nAC_SUBST(LIBHOGWEED_LIBS)\n\nAC_PATH_PROG(M4, m4, m4)\n\nAH_TEMPLATE([WITH_HOGWEED], [Defined if public key features are enabled])\n\nif test \"x$enable_public_key\" = xyes ; then\n  AC_DEFINE(WITH_HOGWEED)\n  IF_HOGWEED=''\nelse\n  IF_HOGWEED='#'\nfi\n\nif test \"x$enable_static\" = xyes ; then\n  IF_STATIC=''\nelse\n  IF_STATIC='#'\nfi\n\nIF_DLOPEN_TEST='#'\nif test \"x$enable_shared\" = xyes ; then\n  IF_SHARED=''\n  IF_NOT_SHARED='#'\n  if test \"x$ac_cv_lib_dl_dlopen\" = xyes ; then\n    IF_DLOPEN_TEST=''\n  fi\nelse\n  IF_SHARED='#'\n  IF_NOT_SHARED=''\nfi\n\n# Documentation tools\nif test \"x$enable_documentation\" != \"xno\"; then\n  AC_PATH_PROG(MAKEINFO, makeinfo, not-found)\n\n  if test \"x$MAKEINFO\" != \"xnot-found\"; then\n    enable_documentation=yes\n    AC_SUBST(MAKEINFO)\n  else\n    if test \"x$enable_documentation\" == \"xauto\" ; then\n      enable_documentation=no\n    else\n      AC_MSG_ERROR([Cannot find 'makeinfo', required for documentation.])\n    fi\n  fi\nfi\n\nif test \"x$enable_documentation\" = \"xyes\" ; then\n  IF_DOCUMENTATION=''\nelse\n  IF_DOCUMENTATION='#'\nfi\n\nif test \"x$enable_mini_gmp\" = \"xyes\" ; then\n  IF_MINI_GMP=''\nelse\n  IF_MINI_GMP='#'\nfi\n  \nAC_SUBST(IF_HOGWEED)\nAC_SUBST(IF_STATIC)\nAC_SUBST(IF_SHARED)\nAC_SUBST(IF_NOT_SHARED)\nAC_SUBST(IF_DLOPEN_TEST)\nAC_SUBST(IF_DOCUMENTATION)\nAC_SUBST(IF_DLL)\nAC_SUBST(IF_MINI_GMP)\n\nOPENSSL_LIBFLAGS=''\n\n# Check for openssl's libcrypto (used only for benchmarking)\nif test x$enable_openssl = xyes ; then\n  AC_CHECK_LIB(crypto, BF_ecb_encrypt,\n    [OPENSSL_LIBFLAGS='-lcrypto'],\n    [enable_openssl=no])\nfi\n\nAH_TEMPLATE([WITH_OPENSSL],\n\t    [Define if you have openssl's libcrypto (used for benchmarking)]) dnl'\n\nif test x$enable_openssl = xyes ; then\n  AC_DEFINE(WITH_OPENSSL)\nfi\n\nAC_SUBST(OPENSSL_LIBFLAGS)\n\nAH_BOTTOM(\n[#if defined(__x86_64__) || defined(__arch64__)\n# define HAVE_NATIVE_64_BIT 1\n#else\n/* Needs include of <limits.h> before use. */\n# define HAVE_NATIVE_64_BIT (SIZEOF_LONG * CHAR_BIT >= 64)\n#endif\n])\n\n# clock_gettime is in librt on *-*-osf5.1 and on glibc, so add -lrt to\n# BENCH_LIBS if needed. On linux (tested on x86_32, 2.6.26),\n# clock_getres reports ns accuracy, while in a quick test on osf\n# clock_getres said only 1 millisecond.\n\nold_LIBS=\"$LIBS\"\nAC_SEARCH_LIBS(clock_gettime, rt, [\n  AC_DEFINE([HAVE_CLOCK_GETTIME],1,[Define if clock_gettime is available])])\nBENCH_LIBS=\"$LIBS\"\nLIBS=\"$old_LIBS\"\n\nAC_SUBST(BENCH_LIBS)\n\n# Set these flags *last*, or else the test programs won't compile\nif test x$GCC = xyes ; then\n  # Using -ggdb3 makes (some versions of) Redhat's gcc-2.96 dump core\n  if $CC --version | grep '^2\\.96$' 1>/dev/null 2>&1; then\n    true\n  else\n    CFLAGS=\"$CFLAGS -ggdb3\"\n  fi\n  # FIXME: It would be better to actually test if this option works and/or is needed.\n  # Or perhaps use -funsigned-char.\n  if $CC --version | grep 'gcc.* 4\\.' 1>/dev/null 2>&1; then\n    CFLAGS=\"$CFLAGS -Wno-pointer-sign\"\n  fi\n  CFLAGS=\"$CFLAGS -Wall -W \\\n  -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes \\\n  -Wpointer-arith -Wbad-function-cast -Wnested-externs\"\n\n# Don't enable -Wcast-align as it results in tons of warnings in the\n# DES code. And when using stdio.\n# Don't enable -Waggregate-return, as that causes warnings for glibc\n# inttypes.h.\nfi\n\nAC_CONFIG_FILES([config.make config.m4 Makefile version.h])\nAC_CONFIG_FILES([tools/Makefile testsuite/Makefile examples/Makefile])\nAC_CONFIG_FILES([nettle.pc hogweed.pc libnettle.map libhogweed.map])\n\nAC_OUTPUT\n\nAC_MSG_NOTICE([summary of build options:\n\n  Version:           ${PACKAGE_STRING}\n  Host type:         ${host}\n  ABI:               ${ABI}\n  Assembly files:    ${asm_path:-none}\n  Install prefix:    ${prefix}\n  Library directory: ${libdir}\n  Compiler:          ${CC}\n  Static libraries:  ${enable_static}\n  Shared libraries:  ${enable_shared}\n  Public key crypto: ${enable_public_key}\n  Using mini-gmp:    ${enable_mini_gmp}\n  Documentation:     ${enable_documentation}\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-nettle-3.2-iiqwwhepjqx6vybmvsv3hdbtscomlyhz/spack-src/fat-setup.h": "/* fat-setup.h\n\n   Copyright (C) 2015 Niels M\u00f6ller\n\n   This file is part of GNU Nettle.\n\n   GNU Nettle is free software: you can redistribute it and/or\n   modify it under the terms of either:\n\n     * the GNU Lesser General Public License as published by the Free\n       Software Foundation; either version 3 of the License, or (at your\n       option) any later version.\n\n   or\n\n     * the GNU General Public License as published by the Free\n       Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n   or both in parallel, as here.\n\n   GNU Nettle is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   General Public License for more details.\n\n   You should have received copies of the GNU General Public License and\n   the GNU Lesser General Public License along with this program.  If\n   not, see http://www.gnu.org/licenses/.\n*/\n\n/* Fat library initialization works as follows. The main function is\n   fat_init. We try to do initialization only once, but since it is\n   idempotent, there's no harm if it is in some cases called multiple\n   times from several threads. For correctness, we rely on atomic\n   writes, but not on memory barriers or any other synchronization\n   mechanism.\n\n   The fat_init function checks the cpuid flags, and sets function\n   pointers, e.g, _nettle_aes_encrypt_vec, to point to the appropriate\n   implementation.\n\n   To get everything hooked in, we use a belt-and-suspenders approach.\n\n   We try to register fat_init as a constructor function to be called\n   at load time. If this is unavailable or non-working, we instead\n   arrange fat_init to be called lazily.\n\n   For the actual indirection, there are two cases. \n\n   * If ifunc support is available, function pointers are statically\n     initialized to NULL, and we register resolver functions, e.g.,\n     _nettle_aes_encrypt_resolve, which call fat_init, and then return\n     the function pointer, e.g., the value of _nettle_aes_encrypt_vec.\n\n   * If ifunc is not available, we have to define a wrapper function\n     to jump via the function pointer. (FIXME: For internal calls, we\n     could do this as a macro).\n\n     We statically initialize each function pointer to point to a\n     special initialization function, e.g., _nettle_aes_encrypt_init,\n     which calls fat_init, and then invokes the right function. This\n     way, all pointers are setup correctly at the first call to any\n     fat function.\n\n     And atomic writes are required for correctness in the case that\n     several threads do \"first call to any fat function\" at the same\n     time.\n*/\n\n#if HAVE_GCC_ATTRIBUTE\n# define CONSTRUCTOR __attribute__ ((constructor))\n#else\n# define CONSTRUCTOR\n# if defined (__sun)\n#  pragma init(fat_init)\n# endif\n#endif\n\n/* Disable use of ifunc for now. Problem is, there's no guarantee that\n   one can call any libc functions from the ifunc resolver. On x86 and\n   x86_64, the corresponding IRELATIVE relocs are supposed to be\n   processed last, but that doesn't seem to happen, and its a\n   platform-specific feature. To trigger problems, simply try dlopen\n   (\"libnettle.so\", RTLD_NOW), which crashes in an uninitialized plt\n   entry. */\n#undef HAVE_LINK_IFUNC\n\n#if !HAVE_SECURE_GETENV\n#define secure_getenv(s) NULL\n#endif\n\n#define ENV_VERBOSE \"NETTLE_FAT_VERBOSE\"\n#define ENV_OVERRIDE \"NETTLE_FAT_OVERRIDE\"\n\n/* DECLARE_FAT_FUNC(name, ftype)\n *\n *   name is the public function, e.g., _nettle_aes_encrypt.\n *   ftype is its type, e.g., aes_crypt_internal_func.\n *\n * DECLARE_FAT_VAR(name, type, var)\n *\n *   name is name without _nettle prefix.\n *   type is its type.\n *   var is the variant, used as a suffix on the symbol name.\n *\n * DEFINE_FAT_FUNC(name, rtype, prototype, args)\n *\n *   name is the public function.\n *   rtype its return type.\n *   prototype is the list of formal arguments, with types.\n *   args contain the argument list without any types.\n */\n\n#if HAVE_LINK_IFUNC\n#define IFUNC(resolve) __attribute__ ((ifunc (resolve)))\n#define DECLARE_FAT_FUNC(name, ftype)\t\\\n  ftype name IFUNC(#name\"_resolve\");\t\\\n  static ftype *name##_vec = NULL;\n\n#define DEFINE_FAT_FUNC(name, rtype, prototype, args)\t\t  \\\n  static void_func * name##_resolve(void)\t\t\t  \\\n  {\t\t\t\t\t\t\t\t  \\\n    if (getenv (ENV_VERBOSE))\t\t\t\t\t  \\\n      fprintf (stderr, \"libnettle: \"#name\"_resolve\\n\");\t\t  \\\n    if (!name##_vec)\t\t\t\t\t\t  \\\n      fat_init();\t\t\t\t\t\t  \\\n    return (void_func *) name##_vec;\t\t\t\t  \\\n  }\n\n#else /* !HAVE_LINK_IFUNC */\n#define DECLARE_FAT_FUNC(name, ftype)\t\t\\\n  ftype name;\t\t\t\t\t\\\n  static ftype name##_init;\t\t\t\\\n  static ftype *name##_vec = name##_init;\t\t\t\t\n\n#define DEFINE_FAT_FUNC(name, rtype, prototype, args)\t\t\\\n  rtype name prototype\t\t\t\t\t\t\\\n  {\t\t\t\t\t\t\t\t\\\n    return name##_vec args;\t\t\t\t\t\\\n  }\t\t\t\t\t\t\t\t\\\n  static rtype name##_init prototype {\t\t\t\t\\\n    if (getenv (ENV_VERBOSE))\t\t\t\t\t\\\n      fprintf (stderr, \"libnettle: \"#name\"_init\\n\");\t\t\\\n    if (name##_vec == name##_init)\t\t\t\t\\\n      fat_init();\t\t\t\t\t\t\\\n    assert (name##_vec != name##_init);\t\t\t\t\\\n    return name##_vec args;\t\t\t\t\t\\\n  }\n#endif /* !HAVE_LINK_IFUNC */\n\n#define DECLARE_FAT_FUNC_VAR(name, type, var)\t\\\n       type _nettle_##name##_##var;\n\ntypedef void void_func (void);\n\ntypedef void aes_crypt_internal_func (unsigned rounds, const uint32_t *keys,\n\t\t\t\t      const struct aes_table *T,\n\t\t\t\t      size_t length, uint8_t *dst,\n\t\t\t\t      const uint8_t *src);\n\ntypedef void *(memxor_func)(void *dst, const void *src, size_t n);\n\ntypedef void salsa20_core_func (uint32_t *dst, const uint32_t *src, unsigned rounds);\n\ntypedef void sha1_compress_func(uint32_t *state, const uint8_t *input);\ntypedef void sha256_compress_func(uint32_t *state, const uint8_t *input, const uint32_t *k);\n\nstruct sha3_state;\ntypedef void sha3_permute_func (struct sha3_state *state);\n\ntypedef void sha512_compress_func (uint64_t *state, const uint8_t *input, const uint64_t *k);\n\ntypedef uint64_t umac_nh_func (const uint32_t *key, unsigned length, const uint8_t *msg);\ntypedef void umac_nh_n_func (uint64_t *out, unsigned n, const uint32_t *key,\n\t\t\t     unsigned length, const uint8_t *msg);\n",
        "/tmp/vanessa/spack-stage/spack-stage-nettle-3.2-iiqwwhepjqx6vybmvsv3hdbtscomlyhz/spack-src/testsuite/dlopen-test.c": "#include \"testutils.h\"\n#include \"version.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\nint\nmain (int argc UNUSED, char **argv UNUSED)\n{\n#if HAVE_LIBDL\n  void *handle = dlopen (\"../libnettle.so\", RTLD_NOW);\n  int (*get_version)(void);\n  if (!handle)\n    {\n      fprintf (stderr, \"dlopen failed: %s\\n\", dlerror());\n      FAIL ();\n    }\n\n  get_version = (int(*)(void)) dlsym (handle, \"nettle_version_minor\");\n  if (!get_version)\n    {\n      fprintf (stderr, \"dlsym failed: %s\\n\", dlerror());\n      FAIL ();\n    }\n  if (get_version() != NETTLE_VERSION_MINOR)\n    {\n      fprintf (stderr, \"unexpected nettle version\\n\");\n      FAIL ();\n    }\n  return EXIT_SUCCESS;\n#else\n  SKIP();\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-nettle-3.2-iiqwwhepjqx6vybmvsv3hdbtscomlyhz/spack-src/testsuite/Makefile.in": "@SET_MAKE@\n\nsrcdir = @srcdir@\nVPATH = @srcdir@\n\ntop_srcdir = @top_srcdir@\n\ninclude ../config.make\n\nPRE_CPPFLAGS = -I.. -I$(top_srcdir)\nPRE_LDFLAGS = -L..\n\nTS_NETTLE_SOURCES = aes-test.c arcfour-test.c arctwo-test.c \\\n\t\t    blowfish-test.c cast128-test.c \\\n\t            base16-test.c base64-test.c \\\n\t\t    camellia-test.c chacha-test.c \\\n\t\t    des-test.c des3-test.c des-compat-test.c \\\n\t\t    md2-test.c md4-test.c md5-test.c md5-compat-test.c \\\n\t\t    memxor-test.c gosthash94-test.c \\\n\t\t    ripemd160-test.c \\\n\t\t    salsa20-test.c \\\n\t\t    sha1-test.c sha224-test.c sha256-test.c \\\n\t\t    sha384-test.c sha512-test.c sha512-224-test.c sha512-256-test.c \\\n\t\t    sha3-permute-test.c sha3-224-test.c sha3-256-test.c \\\n\t\t    sha3-384-test.c sha3-512-test.c \\\n\t\t    serpent-test.c twofish-test.c version-test.c \\\n\t\t    knuth-lfib-test.c \\\n\t\t    cbc-test.c ctr-test.c gcm-test.c eax-test.c ccm-test.c \\\n\t\t    poly1305-test.c chacha-poly1305-test.c \\\n\t\t    hmac-test.c umac-test.c \\\n\t\t    meta-hash-test.c meta-cipher-test.c\\\n\t\t    meta-aead-test.c meta-armor-test.c \\\n\t\t    buffer-test.c yarrow-test.c pbkdf2-test.c\n\nTS_HOGWEED_SOURCES = sexp-test.c sexp-format-test.c \\\n\t\t     rsa2sexp-test.c sexp2rsa-test.c \\\n\t\t     bignum-test.c random-prime-test.c \\\n\t\t     pkcs1-test.c rsa-sign-tr-test.c \\\n\t\t     rsa-test.c rsa-encrypt-test.c rsa-keygen-test.c \\\n\t\t     dsa-test.c dsa-keygen-test.c \\\n\t\t     curve25519-dh-test.c \\\n\t\t     ecc-mod-test.c ecc-modinv-test.c ecc-redc-test.c \\\n\t\t     ecc-sqrt-test.c \\\n\t\t     ecc-dup-test.c ecc-add-test.c \\\n\t\t     ecc-mul-g-test.c ecc-mul-a-test.c \\\n\t\t     ecdsa-sign-test.c ecdsa-verify-test.c \\\n\t\t     ecdsa-keygen-test.c ecdh-test.c \\\n\t\t     eddsa-compress-test.c eddsa-sign-test.c \\\n\t\t     eddsa-verify-test.c ed25519-test.c\n\nTS_SOURCES = $(TS_NETTLE_SOURCES) $(TS_HOGWEED_SOURCES)\nCXX_SOURCES = cxx-test.cxx\n\nTS_NETTLE = $(TS_NETTLE_SOURCES:.c=$(EXEEXT))\nTS_HOGWEED = $(TS_HOGWEED_SOURCES:.c=$(EXEEXT))\nTS_C = $(TS_NETTLE) @IF_HOGWEED@ $(TS_HOGWEED)\nTS_CXX = @IF_CXX@ $(CXX_SOURCES:.cxx=$(EXEEXT))\nTARGETS = $(TS_C) $(TS_CXX)\nTS_SH = sexp-conv-test pkcs1-conv-test nettle-pbkdf2-test symbols-test\nTS_ALL = $(TARGETS) $(TS_SH) @IF_DLOPEN_TEST@ dlopen-test$(EXEEXT)\nEXTRA_SOURCES = sha1-huge-test.c\nEXTRA_TARGETS = $(EXTRA_SOURCES:.c=$(EXEEXT))\n\n\n# Includes all C source files, regardless of configuration\nSOURCES = $(TS_SOURCES) $(EXTRA_SOURCES) testutils.c dlopen-test.c\n\nDISTFILES = $(SOURCES) $(CXX_SOURCES) Makefile.in .test-rules.make \\\n\t    $(TS_SH) setup-env teardown-env \\\n\t    gold-bug.txt testutils.h sha3.awk\n\nall: $(EXTRA_TARGETS)\n\n.c.$(OBJEXT):\n\t$(COMPILE) -c $< && $(DEP_PROCESS)\n\n.SUFFIXES: .cxx\n.cxx.$(OBJEXT):\n\t$(COMPILE_CXX) -c $< && $(DEP_PROCESS)\n\n# BSD (and Solaris) make doesn't allow extra dependencies together one\n# single-suffix rules, which makes it impossible or almost impossible\n# to use suffix rules to build the test executables. So we use an\n# explicit rule for each and every executable.\n\nLIB_HOGWEED = @IF_HOGWEED@ -lhogweed\nTEST_OBJS = testutils.$(OBJEXT) ../nettle-internal.$(OBJEXT) \\\n\t    $(LIB_HOGWEED) -lnettle $(LIBS)\n\n../nettle-internal.$(OBJEXT):\n\t( cd .. && $(MAKE) nettle-internal.$(OBJEXT) )\n\n# Special target, to omit linking with libnettle\ndlopen-test$(EXEEXT): dlopen-test.$(OBJEXT) testutils.$(OBJEXT)\n\t$(LINK) dlopen-test.$(OBJEXT) -ldl -o dlopen-test$(EXEEXT)\n\n.PHONY: test-rules\ntest-rules:\n\t(for f in $(TS_NETTLE) $(TS_HOGWEED) $(EXTRA_TARGETS) ; do \\\n\t  echo $$f'$$(EXEEXT): '$$f'.$$(OBJEXT)' ; \\\n\t  echo '\t$$(LINK) '$$f'.$$(OBJEXT) $$(TEST_OBJS) -o '$$f'$$(EXEEXT)' ; \\\n\t  echo ; \\\n\tdone ; \\\n\tfor f in $(TS_CXX) ; do \\\n\t  echo $$f'$$(EXEEXT): '$$f'.$$(OBJEXT)' ; \\\n\t  echo '\t$$(LINK_CXX) '$$f'.$$(OBJEXT) $$(TEST_OBJS) -o '$$f'$$(EXEEXT)' ; \\\n\t  echo ; \\\n\tdone) > $(srcdir)/.test-rules.make\n\ninclude $(srcdir)/.test-rules.make\n\n$(TARGETS) $(EXTRA_TARGETS): testutils.$(OBJEXT) ../nettle-internal.$(OBJEXT) \\\n\t../libnettle.stamp @IF_HOGWEED@ ../libhogweed.stamp\n\n# For use as, e.g.,\n#\n#   make check EMULATOR='$(VALGRIND)'\n#   make check EMULATOR='$(VALGRIND) --log-fd=3' 3>valgrind.log\n\n# --partial-loads-ok=yes is needed for memxor's handling of unaligned\n# data.\nVALGRIND = valgrind --error-exitcode=1 --leak-check=full --show-reachable=yes @IF_ASM@ --partial-loads-ok=yes\n\n# The PATH update is for locating dlls on w*ndows.\ncheck: $(TS_ALL)\n\tLD_LIBRARY_PATH=../.lib PATH=\"../.lib:$$PATH\" srcdir=\"$(srcdir)\" \\\n\t  EMULATOR=\"$(EMULATOR)\" NM=\"$(NM)\" EXEEXT=\"$(EXEEXT)\" \\\n          $(top_srcdir)/run-tests $(TS_ALL)\n\n\nMakefile: $(srcdir)/Makefile.in ../config.status\n\tcd .. && $(SHELL) ./config.status testsuite/$@\n\ninstall uninstall:\n\ttrue\n\ndistdir: $(DISTFILES)\n\tcp $? $(distdir)\n\nclean:\n\t-rm -f $(TARGETS) $(EXTRA_TARGETS) dlopen-test$(EXEEXT) \\\n\t\t*.o test.in test1.out test2.out\n\ndistclean: clean\n\t-rm -f Makefile *.d\n\ntags:\n\tetags -o $(srcdir)/TAGS --include $(top_srcdir) $(srcdir)/*.c $(srcdir)/*.h\n\n# Includes dependency files for everything, including objects which\n# the current configuration will not build.\nDEP_FILES = $(SOURCES:.c=.$(OBJEXT).d) $(CXX_SOURCES:.cxx=.$(OBJEXT).d)\n@DEP_INCLUDE@ $(DEP_FILES)\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-nettle-3.2-iiqwwhepjqx6vybmvsv3hdbtscomlyhz/spack-src/nettle.pdf"
    ],
    "total_files": 603
}