{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/ctypes/__init__.py": "\"\"\"create and manipulate C data types in Python\"\"\"\n\nimport os as _os, sys as _sys\n\n__version__ = \"1.1.0\"\n\nfrom _ctypes import Union, Structure, Array\nfrom _ctypes import _Pointer\nfrom _ctypes import CFuncPtr as _CFuncPtr\nfrom _ctypes import __version__ as _ctypes_version\nfrom _ctypes import RTLD_LOCAL, RTLD_GLOBAL\nfrom _ctypes import ArgumentError\n\nfrom struct import calcsize as _calcsize\n\nif __version__ != _ctypes_version:\n    raise Exception(\"Version number mismatch\", __version__, _ctypes_version)\n\nif _os.name == \"nt\":\n    from _ctypes import FormatError\n\nDEFAULT_MODE = RTLD_LOCAL\nif _os.name == \"posix\" and _sys.platform == \"darwin\":\n    # On OS X 10.3, we use RTLD_GLOBAL as default mode\n    # because RTLD_LOCAL does not work at least on some\n    # libraries.  OS X 10.3 is Darwin 7, so we check for\n    # that.\n\n    if int(_os.uname().release.split('.')[0]) < 8:\n        DEFAULT_MODE = RTLD_GLOBAL\n\nfrom _ctypes import FUNCFLAG_CDECL as _FUNCFLAG_CDECL, \\\n     FUNCFLAG_PYTHONAPI as _FUNCFLAG_PYTHONAPI, \\\n     FUNCFLAG_USE_ERRNO as _FUNCFLAG_USE_ERRNO, \\\n     FUNCFLAG_USE_LASTERROR as _FUNCFLAG_USE_LASTERROR\n\n# WINOLEAPI -> HRESULT\n# WINOLEAPI_(type)\n#\n# STDMETHODCALLTYPE\n#\n# STDMETHOD(name)\n# STDMETHOD_(type, name)\n#\n# STDAPICALLTYPE\n\ndef create_string_buffer(init, size=None):\n    \"\"\"create_string_buffer(aBytes) -> character array\n    create_string_buffer(anInteger) -> character array\n    create_string_buffer(aBytes, anInteger) -> character array\n    \"\"\"\n    if isinstance(init, bytes):\n        if size is None:\n            size = len(init)+1\n        buftype = c_char * size\n        buf = buftype()\n        buf.value = init\n        return buf\n    elif isinstance(init, int):\n        buftype = c_char * init\n        buf = buftype()\n        return buf\n    raise TypeError(init)\n\ndef c_buffer(init, size=None):\n##    \"deprecated, use create_string_buffer instead\"\n##    import warnings\n##    warnings.warn(\"c_buffer is deprecated, use create_string_buffer instead\",\n##                  DeprecationWarning, stacklevel=2)\n    return create_string_buffer(init, size)\n\n_c_functype_cache = {}\ndef CFUNCTYPE(restype, *argtypes, **kw):\n    \"\"\"CFUNCTYPE(restype, *argtypes,\n                 use_errno=False, use_last_error=False) -> function prototype.\n\n    restype: the result type\n    argtypes: a sequence specifying the argument types\n\n    The function prototype can be called in different ways to create a\n    callable object:\n\n    prototype(integer address) -> foreign function\n    prototype(callable) -> create and return a C callable function from callable\n    prototype(integer index, method name[, paramflags]) -> foreign function calling a COM method\n    prototype((ordinal number, dll object)[, paramflags]) -> foreign function exported by ordinal\n    prototype((function name, dll object)[, paramflags]) -> foreign function exported by name\n    \"\"\"\n    flags = _FUNCFLAG_CDECL\n    if kw.pop(\"use_errno\", False):\n        flags |= _FUNCFLAG_USE_ERRNO\n    if kw.pop(\"use_last_error\", False):\n        flags |= _FUNCFLAG_USE_LASTERROR\n    if kw:\n        raise ValueError(\"unexpected keyword argument(s) %s\" % kw.keys())\n    try:\n        return _c_functype_cache[(restype, argtypes, flags)]\n    except KeyError:\n        class CFunctionType(_CFuncPtr):\n            _argtypes_ = argtypes\n            _restype_ = restype\n            _flags_ = flags\n        _c_functype_cache[(restype, argtypes, flags)] = CFunctionType\n        return CFunctionType\n\nif _os.name == \"nt\":\n    from _ctypes import LoadLibrary as _dlopen\n    from _ctypes import FUNCFLAG_STDCALL as _FUNCFLAG_STDCALL\n\n    _win_functype_cache = {}\n    def WINFUNCTYPE(restype, *argtypes, **kw):\n        # docstring set later (very similar to CFUNCTYPE.__doc__)\n        flags = _FUNCFLAG_STDCALL\n        if kw.pop(\"use_errno\", False):\n            flags |= _FUNCFLAG_USE_ERRNO\n        if kw.pop(\"use_last_error\", False):\n            flags |= _FUNCFLAG_USE_LASTERROR\n        if kw:\n            raise ValueError(\"unexpected keyword argument(s) %s\" % kw.keys())\n        try:\n            return _win_functype_cache[(restype, argtypes, flags)]\n        except KeyError:\n            class WinFunctionType(_CFuncPtr):\n                _argtypes_ = argtypes\n                _restype_ = restype\n                _flags_ = flags\n            _win_functype_cache[(restype, argtypes, flags)] = WinFunctionType\n            return WinFunctionType\n    if WINFUNCTYPE.__doc__:\n        WINFUNCTYPE.__doc__ = CFUNCTYPE.__doc__.replace(\"CFUNCTYPE\", \"WINFUNCTYPE\")\n\nelif _os.name == \"posix\":\n    from _ctypes import dlopen as _dlopen\n\nfrom _ctypes import sizeof, byref, addressof, alignment, resize\nfrom _ctypes import get_errno, set_errno\nfrom _ctypes import _SimpleCData\n\ndef _check_size(typ, typecode=None):\n    # Check if sizeof(ctypes_type) against struct.calcsize.  This\n    # should protect somewhat against a misconfigured libffi.\n    from struct import calcsize\n    if typecode is None:\n        # Most _type_ codes are the same as used in struct\n        typecode = typ._type_\n    actual, required = sizeof(typ), calcsize(typecode)\n    if actual != required:\n        raise SystemError(\"sizeof(%s) wrong: %d instead of %d\" % \\\n                          (typ, actual, required))\n\nclass py_object(_SimpleCData):\n    _type_ = \"O\"\n    def __repr__(self):\n        try:\n            return super().__repr__()\n        except ValueError:\n            return \"%s(<NULL>)\" % type(self).__name__\n_check_size(py_object, \"P\")\n\nclass c_short(_SimpleCData):\n    _type_ = \"h\"\n_check_size(c_short)\n\nclass c_ushort(_SimpleCData):\n    _type_ = \"H\"\n_check_size(c_ushort)\n\nclass c_long(_SimpleCData):\n    _type_ = \"l\"\n_check_size(c_long)\n\nclass c_ulong(_SimpleCData):\n    _type_ = \"L\"\n_check_size(c_ulong)\n\nif _calcsize(\"i\") == _calcsize(\"l\"):\n    # if int and long have the same size, make c_int an alias for c_long\n    c_int = c_long\n    c_uint = c_ulong\nelse:\n    class c_int(_SimpleCData):\n        _type_ = \"i\"\n    _check_size(c_int)\n\n    class c_uint(_SimpleCData):\n        _type_ = \"I\"\n    _check_size(c_uint)\n\nclass c_float(_SimpleCData):\n    _type_ = \"f\"\n_check_size(c_float)\n\nclass c_double(_SimpleCData):\n    _type_ = \"d\"\n_check_size(c_double)\n\nclass c_longdouble(_SimpleCData):\n    _type_ = \"g\"\nif sizeof(c_longdouble) == sizeof(c_double):\n    c_longdouble = c_double\n\nif _calcsize(\"l\") == _calcsize(\"q\"):\n    # if long and long long have the same size, make c_longlong an alias for c_long\n    c_longlong = c_long\n    c_ulonglong = c_ulong\nelse:\n    class c_longlong(_SimpleCData):\n        _type_ = \"q\"\n    _check_size(c_longlong)\n\n    class c_ulonglong(_SimpleCData):\n        _type_ = \"Q\"\n    ##    def from_param(cls, val):\n    ##        return ('d', float(val), val)\n    ##    from_param = classmethod(from_param)\n    _check_size(c_ulonglong)\n\nclass c_ubyte(_SimpleCData):\n    _type_ = \"B\"\nc_ubyte.__ctype_le__ = c_ubyte.__ctype_be__ = c_ubyte\n# backward compatibility:\n##c_uchar = c_ubyte\n_check_size(c_ubyte)\n\nclass c_byte(_SimpleCData):\n    _type_ = \"b\"\nc_byte.__ctype_le__ = c_byte.__ctype_be__ = c_byte\n_check_size(c_byte)\n\nclass c_char(_SimpleCData):\n    _type_ = \"c\"\nc_char.__ctype_le__ = c_char.__ctype_be__ = c_char\n_check_size(c_char)\n\nclass c_char_p(_SimpleCData):\n    _type_ = \"z\"\n    def __repr__(self):\n        return \"%s(%s)\" % (self.__class__.__name__, c_void_p.from_buffer(self).value)\n_check_size(c_char_p, \"P\")\n\nclass c_void_p(_SimpleCData):\n    _type_ = \"P\"\nc_voidp = c_void_p # backwards compatibility (to a bug)\n_check_size(c_void_p)\n\nclass c_bool(_SimpleCData):\n    _type_ = \"?\"\n\nfrom _ctypes import POINTER, pointer, _pointer_type_cache\n\nclass c_wchar_p(_SimpleCData):\n    _type_ = \"Z\"\n    def __repr__(self):\n        return \"%s(%s)\" % (self.__class__.__name__, c_void_p.from_buffer(self).value)\n\nclass c_wchar(_SimpleCData):\n    _type_ = \"u\"\n\ndef _reset_cache():\n    _pointer_type_cache.clear()\n    _c_functype_cache.clear()\n    if _os.name == \"nt\":\n        _win_functype_cache.clear()\n    # _SimpleCData.c_wchar_p_from_param\n    POINTER(c_wchar).from_param = c_wchar_p.from_param\n    # _SimpleCData.c_char_p_from_param\n    POINTER(c_char).from_param = c_char_p.from_param\n    _pointer_type_cache[None] = c_void_p\n    # XXX for whatever reasons, creating the first instance of a callback\n    # function is needed for the unittests on Win64 to succeed.  This MAY\n    # be a compiler bug, since the problem occurs only when _ctypes is\n    # compiled with the MS SDK compiler.  Or an uninitialized variable?\n    CFUNCTYPE(c_int)(lambda: None)\n\ndef create_unicode_buffer(init, size=None):\n    \"\"\"create_unicode_buffer(aString) -> character array\n    create_unicode_buffer(anInteger) -> character array\n    create_unicode_buffer(aString, anInteger) -> character array\n    \"\"\"\n    if isinstance(init, str):\n        if size is None:\n            size = len(init)+1\n        buftype = c_wchar * size\n        buf = buftype()\n        buf.value = init\n        return buf\n    elif isinstance(init, int):\n        buftype = c_wchar * init\n        buf = buftype()\n        return buf\n    raise TypeError(init)\n\n\n# XXX Deprecated\ndef SetPointerType(pointer, cls):\n    if _pointer_type_cache.get(cls, None) is not None:\n        raise RuntimeError(\"This type already exists in the cache\")\n    if id(pointer) not in _pointer_type_cache:\n        raise RuntimeError(\"What's this???\")\n    pointer.set_type(cls)\n    _pointer_type_cache[cls] = pointer\n    del _pointer_type_cache[id(pointer)]\n\n# XXX Deprecated\ndef ARRAY(typ, len):\n    return typ * len\n\n################################################################\n\n\nclass CDLL(object):\n    \"\"\"An instance of this class represents a loaded dll/shared\n    library, exporting functions using the standard C calling\n    convention (named 'cdecl' on Windows).\n\n    The exported functions can be accessed as attributes, or by\n    indexing with the function name.  Examples:\n\n    <obj>.qsort -> callable object\n    <obj>['qsort'] -> callable object\n\n    Calling the functions releases the Python GIL during the call and\n    reacquires it afterwards.\n    \"\"\"\n    _func_flags_ = _FUNCFLAG_CDECL\n    _func_restype_ = c_int\n    # default values for repr\n    _name = '<uninitialized>'\n    _handle = 0\n    _FuncPtr = None\n\n    def __init__(self, name, mode=DEFAULT_MODE, handle=None,\n                 use_errno=False,\n                 use_last_error=False):\n        self._name = name\n        flags = self._func_flags_\n        if use_errno:\n            flags |= _FUNCFLAG_USE_ERRNO\n        if use_last_error:\n            flags |= _FUNCFLAG_USE_LASTERROR\n\n        class _FuncPtr(_CFuncPtr):\n            _flags_ = flags\n            _restype_ = self._func_restype_\n        self._FuncPtr = _FuncPtr\n\n        if handle is None:\n            self._handle = _dlopen(self._name, mode)\n        else:\n            self._handle = handle\n\n    def __repr__(self):\n        return \"<%s '%s', handle %x at %#x>\" % \\\n               (self.__class__.__name__, self._name,\n                (self._handle & (_sys.maxsize*2 + 1)),\n                id(self) & (_sys.maxsize*2 + 1))\n\n    def __getattr__(self, name):\n        if name.startswith('__') and name.endswith('__'):\n            raise AttributeError(name)\n        func = self.__getitem__(name)\n        setattr(self, name, func)\n        return func\n\n    def __getitem__(self, name_or_ordinal):\n        func = self._FuncPtr((name_or_ordinal, self))\n        if not isinstance(name_or_ordinal, int):\n            func.__name__ = name_or_ordinal\n        return func\n\nclass PyDLL(CDLL):\n    \"\"\"This class represents the Python library itself.  It allows\n    accessing Python API functions.  The GIL is not released, and\n    Python exceptions are handled correctly.\n    \"\"\"\n    _func_flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI\n\nif _os.name == \"nt\":\n\n    class WinDLL(CDLL):\n        \"\"\"This class represents a dll exporting functions using the\n        Windows stdcall calling convention.\n        \"\"\"\n        _func_flags_ = _FUNCFLAG_STDCALL\n\n    # XXX Hm, what about HRESULT as normal parameter?\n    # Mustn't it derive from c_long then?\n    from _ctypes import _check_HRESULT, _SimpleCData\n    class HRESULT(_SimpleCData):\n        _type_ = \"l\"\n        # _check_retval_ is called with the function's result when it\n        # is used as restype.  It checks for the FAILED bit, and\n        # raises an OSError if it is set.\n        #\n        # The _check_retval_ method is implemented in C, so that the\n        # method definition itself is not included in the traceback\n        # when it raises an error - that is what we want (and Python\n        # doesn't have a way to raise an exception in the caller's\n        # frame).\n        _check_retval_ = _check_HRESULT\n\n    class OleDLL(CDLL):\n        \"\"\"This class represents a dll exporting functions using the\n        Windows stdcall calling convention, and returning HRESULT.\n        HRESULT error values are automatically raised as OSError\n        exceptions.\n        \"\"\"\n        _func_flags_ = _FUNCFLAG_STDCALL\n        _func_restype_ = HRESULT\n\nclass LibraryLoader(object):\n    def __init__(self, dlltype):\n        self._dlltype = dlltype\n\n    def __getattr__(self, name):\n        if name[0] == '_':\n            raise AttributeError(name)\n        dll = self._dlltype(name)\n        setattr(self, name, dll)\n        return dll\n\n    def __getitem__(self, name):\n        return getattr(self, name)\n\n    def LoadLibrary(self, name):\n        return self._dlltype(name)\n\ncdll = LibraryLoader(CDLL)\npydll = LibraryLoader(PyDLL)\n\nif _os.name == \"nt\":\n    pythonapi = PyDLL(\"python dll\", None, _sys.dllhandle)\nelif _sys.platform == \"cygwin\":\n    pythonapi = PyDLL(\"libpython%d.%d.dll\" % _sys.version_info[:2])\nelse:\n    pythonapi = PyDLL(None)\n\n\nif _os.name == \"nt\":\n    windll = LibraryLoader(WinDLL)\n    oledll = LibraryLoader(OleDLL)\n\n    if _os.name == \"nt\":\n        GetLastError = windll.kernel32.GetLastError\n    else:\n        GetLastError = windll.coredll.GetLastError\n    from _ctypes import get_last_error, set_last_error\n\n    def WinError(code=None, descr=None):\n        if code is None:\n            code = GetLastError()\n        if descr is None:\n            descr = FormatError(code).strip()\n        return OSError(None, descr, None, code)\n\nif sizeof(c_uint) == sizeof(c_void_p):\n    c_size_t = c_uint\n    c_ssize_t = c_int\nelif sizeof(c_ulong) == sizeof(c_void_p):\n    c_size_t = c_ulong\n    c_ssize_t = c_long\nelif sizeof(c_ulonglong) == sizeof(c_void_p):\n    c_size_t = c_ulonglong\n    c_ssize_t = c_longlong\n\n# functions\n\nfrom _ctypes import _memmove_addr, _memset_addr, _string_at_addr, _cast_addr\n\n## void *memmove(void *, const void *, size_t);\nmemmove = CFUNCTYPE(c_void_p, c_void_p, c_void_p, c_size_t)(_memmove_addr)\n\n## void *memset(void *, int, size_t)\nmemset = CFUNCTYPE(c_void_p, c_void_p, c_int, c_size_t)(_memset_addr)\n\ndef PYFUNCTYPE(restype, *argtypes):\n    class CFunctionType(_CFuncPtr):\n        _argtypes_ = argtypes\n        _restype_ = restype\n        _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI\n    return CFunctionType\n\n_cast = PYFUNCTYPE(py_object, c_void_p, py_object, py_object)(_cast_addr)\ndef cast(obj, typ):\n    return _cast(obj, obj, typ)\n\n_string_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_string_at_addr)\ndef string_at(ptr, size=-1):\n    \"\"\"string_at(addr[, size]) -> string\n\n    Return the string at addr.\"\"\"\n    return _string_at(ptr, size)\n\ntry:\n    from _ctypes import _wstring_at_addr\nexcept ImportError:\n    pass\nelse:\n    _wstring_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_wstring_at_addr)\n    def wstring_at(ptr, size=-1):\n        \"\"\"wstring_at(addr[, size]) -> string\n\n        Return the string at addr.\"\"\"\n        return _wstring_at(ptr, size)\n\n\nif _os.name == \"nt\": # COM stuff\n    def DllGetClassObject(rclsid, riid, ppv):\n        try:\n            ccom = __import__(\"comtypes.server.inprocserver\", globals(), locals(), ['*'])\n        except ImportError:\n            return -2147221231 # CLASS_E_CLASSNOTAVAILABLE\n        else:\n            return ccom.DllGetClassObject(rclsid, riid, ppv)\n\n    def DllCanUnloadNow():\n        try:\n            ccom = __import__(\"comtypes.server.inprocserver\", globals(), locals(), ['*'])\n        except ImportError:\n            return 0 # S_OK\n        return ccom.DllCanUnloadNow()\n\nfrom ctypes._endian import BigEndianStructure, LittleEndianStructure\n\n# Fill in specifically-sized types\nc_int8 = c_byte\nc_uint8 = c_ubyte\nfor kind in [c_short, c_int, c_long, c_longlong]:\n    if sizeof(kind) == 2: c_int16 = kind\n    elif sizeof(kind) == 4: c_int32 = kind\n    elif sizeof(kind) == 8: c_int64 = kind\nfor kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:\n    if sizeof(kind) == 2: c_uint16 = kind\n    elif sizeof(kind) == 4: c_uint32 = kind\n    elif sizeof(kind) == 8: c_uint64 = kind\ndel(kind)\n\n_reset_cache()\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/libenergyplusapi.so.9.3.0",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/libenergyplusapi.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/favicon.png",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/ConvertInputFormat-9.3.0",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/libpython3.6m.so.1.0",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/energyplus-9.3.0",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/DataSets/FMUs/MoistAir.fmu",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/DataSets/FMUs/ShadingController.fmu",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PostProcess/convertESOMTRpgm/convert.txt",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PostProcess/EP-Compare/EP-Compare Libs/EHTreeView4301.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PostProcess/EP-Compare/EP-Compare Libs/libMBSChartDirector5Plugin16042.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PostProcess/EP-Compare/EP-Compare Libs/EHObjectCollection5001.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PostProcess/EP-Compare/EP-Compare Libs/EHObjectArray5001.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PostProcess/EP-Compare/EP-Compare Libs/EHInterfaces5001.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PostProcess/EP-Compare/EP-Compare Libs/libRBAppearancePak.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_VA_Sterling-Washington.Dulles.Intl.AP.724030_TMY3.ddy",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_VA_Sterling-Washington.Dulles.Intl.AP.724030_TMY3.stat",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_FL_Tampa.Intl.AP.722110_TMY3.stat",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_CO_Golden-NREL.724666_TMY3.stat",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.stat",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_CO_Golden-NREL.724666_TMY3.ddy",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.ddy",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_FL_Tampa.Intl.AP.722110_TMY3.ddy",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_CA_San.Francisco.Intl.AP.724940_TMY3.stat",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/WeatherData/USA_CA_San.Francisco.Intl.AP.724940_TMY3.ddy",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/ExternalInterfacesApplicationGuide.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/InputOutputReference.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/TipsAndTricksUsingEnergyPlus.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/PlantApplicationGuide.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/GettingStarted.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/EMSApplicationGuide.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/AuxiliaryPrograms.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/Acknowledgments.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/EnergyPlusEssentials.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/ModuleDeveloper.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/OutputDetailsAndExamples.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/EngineeringReference.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/UsingEnergyPlusForCompliance.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/Documentation/InterfaceDeveloper.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/MacroDataSets/Locations-DesignDays.xls",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/HVACCurveFitTool/IceStorageCurveFitTool.xlsm",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/Rules8-4-0-to-8-5-0.xls",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/Rules8-2-0-to-8-3-0.xls",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/V7-2-0-Energy+.idd",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/Rules8-3-0-to-8-4-0.xls",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/Rules8-0-0-to-8-1-0.xls",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/Rules8-5-0-to-8-6-0.xls",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/V8-2-0-Energy+.idd",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/V8-1-0-Energy+.idd",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/Rules7-2-0-to-8-0-0.xls",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/Rules8-1-0-to-8-2-0.xls",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/V8-3-0-Energy+.idd",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/V8-0-0-Energy+.idd",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/IDFVersionUpdater Libs/RBGUIFramework.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/IDFVersionUpdater Libs/libRBShell.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/IDFVersionUpdater Libs/libc++.so.1",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/PreProcess/IDFVersionUpdater/IDFVersionUpdater Libs/libRBAppearancePak.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_codecs_iso2022.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_csv.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_testcapi.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_testimportmultiple.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_crypt.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/readline.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_decimal.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_gdbm.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_ssl.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_codecs_tw.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/parser.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_sqlite3.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_hashlib.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/resource.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_codecs_cn.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_opcode.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_tkinter.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_lzma.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/ossaudiodev.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_testmultiphase.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/audioop.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_asyncio.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_bz2.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_multibytecodec.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_curses.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_codecs_hk.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_dbm.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/nis.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_codecs_kr.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_curses_panel.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_ctypes.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_codecs_jp.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_multiprocessing.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_testbuffer.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/mmap.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_json.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_ctypes_test.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/xxlimited.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/_lsprof.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/lib-dynload/termios.cpython-36m-x86_64-linux-gnu.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/config-3.6m-x86_64-linux-gnu/libpython3.6m-pic.a",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/config-3.6m-x86_64-linux-gnu/libpython3.6m.a",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/config-3.6m-x86_64-linux-gnu/python.o",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/config-3.6m-x86_64-linux-gnu/libpython3.6.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/python_standard_lib/config-3.6m-x86_64-linux-gnu/libpython3.6m.so",
        "/tmp/vanessa/spack-stage/spack-stage-energyplus-9.3.0-jg552kr3fk34i632k7w6cm6v7w6gueas/spack-src/ExampleFiles/AdvancedOutput/ExerciseOutput1 Instructions.pdf"
    ],
    "total_files": 1700
}