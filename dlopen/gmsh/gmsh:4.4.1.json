{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Plugin/PluginManager.cpp": "// Gmsh - Copyright (C) 1997-2019 C. Geuzaine, J.-F. Remacle\n//\n// See the LICENSE.txt file for license information. Please report all\n// issues on https://gitlab.onelab.info/gmsh/gmsh/issues.\n\n#include <map>\n#include <stdlib.h>\n#include \"GmshConfig.h\"\n#include \"StringUtils.h\"\n#include \"Context.h\"\n#include \"Plugin.h\"\n#include \"PluginManager.h\"\n#include \"Isosurface.h\"\n#include \"CutGrid.h\"\n#include \"StreamLines.h\"\n#include \"Particles.h\"\n#include \"CutPlane.h\"\n#include \"CutParametric.h\"\n#include \"CutSphere.h\"\n#include \"CutBox.h\"\n#include \"Skin.h\"\n#include \"AnalyseCurvedMesh.h\"\n#include \"CurvedBndDist.h\"\n#include \"MathEval.h\"\n#include \"ExtractElements.h\"\n#include \"SimplePartition.h\"\n#include \"Crack.h\"\n#include \"HarmonicToTime.h\"\n#include \"ModulusPhase.h\"\n#include \"Integrate.h\"\n#include \"MinMax.h\"\n#include \"Gradient.h\"\n#include \"Curl.h\"\n#include \"Divergence.h\"\n#include \"Annotate.h\"\n#include \"Distance.h\"\n#include \"NearestNeighbor.h\"\n#include \"Remove.h\"\n#include \"MakeSimplex.h\"\n#include \"Smooth.h\"\n#include \"Transform.h\"\n#include \"LongitudeLatitude.h\"\n#include \"Triangulate.h\"\n#include \"Tetrahedralize.h\"\n#include \"Warp.h\"\n#include \"SphericalRaise.h\"\n#include \"Eigenvectors.h\"\n#include \"Eigenvalues.h\"\n#include \"Lambda2.h\"\n#include \"ModifyComponents.h\"\n#include \"Probe.h\"\n#include \"HomologyComputation.h\"\n#include \"HomologyPostProcessing.h\"\n#include \"ExtractEdges.h\"\n#include \"FieldFromAmplitudePhase.h\"\n#include \"Bubbles.h\"\n#include \"NearToFarField.h\"\n#include \"DiscretizationError.h\"\n#include \"Scal2Tens.h\"\n#include \"Scal2Vec.h\"\n#include \"CutMesh.h\"\n#include \"NewView.h\"\n#include \"MeshSubEntities.h\"\n#include \"MeshVolume.h\"\n#include \"CVTRemesh.h\"\n#include \"ShowNeighborElements.h\"\n#include \"GaussPoints.h\"\n#include \"VoroMetal.h\"\n#include \"Summation.h\"\n\n// for testing purposes only :-)\n#undef HAVE_DLOPEN\n\n#if defined(HAVE_DLOPEN)\n#include <dlfcn.h>\n#endif\n\n#if defined(HAVE_FLTK)\n#include <FL/Fl.H>\n#include <FL/filename.H>\n#endif\n\nconst char *GMSH_PluginEntry = \"GMSH_RegisterPlugin\";\n\nPluginManager *PluginManager::_instance = 0;\n\nPluginManager::~PluginManager()\n{\n  for(std::map<std::string, GMSH_Plugin *>::iterator it = allPlugins.begin();\n      it != allPlugins.end(); ++it)\n    delete it->second;\n}\n\nGMSH_Plugin *PluginManager::find(const std::string &pluginName)\n{\n  std::map<std::string, GMSH_Plugin *>::iterator it =\n    allPlugins.find(pluginName);\n  if(it == allPlugins.end()) return 0;\n  return it->second;\n}\n\nGMSH_SolverPlugin *PluginManager::findSolverPlugin()\n{\n  std::map<std::string, GMSH_Plugin *>::iterator it = allPlugins.begin();\n  std::map<std::string, GMSH_Plugin *>::iterator ite = allPlugins.end();\n  for(; it != ite; ++it) {\n    GMSH_Plugin *p = it->second;\n    if(p->getType() == GMSH_Plugin::GMSH_SOLVER_PLUGIN) {\n      return (GMSH_SolverPlugin *)(p);\n    }\n  }\n  return 0;\n}\n\nvoid PluginManager::action(const std::string &pluginName,\n                           const std::string &action, void *data)\n{\n  GMSH_Plugin *plugin = find(pluginName);\n  if(!plugin) throw \"Unknown plugin name\";\n\n  if(action == \"Run\") {\n    Msg::Info(\"Running Plugin(%s)...\", pluginName.c_str());\n    plugin->run();\n    Msg::Info(\"Done running Plugin(%s)\", pluginName.c_str());\n  }\n  else\n    throw \"Unknown plugin action\";\n}\n\nvoid PluginManager::setPluginOption(const std::string &pluginName,\n                                    const std::string &option,\n                                    const std::string &value)\n{\n  GMSH_Plugin *plugin = find(pluginName);\n  if(!plugin) throw \"Unknown plugin name\";\n\n  for(int i = 0; i < plugin->getNbOptionsStr(); i++) {\n    StringXString *sxs = plugin->getOptionStr(i);\n    if(option == std::string(sxs->str)) {\n      sxs->def = value;\n      return;\n    }\n  }\n  throw \"Unknown plugin option name\";\n}\n\nvoid PluginManager::setPluginOption(const std::string &pluginName,\n                                    const std::string &option,\n                                    double const value)\n{\n  GMSH_Plugin *plugin = find(pluginName);\n  if(!plugin) throw \"Unknown plugin name\";\n\n  for(int i = 0; i < plugin->getNbOptions(); i++) {\n    StringXNumber *sxn = plugin->getOption(i);\n    if(option == std::string(sxn->str)) {\n      sxn->def = value;\n      return;\n    }\n  }\n  throw \"Unknown plugin option name\";\n}\n\nPluginManager *PluginManager::instance()\n{\n  if(!_instance) _instance = new PluginManager;\n  return _instance;\n}\n\nvoid PluginManager::registerDefaultPlugins()\n{\n  if(CTX::instance()->solver.plugins) {\n    // nothing here yet\n  }\n\n  if(CTX::instance()->post.plugins) {\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"StreamLines\", GMSH_RegisterStreamLinesPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Particles\", GMSH_RegisterParticlesPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"CutGrid\", GMSH_RegisterCutGridPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Isosurface\", GMSH_RegisterIsosurfacePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"CutPlane\", GMSH_RegisterCutPlanePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"CutSphere\", GMSH_RegisterCutSpherePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"CutBox\", GMSH_RegisterCutBoxPlugin()));\n    allPlugins.insert(\n      std::pair<std::string, GMSH_Plugin *>(\"Skin\", GMSH_RegisterSkinPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"MathEval\", GMSH_RegisterMathEvalPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"CurvedBndDist\", GMSH_RegisterCurvedBndDistPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"ModifyComponents\", GMSH_RegisterModifyComponentsPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"ExtractElements\", GMSH_RegisterExtractElementsPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"CutParametric\", GMSH_RegisterCutParametricPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"MakeSimplex\", GMSH_RegisterMakeSimplexPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Smooth\", GMSH_RegisterSmoothPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Transform\", GMSH_RegisterTransformPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"LongitudeLatitude\", GMSH_RegisterLongituteLatitudePlugin()));\n    allPlugins.insert(\n      std::pair<std::string, GMSH_Plugin *>(\"Warp\", GMSH_RegisterWarpPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"SphericalRaise\", GMSH_RegisterSphericalRaisePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"HarmonicToTime\", GMSH_RegisterHarmonicToTimePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"ModulusPhase\", GMSH_RegisterModulusPhasePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Integrate\", GMSH_RegisterIntegratePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"MinMax\", GMSH_RegisterMinMaxPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Gradient\", GMSH_RegisterGradientPlugin()));\n    allPlugins.insert(\n      std::pair<std::string, GMSH_Plugin *>(\"Curl\", GMSH_RegisterCurlPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Divergence\", GMSH_RegisterDivergencePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Annotate\", GMSH_RegisterAnnotatePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Remove\", GMSH_RegisterRemovePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Eigenvectors\", GMSH_RegisterEigenvectorsPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Eigenvalues\", GMSH_RegisterEigenvaluesPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Lambda2\", GMSH_RegisterLambda2Plugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Probe\", GMSH_RegisterProbePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Triangulate\", GMSH_RegisterTriangulatePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"ExtractEdges\", GMSH_RegisterExtractEdgesPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"FieldFromAmplitudePhase\", GMSH_RegisterFieldFromAmplitudePhasePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"NearToFarField\", GMSH_RegisterNearToFarFieldPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Bubbles\", GMSH_RegisterBubblesPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"DiscretizationError\", GMSH_RegisterDiscretizationErrorPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Scal2Tens\", GMSH_RegisterScal2TensPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Scal2Vec\", GMSH_RegisterScal2VecPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"NewView\", GMSH_RegisterNewViewPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"SimplePartition\", GMSH_RegisterSimplePartitionPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Crack\", GMSH_RegisterCrackPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"ShowNeighborElements\", GMSH_RegisterShowNeighborElementsPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"MeshSubEntities\", GMSH_RegisterMeshSubEntitiesPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"MeshVolume\", GMSH_RegisterMeshVolumePlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"GaussPoints\", GMSH_RegisterGaussPointsPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Summation\", GMSH_RegisterSummationPlugin()));\n#if defined(HAVE_MESH)\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"AnalyseCurvedMesh\", GMSH_RegisterAnalyseCurvedMeshPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"VoroMetal\", GMSH_RegisterVoroMetalPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Tetrahedralize\", GMSH_RegisterTetrahedralizePlugin()));\n#endif\n#if defined(HAVE_REVOROPT)\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"CVTRemesh\", GMSH_RegisterCVTRemeshPlugin()));\n#endif\n#if defined(HAVE_KBIPACK)\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"HomologyComputation\", GMSH_RegisterHomologyComputationPlugin()));\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"HomologyPostProcessing\", GMSH_RegisterHomologyPostProcessingPlugin()));\n#endif\n#if defined(HAVE_SOLVER)\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"Distance\", GMSH_RegisterDistancePlugin()));\n#endif\n#if defined(HAVE_ANN)\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"NearestNeighbor\", GMSH_RegisterNearestNeighborPlugin()));\n#endif\n#if defined(HAVE_DINTEGRATION)\n    allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(\n      \"CutMesh\", GMSH_RegisterCutMeshPlugin()));\n#endif\n  }\n\n#if defined(HAVE_FLTK)\n  char *pluginsHome = getenv(\"GMSHPLUGINSHOME\");\n  if(!pluginsHome) return;\n  struct dirent **list;\n  int nbFiles = fl_filename_list(pluginsHome, &list);\n  if(nbFiles <= 0) return;\n  for(int i = 0; i < nbFiles; i++) {\n    std::string ext = SplitFileName(list[i]->d_name)[2];\n    if(ext == \".so\" || ext == \".dll\") addPlugin(list[i]->d_name);\n  }\n  for(int i = 0; i < nbFiles; i++) free(list[i]);\n  free(list);\n#endif\n}\n\nvoid PluginManager::addPlugin(const std::string &fileName)\n{\n#if !defined(HAVE_DLOPEN) || !defined(HAVE_FLTK)\n  Msg::Warning(\"No dynamic plugin loading on this platform\");\n#else\n  Msg::Info(\"Opening Plugin '%s'\", fileName.c_str());\n  void *hlib = dlopen(fileName.c_str(), RTLD_NOW);\n  const char *err = dlerror();\n  if(!hlib) {\n    Msg::Warning(\"Could not open '%s' (dlerror = %s)\", fileName.c_str(), err);\n    return;\n  }\n\n  class GMSH_Plugin *(*registerPlugin)(void);\n  registerPlugin =\n    (class GMSH_Plugin * (*)(void)) dlsym(hlib, GMSH_PluginEntry);\n  err = dlerror();\n  if(err) {\n    Msg::Warning(\"Symbol '%s' missing in '%s' (dlerror = %s)\", GMSH_PluginEntry,\n                 fileName.c_str(), err);\n    return;\n  }\n\n  GMSH_Plugin *p = registerPlugin();\n  p->hlib = hlib;\n  if(allPlugins.find(p->getName()) != allPlugins.end()) {\n    Msg::Warning(\"Plugin '%s' multiply defined\", fileName.c_str());\n    return;\n  }\n\n  allPlugins.insert(std::pair<std::string, GMSH_Plugin *>(p->getName(), p));\n  Msg::Info(\"Loaded Plugin '%s' (%s)\", p->getName().c_str(),\n            p->getAuthor().c_str());\n#endif\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/tutorial/image.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_solver_1024x1024.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_1024x1024.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/solid_64x64.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_mesh_1024x1024.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_mobile_1024x1024.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_256x256.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/solid_32x32.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh.xcf",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/solid_48x48.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/solid_128x128.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_post_1024x1024.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_cad_1024x1024.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_128x128.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/solid_16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/icons/gmsh_fem_1024x1024.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/converters/stl_to_cartesian/lever.stl",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/converters/autocad/dxf2geo.pl",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/utils/converters/matlab/load_gmsh.m",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/Win64Icon.res",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/MacIconsGeo.icns",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/Win64Icon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/MacIcons.icns",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/Win32Icon.res",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/MacIconsPos.icns",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/MacIconsSol.icns",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/Win32Icon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/Fltk/MacIconsMsh.icns",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/gmm/gmm_solver_idgmres.h",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/bamg/bamglib/Mesh2.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/ALGLIB/linalg.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/ALGLIB/alglibinternal.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/ALGLIB/optimization.h",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/ALGLIB/linalg.h",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/icon_rotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/icon_translate.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/icon_onelab.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images.xcassets/AppIcon.appiconset/icon_app_ipad_pro.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images.xcassets/AppIcon.appiconset/icon_app_ipad.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images.xcassets/AppIcon.appiconset/icon_app_marketing.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images.xcassets/AppIcon.appiconset/icon_app_iphone_retina.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images.xcassets/AppIcon.appiconset/icon_app_ipad_retina.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images.xcassets/AppIcon.appiconset/icon_app_ios_marketing.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images_BBEMG.xcassets/AppIcon.appiconset/icon_app_ipad.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images_BBEMG.xcassets/AppIcon.appiconset/icon_app_iphone_retina.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/iOS/Onelab/Images_BBEMG.xcassets/AppIcon.appiconset/icon_app_ipad_retina.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/Android/app/src/main/res/drawable-ldpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/Android/app/src/main/res/drawable-mdpi/icon_rotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/Android/app/src/main/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/Android/app/src/main/res/drawable-mdpi/icon_translate.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/mobile/Android/app/src/main/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/blossom/concorde97/BIGGUY/bigguy.tst",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/Netgen/libsrc/linalg/opti.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/opti_process/opti_process.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/patches/patch_def.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/patches/patchdef.xcf",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/patches/patch_untangled.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/patches/patch_tangled.png",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/untangling/p2.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/untangling/linear.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/untangling/p2_bad.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/log_barrier/log_barrier.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gmsh-4.4.1-nh5sanlp56ke2envzyrmwrk6krpkdzgh/spack-src/contrib/MeshOptimizer/doc/figures/log_barrier/log_barrier_max.pdf"
    ],
    "total_files": 2450
}