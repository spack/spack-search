{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-pip-19.0.3-v2extobcp2as2mykbtdto2qasl4y2o2e/spack-src/src/pip/_internal/utils/glibc.py": "from __future__ import absolute_import\n\nimport ctypes\nimport re\nimport warnings\n\nfrom pip._internal.utils.typing import MYPY_CHECK_RUNNING\n\nif MYPY_CHECK_RUNNING:\n    from typing import Optional, Tuple  # noqa: F401\n\n\ndef glibc_version_string():\n    # type: () -> Optional[str]\n    \"Returns glibc version string, or None if not using glibc.\"\n\n    # ctypes.CDLL(None) internally calls dlopen(NULL), and as the dlopen\n    # manpage says, \"If filename is NULL, then the returned handle is for the\n    # main program\". This way we can let the linker do the work to figure out\n    # which libc our process is actually using.\n    process_namespace = ctypes.CDLL(None)\n    try:\n        gnu_get_libc_version = process_namespace.gnu_get_libc_version\n    except AttributeError:\n        # Symbol doesn't exist -> therefore, we are not linked to\n        # glibc.\n        return None\n\n    # Call gnu_get_libc_version, which returns a string like \"2.5\"\n    gnu_get_libc_version.restype = ctypes.c_char_p\n    version_str = gnu_get_libc_version()\n    # py2 / py3 compatibility:\n    if not isinstance(version_str, str):\n        version_str = version_str.decode(\"ascii\")\n\n    return version_str\n\n\n# Separated out from have_compatible_glibc for easier unit testing\ndef check_glibc_version(version_str, required_major, minimum_minor):\n    # type: (str, int, int) -> bool\n    # Parse string and check against requested version.\n    #\n    # We use a regexp instead of str.split because we want to discard any\n    # random junk that might come after the minor version -- this might happen\n    # in patched/forked versions of glibc (e.g. Linaro's version of glibc\n    # uses version strings like \"2.20-2014.11\"). See gh-3588.\n    m = re.match(r\"(?P<major>[0-9]+)\\.(?P<minor>[0-9]+)\", version_str)\n    if not m:\n        warnings.warn(\"Expected glibc version with 2 components major.minor,\"\n                      \" got: %s\" % version_str, RuntimeWarning)\n        return False\n    return (int(m.group(\"major\")) == required_major and\n            int(m.group(\"minor\")) >= minimum_minor)\n\n\ndef have_compatible_glibc(required_major, minimum_minor):\n    # type: (int, int) -> bool\n    version_str = glibc_version_string()  # type: Optional[str]\n    if version_str is None:\n        return False\n    return check_glibc_version(version_str, required_major, minimum_minor)\n\n\n# platform.libc_ver regularly returns completely nonsensical glibc\n# versions. E.g. on my computer, platform says:\n#\n#   ~$ python2.7 -c 'import platform; print(platform.libc_ver())'\n#   ('glibc', '2.7')\n#   ~$ python3.5 -c 'import platform; print(platform.libc_ver())'\n#   ('glibc', '2.9')\n#\n# But the truth is:\n#\n#   ~$ ldd --version\n#   ldd (Debian GLIBC 2.22-11) 2.22\n#\n# This is unfortunate, because it means that the linehaul data on libc\n# versions that was generated by pip 8.1.2 and earlier is useless and\n# misleading. Solution: instead of using platform, use our code that actually\n# works.\ndef libc_ver():\n    # type: () -> Tuple[str, str]\n    \"\"\"Try to determine the glibc version\n\n    Returns a tuple of strings (lib, version) which default to empty strings\n    in case the lookup fails.\n    \"\"\"\n    glibc_version = glibc_version_string()\n    if glibc_version is None:\n        return (\"\", \"\")\n    else:\n        return (\"glibc\", glibc_version)\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-py-pip-19.0.3-v2extobcp2as2mykbtdto2qasl4y2o2e/spack-src/src/pip/_vendor/distlib/t32.exe",
        "/tmp/vanessa/spack-stage/spack-stage-py-pip-19.0.3-v2extobcp2as2mykbtdto2qasl4y2o2e/spack-src/src/pip/_vendor/distlib/w32.exe",
        "/tmp/vanessa/spack-stage/spack-stage-py-pip-19.0.3-v2extobcp2as2mykbtdto2qasl4y2o2e/spack-src/src/pip/_vendor/distlib/w64.exe",
        "/tmp/vanessa/spack-stage/spack-stage-py-pip-19.0.3-v2extobcp2as2mykbtdto2qasl4y2o2e/spack-src/src/pip/_vendor/distlib/t64.exe"
    ],
    "total_files": 377
}