{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/crypto/dso/dso_locl.h": "/*\n * Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n#include <stdio.h>\n#include \"internal/cryptlib.h\"\n#include \"internal/dso.h\"\n#include \"internal/dso_conf.h\"\n#include \"internal/refcount.h\"\n\n/**********************************************************************/\n/* The low-level handle type used to refer to a loaded shared library */\n\nstruct dso_st {\n    DSO_METHOD *meth;\n    /*\n     * Standard dlopen uses a (void *). Win32 uses a HANDLE. VMS doesn't use\n     * anything but will need to cache the filename for use in the dso_bind\n     * handler. All in all, let each method control its own destiny.\n     * \"Handles\" and such go in a STACK.\n     */\n    STACK_OF(void) *meth_data;\n    CRYPTO_REF_COUNT references;\n    int flags;\n    /*\n     * For use by applications etc ... use this for your bits'n'pieces, don't\n     * touch meth_data!\n     */\n    CRYPTO_EX_DATA ex_data;\n    /*\n     * If this callback function pointer is set to non-NULL, then it will be\n     * used in DSO_load() in place of meth->dso_name_converter. NB: This\n     * should normally set using DSO_set_name_converter().\n     */\n    DSO_NAME_CONVERTER_FUNC name_converter;\n    /*\n     * If this callback function pointer is set to non-NULL, then it will be\n     * used in DSO_load() in place of meth->dso_merger. NB: This should\n     * normally set using DSO_set_merger().\n     */\n    DSO_MERGER_FUNC merger;\n    /*\n     * This is populated with (a copy of) the platform-independent filename\n     * used for this DSO.\n     */\n    char *filename;\n    /*\n     * This is populated with (a copy of) the translated filename by which\n     * the DSO was actually loaded. It is NULL iff the DSO is not currently\n     * loaded. NB: This is here because the filename translation process may\n     * involve a callback being invoked more than once not only to convert to\n     * a platform-specific form, but also to try different filenames in the\n     * process of trying to perform a load. As such, this variable can be\n     * used to indicate (a) whether this DSO structure corresponds to a\n     * loaded library or not, and (b) the filename with which it was actually\n     * loaded.\n     */\n    char *loaded_filename;\n    CRYPTO_RWLOCK *lock;\n};\n\nstruct dso_meth_st {\n    const char *name;\n    /*\n     * Loads a shared library, NB: new DSO_METHODs must ensure that a\n     * successful load populates the loaded_filename field, and likewise a\n     * successful unload OPENSSL_frees and NULLs it out.\n     */\n    int (*dso_load) (DSO *dso);\n    /* Unloads a shared library */\n    int (*dso_unload) (DSO *dso);\n    /*\n     * Binds a function - assumes a return type of DSO_FUNC_TYPE. This should\n     * be cast to the real function prototype by the caller. Platforms that\n     * don't have compatible representations for different prototypes (this\n     * is possible within ANSI C) are highly unlikely to have shared\n     * libraries at all, let alone a DSO_METHOD implemented for them.\n     */\n    DSO_FUNC_TYPE (*dso_bind_func) (DSO *dso, const char *symname);\n    /*\n     * The generic (yuck) \"ctrl()\" function. NB: Negative return values\n     * (rather than zero) indicate errors.\n     */\n    long (*dso_ctrl) (DSO *dso, int cmd, long larg, void *parg);\n    /*\n     * The default DSO_METHOD-specific function for converting filenames to a\n     * canonical native form.\n     */\n    DSO_NAME_CONVERTER_FUNC dso_name_converter;\n    /*\n     * The default DSO_METHOD-specific function for converting filenames to a\n     * canonical native form.\n     */\n    DSO_MERGER_FUNC dso_merger;\n    /* [De]Initialisation handlers. */\n    int (*init) (DSO *dso);\n    int (*finish) (DSO *dso);\n    /* Return pathname of the module containing location */\n    int (*pathbyaddr) (void *addr, char *path, int sz);\n    /* Perform global symbol lookup, i.e. among *all* modules */\n    void *(*globallookup) (const char *symname);\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/crypto/dso/dso_dlfcn.c": "/*\n * Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n/*\n * We need to do this early, because stdio.h includes the header files that\n * handle _GNU_SOURCE and other similar macros.  Defining it later is simply\n * too late, because those headers are protected from re- inclusion.\n */\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE            /* make sure dladdr is declared */\n#endif\n\n#include \"dso_locl.h\"\n#include \"e_os.h\"\n\n#ifdef DSO_DLFCN\n\n# ifdef HAVE_DLFCN_H\n#  ifdef __osf__\n#   define __EXTENSIONS__\n#  endif\n#  include <dlfcn.h>\n#  define HAVE_DLINFO 1\n#  if defined(__CYGWIN__) || \\\n     defined(__SCO_VERSION__) || defined(_SCO_ELF) || \\\n     (defined(__osf__) && !defined(RTLD_NEXT))     || \\\n     (defined(__OpenBSD__) && !defined(RTLD_SELF)) || \\\n        defined(__ANDROID__)\n#   undef HAVE_DLINFO\n#  endif\n# endif\n\n/* Part of the hack in \"dlfcn_load\" ... */\n# define DSO_MAX_TRANSLATED_SIZE 256\n\nstatic int dlfcn_load(DSO *dso);\nstatic int dlfcn_unload(DSO *dso);\nstatic DSO_FUNC_TYPE dlfcn_bind_func(DSO *dso, const char *symname);\nstatic char *dlfcn_name_converter(DSO *dso, const char *filename);\nstatic char *dlfcn_merger(DSO *dso, const char *filespec1,\n                          const char *filespec2);\nstatic int dlfcn_pathbyaddr(void *addr, char *path, int sz);\nstatic void *dlfcn_globallookup(const char *name);\n\nstatic DSO_METHOD dso_meth_dlfcn = {\n    \"OpenSSL 'dlfcn' shared library method\",\n    dlfcn_load,\n    dlfcn_unload,\n    dlfcn_bind_func,\n    NULL,                       /* ctrl */\n    dlfcn_name_converter,\n    dlfcn_merger,\n    NULL,                       /* init */\n    NULL,                       /* finish */\n    dlfcn_pathbyaddr,\n    dlfcn_globallookup\n};\n\nDSO_METHOD *DSO_METHOD_openssl(void)\n{\n    return &dso_meth_dlfcn;\n}\n\n/*\n * Prior to using the dlopen() function, we should decide on the flag we\n * send. There's a few different ways of doing this and it's a messy\n * venn-diagram to match up which platforms support what. So as we don't have\n * autoconf yet, I'm implementing a hack that could be hacked further\n * relatively easily to deal with cases as we find them. Initially this is to\n * cope with OpenBSD.\n */\n# if defined(__OpenBSD__) || defined(__NetBSD__)\n#  ifdef DL_LAZY\n#   define DLOPEN_FLAG DL_LAZY\n#  else\n#   ifdef RTLD_NOW\n#    define DLOPEN_FLAG RTLD_NOW\n#   else\n#    define DLOPEN_FLAG 0\n#   endif\n#  endif\n# else\n#  define DLOPEN_FLAG RTLD_NOW  /* Hope this works everywhere else */\n# endif\n\n/*\n * For this DSO_METHOD, our meth_data STACK will contain; (i) the handle\n * (void*) returned from dlopen().\n */\n\nstatic int dlfcn_load(DSO *dso)\n{\n    void *ptr = NULL;\n    /* See applicable comments in dso_dl.c */\n    char *filename = DSO_convert_filename(dso, NULL);\n    int flags = DLOPEN_FLAG;\n    int saveerrno = get_last_sys_error();\n\n    if (filename == NULL) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_NO_FILENAME);\n        goto err;\n    }\n# ifdef RTLD_GLOBAL\n    if (dso->flags & DSO_FLAG_GLOBAL_SYMBOLS)\n        flags |= RTLD_GLOBAL;\n# endif\n# ifdef _AIX\n    if (filename[strlen(filename) - 1] == ')')\n        flags |= RTLD_MEMBER;\n# endif\n    ptr = dlopen(filename, flags);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_LOAD_FAILED);\n        ERR_add_error_data(4, \"filename(\", filename, \"): \", dlerror());\n        goto err;\n    }\n    /*\n     * Some dlopen() implementations (e.g. solaris) do no preserve errno, even\n     * on a successful call.\n     */\n    set_sys_error(saveerrno);\n    if (!sk_void_push(dso->meth_data, (char *)ptr)) {\n        DSOerr(DSO_F_DLFCN_LOAD, DSO_R_STACK_ERROR);\n        goto err;\n    }\n    /* Success */\n    dso->loaded_filename = filename;\n    return 1;\n err:\n    /* Cleanup! */\n    OPENSSL_free(filename);\n    if (ptr != NULL)\n        dlclose(ptr);\n    return 0;\n}\n\nstatic int dlfcn_unload(DSO *dso)\n{\n    void *ptr;\n    if (dso == NULL) {\n        DSOerr(DSO_F_DLFCN_UNLOAD, ERR_R_PASSED_NULL_PARAMETER);\n        return 0;\n    }\n    if (sk_void_num(dso->meth_data) < 1)\n        return 1;\n    ptr = sk_void_pop(dso->meth_data);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_UNLOAD, DSO_R_NULL_HANDLE);\n        /*\n         * Should push the value back onto the stack in case of a retry.\n         */\n        sk_void_push(dso->meth_data, ptr);\n        return 0;\n    }\n    /* For now I'm not aware of any errors associated with dlclose() */\n    dlclose(ptr);\n    return 1;\n}\n\nstatic DSO_FUNC_TYPE dlfcn_bind_func(DSO *dso, const char *symname)\n{\n    void *ptr;\n    union {\n        DSO_FUNC_TYPE sym;\n        void *dlret;\n    } u;\n\n    if ((dso == NULL) || (symname == NULL)) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, ERR_R_PASSED_NULL_PARAMETER);\n        return NULL;\n    }\n    if (sk_void_num(dso->meth_data) < 1) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_STACK_ERROR);\n        return NULL;\n    }\n    ptr = sk_void_value(dso->meth_data, sk_void_num(dso->meth_data) - 1);\n    if (ptr == NULL) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_NULL_HANDLE);\n        return NULL;\n    }\n    u.dlret = dlsym(ptr, symname);\n    if (u.dlret == NULL) {\n        DSOerr(DSO_F_DLFCN_BIND_FUNC, DSO_R_SYM_FAILURE);\n        ERR_add_error_data(4, \"symname(\", symname, \"): \", dlerror());\n        return NULL;\n    }\n    return u.sym;\n}\n\nstatic char *dlfcn_merger(DSO *dso, const char *filespec1,\n                          const char *filespec2)\n{\n    char *merged;\n\n    if (!filespec1 && !filespec2) {\n        DSOerr(DSO_F_DLFCN_MERGER, ERR_R_PASSED_NULL_PARAMETER);\n        return NULL;\n    }\n    /*\n     * If the first file specification is a rooted path, it rules. same goes\n     * if the second file specification is missing.\n     */\n    if (!filespec2 || (filespec1 != NULL && filespec1[0] == '/')) {\n        merged = OPENSSL_strdup(filespec1);\n        if (merged == NULL) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return NULL;\n        }\n    }\n    /*\n     * If the first file specification is missing, the second one rules.\n     */\n    else if (!filespec1) {\n        merged = OPENSSL_strdup(filespec2);\n        if (merged == NULL) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return NULL;\n        }\n    } else {\n        /*\n         * This part isn't as trivial as it looks.  It assumes that the\n         * second file specification really is a directory, and makes no\n         * checks whatsoever.  Therefore, the result becomes the\n         * concatenation of filespec2 followed by a slash followed by\n         * filespec1.\n         */\n        int spec2len, len;\n\n        spec2len = strlen(filespec2);\n        len = spec2len + strlen(filespec1);\n\n        if (spec2len && filespec2[spec2len - 1] == '/') {\n            spec2len--;\n            len--;\n        }\n        merged = OPENSSL_malloc(len + 2);\n        if (merged == NULL) {\n            DSOerr(DSO_F_DLFCN_MERGER, ERR_R_MALLOC_FAILURE);\n            return NULL;\n        }\n        strcpy(merged, filespec2);\n        merged[spec2len] = '/';\n        strcpy(&merged[spec2len + 1], filespec1);\n    }\n    return merged;\n}\n\nstatic char *dlfcn_name_converter(DSO *dso, const char *filename)\n{\n    char *translated;\n    int len, rsize, transform;\n\n    len = strlen(filename);\n    rsize = len + 1;\n    transform = (strstr(filename, \"/\") == NULL);\n    if (transform) {\n        /* We will convert this to \"%s.so\" or \"lib%s.so\" etc */\n        rsize += strlen(DSO_EXTENSION);    /* The length of \".so\" */\n        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)\n            rsize += 3;         /* The length of \"lib\" */\n    }\n    translated = OPENSSL_malloc(rsize);\n    if (translated == NULL) {\n        DSOerr(DSO_F_DLFCN_NAME_CONVERTER, DSO_R_NAME_TRANSLATION_FAILED);\n        return NULL;\n    }\n    if (transform) {\n        if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)\n            sprintf(translated, \"lib%s\" DSO_EXTENSION, filename);\n        else\n            sprintf(translated, \"%s\" DSO_EXTENSION, filename);\n    } else\n        sprintf(translated, \"%s\", filename);\n    return translated;\n}\n\n# ifdef __sgi\n/*-\nThis is a quote from IRIX manual for dladdr(3c):\n\n     <dlfcn.h> does not contain a prototype for dladdr or definition of\n     Dl_info.  The #include <dlfcn.h>  in the SYNOPSIS line is traditional,\n     but contains no dladdr prototype and no IRIX library contains an\n     implementation.  Write your own declaration based on the code below.\n\n     The following code is dependent on internal interfaces that are not\n     part of the IRIX compatibility guarantee; however, there is no future\n     intention to change this interface, so on a practical level, the code\n     below is safe to use on IRIX.\n*/\n#  include <rld_interface.h>\n#  ifndef _RLD_INTERFACE_DLFCN_H_DLADDR\n#   define _RLD_INTERFACE_DLFCN_H_DLADDR\ntypedef struct Dl_info {\n    const char *dli_fname;\n    void *dli_fbase;\n    const char *dli_sname;\n    void *dli_saddr;\n    int dli_version;\n    int dli_reserved1;\n    long dli_reserved[4];\n} Dl_info;\n#  else\ntypedef struct Dl_info Dl_info;\n#  endif\n#  define _RLD_DLADDR             14\n\nstatic int dladdr(void *address, Dl_info *dl)\n{\n    void *v;\n    v = _rld_new_interface(_RLD_DLADDR, address, dl);\n    return (int)v;\n}\n# endif                         /* __sgi */\n\n# ifdef _AIX\n/*-\n * See IBM's AIX Version 7.2, Technical Reference:\n *  Base Operating System and Extensions, Volume 1 and 2\n *  https://www.ibm.com/support/knowledgecenter/ssw_aix_72/com.ibm.aix.base/technicalreferences.htm\n */\n#  include <sys/ldr.h>\n#  include <errno.h>\n/* ~ 64 * (sizeof(struct ld_info) + _XOPEN_PATH_MAX + _XOPEN_NAME_MAX) */\n#  define DLFCN_LDINFO_SIZE 86976\ntypedef struct Dl_info {\n    const char *dli_fname;\n} Dl_info;\n/*\n * This dladdr()-implementation will also find the ptrgl (Pointer Glue) virtual\n * address of a function, which is just located in the DATA segment instead of\n * the TEXT segment.\n */\nstatic int dladdr(void *ptr, Dl_info *dl)\n{\n    uintptr_t addr = (uintptr_t)ptr;\n    unsigned int found = 0;\n    struct ld_info *ldinfos, *next_ldi, *this_ldi;\n\n    if ((ldinfos = OPENSSL_malloc(DLFCN_LDINFO_SIZE)) == NULL) {\n        errno = ENOMEM;\n        dl->dli_fname = NULL;\n        return 0;\n    }\n\n    if ((loadquery(L_GETINFO, (void *)ldinfos, DLFCN_LDINFO_SIZE)) < 0) {\n        /*-\n         * Error handling is done through errno and dlerror() reading errno:\n         *  ENOMEM (ldinfos buffer is too small),\n         *  EINVAL (invalid flags),\n         *  EFAULT (invalid ldinfos ptr)\n         */\n        OPENSSL_free((void *)ldinfos);\n        dl->dli_fname = NULL;\n        return 0;\n    }\n    next_ldi = ldinfos;\n\n    do {\n        this_ldi = next_ldi;\n        if (((addr >= (uintptr_t)this_ldi->ldinfo_textorg)\n             && (addr < ((uintptr_t)this_ldi->ldinfo_textorg +\n                         this_ldi->ldinfo_textsize)))\n            || ((addr >= (uintptr_t)this_ldi->ldinfo_dataorg)\n                && (addr < ((uintptr_t)this_ldi->ldinfo_dataorg +\n                            this_ldi->ldinfo_datasize)))) {\n            char *buffer, *member;\n            size_t buffer_sz, member_len;\n\n            buffer_sz = strlen(this_ldi->ldinfo_filename) + 1;\n            member = this_ldi->ldinfo_filename + buffer_sz;\n            if ((member_len = strlen(member)) > 0)\n                buffer_sz += 1 + member_len + 1;\n            found = 1;\n            if ((buffer = OPENSSL_malloc(buffer_sz)) != NULL) {\n                OPENSSL_strlcpy(buffer, this_ldi->ldinfo_filename, buffer_sz);\n                if (member_len > 0) {\n                    /*\n                     * Need to respect a possible member name and not just\n                     * returning the path name in this case. See docs:\n                     * sys/ldr.h, loadquery() and dlopen()/RTLD_MEMBER.\n                     */\n                    OPENSSL_strlcat(buffer, \"(\", buffer_sz);\n                    OPENSSL_strlcat(buffer, member, buffer_sz);\n                    OPENSSL_strlcat(buffer, \")\", buffer_sz);\n                }\n                dl->dli_fname = buffer;\n            } else {\n                errno = ENOMEM;\n            }\n        } else {\n            next_ldi = (struct ld_info *)((uintptr_t)this_ldi +\n                                          this_ldi->ldinfo_next);\n        }\n    } while (this_ldi->ldinfo_next && !found);\n    OPENSSL_free((void *)ldinfos);\n    return (found && dl->dli_fname != NULL);\n}\n# endif                         /* _AIX */\n\nstatic int dlfcn_pathbyaddr(void *addr, char *path, int sz)\n{\n# ifdef HAVE_DLINFO\n    Dl_info dli;\n    int len;\n\n    if (addr == NULL) {\n        union {\n            int (*f) (void *, char *, int);\n            void *p;\n        } t = {\n            dlfcn_pathbyaddr\n        };\n        addr = t.p;\n    }\n\n    if (dladdr(addr, &dli)) {\n        len = (int)strlen(dli.dli_fname);\n        if (sz <= 0) {\n#  ifdef _AIX\n            OPENSSL_free((void *)dli.dli_fname);\n#  endif\n            return len + 1;\n        }\n        if (len >= sz)\n            len = sz - 1;\n        memcpy(path, dli.dli_fname, len);\n        path[len++] = 0;\n#  ifdef _AIX\n        OPENSSL_free((void *)dli.dli_fname);\n#  endif\n        return len;\n    }\n\n    ERR_add_error_data(2, \"dlfcn_pathbyaddr(): \", dlerror());\n# endif\n    return -1;\n}\n\nstatic void *dlfcn_globallookup(const char *name)\n{\n    void *ret = NULL, *handle = dlopen(NULL, RTLD_LAZY);\n\n    if (handle) {\n        ret = dlsym(handle, name);\n        dlclose(handle);\n    }\n\n    return ret;\n}\n#endif                          /* DSO_DLFCN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/shlibloadtest.c": "/*\n * Copyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.\n *\n * Licensed under the OpenSSL license (the \"License\").  You may not use\n * this file except in compliance with the License.  You can obtain a copy\n * in the file LICENSE in the source distribution or at\n * https://www.openssl.org/source/license.html\n */\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <openssl/opensslv.h>\n#include <openssl/ssl.h>\n#include <openssl/ossl_typ.h>\n#include \"internal/dso_conf.h\"\n\ntypedef void DSO;\n\ntypedef const SSL_METHOD * (*TLS_method_t)(void);\ntypedef SSL_CTX * (*SSL_CTX_new_t)(const SSL_METHOD *meth);\ntypedef void (*SSL_CTX_free_t)(SSL_CTX *);\ntypedef int (*OPENSSL_init_crypto_t)(uint64_t, void *);\ntypedef int (*OPENSSL_atexit_t)(void (*handler)(void));\ntypedef unsigned long (*ERR_get_error_t)(void);\ntypedef unsigned long (*OpenSSL_version_num_t)(void);\ntypedef DSO * (*DSO_dsobyaddr_t)(void (*addr)(void), int flags);\ntypedef int (*DSO_free_t)(DSO *dso);\n\ntypedef enum test_types_en {\n    CRYPTO_FIRST,\n    SSL_FIRST,\n    JUST_CRYPTO,\n    DSO_REFTEST,\n    NO_ATEXIT\n} TEST_TYPE;\n\nstatic TEST_TYPE test_type;\nstatic const char *path_crypto;\nstatic const char *path_ssl;\nstatic const char *path_atexit;\n\n#ifdef DSO_DLFCN\n\n# include <dlfcn.h>\n\n# define SHLIB_INIT NULL\n\ntypedef void *SHLIB;\ntypedef void *SHLIB_SYM;\n\nstatic int shlib_load(const char *filename, SHLIB *lib)\n{\n    int dl_flags = (RTLD_GLOBAL|RTLD_LAZY);\n#ifdef _AIX\n    if (filename[strlen(filename) - 1] == ')')\n        dl_flags |= RTLD_MEMBER;\n#endif\n    *lib = dlopen(filename, dl_flags);\n    return *lib == NULL ? 0 : 1;\n}\n\nstatic int shlib_sym(SHLIB lib, const char *symname, SHLIB_SYM *sym)\n{\n    *sym = dlsym(lib, symname);\n    return *sym != NULL;\n}\n\nstatic int shlib_close(SHLIB lib)\n{\n    return dlclose(lib) != 0 ? 0 : 1;\n}\n#endif\n\n#ifdef DSO_WIN32\n\n# include <windows.h>\n\n# define SHLIB_INIT 0\n\ntypedef HINSTANCE SHLIB;\ntypedef void *SHLIB_SYM;\n\nstatic int shlib_load(const char *filename, SHLIB *lib)\n{\n    *lib = LoadLibraryA(filename);\n    return *lib == NULL ? 0 : 1;\n}\n\nstatic int shlib_sym(SHLIB lib, const char *symname, SHLIB_SYM *sym)\n{\n    *sym = (SHLIB_SYM)GetProcAddress(lib, symname);\n    return *sym != NULL;\n}\n\nstatic int shlib_close(SHLIB lib)\n{\n    return FreeLibrary(lib) == 0 ? 0 : 1;\n}\n#endif\n\n\n#if defined(DSO_DLFCN) || defined(DSO_WIN32)\n\nstatic int atexit_handler_done = 0;\n\nstatic void atexit_handler(void)\n{\n    FILE *atexit_file = fopen(path_atexit, \"w\");\n\n    if (atexit_file == NULL)\n        return;\n\n    fprintf(atexit_file, \"atexit() run\\n\");\n    fclose(atexit_file);\n    atexit_handler_done++;\n}\n\nstatic int test_lib(void)\n{\n    SHLIB ssllib = SHLIB_INIT;\n    SHLIB cryptolib = SHLIB_INIT;\n    SSL_CTX *ctx;\n    union {\n        void (*func)(void);\n        SHLIB_SYM sym;\n    } symbols[3];\n    TLS_method_t myTLS_method;\n    SSL_CTX_new_t mySSL_CTX_new;\n    SSL_CTX_free_t mySSL_CTX_free;\n    ERR_get_error_t myERR_get_error;\n    OpenSSL_version_num_t myOpenSSL_version_num;\n    OPENSSL_atexit_t myOPENSSL_atexit;\n    int result = 0;\n\n    switch (test_type) {\n    case JUST_CRYPTO:\n    case DSO_REFTEST:\n    case NO_ATEXIT:\n    case CRYPTO_FIRST:\n        if (!shlib_load(path_crypto, &cryptolib)) {\n            fprintf(stderr, \"Failed to load libcrypto\\n\");\n            goto end;\n        }\n        if (test_type != CRYPTO_FIRST)\n            break;\n        /* Fall through */\n\n    case SSL_FIRST:\n        if (!shlib_load(path_ssl, &ssllib)) {\n            fprintf(stderr, \"Failed to load libssl\\n\");\n            goto end;\n        }\n        if (test_type != SSL_FIRST)\n            break;\n        if (!shlib_load(path_crypto, &cryptolib)) {\n            fprintf(stderr, \"Failed to load libcrypto\\n\");\n            goto end;\n        }\n        break;\n    }\n\n    if (test_type == NO_ATEXIT) {\n        OPENSSL_init_crypto_t myOPENSSL_init_crypto;\n\n        if (!shlib_sym(cryptolib, \"OPENSSL_init_crypto\", &symbols[0].sym)) {\n            fprintf(stderr, \"Failed to load OPENSSL_init_crypto symbol\\n\");\n            goto end;\n        }\n        myOPENSSL_init_crypto = (OPENSSL_init_crypto_t)symbols[0].func;\n        if (!myOPENSSL_init_crypto(OPENSSL_INIT_NO_ATEXIT, NULL)) {\n            fprintf(stderr, \"Failed to initialise libcrypto\\n\");\n            goto end;\n        }\n    }\n\n    if (test_type != JUST_CRYPTO\n            && test_type != DSO_REFTEST\n            && test_type != NO_ATEXIT) {\n        if (!shlib_sym(ssllib, \"TLS_method\", &symbols[0].sym)\n                || !shlib_sym(ssllib, \"SSL_CTX_new\", &symbols[1].sym)\n                || !shlib_sym(ssllib, \"SSL_CTX_free\", &symbols[2].sym)) {\n            fprintf(stderr, \"Failed to load libssl symbols\\n\");\n            goto end;\n        }\n        myTLS_method = (TLS_method_t)symbols[0].func;\n        mySSL_CTX_new = (SSL_CTX_new_t)symbols[1].func;\n        mySSL_CTX_free = (SSL_CTX_free_t)symbols[2].func;\n        ctx = mySSL_CTX_new(myTLS_method());\n        if (ctx == NULL) {\n            fprintf(stderr, \"Failed to create SSL_CTX\\n\");\n            goto end;\n        }\n        mySSL_CTX_free(ctx);\n    }\n\n    if (!shlib_sym(cryptolib, \"ERR_get_error\", &symbols[0].sym)\n           || !shlib_sym(cryptolib, \"OpenSSL_version_num\", &symbols[1].sym)\n           || !shlib_sym(cryptolib, \"OPENSSL_atexit\", &symbols[2].sym)) {\n        fprintf(stderr, \"Failed to load libcrypto symbols\\n\");\n        goto end;\n    }\n    myERR_get_error = (ERR_get_error_t)symbols[0].func;\n    if (myERR_get_error() != 0) {\n        fprintf(stderr, \"Unexpected ERR_get_error() response\\n\");\n        goto end;\n    }\n\n    myOpenSSL_version_num = (OpenSSL_version_num_t)symbols[1].func;\n    if (myOpenSSL_version_num()  != OPENSSL_VERSION_NUMBER) {\n        fprintf(stderr, \"Invalid library version number\\n\");\n        goto end;\n    }\n\n    myOPENSSL_atexit = (OPENSSL_atexit_t)symbols[2].func;\n    if (!myOPENSSL_atexit(atexit_handler)) {\n        fprintf(stderr, \"Failed to register atexit handler\\n\");\n        goto end;\n    }\n\n    if (test_type == DSO_REFTEST) {\n# ifdef DSO_DLFCN\n        DSO_dsobyaddr_t myDSO_dsobyaddr;\n        DSO_free_t myDSO_free;\n\n        /*\n         * This is resembling the code used in ossl_init_base() and\n         * OPENSSL_atexit() to block unloading the library after dlclose().\n         * We are not testing this on Windows, because it is done there in a\n         * completely different way. Especially as a call to DSO_dsobyaddr()\n         * will always return an error, because DSO_pathbyaddr() is not\n         * implemented there.\n         */\n        if (!shlib_sym(cryptolib, \"DSO_dsobyaddr\", &symbols[0].sym)\n                || !shlib_sym(cryptolib, \"DSO_free\", &symbols[1].sym)) {\n            fprintf(stderr, \"Unable to load DSO symbols\\n\");\n            goto end;\n        }\n\n        myDSO_dsobyaddr = (DSO_dsobyaddr_t)symbols[0].func;\n        myDSO_free = (DSO_free_t)symbols[1].func;\n\n        {\n            DSO *hndl;\n            /* use known symbol from crypto module */\n            hndl = myDSO_dsobyaddr((void (*)(void))myERR_get_error, 0);\n            if (hndl == NULL) {\n                fprintf(stderr, \"DSO_dsobyaddr() failed\\n\");\n                goto end;\n            }\n            myDSO_free(hndl);\n        }\n# endif /* DSO_DLFCN */\n    }\n\n    if (!shlib_close(cryptolib)) {\n        fprintf(stderr, \"Failed to close libcrypto\\n\");\n        goto end;\n    }\n\n    if (test_type == CRYPTO_FIRST || test_type == SSL_FIRST) {\n        if (!shlib_close(ssllib)) {\n            fprintf(stderr, \"Failed to close libssl\\n\");\n            goto end;\n        }\n    }\n\n# if defined(OPENSSL_NO_PINSHARED) \\\n    && defined(__GLIBC__) \\\n    && defined(__GLIBC_PREREQ) \\\n    && defined(OPENSSL_SYS_LINUX)\n#  if __GLIBC_PREREQ(2, 3)\n    /*\n     * If we didn't pin the so then we are hopefully on a platform that supports\n     * running atexit() on so unload. If not we might crash. We know this is\n     * true on linux since glibc 2.2.3\n     */\n    if (test_type != NO_ATEXIT && atexit_handler_done != 1) {\n        fprintf(stderr, \"atexit() handler did not run\\n\");\n        goto end;\n    }\n#  endif\n# endif\n\n    result = 1;\nend:\n    return result;\n}\n#endif\n\n\n/*\n * shlibloadtest should not use the normal test framework because we don't want\n * it to link against libcrypto (which the framework uses). The point of the\n * test is to check dynamic loading and unloading of libcrypto/libssl.\n */\nint main(int argc, char *argv[])\n{\n    const char *p;\n\n    if (argc != 5) {\n        fprintf(stderr, \"Incorrect number of arguments\\n\");\n        return 1;\n    }\n\n    p = argv[1];\n\n    if (strcmp(p, \"-crypto_first\") == 0) {\n        test_type = CRYPTO_FIRST;\n    } else if (strcmp(p, \"-ssl_first\") == 0) {\n        test_type = SSL_FIRST;\n    } else if (strcmp(p, \"-just_crypto\") == 0) {\n        test_type = JUST_CRYPTO;\n    } else if (strcmp(p, \"-dso_ref\") == 0) {\n        test_type = DSO_REFTEST;\n    } else if (strcmp(p, \"-no_atexit\") == 0) {\n        test_type = NO_ATEXIT;\n    } else {\n        fprintf(stderr, \"Unrecognised argument\\n\");\n        return 1;\n    }\n    path_crypto = argv[2];\n    path_ssl = argv[3];\n    path_atexit = argv[4];\n    if (path_crypto == NULL || path_ssl == NULL) {\n        fprintf(stderr, \"Invalid libcrypto/libssl path\\n\");\n        return 1;\n    }\n\n#if defined(DSO_DLFCN) || defined(DSO_WIN32)\n    if (!test_lib())\n        return 1;\n#endif\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/doc/man3/OPENSSL_init_crypto.pod": "=pod\n\n=head1 NAME\n\nOPENSSL_INIT_new, OPENSSL_INIT_set_config_filename,\nOPENSSL_INIT_set_config_appname, OPENSSL_INIT_set_config_file_flags,\nOPENSSL_INIT_free, OPENSSL_init_crypto, OPENSSL_cleanup, OPENSSL_atexit,\nOPENSSL_thread_stop - OpenSSL initialisation\nand deinitialisation functions\n\n=head1 SYNOPSIS\n\n #include <openssl/crypto.h>\n\n void OPENSSL_cleanup(void);\n int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);\n int OPENSSL_atexit(void (*handler)(void));\n void OPENSSL_thread_stop(void);\n\n OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void);\n int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *init,\n                                      const char* filename);\n int OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *init,\n                                        unsigned long flags);\n int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *init,\n                                     const char* name);\n void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *init);\n\n=head1 DESCRIPTION\n\nDuring normal operation OpenSSL (libcrypto) will allocate various resources at\nstart up that must, subsequently, be freed on close down of the library.\nAdditionally some resources are allocated on a per thread basis (if the\napplication is multi-threaded), and these resources must be freed prior to the\nthread closing.\n\nAs of version 1.1.0 OpenSSL will automatically allocate all resources that it\nneeds so no explicit initialisation is required. Similarly it will also\nautomatically deinitialise as required.\n\nHowever, there may be situations when explicit initialisation is desirable or\nneeded, for example when some non-default initialisation is required. The\nfunction OPENSSL_init_crypto() can be used for this purpose for\nlibcrypto (see also L<OPENSSL_init_ssl(3)> for the libssl\nequivalent).\n\nNumerous internal OpenSSL functions call OPENSSL_init_crypto().\nTherefore, in order to perform non-default initialisation,\nOPENSSL_init_crypto() MUST be called by application code prior to\nany other OpenSSL function calls.\n\nThe B<opts> parameter specifies which aspects of libcrypto should be\ninitialised. Valid options are:\n\n=over 4\n\n=item OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS\n\nSuppress automatic loading of the libcrypto error strings. This option is\nnot a default option. Once selected subsequent calls to\nOPENSSL_init_crypto() with the option\nB<OPENSSL_INIT_LOAD_CRYPTO_STRINGS> will be ignored.\n\n=item OPENSSL_INIT_LOAD_CRYPTO_STRINGS\n\nAutomatic loading of the libcrypto error strings. With this option the\nlibrary will automatically load the libcrypto error strings.\nThis option is a default option. Once selected subsequent calls to\nOPENSSL_init_crypto() with the option\nB<OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS> will be ignored.\n\n=item OPENSSL_INIT_ADD_ALL_CIPHERS\n\nWith this option the library will automatically load and make available all\nlibcrypto ciphers. This option is a default option. Once selected subsequent\ncalls to OPENSSL_init_crypto() with the option\nB<OPENSSL_INIT_NO_ADD_ALL_CIPHERS> will be ignored.\n\n=item OPENSSL_INIT_ADD_ALL_DIGESTS\n\nWith this option the library will automatically load and make available all\nlibcrypto digests. This option is a default option. Once selected subsequent\ncalls to OPENSSL_init_crypto() with the option\nB<OPENSSL_INIT_NO_ADD_ALL_CIPHERS> will be ignored.\n\n=item OPENSSL_INIT_NO_ADD_ALL_CIPHERS\n\nWith this option the library will suppress automatic loading of libcrypto\nciphers. This option is not a default option. Once selected subsequent\ncalls to OPENSSL_init_crypto() with the option\nB<OPENSSL_INIT_ADD_ALL_CIPHERS> will be ignored.\n\n=item OPENSSL_INIT_NO_ADD_ALL_DIGESTS\n\nWith this option the library will suppress automatic loading of libcrypto\ndigests. This option is not a default option. Once selected subsequent\ncalls to OPENSSL_init_crypto() with the option\nB<OPENSSL_INIT_ADD_ALL_DIGESTS> will be ignored.\n\n=item OPENSSL_INIT_LOAD_CONFIG\n\nWith this option an OpenSSL configuration file will be automatically loaded and\nused by calling OPENSSL_config(). This is not a default option for libcrypto.\nAs of OpenSSL 1.1.1 this is a default option for libssl (see\nL<OPENSSL_init_ssl(3)> for further details about libssl initialisation). See the\ndescription of OPENSSL_INIT_new(), below.\n\n=item OPENSSL_INIT_NO_LOAD_CONFIG\n\nWith this option the loading of OpenSSL configuration files will be suppressed.\nIt is the equivalent of calling OPENSSL_no_config(). This is not a default\noption.\n\n=item OPENSSL_INIT_ASYNC\n\nWith this option the library with automatically initialise the libcrypto async\nsub-library (see L<ASYNC_start_job(3)>). This is a default option.\n\n=item OPENSSL_INIT_ENGINE_RDRAND\n\nWith this option the library will automatically load and initialise the\nRDRAND engine (if available). This not a default option.\n\n=item OPENSSL_INIT_ENGINE_DYNAMIC\n\nWith this option the library will automatically load and initialise the\ndynamic engine. This not a default option.\n\n=item OPENSSL_INIT_ENGINE_OPENSSL\n\nWith this option the library will automatically load and initialise the\nopenssl engine. This not a default option.\n\n=item OPENSSL_INIT_ENGINE_CRYPTODEV\n\nWith this option the library will automatically load and initialise the\ncryptodev engine (if available). This not a default option.\n\n=item OPENSSL_INIT_ENGINE_CAPI\n\nWith this option the library will automatically load and initialise the\nCAPI engine (if available). This not a default option.\n\n=item OPENSSL_INIT_ENGINE_PADLOCK\n\nWith this option the library will automatically load and initialise the\npadlock engine (if available). This not a default option.\n\n=item OPENSSL_INIT_ENGINE_AFALG\n\nWith this option the library will automatically load and initialise the\nAFALG engine. This not a default option.\n\n=item OPENSSL_INIT_ENGINE_ALL_BUILTIN\n\nWith this option the library will automatically load and initialise all the\nbuilt in engines listed above with the exception of the openssl and afalg\nengines. This not a default option.\n\n=item OPENSSL_INIT_ATFORK\n\nWith this option the library will register its fork handlers.\nSee OPENSSL_fork_prepare(3) for details.\n\n=item OPENSSL_INIT_NO_ATEXIT\n\nBy default OpenSSL will attempt to clean itself up when the process exits via an\n\"atexit\" handler. Using this option suppresses that behaviour. This means that\nthe application will have to clean up OpenSSL explicitly using\nOPENSSL_cleanup().\n\n=back\n\nMultiple options may be combined together in a single call to\nOPENSSL_init_crypto(). For example:\n\n OPENSSL_init_crypto(OPENSSL_INIT_NO_ADD_ALL_CIPHERS\n                     | OPENSSL_INIT_NO_ADD_ALL_DIGESTS, NULL);\n\nThe OPENSSL_cleanup() function deinitialises OpenSSL (both libcrypto\nand libssl). All resources allocated by OpenSSL are freed. Typically there\nshould be no need to call this function directly as it is initiated\nautomatically on application exit. This is done via the standard C library\natexit() function. In the event that the application will close in a manner\nthat will not call the registered atexit() handlers then the application should\ncall OPENSSL_cleanup() directly. Developers of libraries using OpenSSL\nare discouraged from calling this function and should instead, typically, rely\non auto-deinitialisation. This is to avoid error conditions where both an\napplication and a library it depends on both use OpenSSL, and the library\ndeinitialises it before the application has finished using it.\n\nOnce OPENSSL_cleanup() has been called the library cannot be reinitialised.\nAttempts to call OPENSSL_init_crypto() will fail and an ERR_R_INIT_FAIL error\nwill be added to the error stack. Note that because initialisation has failed\nOpenSSL error strings will not be available, only an error code. This code can\nbe put through the openssl errstr command line application to produce a human\nreadable error (see L<errstr(1)>).\n\nThe OPENSSL_atexit() function enables the registration of a\nfunction to be called during OPENSSL_cleanup(). Stop handlers are\ncalled after deinitialisation of resources local to a thread, but before other\nprocess wide resources are freed. In the event that multiple stop handlers are\nregistered, no guarantees are made about the order of execution.\n\nThe OPENSSL_thread_stop() function deallocates resources associated\nwith the current thread. Typically this function will be called automatically by\nthe library when the thread exits. This should only be called directly if\nresources should be freed at an earlier time, or under the circumstances\ndescribed in the NOTES section below.\n\nThe B<OPENSSL_INIT_LOAD_CONFIG> flag will load a configuration file, as with\nL<CONF_modules_load_file(3)> with NULL filename and application name and the\nB<CONF_MFLAGS_IGNORE_MISSING_FILE>, B<CONF_MFLAGS_IGNORE_RETURN_CODES>  and\nB<CONF_MFLAGS_DEFAULT_SECTION> flags.\nThe filename, application name, and flags can be customized by providing a\nnon-null B<OPENSSL_INIT_SETTINGS> object.\nThe object can be allocated via B<OPENSSL_init_new()>.\nThe B<OPENSSL_INIT_set_config_filename()> function can be used to specify a\nnon-default filename, which is copied and need not refer to persistent storage.\nSimilarly, OPENSSL_INIT_set_config_appname() can be used to specify a\nnon-default application name.\nFinally, OPENSSL_INIT_set_file_flags can be used to specify non-default flags.\nIf the B<CONF_MFLAGS_IGNORE_RETURN_CODES> flag is not included, any errors in\nthe configuration file will cause an error return from B<OPENSSL_init_crypto>\nor indirectly L<OPENSSL_init_ssl(3)>.\nThe object can be released with OPENSSL_INIT_free() when done.\n\n=head1 NOTES\n\nResources local to a thread are deallocated automatically when the thread exits\n(e.g. in a pthreads environment, when pthread_exit() is called). On Windows\nplatforms this is done in response to a DLL_THREAD_DETACH message being sent to\nthe libcrypto32.dll entry point. Some windows functions may cause threads to exit\nwithout sending this message (for example ExitProcess()). If the application\nuses such functions, then the application must free up OpenSSL resources\ndirectly via a call to OPENSSL_thread_stop() on each thread. Similarly this\nmessage will also not be sent if OpenSSL is linked statically, and therefore\napplications using static linking should also call OPENSSL_thread_stop() on each\nthread. Additionally if OpenSSL is loaded dynamically via LoadLibrary() and the\nthreads are not destroyed until after FreeLibrary() is called then each thread\nshould call OPENSSL_thread_stop() prior to the FreeLibrary() call.\n\nOn Linux/Unix where OpenSSL has been loaded via dlopen() and the application is\nmulti-threaded and if dlclose() is subsequently called prior to the threads\nbeing destroyed then OpenSSL will not be able to deallocate resources associated\nwith those threads. The application should either call OPENSSL_thread_stop() on\neach thread prior to the dlclose() call, or alternatively the original dlopen()\ncall should use the RTLD_NODELETE flag (where available on the platform).\n\n=head1 RETURN VALUES\n\nThe functions OPENSSL_init_crypto, OPENSSL_atexit() and\nOPENSSL_INIT_set_config_appname() return 1 on success or 0 on error.\n\n=head1 SEE ALSO\n\nL<OPENSSL_init_ssl(3)>\n\n=head1 HISTORY\n\nThe OPENSSL_init_crypto(), OPENSSL_cleanup(), OPENSSL_atexit(),\nOPENSSL_thread_stop(), OPENSSL_INIT_new(), OPENSSL_INIT_set_config_appname()\nand OPENSSL_INIT_free() functions were added in OpenSSL 1.1.0.\n\n=head1 COPYRIGHT\n\nCopyright 2016-2019 The OpenSSL Project Authors. All Rights Reserved.\n\nLicensed under the OpenSSL license (the \"License\").  You may not use\nthis file except in compliance with the License.  You can obtain a copy\nin the file LICENSE in the source distribution or at\nL<https://www.openssl.org/source/license.html>.\n\n=cut\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/shibboleth.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad-cms.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/high_tag.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/intminus1.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad_bio.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad_cert.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad_generalname.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/d2i-tests/bad-int-padminus1.der",
        "/tmp/vanessa/spack-stage/spack-stage-openssl-1.1.1c-t4abhtbss4bfey7gkspe26iu2c22he7l/spack-src/test/recipes/ocsp-response.der"
    ],
    "total_files": 3003
}