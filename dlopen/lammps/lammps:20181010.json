{
    "matches": {
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/src/USER-MOLFILE/molfile_interface.cpp": "/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Axel Kohlmeyer (Temple)\n------------------------------------------------------------------------- */\n\n#include \"molfile_interface.h\"\n\n#include <sys/types.h>\n#include <cstdio>\n#include <dirent.h>\n#include <cstring>\n#include <cstdlib>\n#include <cctype>\n\n#if defined(_WIN32)\n#include <windows.h>\n#else\n#include <dirent.h>\n#include <dlfcn.h>\n#endif\n\n#include \"molfile_plugin.h\"\n\n#if vmdplugin_ABIVERSION < 16\n#error \"unsupported VMD molfile plugin ABI version\"\n#endif\n\n#define DEBUG 0\n\nextern \"C\" {\n  typedef int (*initfunc)(void);\n  typedef int (*regfunc)(void *, vmdplugin_register_cb);\n  typedef int (*finifunc)(void);\n\n  typedef struct {\n    void *p;\n    const char *name;\n  } plugin_reginfo_t;\n\n  // callback function for plugin registration.\n  static int plugin_register_cb(void *v, vmdplugin_t *p)\n  {\n    plugin_reginfo_t *r = static_cast<plugin_reginfo_t *>(v);\n    // make sure we have the proper plugin type (native reader)\n    // for the desired file type (called \"name\" at this level)\n    if ((strcmp(MOLFILE_PLUGIN_TYPE,p->type) == 0)\n        && (strcmp(r->name, p->name) == 0) ) {\n      r->p = static_cast<void *>(p);\n    }\n    return 0;\n  }\n\n  /* periodic table of elements for translation of ordinal to atom type */\n  static const char *pte_label[] = {\n    \"X\",  \"H\",  \"He\", \"Li\", \"Be\", \"B\",  \"C\",  \"N\",  \"O\",  \"F\",  \"Ne\",\n    \"Na\", \"Mg\", \"Al\", \"Si\", \"P\" , \"S\",  \"Cl\", \"Ar\", \"K\",  \"Ca\", \"Sc\",\n    \"Ti\", \"V\",  \"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Cu\", \"Zn\", \"Ga\", \"Ge\",\n    \"As\", \"Se\", \"Br\", \"Kr\", \"Rb\", \"Sr\", \"Y\",  \"Zr\", \"Nb\", \"Mo\", \"Tc\",\n    \"Ru\", \"Rh\", \"Pd\", \"Ag\", \"Cd\", \"In\", \"Sn\", \"Sb\", \"Te\", \"I\",  \"Xe\",\n    \"Cs\", \"Ba\", \"La\", \"Ce\", \"Pr\", \"Nd\", \"Pm\", \"Sm\", \"Eu\", \"Gd\", \"Tb\",\n    \"Dy\", \"Ho\", \"Er\", \"Tm\", \"Yb\", \"Lu\", \"Hf\", \"Ta\", \"W\",  \"Re\", \"Os\",\n    \"Ir\", \"Pt\", \"Au\", \"Hg\", \"Tl\", \"Pb\", \"Bi\", \"Po\", \"At\", \"Rn\", \"Fr\",\n    \"Ra\", \"Ac\", \"Th\", \"Pa\", \"U\",  \"Np\", \"Pu\", \"Am\", \"Cm\", \"Bk\", \"Cf\",\n    \"Es\", \"Fm\", \"Md\", \"No\", \"Lr\", \"Rf\", \"Db\", \"Sg\", \"Bh\", \"Hs\", \"Mt\",\n    \"Ds\", \"Rg\"\n  };\n  static const int nr_pte_entries = sizeof(pte_label) / sizeof(char *);\n\n  /* corresponding table of masses. */\n  static const float pte_mass[] = {\n    /* X  */ 0.00000, 1.00794, 4.00260, 6.941, 9.012182, 10.811,\n    /* C  */ 12.0107, 14.0067, 15.9994, 18.9984032, 20.1797,\n    /* Na */ 22.989770, 24.3050, 26.981538, 28.0855, 30.973761,\n    /* S  */ 32.065, 35.453, 39.948, 39.0983, 40.078, 44.955910,\n    /* Ti */ 47.867, 50.9415, 51.9961, 54.938049, 55.845, 58.9332,\n    /* Ni */ 58.6934, 63.546, 65.409, 69.723, 72.64, 74.92160,\n    /* Se */ 78.96, 79.904, 83.798, 85.4678, 87.62, 88.90585,\n    /* Zr */ 91.224, 92.90638, 95.94, 98.0, 101.07, 102.90550,\n    /* Pd */ 106.42, 107.8682, 112.411, 114.818, 118.710, 121.760,\n    /* Te */ 127.60, 126.90447, 131.293, 132.90545, 137.327,\n    /* La */ 138.9055, 140.116, 140.90765, 144.24, 145.0, 150.36,\n    /* Eu */ 151.964, 157.25, 158.92534, 162.500, 164.93032,\n    /* Er */ 167.259, 168.93421, 173.04, 174.967, 178.49, 180.9479,\n    /* W  */ 183.84, 186.207, 190.23, 192.217, 195.078, 196.96655,\n    /* Hg */ 200.59, 204.3833, 207.2, 208.98038, 209.0, 210.0, 222.0,\n    /* Fr */ 223.0, 226.0, 227.0, 232.0381, 231.03588, 238.02891,\n    /* Np */ 237.0, 244.0, 243.0, 247.0, 247.0, 251.0, 252.0, 257.0,\n    /* Md */ 258.0, 259.0, 262.0, 261.0, 262.0, 266.0, 264.0, 269.0,\n    /* Mt */ 268.0, 271.0, 272.0\n  };\n\n  /*\n   * corresponding table of VDW radii.\n   * van der Waals radii are taken from A. Bondi,\n   * J. Phys. Chem., 68, 441 - 452, 1964,\n   * except the value for H, which is taken from R.S. Rowland & R. Taylor,\n   * J.Phys.Chem., 100, 7384 - 7391, 1996. Radii that are not available in\n   * either of these publications have RvdW = 2.00 \\AA.\n   * The radii for Ions (Na, K, Cl, Ca, Mg, and Cs are based on the CHARMM27\n   * Rmin/2 parameters for (SOD, POT, CLA, CAL, MG, CES) by default.\n   */\n  static const float pte_vdw_radius[] = {\n    /* X  */ 1.5, 1.2, 1.4, 1.82, 2.0, 2.0,\n    /* C  */ 1.7, 1.55, 1.52, 1.47, 1.54,\n    /* Na */ 1.36, 1.18, 2.0, 2.1, 1.8,\n    /* S  */ 1.8, 2.27, 1.88, 1.76, 1.37, 2.0,\n    /* Ti */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Ni */ 1.63, 1.4, 1.39, 1.07, 2.0, 1.85,\n    /* Se */ 1.9, 1.85, 2.02, 2.0, 2.0, 2.0,\n    /* Zr */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Pd */ 1.63, 1.72, 1.58, 1.93, 2.17, 2.0,\n    /* Te */ 2.06, 1.98, 2.16, 2.1, 2.0,\n    /* La */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Eu */ 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Er */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* W  */ 2.0, 2.0, 2.0, 2.0, 1.72, 1.66,\n    /* Hg */ 1.55, 1.96, 2.02, 2.0, 2.0, 2.0, 2.0,\n    /* Fr */ 2.0, 2.0, 2.0, 2.0, 2.0, 1.86,\n    /* Np */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Md */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Mt */ 2.0, 2.0, 2.0\n  };\n\n  /* lookup functions */\n\n  static const char *get_pte_label(const int idx)\n  {\n    if ((idx < 1) || (idx >= nr_pte_entries)) return pte_label[0];\n\n    return pte_label[idx];\n  }\n\n  static float get_pte_mass(const int idx)\n  {\n    if ((idx < 1) || (idx >= nr_pte_entries)) return pte_mass[0];\n\n    return pte_mass[idx];\n  }\n\n  static float get_pte_vdw_radius(const int idx)\n  {\n    if ((idx < 1) || (idx >= nr_pte_entries)) return pte_vdw_radius[0];\n\n#if 1\n    /* Replace with Hydrogen radius with an \"all-atom\" radius */\n    if (idx == 1)\n      return 1.0;    /* H  */\n#else\n    /* Replace with old VMD atom radii values */\n    switch (idx) {\n    case  1: return 1.0;    /* H  */\n    case  6: return 1.5;    /* C  */\n    case  7: return 1.4;    /* N  */\n    case  8: return 1.3;    /* O  */\n    case  9: return 1.2;    /* F  */\n    case 15: return 1.5;    /* P  */\n    case 16: return 1.9;    /* S  */\n    }\n#endif\n\n    return pte_vdw_radius[idx];\n  }\n\n  static int get_pte_idx_from_string(const char *label) {\n    int i, ind;\n    char atom[3];\n\n    if (label != NULL) {\n      /* zap string */\n      atom[0] = atom[1] = atom[2] = '\\0';\n\n      for (ind=0,i=0; (ind<2) && (label[i]!='\\0'); i++) {\n        if (label[i] != ' ') {\n          atom[ind] = toupper(label[i]);\n          ind++;\n        }\n      }\n\n      if (ind < 1)\n        return 0; /* no non-whitespace characters */\n\n      for (i=0; i < nr_pte_entries; ++i) {\n        if ((toupper(pte_label[i][0]) == atom[0]) && (toupper(pte_label[i][1]) == atom[1]))\n          return i;\n      }\n    }\n\n    return 0;\n  }\n\n  // directory traversal helper functions\n\n#if defined(_WIN32)\n\n  // Win32 directory traversal handle\n  typedef struct {\n    HANDLE h;\n    WIN32_FIND_DATA fd;\n    char *name;\n    char *searchname;\n    int dlen;\n  } dirhandle_t;\n\n  // open a directory handle\n  static dirhandle_t *my_opendir(const char *dirname)\n  {\n    dirhandle_t *d;\n    int len;\n\n    if (dirname == NULL)\n      return NULL;\n    d = new dirhandle_t;\n\n    len = 2 + strlen(dirname);\n    d->name = new char[len];\n    strcpy(d->name, dirname);\n    strcat(d->name, \"\\\\\");\n    d->dlen = len;\n\n    len += 1;\n    d->searchname = new char[len];\n    strcpy(d->searchname, dirname);\n    strcat(d->searchname, \"\\\\*\");\n\n    d->h = FindFirstFile(d->searchname, &(d->fd));\n    if (d->h == ((HANDLE)(-1))) {\n      delete[] d->searchname;\n      delete[] d->name;\n      delete d;\n      return NULL;\n    }\n    return d;\n  }\n\n  // get next file name from directory handle\n  static char *my_readdir(dirhandle_t *d)\n  {\n    if (FindNextFile(d->h, &(d->fd))) {\n      return d->fd.cFileName;\n    }\n    return NULL;\n  }\n\n  // close directory handle\n  static void my_closedir(dirhandle_t *d)\n  {\n    if (d->h != NULL) {\n      FindClose(d->h);\n    }\n    delete[] d->searchname;\n    delete[] d->name;\n    delete d;\n  }\n\n  // open a shared object file\n  static void *my_dlopen(const char *fname) {\n    return (void *)LoadLibrary(fname);\n  }\n\n  // resolve a symbol in shared object\n  static void *my_dlsym(void *h, const char *sym) {\n    return (void *)GetProcAddress((HINSTANCE)h, sym);\n  }\n\n  // close a shared object\n  static int my_dlclose(void *h) {\n    /* FreeLibrary returns nonzero on success */\n    return !FreeLibrary((HINSTANCE)h);\n  }\n\n#else\n\n  // Unix directory traversal handle\n  typedef struct {\n    DIR *d;\n    char *name;\n    int dlen;\n  } dirhandle_t;\n\n  // open a directory handle\n  static dirhandle_t *my_opendir(const char *dirname)\n  {\n    dirhandle_t *d;\n    int len;\n\n    if (dirname == NULL) return NULL;\n\n    d = new dirhandle_t;\n    len = 2 + strlen(dirname);\n    d->name = new char[len];\n    strcpy(d->name,dirname);\n    strcat(d->name,\"/\");\n    d->dlen = len;\n\n    d->d = opendir(d->name);\n    if (d->d == NULL) {\n      delete[] d->name;\n      delete d;\n      return NULL;\n    }\n    return d;\n  }\n\n  // get next file name from directory handle\n  static char *my_readdir(dirhandle_t *d)\n  {\n    struct dirent *p;\n\n    if ((p = readdir(d->d)) != NULL) {\n      return p->d_name;\n    }\n\n    return NULL;\n  }\n\n  // close directory handle\n  static void my_closedir(dirhandle_t *d)\n  {\n    if (d->d != NULL) {\n      closedir(d->d);\n    }\n    delete[] d->name;\n    delete d;\n    return;\n  }\n\n  // open a shared object file\n  static void *my_dlopen(const char *fname) {\n    return dlopen(fname, RTLD_NOW);\n  }\n\n  // resolve a symbol in shared object\n  static void *my_dlsym(void *h, const char *sym) {\n    return dlsym(h, sym);\n  }\n\n  // close a shared object\n  static int my_dlclose(void *h) {\n    return dlclose(h);\n  }\n\n#endif\n\n} // end of extern \"C\" region\n\nusing namespace LAMMPS_NS;\n\n// constructor.\nMolfileInterface::MolfileInterface(const char *type, const int mode)\n  : _plugin(0), _dso(0), _ptr(0), _info(0), _natoms(0),\n    _mode(mode), _caps(M_NONE)\n{\n  _name = new char[5];\n  strcpy(_name,\"none\");\n  _type = new char[1+strlen(type)];\n  strcpy(_type,type);\n}\n\n// destructor.\nMolfileInterface::~MolfileInterface()\n{\n  forget_plugin();\n\n  if (_info) {\n    molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n    delete[] a;\n    _info = NULL;\n  }\n  delete[] _name;\n  delete[] _type;\n}\n\n// register the best matching plugin in a given directory\nint MolfileInterface::find_plugin(const char *pluginpath)\n{\n  dirhandle_t *dir;\n  char *filename, *ext, *next, *path, *plugindir;\n  int retval = E_NONE;\n\n#if defined(_WIN32)\n#define MY_PATHSEP ';'\n#else\n#define MY_PATHSEP ':'\n#endif\n  if (pluginpath == NULL) return E_DIR;\n  plugindir = path = strdup(pluginpath);\n\n  while (plugindir) {\n    // check if this a single directory or path.\n    next = strchr(plugindir,MY_PATHSEP);\n    if (next) {\n      *next = '\\0';\n      ++next;\n    }\n\n    dir = my_opendir(plugindir);\n    if (!dir)\n      retval = (retval > E_DIR) ? retval : E_DIR;\n\n    // search for suitable file names and try to inspect them\n    while(dir) {\n      char *fullname;\n      int len;\n\n      filename = my_readdir(dir);\n      if (filename == NULL) break;\n\n      // only look at .so files\n      ext = strrchr(filename, '.');\n      if (ext == NULL) continue;\n      if (strcasecmp(ext,\".so\") != 0) continue;\n\n      // construct full pathname of potential DSO\n      len = dir->dlen;\n      len += strlen(filename);\n      fullname = new char[len];\n      strcpy(fullname,dir->name);\n      strcat(fullname,filename);\n\n      // try to register plugin at file name.\n      int rv = load_plugin(fullname);\n      if (rv > retval) retval = rv;\n\n      delete[] fullname;\n    }\n    if (dir)\n      my_closedir(dir);\n\n    plugindir = next;\n  }\n  free(path);\n  return retval;\n}\n\n// register the best matching plugin in a given directory\nint MolfileInterface::load_plugin(const char *filename)\n{\n  void *dso;\n  int len, retval = E_NONE;\n\n  // access shared object\n  dso = my_dlopen(filename);\n  if (dso == NULL)\n    return E_FILE;\n\n  // check for required plugin symbols\n  void *ifunc = my_dlsym(dso,\"vmdplugin_init\");\n  void *rfunc = my_dlsym(dso,\"vmdplugin_register\");\n  void *ffunc = my_dlsym(dso,\"vmdplugin_fini\");\n  if (ifunc == NULL || rfunc == NULL || ffunc == NULL) {\n    my_dlclose(dso);\n    return E_SYMBOL;\n  }\n\n  // initialize plugin. skip plugin if it fails.\n  if (((initfunc)(ifunc))()) {\n    my_dlclose(dso);\n    return E_SYMBOL;\n  }\n\n  // pre-register plugin.\n  // the callback will be called for each plugin in the DSO and\n  // check the file type. plugin->name will change if successful.\n  plugin_reginfo_t reginfo;\n  reginfo.p = NULL;\n  reginfo.name=_type;\n  ((regfunc)rfunc)(&reginfo, plugin_register_cb);\n\n  // make some checks to see if the plugin is suitable or not.\n  molfile_plugin_t *plugin = static_cast<molfile_plugin_t *>(reginfo.p);\n\n  // if the callback found a matching plugin and copied the struct,\n  // its name element will point to a different location now.\n  if (plugin == NULL) {\n    retval = E_TYPE;\n\n    // check if the ABI matches the one used to compile this code\n  } else if (plugin->abiversion != vmdplugin_ABIVERSION) {\n    retval = E_ABI;\n\n    // check if (basic) reading is supported\n  } else if ((_mode & M_READ) &&\n             ( (plugin->open_file_read == NULL) ||\n               (plugin->read_next_timestep  == NULL) ||\n               (plugin->close_file_read == NULL) )) {\n    retval = E_MODE;\n\n    // check if (basic) writing is supported\n  } else if ( (_mode & M_WRITE) &&\n              ( (plugin->open_file_write == NULL) ||\n                (plugin->write_timestep  == NULL) ||\n                (plugin->close_file_write == NULL) )) {\n    retval = E_MODE;\n\n    // make some additional check, if we\n    // already have a plugin registered.\n    // NOTE: this has to come last.\n  } else if (_dso && _plugin) {\n    molfile_plugin_t *p;\n    p = static_cast<molfile_plugin_t *>(_plugin);\n\n    // check if the new plugin is of a newer major version\n    if (p->majorv > plugin->majorv) {\n      retval = E_VERSION;\n\n    // check if the new plugin is of a newer minor version\n    } else if ( (p->majorv == plugin->majorv) &&\n                (p->minorv >= plugin->minorv) ) {\n      retval = E_VERSION;\n    }\n  }\n\n  // bingo! this one is a keeper.\n  if (retval == E_NONE) {\n\n    // make sure any existing plugin is wiped out\n    forget_plugin();\n\n    delete[] _name;\n    len = 16;\n    len += strlen(plugin->prettyname);\n    len += strlen(plugin->author);\n    _name = new char[len];\n    sprintf(_name,\"%s v%d.%d by %s\",plugin->prettyname,\n            plugin->majorv, plugin->minorv, plugin->author);\n\n    // determine plugin capabilities\n    _caps = M_NONE;\n    if (plugin->read_next_timestep)      _caps |= M_READ;\n    if (plugin->write_timestep)          _caps |= M_WRITE;\n#if vmdplugin_ABIVERSION > 10\n    // required to tell if velocities are present\n    if (plugin->read_timestep_metadata)  _caps |= M_RVELS;\n    // we can always offer velocities. we may not know if\n    // they will be written by the plugin though.\n    if (plugin->write_timestep)          _caps |= M_WVELS;\n#endif\n    if (plugin->read_structure)          _caps |= M_RSTRUCT;\n    if (plugin->write_structure)         _caps |= M_WSTRUCT;\n    if (plugin->read_bonds)              _caps |= M_RBONDS;\n    if (plugin->write_bonds)             _caps |= M_WBONDS;\n    if (plugin->read_angles)             _caps |= M_RANGLES;\n    if (plugin->write_angles)            _caps |= M_WANGLES;\n    if (plugin->read_volumetric_data)    _caps |= M_RVOL;\n    if (plugin->write_volumetric_data)   _caps |= M_WVOL;\n\n    if (_mode & M_WRITE) {\n      _mode |= (_caps & M_WSTRUCT);\n      _mode |= (_caps & M_WVELS);\n    } else if (_mode & M_READ) {\n      _mode |= (_caps & M_RSTRUCT);\n      _mode |= (_caps & M_RVELS);\n    }\n\n    _plugin = plugin;\n    _dso = dso;\n    return E_MATCH;\n  }\n\n  // better luck next time. clean up and return.\n  my_dlclose(dso);\n  return retval;\n}\n\n// deregister a plugin and close or reset all associated objects.\nvoid MolfileInterface::forget_plugin()\n{\n  if (_ptr)\n    close();\n\n  if (_plugin)\n    _plugin = NULL;\n\n  if (_dso) {\n    void *ffunc = my_dlsym(_dso,\"vmdplugin_fini\");\n    if (ffunc)\n      ((finifunc)ffunc)();\n    my_dlclose(_dso);\n  }\n  _dso = NULL;\n\n  delete[] _name;\n    _name = new char[5];\n  strcpy(_name,\"none\");\n\n  _caps = M_NONE;\n}\n\n// open file for reading or writing\nint MolfileInterface::open(const char *name, int *natoms)\n{\n  if (!_plugin || !_dso || !natoms)\n    return E_FILE;\n  molfile_plugin_t *p = static_cast<molfile_plugin_t *>(_plugin);\n\n  if (_mode & M_WRITE)\n    _ptr = p->open_file_write(name,_type,*natoms);\n  else if (_mode & M_READ)\n    _ptr = p->open_file_read(name,_type,natoms);\n\n  if (_ptr == NULL)\n    return E_FILE;\n\n  _natoms = *natoms;\n  // we need to deal with structure information,\n  // so we allocate and initialize storage for it.\n  if (_mode & (M_RSTRUCT|M_WSTRUCT)) {\n    molfile_atom_t *a = new molfile_atom_t[_natoms];\n    _info = a;\n    memset(_info,0,_natoms*sizeof(molfile_atom_t));\n    for (int i=0; i < _natoms; ++i) {\n      a[i].name[0] = 'X';\n      a[i].type[0] = a[i].resname[0] = a[i].segid[0] = 'U';\n      a[i].type[1] = a[i].resname[1] = a[i].segid[1] = 'N';\n      a[i].type[2] = a[i].resname[2] = a[i].segid[2] = 'K';\n      a[i].chain[0] = 'X';\n    }\n  }\n  return E_NONE;\n}\n\n// get of set atom structure information\nint MolfileInterface::structure()\n{\n  if (!_plugin || !_dso)\n    return E_FILE;\n  molfile_plugin_t *p = static_cast<molfile_plugin_t *>(_plugin);\n\n  int optflags = MOLFILE_NOOPTIONS;\n\n  if (_mode & M_WSTRUCT) {\n    optflags |= (_props & P_BFAC) ? MOLFILE_BFACTOR : 0;\n    optflags |= (_props & P_OCCP) ? MOLFILE_OCCUPANCY : 0;\n    optflags |= (_props & P_MASS) ? MOLFILE_MASS : 0;\n    optflags |= (_props & P_CHRG) ? MOLFILE_CHARGE : 0;\n    optflags |= (_props & P_RADS) ? MOLFILE_RADIUS : 0;\n    optflags |= (_props & P_ATMN) ? MOLFILE_ATOMICNUMBER : 0;\n\n    molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n    p->write_structure(_ptr,optflags,a);\n  } else if (_mode & M_RSTRUCT) {\n    molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n    p->read_structure(_ptr,&optflags,a);\n    // mandatory properties\n    _props = P_NAME|P_TYPE|P_RESN|P_RESI|P_SEGN|P_CHAI;\n    // optional properties\n    _props |= (optflags & MOLFILE_BFACTOR) ? P_BFAC : 0;\n    _props |= (optflags & MOLFILE_OCCUPANCY) ? P_OCCP : 0;\n    _props |= (optflags & MOLFILE_MASS) ? P_MASS : 0;\n    _props |= (optflags & MOLFILE_CHARGE) ? P_CHRG : 0;\n    _props |= (optflags & MOLFILE_RADIUS) ? P_RADS : 0;\n    _props |= (optflags & MOLFILE_ATOMICNUMBER) ? P_ATMN : 0;\n  }\n  return 0;\n}\n\n// safely close file\nint MolfileInterface::close()\n{\n  if (!_plugin || !_dso || !_ptr)\n    return E_FILE;\n\n  molfile_plugin_t *p = static_cast<molfile_plugin_t *>(_plugin);\n\n  if (_mode & M_WRITE) {\n    p->close_file_write(_ptr);\n  } else if (_mode & M_READ) {\n    p->close_file_read(_ptr);\n  }\n\n  if (_info) {\n    molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n    delete[] a;\n    _info = NULL;\n  }\n  _ptr = NULL;\n  _natoms = 0;\n\n  return E_NONE;\n}\n\n\n// read or write timestep\nint MolfileInterface::timestep(float *coords, float *vels,\n                               float *cell, double *simtime)\n{\n  if (!_plugin || !_dso || !_ptr)\n    return 1;\n\n  molfile_plugin_t *p = static_cast<molfile_plugin_t *>(_plugin);\n  molfile_timestep_t *t = new molfile_timestep_t;\n  int rv;\n\n  if (_mode & M_WRITE) {\n    t->coords = coords;\n    t->velocities = vels;\n    if (cell != NULL) {\n      t->A = cell[0];\n      t->B = cell[1];\n      t->C = cell[2];\n      t->alpha = cell[3];\n      t->beta = cell[4];\n      t->gamma = cell[5];\n    } else {\n      t->A = 0.0f;\n      t->B = 0.0f;\n      t->C = 0.0f;\n      t->alpha = 90.0f;\n      t->beta = 90.0f;\n      t->gamma = 90.0f;\n    }\n\n    if (simtime)\n      t->physical_time = *simtime;\n    else\n      t->physical_time = 0.0;\n\n    rv = p->write_timestep(_ptr,t);\n\n  } else {\n    // no coordinate storage => skip step\n    if (coords == NULL) {\n      rv = p->read_next_timestep(_ptr, _natoms, NULL);\n    } else {\n      t->coords = coords;\n      t->velocities = vels;\n      t->A = 0.0f;\n      t->B = 0.0f;\n      t->C = 0.0f;\n      t->alpha = 90.0f;\n      t->beta = 90.0f;\n      t->gamma = 90.0f;\n      t->physical_time = 0.0;\n      rv = p->read_next_timestep(_ptr, _natoms, t);\n      if (cell != NULL) {\n        cell[0] = t->A;\n        cell[1] = t->B;\n        cell[2] = t->C;\n        cell[3] = t->alpha;\n        cell[4] = t->beta;\n        cell[5] = t->gamma;\n      }\n      if (simtime)\n        *simtime = t->physical_time;\n    }\n\n    if (rv == MOLFILE_EOF) {\n      delete t;\n      return 1;\n    }\n  }\n\n  delete t;\n  return 0;\n}\n\n// functions to read properties from molfile structure\n\n#define PROPUPDATE(PROP,ENTRY,VAL)              \\\n  if (propid == PROP) { VAL = a.ENTRY; }\n\n#define PROPSTRCPY(PROP,ENTRY,VAL)              \\\n  if (propid == PROP) { strcpy(VAL,a.ENTRY); }\n\n// single precision floating point props\nstatic float read_float_property(molfile_atom_t &a, const int propid)\n{\n  float prop = 0.0f;\n  int iprop = 0;\n  PROPUPDATE(MolfileInterface::P_OCCP,occupancy,prop);\n  PROPUPDATE(MolfileInterface::P_BFAC,bfactor,prop);\n  PROPUPDATE(MolfileInterface::P_MASS,mass,prop);\n  PROPUPDATE(MolfileInterface::P_CHRG,charge,prop);\n  PROPUPDATE(MolfileInterface::P_RADS,radius,prop);\n\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_MASS),\n             atomicnumber,iprop);\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_RADS),\n             atomicnumber,iprop);\n  if (propid & MolfileInterface::P_ATMN) {\n    if (propid & MolfileInterface::P_MASS)\n      prop = get_pte_mass(iprop);\n    if (propid & MolfileInterface::P_RADS)\n      prop = get_pte_vdw_radius(iprop);\n  }\n\n  return prop;\n}\n\n// integer and derived props\nstatic int read_int_property(molfile_atom_t &a, const int propid)\n{\n  int prop = 0;\n  const char * sprop;\n\n  PROPUPDATE(MolfileInterface::P_RESI,resid,prop);\n  PROPUPDATE(MolfileInterface::P_ATMN,atomicnumber,prop);\n\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_NAME),\n             name,sprop);\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_TYPE),\n             type,sprop);\n\n  if (propid & MolfileInterface::P_ATMN) {\n    if (propid & (MolfileInterface::P_NAME|MolfileInterface::P_TYPE))\n      prop = get_pte_idx_from_string(sprop);\n  }\n\n  return prop;\n}\n\n// string and derived props\nstatic const char *read_string_property(molfile_atom_t &a,\n                                        const int propid)\n{\n  const char *prop = NULL;\n  int iprop = 0;\n  PROPUPDATE(MolfileInterface::P_NAME,name,prop);\n  PROPUPDATE(MolfileInterface::P_TYPE,type,prop);\n  PROPUPDATE(MolfileInterface::P_RESN,resname,prop);\n  PROPUPDATE(MolfileInterface::P_SEGN,segid,prop);\n\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_NAME),\n             atomicnumber,iprop);\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_TYPE),\n             atomicnumber,iprop);\n\n  if (propid & MolfileInterface::P_ATMN) {\n    if (propid & (MolfileInterface::P_NAME|MolfileInterface::P_TYPE))\n      prop = get_pte_label(iprop);\n  }\n\n  return prop;\n}\n#undef PROPUPDATE\n#undef PROPSTRCPY\n\n// functions to store properties into molfile structure\n\n#define PROPUPDATE(PROP,ENTRY,VAL)                                  \\\n  if ((propid & PROP) == PROP) { a.ENTRY = VAL; plist |= PROP; }\n\n#define PROPSTRCPY(PROP,ENTRY,VAL)                                      \\\n  if ((propid & PROP) == PROP) { strcpy(a.ENTRY,VAL); plist |= PROP; }\n\n// floating point props\nstatic int write_atom_property(molfile_atom_t &a,\n                               const int propid,\n                               const float prop)\n{\n  int plist = MolfileInterface::P_NONE;\n  PROPUPDATE(MolfileInterface::P_OCCP,occupancy,prop);\n  PROPUPDATE(MolfileInterface::P_BFAC,bfactor,prop);\n  PROPUPDATE(MolfileInterface::P_MASS,mass,prop);\n  PROPUPDATE(MolfileInterface::P_CHRG,charge,prop);\n  PROPUPDATE(MolfileInterface::P_RADS,radius,prop);\n  return plist;\n}\n\n// double precision floating point props\nstatic int write_atom_property(molfile_atom_t &a,\n                               const int propid,\n                               const double prop)\n{\n  return write_atom_property(a,propid,static_cast<float>(prop));\n}\n\n// integer and derived props\nstatic int write_atom_property(molfile_atom_t &a,\n                               const int propid,\n                               const int prop)\n{\n  int plist = MolfileInterface::P_NONE;\n  PROPUPDATE(MolfileInterface::P_RESI,resid,prop);\n  PROPUPDATE(MolfileInterface::P_ATMN,atomicnumber,prop);\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_MASS),\n             mass,get_pte_mass(prop));\n  PROPSTRCPY((MolfileInterface::P_ATMN|MolfileInterface::P_NAME),\n             name,get_pte_label(prop));\n  PROPSTRCPY((MolfileInterface::P_ATMN|MolfileInterface::P_TYPE),\n             type,get_pte_label(prop));\n  return plist;\n}\n\n// integer and derived props\nstatic int write_atom_property(molfile_atom_t &a,\n                               const int propid,\n                               const char *prop)\n{\n  int plist = MolfileInterface::P_NONE;\n  PROPSTRCPY(MolfileInterface::P_NAME,name,prop);\n  PROPSTRCPY(MolfileInterface::P_TYPE,type,prop);\n  PROPSTRCPY(MolfileInterface::P_RESN,resname,prop);\n  PROPSTRCPY(MolfileInterface::P_SEGN,segid,prop);\n  return plist;\n}\n#undef PROPUPDATE\n#undef PROPSTRCPY\n\n// set/get atom floating point property\nint MolfileInterface::property(int propid, int idx, float *prop)\n{\n  if ((_info == NULL) || (prop == NULL) || (idx < 0) || (idx >= _natoms))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT)\n    _props |= write_atom_property(a[idx], propid, *prop);\n\n  if (_mode & M_RSTRUCT)\n    *prop = read_float_property(a[idx], propid);\n\n  return _props;\n}\n\n// set/get per type floating point property\nint MolfileInterface::property(int propid, int *types, float *prop)\n{\n  if ((_info == NULL) || (types == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[types[i]]);\n  }\n\n  // useless for reading.\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n\n// set/get per atom floating point property\nint MolfileInterface::property(int propid, float *prop)\n{\n  if ((_info == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[i]);\n  }\n\n  if (_mode & M_RSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      prop[i] = read_float_property(a[i], propid);\n  }\n\n  return _props;\n}\n\n// set/get atom floating point property\nint MolfileInterface::property(int propid, int idx, double *prop)\n{\n  if ((_info == NULL) || (prop == NULL) || (idx < 0) || (idx >= _natoms))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT)\n    return write_atom_property(a[idx], propid, *prop);\n\n  if (_mode & M_RSTRUCT)\n    *prop = static_cast<double>(read_float_property(a[idx], propid));\n\n  return _props;\n}\n\n// set/get per type floating point property\nint MolfileInterface::property(int propid, int *types, double *prop)\n{\n  if ((_info == NULL) || (types == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[types[i]]);\n  }\n\n  // useless for reading\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n\n// set/get per atom floating point property\nint MolfileInterface::property(int propid, double *prop)\n{\n  if ((_info == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[i]);\n  }\n  if (_mode & M_RSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      prop[i] = static_cast<double>(read_float_property(a[i], propid));\n  }\n\n  return _props;\n}\n\n#define INT_TO_STRING_BODY(IDX)                         \\\n  buf[15] = 0;                                          \\\n  if (propid & P_NAME)                                  \\\n    _props |= write_atom_property(a[IDX],P_NAME,buf);   \\\n  if (propid & P_TYPE)                                  \\\n    _props |= write_atom_property(a[IDX],P_TYPE,buf);   \\\n  buf[7] = 0;                                           \\\n  if (propid & P_RESN)                                  \\\n    _props |= write_atom_property(a[IDX],P_RESN,buf);   \\\n  if (propid & P_SEGN)                                  \\\n    _props |= write_atom_property(a[IDX],P_SEGN,buf);   \\\n  buf[1] = 0;                                           \\\n  if (propid & P_CHAI)                                  \\\n    _props |= write_atom_property(a[IDX],P_CHAI,buf)\n\n// set/get atom integer property\nint MolfileInterface::property(int propid, int idx, int *prop)\n{\n  if ((_info == NULL) || (prop == NULL) || (idx < 0) || (idx >= _natoms))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    char buf[64];\n\n    _props |= write_atom_property(a[idx], propid, *prop);\n\n    if (propid & (P_NAME|P_TYPE|P_RESN|P_SEGN|P_CHAI)) {\n      sprintf(buf,\"%d\",*prop);\n      INT_TO_STRING_BODY(idx);\n    }\n  }\n\n  if (_mode & M_RSTRUCT)\n    *prop = read_int_property(a[idx], propid);\n\n  return _props;\n}\n\n// set/get per type integer property\nint MolfileInterface::property(int propid, int *types, int *prop)\n{\n  if ((_info == NULL) || (types == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    char buf[64];\n\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[types[i]]);\n\n    if (propid & (P_NAME|P_TYPE|P_RESN|P_SEGN|P_CHAI)) {\n      for (int i=0; i < _natoms; ++i) {\n        sprintf(buf,\"%d\",prop[types[i]]);\n        INT_TO_STRING_BODY(i);\n      }\n    }\n  }\n\n  // useless when reading\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n\n// set/get per atom integer property\nint MolfileInterface::property(int propid, int *prop)\n{\n  if ((_info == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    char buf[64];\n\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i],propid,prop[i]);\n\n    if (propid & (P_NAME|P_TYPE|P_RESN|P_SEGN|P_CHAI)) {\n      for (int i=0; i < _natoms; ++i) {\n        sprintf(buf,\"%d\",prop[i]);\n        INT_TO_STRING_BODY(i);\n      }\n    }\n  }\n\n  if (_mode & M_RSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      prop[i] = read_int_property(a[i], propid);\n  }\n\n  return _props;\n}\n#undef INT_TO_STRING_BODY\n\n// set/get atom string property\nint MolfileInterface::property(int propid, int idx, char *prop)\n{\n  if ((_info == NULL) || (prop == NULL) || (idx < 0) || (idx >= _natoms))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    _props |= write_atom_property(a[idx], propid, prop);\n  }\n\n  if (_mode & M_RSTRUCT)\n    strcpy(prop,read_string_property(a[idx], propid));\n\n  return _props;\n}\n\n// set/get per type string property\nint MolfileInterface::property(int propid, int *types, char **prop)\n{\n  if ((_info == NULL) || (types == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i) {\n      _props |= write_atom_property(a[i], propid, prop[types[i]]);\n    }\n  }\n\n  // useless when reading\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n\n// set/get per atom string property\nint MolfileInterface::property(int propid, char **prop)\n{\n  if ((_info == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i) {\n      _props |= write_atom_property(a[i], propid, prop[i]);\n    }\n  }\n\n  // not supported right now. XXX: should we use strdup() here?\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/lib/molfile/vmdplugin.h": "/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2006 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmdplugin.h,v $\n *      $Author: johns $       $Locker:  $             $State: Exp $\n *      $Revision: 1.33 $       $Date: 2015/10/29 05:10:54 $\n *\n ***************************************************************************/\n\n/** @file\n * This header must be included by every VMD plugin library.  It defines the\n * API for every plugin so that VMD can organize the plugins it finds.\n */\n\n#ifndef VMD_PLUGIN_H\n#define VMD_PLUGIN_H\n\n\n/*\n * Preprocessor tricks to make it easier for us to redefine the names of\n * functions when building static plugins.\n */\n#if !defined(VMDPLUGIN)\n/**\n  * macro defining VMDPLUGIN if it hasn't already been set to the name of\n  * a static plugin that is being compiled.  This is the catch-all case.\n  */\n#define VMDPLUGIN vmdplugin\n#endif\n/** concatenation macro, joins args x and y together as a single string */\n#define xcat(x, y) cat(x, y)\n/** concatenation macro, joins args x and y together as a single string */\n#define cat(x, y) x ## y\n\n/*\n *  macros to correctly define plugin function names depending on whether\n *  the plugin is being compiled for static linkage or dynamic loading.\n *  When compiled for static linkage, each plugin needs to have unique\n *  function names for all of its entry points.  When compiled for dynamic\n *  loading, the plugins must name their entry points consistently so that\n *  the plugin loading mechanism can find the register, register_tcl, init,\n *  and fini routines via dlopen() or similar operating system interfaces.\n */\n/*@{*/\n/** Macro names entry points correctly for static linkage or dynamic loading */\n#define VMDPLUGIN_register     xcat(VMDPLUGIN, _register)\n#define VMDPLUGIN_register_tcl xcat(VMDPLUGIN, _register_tcl)\n#define VMDPLUGIN_init         xcat(VMDPLUGIN, _init)\n#define VMDPLUGIN_fini         xcat(VMDPLUGIN, _fini)\n/*@}*/\n\n\n/** \"WIN32\" is defined on both WIN32 and WIN64 platforms... */\n#if (defined(WIN32))\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n\n#if !defined(STATIC_PLUGIN)\n#if defined(VMDPLUGIN_EXPORTS)\n/**\n *  Only define DllMain for plugins, not in VMD or in statically linked plugins\n *  VMDPLUGIN_EXPORTS is only defined when compiling dynamically loaded plugins\n */\nBOOL APIENTRY DllMain( HANDLE hModule,\n                       DWORD ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n  return TRUE;\n}\n\n#define VMDPLUGIN_API __declspec(dllexport)\n#else\n#define VMDPLUGIN_API __declspec(dllimport)\n#endif /* VMDPLUGIN_EXPORTS */\n#else  /* ! STATIC_PLUGIN */\n#define VMDPLUGIN_API\n#endif /* ! STATIC_PLUGIN */\n#else\n/** If we're not compiling on Windows, then this macro is defined empty */\n#define VMDPLUGIN_API\n#endif\n\n/** define plugin linkage correctly for both C and C++ based plugins */\n#ifdef __cplusplus\n#define VMDPLUGIN_EXTERN extern \"C\" VMDPLUGIN_API\n#else\n#define VMDPLUGIN_EXTERN extern VMDPLUGIN_API\n#endif  /* __cplusplus */\n\n/*\n * Plugin API functions start here\n */\n\n\n/**\n * Init routine: called the first time the library is loaded by the\n * application and before any other API functions are referenced.\n * Return 0 on success.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_init(void);\n\n/**\n * Macro for creating a struct header used in all plugin structures.\n *\n * This header should be placed at the top of every plugin API definition\n * so that it can be treated as a subtype of the base plugin type.\n *\n * abiversion: Defines the ABI for the base plugin type (not for other plugins)\n * type: A string descriptor of the plugin type.\n * name: A name for the plugin.\n * author: A string identifier, possibly including newlines.\n * Major and minor version.\n * is_reentrant: Whether this library can be run concurrently with itself.\n */\n#define vmdplugin_HEAD \\\n  int abiversion; \\\n  const char *type; \\\n  const char *name; \\\n  const char *prettyname; \\\n  const char *author; \\\n  int majorv; \\\n  int minorv; \\\n  int is_reentrant;\n\n/**\n  * Typedef for generic plugin header, individual plugins can\n  * make their own structures as long as the header info remains\n  * the same as the generic plugin header, most easily done by\n  * using the vmdplugin_HEAD macro.\n  */\ntypedef struct {\n  vmdplugin_HEAD\n} vmdplugin_t;\n\n/**\n * Use this macro to initialize the abiversion member of each plugin\n */\n#define vmdplugin_ABIVERSION  17\n\n/*@{*/\n/** Use this macro to indicate a plugin's thread-safety at registration time */\n#define VMDPLUGIN_THREADUNSAFE 0\n#define VMDPLUGIN_THREADSAFE   1\n/*@}*/\n\n/*@{*/\n/** Error return code for use in the plugin registration and init functions */\n#define VMDPLUGIN_SUCCESS      0\n#define VMDPLUGIN_ERROR       -1\n/*@}*/\n\n/**\n * Function pointer typedef for register callback functions\n */\ntypedef int (*vmdplugin_register_cb)(void *, vmdplugin_t *);\n\n/**\n * Allow the library to register plugins with the application.\n * The callback should be called using the passed-in void pointer, which\n * should not be interpreted in any way by the library.  Each vmdplugin_t\n * pointer passed to the application should point to statically-allocated\n * or heap-allocated memory and should never be later modified by the plugin.\n * Applications must be permitted to retain only a copy of the the plugin\n * pointer, without making any deep copy of the items in the struct.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register(void *, vmdplugin_register_cb);\n\n/**\n * Allow the library to register Tcl extensions.\n * This API is optional; if found by dlopen, it will be called after first\n * calling init and register.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register_tcl(void *, void *tcl_interp,\n    vmdplugin_register_cb);\n\n/**\n * The Fini method is called when the application will no longer use\n * any plugins in the library.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_fini(void);\n\n#endif   /* VMD_PLUGIN_H */\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/lib/molfile/Makefile.lammps": "# This file contains the hooks to build and link LAMMPS with the VMD\n# molfile plugins described here:\n# \n# http://www.ks.uiuc.edu/Research/vmd/plugins/molfile\n# \n# When you build LAMMPS with the USER-MOLFILE package installed, it will\n# use the 3 settings in this file.  They should be set as follows.\n# \n# The molfile_SYSINC setting is to point to the folder with the VMD\n# plugin headers. By default it points to bundled headers in this folder\n# \n# The molfile_SYSLIB setting is for a system dynamic loading library\n# that will be used to load the molfile plugins.  It contains functions\n# like dlopen(), dlsym() and so on for dynamic linking of executable\n# code into an executable.  For Linux and most current Unix-like\n# operating systems, the setting of \"-ldl\" will work.  On some platforms\n# you may need \"-ldld\".  For compilation on Windows, a different\n# mechanism is used that is part of the Windows programming environment\n# and thus molfile_SYSLIB can be left blank.\n# \n# The molfile_SYSINC and molfile_SYSPATH variables do not typically need\n# to be set.  If the dl library is not in a place the linker can find\n# it, specify its directory via the molfile_SYSPATH variable, e.g.\n# -Ldir.\n\n# -----------------------------------------------------------\n\n# Settings that the LAMMPS build will import when this package is installed\n\n# change this to -I/path/to/your/lib/vmd/plugins/include if the bundled\n# header files are incompatible with your VMD plugsins\nmolfile_SYSINC =-I../../lib/molfile\n#\nifneq ($(LIBOBJDIR),/Obj_mingw32)\nifneq ($(LIBOBJDIR),/Obj_mingw64)\nifneq ($(LIBOBJDIR),/Obj_mingw32-mpi)\nifneq ($(LIBOBJDIR),/Obj_mingw64-mpi)\nmolfile_SYSLIB = -ldl\nendif\nendif\nendif\nendif\nmolfile_SYSPATH =\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/lib/kokkos/core/src/impl/Kokkos_Profiling_Interface.cpp": "/*\n //@HEADER\n // ************************************************************************\n //\n //                        Kokkos v. 2.0\n //              Copyright (2014) Sandia Corporation\n //\n // Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,\n // the U.S. Government retains certain rights in this software.\n //\n // Redistribution and use in source and binary forms, with or without\n // modification, are permitted provided that the following conditions are\n // met:\n //\n // 1. Redistributions of source code must retain the above copyright\n // notice, this list of conditions and the following disclaimer.\n //\n // 2. Redistributions in binary form must reproduce the above copyright\n // notice, this list of conditions and the following disclaimer in the\n // documentation and/or other materials provided with the distribution.\n //\n // 3. Neither the name of the Corporation nor the names of the\n // contributors may be used to endorse or promote products derived from\n // this software without specific prior written permission.\n //\n // THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION \"AS IS\" AND ANY\n // EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n // PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE\n // CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n // EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n // PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n // PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n // LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n // NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n // SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n //\n // Questions? Contact Christian R. Trott (crtrott@sandia.gov)\n //\n // ************************************************************************\n //@HEADER\n */\n\n#include <Kokkos_Macros.hpp>\n\n#if defined(KOKKOS_ENABLE_PROFILING)\n\n#include <impl/Kokkos_Profiling_Interface.hpp>\n#include <cstring>\n\nnamespace Kokkos {\nnamespace Profiling {\n\nstatic initFunction initProfileLibrary = nullptr;\nstatic finalizeFunction finalizeProfileLibrary = nullptr;\n\nstatic beginFunction beginForCallee = nullptr;\nstatic beginFunction beginScanCallee = nullptr;\nstatic beginFunction beginReduceCallee = nullptr;\nstatic endFunction endForCallee = nullptr;\nstatic endFunction endScanCallee = nullptr;\nstatic endFunction endReduceCallee = nullptr;\n\nstatic pushFunction pushRegionCallee = nullptr;\nstatic popFunction popRegionCallee = nullptr;\n\nstatic allocateDataFunction allocateDataCallee = nullptr;\nstatic deallocateDataFunction deallocateDataCallee = nullptr;\n\nstatic beginDeepCopyFunction beginDeepCopyCallee = nullptr;\nstatic endDeepCopyFunction endDeepCopyCallee = nullptr;\n\nstatic createProfileSectionFunction createSectionCallee = nullptr;\nstatic startProfileSectionFunction startSectionCallee = nullptr;\nstatic stopProfileSectionFunction stopSectionCallee = nullptr;\nstatic destroyProfileSectionFunction destroySectionCallee = nullptr;\n\nstatic profileEventFunction profileEventCallee = nullptr;\n\nSpaceHandle::SpaceHandle(const char* space_name) {\n  strncpy(name,space_name,64);\n}\n\nbool profileLibraryLoaded() {\n  return (nullptr != initProfileLibrary);\n}\n\nvoid beginParallelFor(const std::string& kernelPrefix, const uint32_t devID, uint64_t* kernelID) {\n  if(nullptr != beginForCallee) {\n    Kokkos::fence();\n    (*beginForCallee)(kernelPrefix.c_str(), devID, kernelID);\n  }\n}\n\nvoid endParallelFor(const uint64_t kernelID) {\n  if(nullptr != endForCallee) {\n    Kokkos::fence();\n    (*endForCallee)(kernelID);\n  }\n}\n\nvoid beginParallelScan(const std::string& kernelPrefix, const uint32_t devID, uint64_t* kernelID) {\n  if(nullptr != beginScanCallee) {\n    Kokkos::fence();\n    (*beginScanCallee)(kernelPrefix.c_str(), devID, kernelID);\n  }\n}\n\nvoid endParallelScan(const uint64_t kernelID) {\n  if(nullptr != endScanCallee) {\n    Kokkos::fence();\n    (*endScanCallee)(kernelID);\n  }\n}\n\nvoid beginParallelReduce(const std::string& kernelPrefix, const uint32_t devID, uint64_t* kernelID) {\n  if(nullptr != beginReduceCallee) {\n    Kokkos::fence();\n    (*beginReduceCallee)(kernelPrefix.c_str(), devID, kernelID);\n  }\n}\n\nvoid endParallelReduce(const uint64_t kernelID) {\n  if(nullptr != endReduceCallee) {\n    Kokkos::fence();\n    (*endReduceCallee)(kernelID);\n  }\n}\n\n\nvoid pushRegion(const std::string& kName) {\n  if( nullptr != pushRegionCallee ) {\n    Kokkos::fence();\n    (*pushRegionCallee)(kName.c_str());\n  }\n}\n\nvoid popRegion() {\n  if( nullptr != popRegionCallee ) {\n    Kokkos::fence();\n    (*popRegionCallee)();\n  }\n}\n\nvoid allocateData(const SpaceHandle space, const std::string label, const void* ptr, const uint64_t size) {\n  if(nullptr != allocateDataCallee) {\n    (*allocateDataCallee)(space,label.c_str(),ptr,size);\n  }\n}\n\nvoid deallocateData(const SpaceHandle space, const std::string label, const void* ptr, const uint64_t size) {\n  if(nullptr != deallocateDataCallee) {\n    (*deallocateDataCallee)(space,label.c_str(),ptr,size);\n  }\n}\n\nvoid beginDeepCopy(const SpaceHandle dst_space, const std::string dst_label, const void* dst_ptr,\n    const SpaceHandle src_space, const std::string src_label, const void* src_ptr,\n    const uint64_t size) {\n  if(nullptr != beginDeepCopyCallee) {\n    (*beginDeepCopyCallee)(dst_space, dst_label.c_str(), dst_ptr,\n                      src_space, src_label.c_str(), src_ptr,\n                      size);\n  }\n}\n\nvoid endDeepCopy() {\n  if(nullptr != endDeepCopyCallee) {\n    (*endDeepCopyCallee)();\n  }\n}\n\nvoid createProfileSection(const std::string& sectionName, uint32_t* secID) {\n\n\tif(nullptr != createSectionCallee) {\n\t\t(*createSectionCallee)(sectionName.c_str(), secID);\n\t}\n}\n\nvoid startSection(const uint32_t secID) {\n\tif(nullptr != startSectionCallee) {\n\t\t(*startSectionCallee)(secID);\n\t}\n}\n\nvoid stopSection(const uint32_t secID) {\n\tif(nullptr != stopSectionCallee) {\n\t\t(*stopSectionCallee)(secID);\n\t}\n}\n\nvoid destroyProfileSection(const uint32_t secID) {\n\tif(nullptr != destroySectionCallee) {\n\t\t(*destroySectionCallee)(secID);\n\t}\n}\n\nvoid markEvent(const std::string& eventName) {\n\tif(nullptr != profileEventCallee) {\n\t\t(*profileEventCallee)(eventName.c_str());\n\t}\n}\n\nvoid initialize() {\n\n  // Make sure initialize calls happens only once\n  static int is_initialized = 0;\n  if(is_initialized) return;\n  is_initialized = 1;\n\n  void* firstProfileLibrary;\n\n  char* envProfileLibrary  = getenv(\"KOKKOS_PROFILE_LIBRARY\");\n\n  // If we do not find a profiling library in the environment then exit\n  // early.\n  if( nullptr == envProfileLibrary ) {\n    return ;\n  }\n\n  char* envProfileCopy = (char*) malloc(sizeof(char) * (strlen(envProfileLibrary) + 1));\n  sprintf(envProfileCopy, \"%s\", envProfileLibrary);\n\n  char* profileLibraryName = strtok(envProfileCopy, \";\");\n\n  if( (nullptr != profileLibraryName) && (strcmp(profileLibraryName, \"\") != 0) ) {\n    firstProfileLibrary = dlopen(profileLibraryName, RTLD_NOW | RTLD_GLOBAL);\n\n    if(nullptr == firstProfileLibrary) {\n      std::cerr << \"Error: Unable to load KokkosP library: \" <<\n        profileLibraryName << std::endl;\n      std::cerr << \"dlopen(\" << profileLibraryName << \", RTLD_NOW | RTLD_GLOBAL) failed with \"\n        << dlerror() << '\\n';\n    } else {\n#ifdef KOKKOS_ENABLE_PROFILING_LOAD_PRINT\n      std::cout << \"KokkosP: Library Loaded: \" << profileLibraryName << std::endl;\n#endif\n\n      // dlsym returns a pointer to an object, while we want to assign to pointer to function\n      // A direct cast will give warnings hence, we have to workaround the issue by casting pointer to pointers.\n      auto p1 = dlsym(firstProfileLibrary, \"kokkosp_begin_parallel_for\");\n      beginForCallee = *((beginFunction*) &p1);\n      auto p2 = dlsym(firstProfileLibrary, \"kokkosp_begin_parallel_scan\");\n      beginScanCallee = *((beginFunction*) &p2);\n      auto p3 = dlsym(firstProfileLibrary, \"kokkosp_begin_parallel_reduce\");\n      beginReduceCallee = *((beginFunction*) &p3);\n\n      auto p4 = dlsym(firstProfileLibrary, \"kokkosp_end_parallel_scan\");\n      endScanCallee = *((endFunction*) &p4);\n      auto p5 = dlsym(firstProfileLibrary, \"kokkosp_end_parallel_for\");\n      endForCallee = *((endFunction*) &p5);\n      auto p6 = dlsym(firstProfileLibrary, \"kokkosp_end_parallel_reduce\");\n      endReduceCallee = *((endFunction*) &p6);\n\n      auto p7 = dlsym(firstProfileLibrary, \"kokkosp_init_library\");\n      initProfileLibrary = *((initFunction*) &p7);\n      auto p8 = dlsym(firstProfileLibrary, \"kokkosp_finalize_library\");\n      finalizeProfileLibrary = *((finalizeFunction*) &p8);\n\n      auto p9 = dlsym(firstProfileLibrary, \"kokkosp_push_profile_region\");\n      pushRegionCallee = *((pushFunction*) &p9);\n      auto p10 = dlsym(firstProfileLibrary, \"kokkosp_pop_profile_region\");\n      popRegionCallee = *((popFunction*) &p10);\n\n      auto p11 = dlsym(firstProfileLibrary, \"kokkosp_allocate_data\");\n      allocateDataCallee = *((allocateDataFunction*) &p11);\n      auto p12 = dlsym(firstProfileLibrary, \"kokkosp_deallocate_data\");\n      deallocateDataCallee = *((deallocateDataFunction*) &p12);\n\n      auto p13 = dlsym(firstProfileLibrary, \"kokkosp_begin_deep_copy\");\n      beginDeepCopyCallee = *((beginDeepCopyFunction*) &p13);\n      auto p14 = dlsym(firstProfileLibrary, \"kokkosp_end_deep_copy\");\n      endDeepCopyCallee = *((endDeepCopyFunction*) &p14);\n      \n      auto p15 = dlsym(firstProfileLibrary, \"kokkosp_create_profile_section\");\n      createSectionCallee = *((createProfileSectionFunction*) &p15);\n      auto p16 = dlsym(firstProfileLibrary, \"kokkosp_start_profile_section\");\n      startSectionCallee = *((startProfileSectionFunction*) &p16);\n      auto p17 = dlsym(firstProfileLibrary, \"kokkosp_stop_profile_section\");\n      stopSectionCallee = *((stopProfileSectionFunction*) &p17);      \n      auto p18 = dlsym(firstProfileLibrary, \"kokkosp_destroy_profile_section\");\n      destroySectionCallee = *((destroyProfileSectionFunction*) &p18);\n      \n      auto p19 = dlsym(firstProfileLibrary, \"kokkosp_profile_event\");\n      profileEventCallee = *((profileEventFunction*) &p19);\n    }\n  }\n\n  if(nullptr != initProfileLibrary) {\n    (*initProfileLibrary)(0,\n        (uint64_t) KOKKOSP_INTERFACE_VERSION,\n        (uint32_t) 0,\n        nullptr);\n  }\n\n  free(envProfileCopy);\n}\n\nvoid finalize() {\n  // Make sure finalize calls happens only once\n  static int is_finalized = 0;\n  if(is_finalized) return;\n  is_finalized = 1;\n\n  if(nullptr != finalizeProfileLibrary) {\n    (*finalizeProfileLibrary)();\n\n    // Set all profile hooks to nullptr to prevent\n    // any additional calls. Once we are told to\n    // finalize, we mean it\n    initProfileLibrary = nullptr;\n    finalizeProfileLibrary = nullptr;\n\n    beginForCallee = nullptr;\n    beginScanCallee = nullptr;\n    beginReduceCallee = nullptr;\n    endScanCallee = nullptr;\n    endForCallee = nullptr;\n    endReduceCallee = nullptr;\n\n    pushRegionCallee = nullptr;\n    popRegionCallee = nullptr;\n\n    allocateDataCallee = nullptr;\n    deallocateDataCallee = nullptr;\n\n    beginDeepCopyCallee = nullptr;\n    endDeepCopyCallee = nullptr;\n    \n    createSectionCallee = nullptr;\n\tstartSectionCallee = nullptr;\n\tstopSectionCallee = nullptr;\n\tdestroySectionCallee = nullptr;\n\n\tprofileEventCallee = nullptr;\n  }\n}\n}\n}\n\n#else\n\n#include <impl/Kokkos_Profiling_Interface.hpp>\n#include <cstring>\n\nnamespace Kokkos {\nnamespace Profiling {\n\nbool profileLibraryLoaded() { return false; }\n\n\nvoid beginParallelFor(const std::string& , const uint32_t , uint64_t* ) {}\nvoid endParallelFor(const uint64_t ) {}\nvoid beginParallelScan(const std::string& , const uint32_t , uint64_t* ) {}\nvoid endParallelScan(const uint64_t ) {}\nvoid beginParallelReduce(const std::string& , const uint32_t , uint64_t* ) {}\nvoid endParallelReduce(const uint64_t ) {}\n\nvoid pushRegion(const std::string& ) {}\nvoid popRegion() {}\nvoid createProfileSection(const std::string& , uint32_t* ) {}\nvoid startSection(const uint32_t ) {}\nvoid stopSection(const uint32_t ) {}\nvoid destroyProfileSection(const uint32_t ) {}\n\nvoid markEvent(const std::string& ) {}\n\nvoid allocateData(const SpaceHandle , const std::string , const void* , const uint64_t ) {}\nvoid deallocateData(const SpaceHandle , const std::string , const void* , const uint64_t ) {}\n\nvoid beginDeepCopy(const SpaceHandle , const std::string , const void* , \n    const SpaceHandle , const std::string , const void* ,\n    const uint64_t ) {}\nvoid endDeepCopy() {}\n\nvoid initialize() {}\nvoid finalize() {}\n\n}} // end namespace Kokkos::Profiling\n\n#endif\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/false_positives.txt": "aa\naat\nabc\nabf\nabsTol\nAcc\nAccelrys\nacceptor\nAcceptor\nacceptors\naccomodate\naccuracies\nach\nachived\nachives\nackland\nAckland\nacolor\nacos\nActa\nactinide\nadaptation\naddforce\naddtorque\nAdhikari\nadiam\nAdjiman\nadof\nadp\nAdri\nadusting\nadvect\nadvection\nadvects\nafer\naffine\nAfshar\nagilio\nAgilio\nagni\nAi\nAidan\naij\nairebo\nAj\najaramil\nakohlmey\nAktulga\nal\nalain\nAlain\nalat\nAlbe\nalchemical\nAlCu\nAlderton\nAlejandre\nalessandro\nAlessandro\naliceblue\nallocaters\nallosws\nAlO\nalond\nAlonso\namap\nAmatrix\nAmit\namu\nAmzallag\nAndzelm\nAng\nangmom\nangmomx\nangmomy\nangmomz\nAngs\nanharmonic\nanharmonicity\naniso\nanisotropic\nansi\nantiquewhite\nAntisymmetrized\nantisymmetry\nAntonelli\naperiodic\napi\nAppl\nApu\narccos\narcsin\narg\nargs\nartefacts\nArun\nasin\nAskari\naskoose\nasphere\nASPHERE\naspherical\nAsq\nassinged\nassocidate\nAsta\nAstart\nAstop\nasub\nasubrama\nAsumming\natan\natc\nAtC\nATC\nathomps\natobody\natomeye\natomfile\natomID\natomistic\natomt\nattogram\nattograms\nattrac\nAtw\nAtwater\natwt\naugt\nAuO\nautocorrelation\nautomagically\nAvalos\navalue\naveforce\nAvendano\navi\nAVX\nawpmd\nAWPMD\nAxel\nAy\nAyton\nAz\nazimuthal\nba\nBabadi\nbackcolor\nbackend\nBaczewski\nBal\nbalancer\nBalasubramanian\nBallenegger\nBammann\nBarashev\nbarostat\nbarostated\nbarostating\nbarostatted\nbarostatting\nBarostatting\nbarosttating\nBarrat\nBartels\nbarycenter\nbarye\nBashford\nBaskes\nBatra\nBayly\nbb\nbcc\nbcolor\nbdiam\nBeckman\nbehaviour\nBelak\nBellott\nbenchmarking\nBennet\nBerardi\nBeraun\nberendsen\nBerendsen\nberger\nBerkowitz\nberlin\nBerne\nBeutler\nbgq\nBh\nbiaxial\nBiersack\nbigint\nbilayer\nbilayers\nbinsize\nbinstyle\nbiomolecular\nbiomolecule\nBiomolecules\nBiophys\nBiosym\nbisectioning\nbispectrum\nBispectrum\nbitmapped\nbitrate\nbitrates\nBitzek\nBlaise\nblanchedalmond\nblocksize\nblueviolet\nbn\nbni\nbodyflag\nbodystyle\nBogaerts\nBogusz\nBohrs\nbondchk\nbondings\nbondmax\nbondtype\nBonet\nboolean\nBoresch\nBotero\nBotu\nBouguet\nbount\nboxcolor\nbpclermont\nbr\nBranicio\nbrennan\nBrilliantov\nBroadwell\nbrownian\nbrownw\nBryantsev\nbtype\nbuckPlusAttr\nbugfixes\nBulatov\nburlywood\nBussi\nBuyl\nBybee\nbz\ncadetblue\ncaltech\nCaltech\nCampana\nCao\nCapolungo\nCaro\ncartesian\nCates\ncbecker\nccache\nccmake\nCCu\ncd\ncdeam\ncdennist\ncdof\nceil\nCeil\ncentre\ncentro\ncentroid\nCentroid\ncentrosymmetry\nCerda\nceriotti\nCeriotti\nCerutti\ncfg\nCFG\ncfile\nCFL\ncgdna\nCGDNA\ncgs\nChalopin\nChampaign\ncharmm\ncharmmfsw\ncharmmfsh\ncharmm\nCHARMM\ncheckmark\ncheckqeq\nCheng\nChenoweth\nchiral\nchirality\nCho\nChristoph\nChu\nchunkID\nCiccotti\nCieplak\nCii\nCij\ncis\nciv\nclearstore\nClebsch\nClermont\nclo\nClovertown\ncmake\nCMake\ncmap\nCmax\ncmdlist\nCmin\ncmm\nCMM\ncn\ncN\nCn\ncna\ncnr\ncoaxstk\ncodebase\ncoeff\nCoeff\nCoefficientN\ncoeffs\nCoeffs\nColberg\ncoleman\nColliex\ncollinear\ncolvars\nColvars\nCOLVARS\ncomID\nCommun\ncomplier\ncompressibility\ncompressive\nComput\ncomputable\ncompute\nconcetric\ncond\nCondens\nconfig\nconfigfile\nconfigurational\nconformational\nconjuction\nconsiting\ncontinously\nContrib\ncoord\nCoord\nCoordN\ncoords\ncoprocessor\ncoprocessors\ncoreshell\ncornflowerblue\ncornsilk\ncorrelator\ncosineshifted\ncossq\ncostheta\nCouette\ncoul\ncoulombic\nCoulombic\nCoulombics\nCoulommbic\nCourant\ncovalent\ncovalently\ncovariance\ncpp\ncpu\ncreateatoms\ncreateAtoms\nCritchley\ncrossterm\ncrossterms\nCrozier\ncrystallisation\nCrystallogr\nCsanyi\ncsh\ncshrc\nCSiC\ncsld\ncstyle\ncsvr\nCtypes\ncuda\nCuda\nCUDA\nCuH\ncuthi\ncutinner\ncutlo\ncutmax\ncutoffA\ncutoffC\ncuu\ncv\nCv\nCval\ncvar\ncvff\ncwiggle\ncygwin\nCygwin\nCyrot\ncyrstals\nDaivis\nDammak\ndampflag\nDarden\ndarkblue\ndarkcyan\ndarkgoldenrod\ndarkgray\ndarkgreen\ndarkkhaki\ndarkmagenta\ndarkolivegreen\ndarkorange\ndarkorchid\ndarkred\ndarksalmon\ndarkseagreen\ndarkslateblue\ndarkslategray\ndarkturquoise\ndarkviolet\nDas\nDasgupta\ndatafile\ndatums\nDavidchack\nDaw\ndcd\nde\ndE\nDe\ndebye\nDebye\ndecompositions\ndeeppink\ndeepskyblue\ndefauls\ndefgrad\ndeformable\ndegress\ndel\nDellago\ndelocalization\ndelocalized\ndelr\ndeltaHf\nDendrimer\ndendtritic\nDenniston\ndephase\ndephasing\ndepositied\ndequidt\nDequidt\nder\nDerjagin\nDerlet\nDeserno\nDestree\ndetils\nDevanathan\nDevemy\ndeviatoric\nDevine\ndf\ndfftw\nDFT\ndia\ndiag\ndiagonalized\nDiallo\ndiel\ndifferentiable\ndiffusivity\ndihedral\ndihedrals\nDihedrals\ndihydride\nDij\ndimdim\ndimensionality\ndimgray\ndipolar\ndir\nDirec\ndirs\ndiscoverable\ndiscretization\ndiscretized\ndisp\ndisplacment\ndissipative\nDissipative\ndistro\ndivdes\ndl\ndlambda\nDLAMMPS\ndlopen\ndm\ndmax\nDmax\nDodds\ndodgerblue\ndof\nDonadio\ndotc\nDoty\nDoye\ndpd\nDPD\ndpdTheta\nDPhil\ndr\ndR\ndragforce\nDrautz\ndreiding\nDreiding\ndrfourth\ndrho\ndrsquared\ndrude\nDrude\nDRUDE\ndsf\ndsmc\ndt\ndu\ndU\nDudarev\nDuin\nDullweber\nDunbrack\nDunweg\nDupont\ndUs\ndV\ndvector\ndVx\ndW\ndx\ndy\ndyne\ndynes\nDyre\nEaa\nEaat\nEacn\neam\neangle\neatom\nEba\nebond\nebt\nEc\necoul\necp\nedihed\nedim\nedip\nedu\nee\nEebt\neFF\nefield\neflux\nEggebrecht\nehanced\nehex\neHEX\nEi\nEigen\nEigensolve\nEike\neim\neimp\nEindhoven\nEjtehadi\nEl\nelaplong\nElectroneg\nelectronegative\nelectronegativity\nEleftheriou\nElementN\nelif\nElj\nEllad\nellipsoidflag\nelong\nelt\nemacs\nEmbt\nemi\nemol\neN\nenergetics\nenergyCorr\neng\nEngility\nengilitycorp\nengrot\nengtrans\nengvib\nenthalpy\nenvoke\neos\nepair\nepcc\nEpp\nEpq\neps\nEpton\neq\neqch\nEqp\nEqq\nEqs\nequi\nequil\nequilibrate\nequilibrated\nequilibrating\nequilibration\nEquilibria\nequilibribum\nequilization\neradius\nerate\nerc\nerfc\nErhart\nerorate\nerose\nerotate\nErtas\nervel\nesu\nesub\net\netag\netap\nethernet\netol\netot\netotal\nEurophys\nev\neV\nevalue\nEvanseck\nevdwl\nEveraers\nevirials\newald\nEwald\nexcitations\nexcv\nexe\nexecutables\nextrema\ney\nez\nfactorizable\nfactorizations\nFaken\nFarago\nFasolino\nFava\nfbMC\nFc\nfcc\nfcm\nFd\nfdotr\nfdt\nFehlberg\nFellinger\nfemtosecond\nfemtoseconds\nfene\nFennell\nfep\nFEP\nfermi\nFermionic\nFerrand\nfexternal\nFexternal\nffield\nffmpeg\nFFmpeg\nffplay\nfft\nfftbench\nfftw\nfhg\nFi\nfigshare\nFij\nfilename\nfilenames\nFilename\nFilenames\nfileper\nFincham\nFinchham\nFinnis\nFiorin\nfixID\nfj\nFji\nflagfld\nflagHI\nflaglog\nflagN\nflagVF\nfld\nfloralwhite\nflv\nfmackay\nfmag\nfmass\nfmsec\nfN\nFn\nfname\nfno\nfoces\nFock\nFogarty\nFoiles\nfopenmp\nforcefield\nforestgreen\nformulae\nFortran\nfourier\nfp\nfphi\nfPIC\nfplo\nFqq\nFraige\nframerate\nFraunhofer\nFreitas\nFrenkel\nFriedrichs\nfrontend\nFrontends\nfs\nfstyle\nftol\nfugacity\nFumi\nfunc\nfuncs\nfunctionals\nfunroll\nfx\nfy\nfz\nGahler\ngainsboro\nGalindo\ngammaA\ngammaFactor\ngammaR\nGan\nGaN\nganzenmueller\nGanzenmuller\nGao\nGathert\ngauss\ngaussian\nGaussians\nGavhane\ngayberne\ngcc\ngcmc\ngdot\nGeC\ngeorg\nGeorg\nGermann\nGermano\ngerolf\nGerolf\ngettimeofday\ngewald\nGezelter\nGflop\ngfortran\nghostwhite\nGiacomo\ngif\ngifsicle\nGillan\nGingold\ngithub\nGithub\ngjf\ngjwagne\ngl\ngld\ngle\nglobbing\nGlosli\nGlotzer\ngmail\ngmake\ngmask\nGmask\nGordan\nGPa\ngpu\ngpuID\ngpus\ngraining\nGraining\nGrama\ngrana\ngranregion\ngraphene\nGreathouse\ngreenyellow\nGreffet\ngrem\ngREM\nGrest\nGrigera\ngrmask\nGrmask\ngromacs\nGromacs\nGronbech\nGroot\ngroupbig\nGrueneisen\ngsmooth\ngstyle\nGTL\ngui\nguidline\nGumbsch\nGunsteren\nGunzenmuller\nGuo\ngwald\ngz\ngzipped\nHaak\nHafskjold\nHalperin\nHamaker\nhaptic\nHara\nHarpertown\nHarting\nHartree\nHartrees\nHasan\nHayoun\nHayre\nhbcut\nhbnewflag\nhbond\nhcp\nheatconduction\nHebenstreit\nHecht\nHeenen\nHendrik\nHenin\nHenkelman\nhenrich\nHenrich\nheristics\nHerrmann\nHertizian\nhertzian\nHertzsch\nhexahedrons\nhexatic\nhexorder\nHeyes\nHfO\nhgrid\nHibbs\nHigdon\nHilger\nhisto\nhistogrammed\nhistogramming\nhmaktulga\nhoc\nHofling\nHolian\nHolm\nholonomic\nHomebrew\nhooke\nHookean\nhotpink\nhowto\nHowto\nHoyt\nhstyle\nhtml\nhTST\nhu\nhugoniostat\nHugoniostat\nHugoniot\nHura\nhwloc\nhydrogens\nhydrostatic\nhydrostatically\nHynninen\nHyoungki\nhyperradius\nhyperspherical\nhyperthreaded\nHyperthreading\nibar\nibm\nicc\nicosohedral\nidealgas\nideaology\nIDR\nielement\nieni\nifdefs\niff\nifort\nIhle\nij\nijk\nijkl\nik\nIkeshoji\nilmenau\nIlmenau\nIlya\nim\nIm\nimageint\nImageint\nImagemagick\nimd\nImpey\nimporopers\nimpropers\nImpropers\nimroper\nincludelink\nincompressible\nincrementing\nindenter\nindenters\nindianred\ninertiax\ninertiay\ninertiaz\ninfty\ninhomogeneities\ninhomogeneous\ninit\ninitializations\nInP\ninregion\nintegrations\nintegrators\nIntegrators\nintel\nintelmpi\ninteral\ninteratomic\nInteratomic\ninterconvert\nintergation\ninterial\nintermolecular\ninterstitials\nintra\nintramolecular\nints\ninv\ninvariants\ninversed\nionocovalent\niparam\nipi\nipp\nIPython\nIsele\nisenthalpic\niso\nisodemic\nisoenergetic\nisoenthalpic\nisokinetic\nisomorphism\nisothermal\nisotropically\nisovolume\nIsralewitz\niteratively\nIth\nItsets\nitype\nitypeN\nIvector\nIw\nixcm\nixx\nIxx\nixy\nIxy\nixz\nIxz\niy\niycm\niyy\nIyy\niyz\nIyz\niz\nizcm\nized\nIzrailev\nIzumi\nIzvekov\nizz\nIzz\nJacobsen\njagreat\njames\nJanssens\nJaramillo\nJarzynski\njatempl\njea\njec\nJeffers\njewett\nJewett\nji\nJiang\nJiao\njik\nJIK\njku\nJoannopoulos\nJochim\nJonsson\nJorgensen\njparam\njpeg\njpeglib\njpg\nJPG\njpl\nJth\njtype\njtypeN\nJulien\nJupyter\nJusto\nJusufi\nJx\nJy\nJz\njzimmer\nKadiri\nKalia\nKamberaj\nKapfer\nKarlsruhe\nKarplus\nKarttunen\nkate\nKaufmann\nKayser\nkb\nkB\nkbit\nkbits\nkcal\nKd\nke\nKE\nKeblinski\nkeflag\nKeir\nKelchner\nKelkar\nKemper\nKeyes\nKhersonskii\nKhvostov\nKi\nkim\nkJ\nkk\nKlahn\nKlapp\nKloss\nkmax\nKmax\nknl\nKohlmeyer\nkokkos\nKolafa\nKollman\nKondor\nkonglt\nKoning\nKooser\nKoskinen\nKosztin\nKp\nKraker\nKraus\nKremer\nKress\nkspace\nKspace\nKSpace\nKspring\nkT\nkth\nKth\nKub\nKubo\nKumagai\nKumar\nKuronen\nKusters\nKutta\nkx\nLackmann\nLadd\nlagrangian\nlambdai\nlamda\nlammps\nLammps\nLAMMPS\nlammpsplot\nLamoureux\nLandron\nlangevin\nLangevin\nLangston\nlarentzos\nLarentzos\nLaroche\nlars\nlatencies\nlattce\nLaupretre\nlavenderblush\nlawngreen\nlB\nlbl\nLBtype\nlcbop\nld\nldfftw\nldg\nLechman\nLehoucq\nLeimkuhler\nleiu\nlemonchiffon\nLenart\nlennard\nLennard\nLenosky\nLett\nLeuven\nLewy\nlgvdw\nLiang\nlibAtoms\nlibdir\nlibgpu\nlibjpeg\nliblammps\nLiblammps\nliblink\nlibmeam\nlibmpi\nlibmpich\nlibpng\nlibpoems\nlibrar\nlibreax\nlibs\nligand\nlightblue\nlightcoral\nlightcyan\nlightgoldenrodyellow\nlightgreen\nlightgrey\nlightpink\nlightsalmon\nlightseagreen\nlightskyblue\nlightslategray\nlightsteelblue\nlightyellow\nLikhtman\nlimegreen\nLindahl\nlineflag\nlineforce\nlinesearch\nlinux\nLiouville\nLisal\nlistfile\nLittmark\nLiu\nLivermore\nlj\nlm\nlmp\nlmpptr\nlmpqst\nlmpsdata\nLmpsdata\nlmptype\nln\nlocalTemp\nlocalvectors\nlogfile\nlogfreq\nlogicals\nLomdahl\nlookups\nLookups\nLoopVar\nLorant\nlossy\nlps\nlrt\nlsfftw\nltbbmalloc\nlubricateU\nlucy\nLussetti\nLustig\nlx\nly\nLybrand\nLyulin\nlz\nMackay\nMackrodt\nmacroparticle\nMadura\nMagda\nMaginn\nmainboards\nmakefile\nMakefile\nmakefiles\nMakefiles\nmakelist\nMakse\nmalloc\nMalolepsza\nManby\nMandadapu\nManh\nmanifoldforce\nManolopoulos\nmanybody\nMANYBODY\nMaras\nMarrink\nMarsaglia\nMarseille\nMartyna\nMashayak\nmassless\nmasstotal\nMatchett\nmatlab\nmatplotlib\nMattox\nMattson\nmaxangle\nmaxbond\nmaxeval\nMaxfoo\nmaxit\nmaxiter\nmaxsize\nmaxspecial\nmaxSteps\nmaxX\nmbt\nMbytes\nMBytes\nMcLachlan\nmd\nmdf\nmeam\nmeamf\nmech\nmechanice\nmechanim\nMecke\nmediumaquamarine\nmediumblue\nmediumorchid\nmediumpurple\nmediumseagreen\nmediumslateblue\nmediumspringgreen\nmediumturquoise\nmediumvioletred\nMees\nMehl\nMei\nMeloni\nMelrose\nMem\nmemalign\nMEMALIGN\nmembered\nMendelev\nmer\nMeremianin\nMerz\nmescscopic\nmeshless\nmeso\nmesocopic\nmesoparticle\nmesoscale\nmesoscopic\nmetadynamics\nMetadynamics\nmethine\nMetin\nMezei\nmgpt\nMGPT\nmgptfast\nmh\nmicelle\nmichael\nmichele\nMickel\nmicrocanonical\nmicroelastic\nmicroporous\nMicroscale\nmicrosec\nmidnightblue\nmie\nMie\nMikami\nMilitzer\nMinary\nmincap\nmingw\nminima\nminimizations\nminimizer\nminimizers\nminorder\nminSteps\nmintcream\nMintmire\nmis\nMises\nMishin\nMishra\nmistyped\nmistyrose\nMj\nmK\nmkdir\nmkv\nmlparks\nmlutiple\nmodc\nModell\nmodelled\nmodelling\nModelling\nModine\nmol\nMol\nmolfile\nMolfile\nmoltemplate\nmomoner\nMonaghan\nMonaghans\nmonodisperse\nmonodispersity\nmonovalent\nMontalenti\nMontero\nMorefoo\nmorris\nMorriss\nmorse\nMoseler\nMoskalev\nmov\nmpi\nMpi\nMPI\nmpicc\nmpich\nmpicxx\nmpiexec\nmpiio\nmpirun\nmplayer\nmscg\nMSCG\nmsd\nmsi\nMSI\nmsm\nmsse\nmsst\nMtchell\nMth\nmtk\nMtotal\nMuccioli\nMukherjee\nMulders\nmulti\nmultibody\nMultibody\nmulticenter\nmulticmd\nmulticore\nmultielectron\nmultinode\nmultiphysics\nmultiscale\nmultisectioning\nmultithreading\nMultithreading\nMundy\nMurdick\nMurtola\nMurty\nMuser\nmutli\nmutliple\nmuVT\nmux\nmuy\nmuz\nmv\nmV\nMvapich\nMxN\nmyCompute\nmyIndex\nmylammps\nmysocket\nmyTemp\nmyVec\nnabla\nNakano\nnamespace\nnamespaces\nNaN\nNangletype\nnangletypes\nNangletypes\nnano\nnanoindentation\nNanoletters\nnanometer\nnanometers\nnanoparticles\nnanosec\nNarulkar\nnasa\nnasr\nNatoli\nnatoms\nNatoms\nNattempt\nnavajowhite\nNavier\nnb\nNbin\nNbins\nnbody\nNbody\nnbondtype\nNbondtype\nnbondtypes\nNbondtypes\nnBOt\nnbrhood\nNbtypes\nnc\nNc\nnchunk\nNchunk\nncoeff\nncorr\nncount\nnd\nNdihedraltype\nNdirango\nndof\nNdof\nNdouble\nndx\nneb\nNeelov\nneighbouring\nnelem\nNelement\nNelements\nnemd\nnetcdf\nNeumann\nnevery\nNevery\nNewns\nnewtype\nNeyts\nNf\nnfile\nNfile\nNfreq\nng\nNg\nnghost\nNghost\nNgpu\nnh\nnharmonic\nnhc\nNiAlH\nNicklas\nNimpropertype\nNinteger\nNissila\nnist\nnitrides\nniu\nNk\nnl\nnlen\nNlines\nnlocal\nNlocal\nNlog\nnm\nNm\nNmax\nNmin\nNmols\nnn\nNocedal\nnocite\nnocoeff\nnodeless\nnoforce\nNoid\nNonbond\nnonbonded\nnonequilibrium\nnongauss\nnonGaussian\nnonlocal\nNonlocal\nNoordhoek\nnopreliminary\nNord\nnorder\nNordlund\nnormals\nNoskov\nnoslip\nnoticable\nnoutcol\nNoutput\nnoutrow\nNovik\nNovint\nnp\nNpair\nNpairs\nnparticle\nnpernode\nnph\nNpH\nNphi\nnphug\nnprocs\nNprocs\nnpt\nnr\nNr\nNrecompute\nNrepeat\nnreset\nNrho\nnrun\nNs\nNsample\nnsec\nNskip\nnsq\nNstart\nnstats\nNstep\nNsteplast\nNstop\nNswap\nNt\nNtable\nntheta\nnthreads\nNtptask\nNtype\nntypes\nNtypes\nnucleotides\nnulcear\nnum\nnuma\nnumactl\nnumerics\nnumpy\nNumpy\nNvalue\nNvaluelast\nNvalues\nnvc\nnvcc\nnve\nnvidia\nNvidia\nnvk\nnvt\nNwait\nnx\nNx\nnxnodes\nny\nNy\nnz\nNz\noctahedral\noctants\nohenrich\nok\nOKeefe\nOKeefe\nO'Keefe\noldlace\nOleinik\nOlfason\nolivedrab\nOllila\nomegaDD\nomegax\nomegay\nomegaz\nomp\nOMP\nonelevel\noneway\nonn\nons\nOO\nopenKIM\nOpenMP\nopls\nOppelstrup\noptionns\norangered\norderomg\norganised\norganometallic\norientational\norientorder\nOrlikowski\nornl\nOrnstein\nOrsi\northonormal\northorhombic\not\nOuldridge\noutmost\noutpur\noutputss\noutut\noverlayed\noverviewed\nOvito\noxdna\noxDNA\noxygens\npadua\nPadua\npalegoldenrod\npalegreen\npaleturquoise\npalevioletred\nPanagiotopoulos\nPandit\nPapaconstantopoulos\npapayawhip\npaquay\nPaquay\nparallelepiped\nparallelipiped\nParallelizable\nparallelization\nparallelized\nparallelizing\nparam\nparameterization\nparameterizations\nparameterize\nparameterized\nparametrization\nparametrized\nparams\nParinello\nparmin\nParrinello\nPartay\npartices\nParticuology\npastewka\nPastewka\nPattnaik\nPavese\npbc\npc\npchain\nPchain\nPdamp\npdb\npdf\npdim\npe\nPeachey\npeachpuff\nPearlman\nPedersen\nPeng\nperatom\nperfoms\nPergamon\nperi\nPeridymaics\nperidynamic\nPeridynamic\nperidynamics\nPeridynamics\npermittivity\nPerram\npersp\nPersp\nperu\nPeskin\nPettifor\npfactor\nph\nPhillpot\nphonon\nphophorous\nphosphide\nPhysica\nphysik\npicocoulomb\npicocoulombs\npicogram\npicograms\npicosecond\npicoseconds\npicosend\npid\nPieter\npimd\nPisarev\nPishevar\nPitera\npj\npjintve\nplaneforce\nPlathe\nPlimpton\nplog\nploop\nPloS\nplt\npmb\npN\npng\nPoiseuille\nPolak\npolarizabilities\npolarizability\npolarizable\nPolarizable\npolarizables\nPolitano\npolyA\npolybond\npolydisperse\npolydispersity\npopen\npopstore\npos\nPoschel\nposix\nPostma\npostprocessing\npotin\nPourtois\npowderblue\nppn\npppm\nprd\npre\nPre\nprec\npreexponential\nprefactor\nprefactors\nprepend\npreprint\npreprocessor\nprintf\nprintflag\nPriya\nproc\nProc\nprocs\nProny\nps\nPs\npscreen\npscrozi\npsec\npseudodynamics\npseudopotential\nPstart\nPstop\npstyle\nPtarget\npthread\npthreads\nptr\npu\npurdue\npushded\npushstore\npvar\npw\npx\nPx\npxx\nPxx\nPxy\npy\nPy\npydir\npylammps\nPyLammps\npymol\npypar\nPyy\npz\nPz\nPzz\nqbmsst\nqcore\nqdist\nqE\nqeq\nQeQ\nQEq\nqfile\nqi\nQi\nqj\nQj\nQl\nqm\nQmin\nqmmm\nqmol\nqoffload\nqopenmp\nqoverride\nqtb\nQuant\nquantic\nquartic\nquaternion\nquaternions\nquati\nquatj\nquatk\nquatw\nQueteschiner\nradian\nradians\nRafferty\nrahman\nRahman\nRaman\nramped\nRamprasad\nrandomizations\nRaphson\nRappe\nRavelo\nrc\nRc\nRcm\nRcmx\nRcmy\nRcut\nrcutfac\nrdc\nrdf\nREADME\nrealtime\nreamin\nreax\nReaxFF\nrebalance\nrebalancing\nrebo\nrecentered\nrecentering\nrecursing\nRee\nregoin\nReinders\nrelect\nrelesed\nrelTol\nremappings\nremediate\nRen\nRendon\nreneighboring\nReneighboring\nreneighborings\nRensselaer\nreparametrizing\nrepresentable\nrepuls\nrescale\nrescaled\nrescales\nrescaling\nRescaling\nrespa\nRESPA\nrespecified\nresponder\nresquared\nREsquared\nrestartfile\nrethrowing\nrewrap\nrezwanur\nrfac\nrfile\nrg\nRg\nRhaphson\nrheological\nrhodo\nRhodo\nrhodopsin\nrhosum\nRi\nRibiere\nrichard\nrigidID\nrigidify\nrij\nRij\nRIj\nRin\nRino\nRiRj\nRisi\nRix\nRiy\nrj\nRj\nRjk\nrjones\nrk\nrkf\nrmask\nRmask\nrmax\nRmax\nrmdir\nrmin\nRmin\nRMS\nrNEMD\nro\nRockett\nRonchetti\nRosati\nRossky\nrosybrown\nrotationally\nrotationsl\nroyalblue\nrozero\nRperp\nrRESPA\nRspace\nRubia\nRudd\nRudra\nRudranarayan\nRunge\nruntime\nRutuparna\nrx\nRyckaert\nRycroft\nRydbergs\nRz\nsaddlebrown\nSadigh\nsaed\nsafezone\nSafran\nSagui\nSalles\nsandia\nSandia\nsandybrown\nsc\nscalability\nscalable\nScalable\nscalexy\nscalexz\nscaleyz\nSchaik\nSchlitter\nSchmid\nSchoen\nSchulten\nSchunk\nSchwen\nscriping\nScripta\nsdk\nseagreen\nSecor\nsed\nsegmental\nsellerio\nSellerio\nsemiaxes\nsemimetals\nSemin\nSensable\nsetfl\nsetforce\nsetmask\nSetmask\nsetpoint\nsetvel\nsevereal\nsfftw\nSg\nShan\nshapex\nshapey\nshapez\nshapshot\nshardlow\nShardlow\nshawn\nShen\nShenderova\nShiga\nShinoda\nshockvel\nshoule\nsi\nSiC\nSiepmann\nSij\nSikandar\nSilbert\nSilling\nSimul\nsimulataneous\nsimulations\nSinnott\nsinusoid\nsinusoidally\nSiO\nSirk\nSival\nsizeI\nsizeJ\nsizex\nsjplimp\nsjtu\nskyblue\nslateblue\nslategray\nslater\nSlepoy\nsligthly\nSliozberg\nsllod\nsmallint\nSmallint\nsmd\nSMD\nsmi\nSmirichinski\nSmit\nsmtbq\nsna\nsnad\nsnapcoeff\nsnaphots\nsnapparam\nsnav\nSodani\nSoderlind\nsofted\nsolvated\nSorensen\nsoundspeed\nSouza\nsp\nspacings\nSpearot\nSpellmeyer\nsph\nSPH\nspheriods\nspparks\nSpringer\nspringgreen\nsqrt\nsrc\nsrd\nSrolovitz\nsrp\nsrun\nss\nssao\nstamoore\nstanford\nStarikov\nstartstep\nStartstep\nstatcoul\nstatcoulombs\nstatvolt\nstdin\nsteelblue\nStegailov\nSteinhardt\nSteinhauser\nStepaniants\nstepwise\nStesmans\nStillinger\nstk\nStockmayer\nStoddard\nstoichiometric\nstoichiometry\nStokesian\nStoll\nstopstep\nStouch\nStraatsma\nStratford\nStraub\nstrcmp\nstreitz\nStreitz\nStreiz\nstrided\nstrietz\nStukowski\nstylecomputes\nSu\nsubbox\nsubcutoff\nsubdirectory\nsubdomains\nsubinterval\nsubintervals\nSubramaniyan\nsubscripted\nsubscripting\nsubsteps\nsubstyle\nsubstyles\nsudo\nSukumaran\nsumsq\nSunderland\nsuperset\nsupersphere\nSupinski\nsurc\nsurfactants\nsw\nSwegat\nswiggle\nSwiler\nSwol\nSwope\nSx\nsy\nSy\nsymplectic\nSynechococcus\nsys\nsysdim\nsysmte\nSyst\nSz\nTabbernor\ntabinner\nTadmor\ntagint\nTait\ntaitwater\nTajkhorshid\ntanh\ntaskset\ntaubi\ntchain\nTchain\nTcom\ntcsh\ntdamp\nTdrude\nTechnolgy\nTelsa\ntempCorrCoeff\ntemplated\nTempleton\nters\ntersoff\nTersoff\ntesselation\ntesselations\nTetot\ntex\ntfmc\ntfMC\nth\nThakkar\nThakker\nthb\nthei\nTheor\nthermalization\nthermalize\nthermalized\nthermalizing\nthermo\nthermochemical\nthermochemistry\nthermodynamic\nthermodynamically\nThermophysical\nthermostate\nthermostated\nthermostates\nthermostating\nThermostating\nthermostatted\nthermostatting\nThermostatting\nThes\nThess\nThexe\nThijsse\nThirumalai\nthreebody\nthrid\nthylakoid\nTHz\nTij\nTildesley\ntimespan\ntimestamp\ntimestamps\ntimestep\ntimestepping\ntimesteps\nTiN\nTiO\nTirrell\nTiter\nTji\nTk\nTkin\ntloop\ntlsph\ntmax\nTmax\ntmd\nTmin\ntmp\ntN\nTobias\ntol\ntopologies\nTorder\ntorsions\nTosi\nToukmaji\nToxvaerd\ntpa\ntpc\ntptask\ntqx\ntqy\ntqz\ntradeoff\ntraj\ntransferability\ntranslational\ntrate\nTref\nTretyakov\ntri\ntriangleflag\ntriclinic\ntriflag\ntrigonal\ntrilinear\ntripflag\ntris\ntrj\ntrott\nTrott\nTrung\ntscale\nTschopp\nTsige\nTsrd\nTstart\ntstat\nTstop\nTsuzuki\nTt\nTThis\nttm\ntu\nTuckerman\ntue\nTurkand\nTutein\ntwobody\ntwojmax\nTx\ntxt\ntypeI\ntypeJ\ntypeN\nTz\nTzou\nub\nUberuaga\nuChem\nuCond\nUhlenbeck\nUi\nuk\nul\nuloop\nulsph\nuMech\numin\nUmin\nun\nunary\nunbonded\nuncomment\nuncompute\nunderprediction\nundump\nuniaxial\nuniaxially\nunimodal\nunitless\nUniversite\nunix\nunoptimized\nunpadded\nunphysical\nunphysically\nunscaled\nunsets\nunshifted\nunsmoothed\nunsolvated\nunsplit\nunstrained\nuntar\nuntilted\nupenn\nupto\nUrbana\nusec\nuserguide\nusr\nutil\nutils\nutsa\nUttormark\nuvm\nuwo\nvacf\nvalent\nValeriu\nvalgrind\nValone\nvaluev\nValuev\nvalus\nvaluse\nVarshalovich\nVarshney\nvashishta\nVashishta\nvcm\nVcm\nvdim\nvdisplace\nvec\nvectorial\nvectorization\nvectorized\nVectorized\nvel\nvelocites\nVerlag\nverlet\nVerlet\nversa\nves\nvhi\nvibrational\nVij\nVikas\nvirial\nVirial\nvirialmode\nvirials\nvirtualenv\nvirutal\nviscoelastic\nviscoelasticity\nviscosities\nviscously\nvizplotgui\nVj\nvlo\nvmax\nvmd\nVMDARCH\nVMDHOME\nvn\nVoigt\nvolfactor\nvolpress\nvolumetric\nvon\nVoro\nVorobyov\nvoronoi\nVoronoi\nVORONOI\nVorselaars\nVoth\nvpz\nvratio\nVries\nVstream\nvtarget\nvtk\nVTK\nvtp\nvtr\nvtu\nvv\nvx\nVx\nvxcm\nvy\nVy\nvycm\nvz\nVz\nvzcm\nvzi\nWaals\nWadley\nwallstyle\nwalltime\nwarmup\nwavefunction\nwavepacket\nwavepackets\nwavevector\nwB\nWbody\nWeckner\nWennberg\nWestview\nWhelan\nwhenthe\nwhitesmoke\nwhitespace\nWi\nWicaksono\nwih\nwildcard\nWirnsberger\nwirtes\nwitin\nwn\nWolde\nWorley\nWriggers\nWurtzite\nwww\nwx\nWx\nwy\nWy\nwz\nWz\nxa\nxAVX\nxb\nXc\nxcm\nXcm\nxCORE\nXeon\nxflag\nxhi\nxHost\nXiaowang\nxk\nxlat\nxlo\nxmax\nXmax\nxmgrace\nxMIC\nxmovie\nXmovie\nxmu\nXmu\nXP\nXPlor\nxrd\nxs\nxstk\nxsu\nxtc\nxu\nXu\nxy\nxyz\nxz\nxzhou\nYamada\nYbar\nybox\nYc\nycm\nYeh\nyellowgreen\nyflag\nyhi\nyi\nylat\nylo\nYoshida\nys\nysu\nyu\nYu\nyukawa\nYukawa\nyx\nyy\nyz\nZannoni\nzbl\nZBL\nZc\nzcm\nZepeda\nzflag\nZhang\nzhi\nZhou\nZhu\nzi\nZi\nziegenhain\nZiegenhain\nZj\nzlim\nzlo\nzN\nzs\nzsu\nzu\nzx\nzy\nZybin\nzz\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Howto_library.txt": "\"Higher level section\"_Howto.html - \"LAMMPS WWW Site\"_lws - \"LAMMPS\nDocumentation\"_ld - \"LAMMPS Commands\"_lc :c\n\n:link(lws,http://lammps.sandia.gov)\n:link(ld,Manual.html)\n:link(lc,Commands_all.html)\n\n:line\n\nLibrary interface to LAMMPS :h3\n\nAs described on the \"Build basics\"_Build_basics.html doc page, LAMMPS\ncan be built as a library, so that it can be called by another code,\nused in a \"coupled manner\"_Howto_couple.html with other codes, or\ndriven through a \"Python interface\"_Python_head.html.\n\nAll of these methodologies use a C-style interface to LAMMPS that is\nprovided in the files src/library.cpp and src/library.h.  The\nfunctions therein have a C-style argument list, but contain C++ code\nyou could write yourself in a C++ application that was invoking LAMMPS\ndirectly.  The C++ code in the functions illustrates how to invoke\ninternal LAMMPS operations.  Note that LAMMPS classes are defined\nwithin a LAMMPS namespace (LAMMPS_NS) if you use them from another C++\napplication.\n\nThe examples/COUPLE and python/examples directories have example C++\nand C and Python codes which show how a driver code can link to LAMMPS\nas a library, run LAMMPS on a subset of processors, grab data from\nLAMMPS, change it, and put it back into LAMMPS.\n\nThe file src/library.cpp contains the following functions for creating\nand destroying an instance of LAMMPS and sending it commands to\nexecute.  See the documentation in the src/library.cpp file for\ndetails.\n\nNOTE: You can write code for additional functions as needed to define\nhow your code talks to LAMMPS and add them to src/library.cpp and\nsrc/library.h, as well as to the \"Python interface\"_Python_head.html.\nThe added functions can access or change any internal LAMMPS data you\nwish.\n\nvoid lammps_open(int, char **, MPI_Comm, void **)\nvoid lammps_open_no_mpi(int, char **, void **)\nvoid lammps_close(void *)\nint lammps_version(void *)\nvoid lammps_file(void *, char *)\nchar *lammps_command(void *, char *)\nvoid lammps_commands_list(void *, int, char **)\nvoid lammps_commands_string(void *, char *)\nvoid lammps_free(void *) :pre\n\nThe lammps_open() function is used to initialize LAMMPS, passing in a\nlist of strings as if they were \"command-line\narguments\"_Run_options.html when LAMMPS is run in stand-alone mode\nfrom the command line, and a MPI communicator for LAMMPS to run under.\nIt returns a ptr to the LAMMPS object that is created, and which is\nused in subsequent library calls.  The lammps_open() function can be\ncalled multiple times, to create multiple instances of LAMMPS.\n\nLAMMPS will run on the set of processors in the communicator.  This\nmeans the calling code can run LAMMPS on all or a subset of\nprocessors.  For example, a wrapper script might decide to alternate\nbetween LAMMPS and another code, allowing them both to run on all the\nprocessors.  Or it might allocate half the processors to LAMMPS and\nhalf to the other code and run both codes simultaneously before\nsyncing them up periodically.  Or it might instantiate multiple\ninstances of LAMMPS to perform different calculations.\n\nThe lammps_open_no_mpi() function is similar except that no MPI\ncommunicator is passed from the caller.  Instead, MPI_COMM_WORLD is\nused to instantiate LAMMPS, and MPI is initialized if necessary.\n\nThe lammps_close() function is used to shut down an instance of LAMMPS\nand free all its memory.\n\nThe lammps_version() function can be used to determined the specific\nversion of the underlying LAMMPS code. This is particularly useful\nwhen loading LAMMPS as a shared library via dlopen(). The code using\nthe library interface can than use this information to adapt to\nchanges to the LAMMPS command syntax between versions. The returned\nLAMMPS version code is an integer (e.g. 2 Sep 2015 results in\n20150902) that grows with every new LAMMPS version.\n\nThe lammps_file(), lammps_command(), lammps_commands_list(), and\nlammps_commands_string() functions are used to pass one or more\ncommands to LAMMPS to execute, the same as if they were coming from an\ninput script.\n\nVia these functions, the calling code can read or generate a series of\nLAMMPS commands one or multiple at a time and pass it thru the library\ninterface to setup a problem and then run it in stages.  The caller\ncan interleave the command function calls with operations it performs,\ncalls to extract information from or set information within LAMMPS, or\ncalls to another code's library.\n\nThe lammps_file() function passes the filename of an input script.\nThe lammps_command() function passes a single command as a string.\nThe lammps_commands_list() function passes multiple commands in a\nchar** list.  In both lammps_command() and lammps_commands_list(),\nindividual commands may or may not have a trailing newline.  The\nlammps_commands_string() function passes multiple commands\nconcatenated into one long string, separated by newline characters.\nIn both lammps_commands_list() and lammps_commands_string(), a single\ncommand can be spread across multiple lines, if the last printable\ncharacter of all but the last line is \"&\", the same as if the lines\nappeared in an input script.\n\nThe lammps_free() function is a clean-up function to free memory that\nthe library allocated previously via other function calls.  See\ncomments in src/library.cpp file for which other functions need this\nclean-up.\n\nThe file src/library.cpp also contains these functions for extracting\ninformation from LAMMPS and setting value within LAMMPS.  Again, see\nthe documentation in the src/library.cpp file for details, including\nwhich quantities can be queried by name:\n\nint lammps_extract_setting(void *, char *)\nvoid *lammps_extract_global(void *, char *)\nvoid lammps_extract_box(void *, double *, double *,\n                        double *, double *, double *, int *, int *)\nvoid *lammps_extract_atom(void *, char *)\nvoid *lammps_extract_compute(void *, char *, int, int)\nvoid *lammps_extract_fix(void *, char *, int, int, int, int)\nvoid *lammps_extract_variable(void *, char *, char *) :pre\n\nThe extract_setting() function returns info on the size\nof data types (e.g. 32-bit or 64-bit atom IDs) used\nby the LAMMPS executable (a compile-time choice).\n\nThe other extract functions return a pointer to various global or\nper-atom quantities stored in LAMMPS or to values calculated by a\ncompute, fix, or variable.  The pointer returned by the\nextract_global() function can be used as a permanent reference to a\nvalue which may change.  For the extract_atom() method, see the\nextract() method in the src/atom.cpp file for a list of valid per-atom\nproperties.  New names could easily be added if the property you want\nis not listed.  For the other extract functions, the underlying\nstorage may be reallocated as LAMMPS runs, so you need to re-call the\nfunction to assure a current pointer or returned value(s).\n\ndouble lammps_get_thermo(void *, char *)\nint lammps_get_natoms(void *) :pre\n\nint lammps_set_variable(void *, char *, char *)\nvoid lammps_reset_box(void *, double *, double *, double, double, double) :pre\n\nThe lammps_get_thermo() function returns the current value of a thermo\nkeyword as a double precision value.\n\nThe lammps_get_natoms() function returns the total number of atoms in\nthe system and can be used by the caller to allocate memory for the\nlammps_gather_atoms() and lammps_scatter_atoms() functions.\n\nThe lammps_set_variable() function can set an existing string-style\nvariable to a new string value, so that subsequent LAMMPS commands can\naccess the variable.\n\nThe lammps_reset_box() function resets the size and shape of the\nsimulation box, e.g. as part of restoring a previously extracted and\nsaved state of a simulation.\n\nvoid lammps_gather_atoms(void *, char *, int, int, void *)\nvoid lammps_gather_atoms_concat(void *, char *, int, int, void *)\nvoid lammps_gather_atoms_subset(void *, char *, int, int, int, int *, void *)\nvoid lammps_scatter_atoms(void *, char *, int, int, void *)\nvoid lammps_scatter_atoms_subset(void *, char *, int, int, int, int *, void *) :pre\n\nvoid lammps_create_atoms(void *, int, tagint *, int *, double *, double *,\n                         imageint *, int) :pre\n\nThe gather functions collect peratom info of the requested type (atom\ncoords, atom types, forces, etc) from all processors, and returns the\nsame vector of values to each calling processor.  The scatter\nfunctions do the inverse.  They distribute a vector of peratom values,\npassed by all calling processors, to individual atoms, which may be\nowned by different processors.\n\nThe lammps_gather_atoms() function does this for all N atoms in the\nsystem, ordered by atom ID, from 1 to N.  The\nlammps_gather_atoms_concat() function does it for all N atoms, but\nsimply concatenates the subset of atoms owned by each processor.  The\nresulting vector is not ordered by atom ID.  Atom IDs can be requested\nby the same function if the caller needs to know the ordering.  The\nlammps_gather_subset() function allows the caller to request values\nfor only a subset of atoms (identified by ID).\nFor all 3 gather function, per-atom image flags can be retrieved in 2 ways.\nIf the count is specified as 1, they are returned \nin a packed format with all three image flags stored in a single integer.\nIf the count is specified as 3, the values are unpacked into xyz flags\nby the library before returning them.\n\nThe lammps_scatter_atoms() function takes a list of values for all N\natoms in the system, ordered by atom ID, from 1 to N, and assigns\nthose values to each atom in the system.  The\nlammps_scatter_atoms_subset() function takes a subset of IDs as an\nargument and only scatters those values to the owning atoms.\n\nThe lammps_create_atoms() function takes a list of N atoms as input\nwith atom types and coords (required), an optionally atom IDs and\nvelocities and image flags.  It uses the coords of each atom to assign\nit as a new atom to the processor that owns it.  This function is\nuseful to add atoms to a simulation or (in tandem with\nlammps_reset_box()) to restore a previously extracted and saved state\nof a simulation.  Additional properties for the new atoms can then be\nassigned via the lammps_scatter_atoms() or lammps_extract_atom()\nfunctions.\n"
    },
    "skipped": [
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/xmgrace/lammpsplot.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/pymol_asphere/doc/asphere_vis.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/polybond/Manual.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/moltemplate/ttree_lex.py",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/moltemplate/force_fields/images/spce_ball_and_stick.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/moltemplate/force_fields/images/ice_rect8_unitcell.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/moltemplate/force_fields/images/graphene_unit_cell.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/pyramids_vs_LAMMPS/images/pyramids_vs_gravity_t=33000steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/pyramids_vs_LAMMPS/images/pyramids_vs_gravity_t=12200steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/pyramids_vs_LAMMPS/images/pyramids_vs_gravity_t=04800steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/menger_sponge_lattice_8cells_t=7400_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/menger_sponge_lattice_8cells_t=0_zoom1_LR2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/lvl3_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/lvl2_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/lvl1_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/AlCell_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/file_conversion_examples/convert_LAMMPS_to_LT_examples/cnad-cnt/images/cnt.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/file_conversion_examples/convert_LAMMPS_to_LT_examples/cnad-cnt/images/cnad.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/file_conversion_examples/convert_LAMMPS_to_LT_examples/cnad-cnt/images/cnad-cnt_orig.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/file_conversion_examples/convert_LAMMPS_to_LT_examples/cnad-cnt/images/cnad-cnt_after_rotate_copy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/vesicle_Brannigan2005+Bellesia2010/images/vesicle_membrane+protein_L.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1beadProtSci2010/images/4SheetBundle_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1beadProtSci2010/images/4HelixBundle_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/unfrustrated/images/unfrustrated_t=200tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/unfrustrated/images/unfrustrated_t=0tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/unfrustrated+chaperonin/images/unfrustrated+chaperonin_t=105tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/unfrustrated+chaperonin/images/unfrustrated+chaperonin_t=0tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated/images/misfolded_conformation_t=1250tau.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated/images/initial_conformation_t=0tau.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated+minichaperone/images/protein2x2x2+minichaperones2x2x2_t=67500tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated+minichaperone/images/protein2x2x2+minichaperones2x2x2_t=0tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated+chaperonin/images/unfolded+chaperonin_t=508750tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated+chaperonin/images/misfolded+chaperonin_t=0tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=40000steps_npt_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=120000steps_npt_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=1000000steps_npt_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=0_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=0_nopbc_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_B.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_A.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_t=600000steps_npt_occ.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_t=0_occ.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_t=0_nopbc_occ.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_Cooke_Kremer_DesernoPRE2005/images/CDlipid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DPPC.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DPPC+DLPC_bilayer32x37_t=500ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DPPC+DLPC_bilayer32x37_t=0ps_no_pbc_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DPPC+DLPC_bilayer32x37_t=0ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DLPC.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/membrane+protein_t=5000ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/membrane+protein_t=0ps_top_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/membrane+protein_t=0ps_no_pbc_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/membrane+protein_t=0ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/4HelixOrig+Lipid2005_t=1290ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/ellipsoids_CG_benzene/README_visualization_OVITO_ellipsoids.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/ellipsoids_CG_benzene/images/t=14900.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/ellipsoids_CG_benzene/images/t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/ellipsoids_CG_benzene/images/benzene_cg_ellipsoid.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/chromosome_metaphase_Naumova2013/images/t=0_before_minimizaion.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/chromosome_metaphase_Naumova2013/images/stage2_interior_rotated.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/chromosome_metaphase_Naumova2013/images/stage2_interior.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_translocation/images/walls_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_translocation/images/walls+solvent+polymer_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_translocation/images/solvent_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_translocation/images/polymer_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_random_heteropolymer/images/random_heteropolymer_30_20_t=700ps.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_random_heteropolymer/images/random_heteropolymer_30_20_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_random_heteropolymer/images/3bead.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_random_heteropolymer/images/2bead.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_lennard_jones_tube/images/tubewall+solvent_t=3000steps.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_lennard_jones_tube/images/tubewall+solvent_t=0steps.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_polymer/images/2bead_t=4850000_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_polymer/images/2bead_polymer_array3x3x3_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_polymer/images/2bead_polymer_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_polymer/images/2bead_monomer.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_heteropolymer/images/trajectory.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_heteropolymer/images/polymer_LR.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_heteropolymer/images/monomer_P.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_heteropolymer/images/monomer_H.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_preformed/images/water_martini_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_preformed/images/t=4ns_bilayer_preformed_GL_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_preformed/images/t=0_bilayer_preformed_GL_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_preformed/images/DPPC_martini_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/water_martini_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/t=6ns_300K_NPT_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/t=26ns_300K_NPT_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/t=13ns_450K_NVT_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/t=0_after_minimization_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/DPPC_martini_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/ELBAwater+methanol/images/ELBAwater+methanol_rendered_with_ovito.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/watMW.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclopentane_unrelaxed.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclopentane.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclododecane+watMW_t=50ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclododecane+watMW_t=400ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclododecane+watMW_t=0ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/waterSPCE+Na+Cl_t=100ps.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/waterSPCE+Na+Cl_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/wat.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/Na.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/Cl.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/water_side_nopbc_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube_capillary_bbk_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls_side_nopbc_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls+water_top_nopbc_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls+water_side_pbc_t=305ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls+water_side_pbc_t=108ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls+water_side_pbc_t=0ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/graphene_unit_cell.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/ice_crystal/images/ice_rect8_unitcell.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/ice_crystal/images/ice_rect8_crystal_3x2x2_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/aluminum_crystal_strain/images/AlCrystal10x10x10_t=20000steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/aluminum_crystal_strain/images/AlCrystal10x10x10_t=0steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/aluminum_crystal_strain/images/AlCell_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/hexadecane_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/hexadecane_12x12x2_t=10ps_npt_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/hexadecane_12x12x2_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/ch3_ry60_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/ch2_ry60_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene_PACKMOL/images/ethylene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene_PACKMOL/images/ethylene+benzene_box80x80x80_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene_PACKMOL/images/benzene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene/images/ethylene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene/images/ethylene+benzene_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene/images/ethylene+benzene_50bar_t=100000_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene/images/benzene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/initial_configuration_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/ch3_ry60.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/ch2_ry90.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/butane.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/after_pressure_equilibration_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/alkane_chain_single/images/t=1ns.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/alkane_chain_single/images/t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/alkane_chain_single/images/ch3_ry60.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/alkane_chain_single/images/ch2_ry90.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/hexadecane/images/hexadecane_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/hexadecane/images/hexadecane_12x12x2_t=10ps_npt_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/hexadecane/images/hexadecane_12x12x2_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/initial_configuration_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/ch3_ry60.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/ch2_ry90.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/butane.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/after_pressure_equilibration_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/alkane_chain_single/images/t=1ns.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/alkane_chain_single/images/t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/alkane_chain_single/images/ch3_ry60.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/alkane_chain_single/images/ch2_ry90.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/waterTIP3P+isobutane/images/water.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/waterTIP3P+isobutane/images/water+isobutane_t=840ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/waterTIP3P+isobutane/images/water+isobutane_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/waterTIP3P+isobutane/images/isobutane.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/hexadecane/images/hexadecane_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/hexadecane/images/hexadecane_12x12x2_t=10ps_npt_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/hexadecane/images/hexadecane_12x12x2_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/ethylene+benzene/images/ethylene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/ethylene+benzene/images/ethylene+benzene_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/ethylene+benzene/images/ethylene+benzene_50bar_t=100000_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/ethylene+benzene/images/benzene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/waterSPCEx1000_t=25_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/waterSPCEx1000_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/tether.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/single_water_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/random_heteropolymer.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/random_3bead.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/random_2bead.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/mol_complex_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/mol_complex+mol_complex0_transparent_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/lipid_bilayer_vacancies.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/lipid_bilayer_mixture.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/delete_holes1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/author_email.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/2bead_polymers_t=100ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/2bead_polymers_nopbc_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/2bead_polymer.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/moltemplate/doc/moltemplate_manual_src/2bead_monomer.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/matlab/README.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/i-pi/manual.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/emacs/lammps-mode.el",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/tools/createatoms/Manual.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/src/USER-SMTBQ/pair_smtbq.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/src/USER-INTEL/pair_tersoff_intel.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/src/USER-INTEL/intel_intrinsics.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/src/KSPACE/msm.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/lib/kokkos/doc/SAND2017-10464-Kokkos-Task-DAG.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/lib/kokkos/doc/Kokkos_PG.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/lib/awpmd/ivutils/include/vector_3.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/lib/awpmd/ivutils/include/pairhash.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/lib/awpmd/ivutils/include/cvector_3.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/mscg/output_9Jan17/x.out",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/phonon/4-Graphene/Graphene.bin.6000000",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/phonon/3-3D-FCC-Cu-EAM/CuPhonon.bin.6500000",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/phonon/2-1D-diatomic/phonon.bin.2000000",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/phonon/1-1D-mono/phonon.bin.2000000",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/misc/bond_react/nylon,6-6_melt/large_nylon_melt.data.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/manifold/energy/energy_conservation.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/manifold/energy/energy_conservation.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/manifold/diffusion/msd_plot2.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/manifold/diffusion/msd.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/diffraction/Output/bulkNi_001.saed.0_VisIt_Image.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/cgsdk/sds-monolayer/data.sds.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/examples/USER/cgsdk/peg-verlet/data.pegc12e8.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/fontawesome-webfont.woff",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/fontawesome-webfont.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/fontawesome-webfont.eot",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/RobotoSlab-Regular.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/RobotoSlab-Bold.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/Lato-Regular.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/Lato-Bold.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/Inconsolata.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/Inconsolata-Bold.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/FontAwesome.otf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/pair_resquared_extra.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/pair_gayberne_extra.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/kspace.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/colvars-refman-lammps.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/USER-CGDNA.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/SPH_LAMMPS_userguide.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/SMD_LAMMPS_userguide.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/PDLammps_overview.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/PDLammps_VES.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/PDF/PDLammps_EPS.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/xrd_mesh_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/xrd_mesh.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/user_intel.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/uef_frames.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_steve_assignee.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_reverse_pull_request7.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_reverse_pull_request6.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_reverse_pull_request5.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_reverse_pull_request4.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_reverse_pull_request3.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_reverse_pull_request2.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_reverse_pull_request.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_pull_request_feature_branch1.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_pull_request4.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_pull_request3.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_pull_request2.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_new_pull_request.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_merged.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_https_block.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_fork.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_edits_maintainers.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_create_new_pull_request2.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_create_new_pull_request1.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_changes_others.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_branch.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_automated_checks_passed.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_automated_checks.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/tutorial_additional_changes.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/sinusoid_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/sinusoid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/screenshot_vmd_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/screenshot_vmd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/screenshot_pymol_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/screenshot_pymol.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/screenshot_gl_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/screenshot_gl.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/screenshot_atomeye_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/screenshot_atomeye.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/saed_mesh_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/saed_mesh.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/saed_ewald_intersect_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/saed_ewald_intersect.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/rhodo_staggered.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/qbmsst_shock.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/qbmsst_init.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/pylammps_mc_minimum.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/pylammps_mc_energies_plot.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/pylammps_mc_disordered.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/pylammps_dihedral.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/pimd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/pair_body_rounded.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/pair_atm_dia.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/offload_knc.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/lj_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/lammps-logo.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/improper_distance.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/hop2_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/hop2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/hop1_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/hop1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/gran_mixer_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/gran_mixer.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/gran_funnel_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/gran_funnel.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/fix_wall_ees_image.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/examples_tdpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/examples_mdpd_last.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/examples_mdpd_first.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/examples_mdpd.gif",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/examples_edpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/dump2_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/dump2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/dump1_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/dump1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/dihedral_spherical_angles.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/dihedral_sign.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/coul_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_10.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_09.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_08.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_07.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_06.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_05.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_04_small.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_04.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_03_small.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_03.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_02_small.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_02.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_01_small.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bow_tutorial_01.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/bondswap.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/balance_uniform_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/balance_uniform.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/balance_rcb_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/balance_rcb.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/balance_nonuniform_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/balance_nonuniform.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/JPG/atc_nanotube.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/umbrella.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/transform.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/stress_tensor.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/rotate.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/ptm_rmsd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pressure_tensor.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pressure.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic9.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic8.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic7.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic6.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic5.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/polymorphic1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_zbl.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_yukawa_colloid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_yukawa.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_vashishta.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_ufm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tersoff_zbl.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tersoff_mod_c.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tersoff_mod.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tersoff_2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tersoff_1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tersoff.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tdpd_gov.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tdpd_force.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_tdpd_flux.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_sw.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_srp2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_srp1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_neel_interaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_neel_functions.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_me_interaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_me_forces.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_exchange_interaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_exchange_function.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_exchange_forces.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_dmi_interaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_spin_dmi_forces.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_sph_tait.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_sph_ideal.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_snap.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_smtbq3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_smtbq2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_smtbq1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_resquared4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_resquared3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_resquared2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_resquared.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_nm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_nb3b_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_multi_lucy_energy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_multi_lucy2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_multi_lucy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_morse_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_morse_smooth_linear.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_morse.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_momb.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mie2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mie.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mgpt.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_meam_sw_spline.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_meam_spline_multicomponent.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_meam_spline.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_meam.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mdpd_force.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mdf-6.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mdf-5.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mdf-4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mdf-3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mdf-2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_mdf-1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_lubricate.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_lj_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_lj_smooth_linear.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_lj_smooth.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_lj_expand.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_lj_cubic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_lj96.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_lj.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_kolmogorov_crespi_z.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_kolmogorov_crespi_full.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_ilp_graphene_hbn.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_hbond_dreiding.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_gromacs.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_gran_hooke.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_gran_hertz.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_gayberne2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_gayberne.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_gauss_cut.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_gauss.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_exp6_rx_oneFluid2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_exp6_rx_oneFluid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_exp6_rx.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_entropy3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_entropy2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_entropy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_eim3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_eim2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_eim1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_edpd_kappa.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_edpd_heat.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_edpd_gov.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_edpd_force.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_edip.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_eam_fs.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_eam.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_dpd_omega.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_dpd_energy_terms.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_dpd_energy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_dpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_dipole_sf2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_dipole_sf.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_dipole.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_debye.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_cs.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_coulomb.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_coul_wolf.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_coul_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_coul_shield.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_coul_gauss.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_coul_dsf.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_coul_diel.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_comb2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_comb1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_colloid_ss.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_colloid_cs.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_colloid_cc.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_cmm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_charmm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_buck6d.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_buck.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_born.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_bop.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_body_rounded.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_beck.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_atm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_airebo.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_agni.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/pair_adp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/orientorder.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/min_energy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_umbrella.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_ring.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_inversion_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_fourier.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_dist-1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_cvff.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_cossq.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/improper_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/hexorder.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/heat_flux_k.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/heat_flux_J.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/force_spin_zeeman.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/force_spin_aniso.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fld2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fld.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_wall_lj93.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_wall_lj1043.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_wall_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_wall_ees.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_wall_colloid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ttm_mod.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ttm_ce.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ttm_blast1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ttm_blast.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ttm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ti_spring_function_2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ti_spring_function_1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ti_spring_force.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_spring_rg.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_rx_reactionRate.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_rx_reaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_rx_localTemp2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_rx_localTemp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_rx.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_rhok.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_rattle_rij.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_rattle_constraints.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_pimd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_orient_fcc.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_nphug.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_nh1.tex",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_nh1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_mvv_dpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_lb_fluid_viscosity.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_lb_fluid_stress.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_lb_fluid_properties.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_lb_fluid_navierstokes.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_lb_fluid_gammadefault.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_lb_fluid_fluidforce.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_lb_fluid_boltzmann.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_langevin_spin_sLLG.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_integration_spin_stdecomposition.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_grem.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_gld1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_gcmc3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_gcmc2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_gcmc1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_eos_table_rx.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_eos-cv.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ehex_f.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_ehex_eom.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_controller2.tex",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_controller2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_controller1.tex",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_controller1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_box_relax2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/fix_box_relax1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/eff_energy_expression.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/eff_ee.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/eff_Pauli.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/eff_Ne.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/eff_NN.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/eff_KE.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/eff_ECP2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/eff_ECP1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dreiding_hbond.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_table_cut.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_spherical.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_quadratic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_opls.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_nharmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_multi_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_helix.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_fourier.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_cosine_shift_exp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/dihedral_charmm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_xrd5.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_xrd4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_xrd3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_xrd2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_xrd1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_sna_atom6.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_sna_atom5.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_sna_atom4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_sna_atom3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_sna_atom2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_sna_atom1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_saed3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_saed2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_saed1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_msd_nongauss.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_gyration.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_fep_vol.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_fep_u.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_fep_ti.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_fep_lambda.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_fep_fep.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_fep_fdti.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_fep_bar.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/compute_dpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/cnp_eq.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/cnp_cutoff2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/cnp_cutoff.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/cna_cutoff2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/cna_cutoff1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/centro_symmetry.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/box_inverse.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/box.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_quartic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_oxdna_fene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_nonlinear.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_morse.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_harmonic_shift_cut.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_harmonic_shift.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_gromos.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_fene_expand.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_fene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/bond_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_quartic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_fourier_simple.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_fourier.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_dipole_torque.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_dipole_potential.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_dipole_gamma.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_dipole_couple.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_cosine_squared.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_cosine_shift_exp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_cosine_shift.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_cosine_periodic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_cosine_delta.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_cosine_buck6d.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_cosine.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_class2_p6.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Eqs/angle_charmm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20181010-iz7l3mssjjkcyv2drjmhfpuwlmxzpbrh/spack-src/doc/src/Developer/classes.pdf"
    ],
    "total_files": 11102
}