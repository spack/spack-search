{
    "matches": {
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/src/USER-MOLFILE/molfile_interface.cpp": "/* -*- c++ -*- ----------------------------------------------------------\n   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator\n   http://lammps.sandia.gov, Sandia National Laboratories\n   Steve Plimpton, sjplimp@sandia.gov\n\n   Copyright (2003) Sandia Corporation.  Under the terms of Contract\n   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\n   certain rights in this software.  This software is distributed under\n   the GNU General Public License.\n\n   See the README file in the top-level LAMMPS directory.\n------------------------------------------------------------------------- */\n\n/* ----------------------------------------------------------------------\n   Contributing author: Axel Kohlmeyer (Temple)\n------------------------------------------------------------------------- */\n\n#include \"molfile_interface.h\"\n\n#include <sys/types.h>\n#include <cstdio>\n#include <dirent.h>\n#include <cstring>\n#include <cstdlib>\n#include <cctype>\n\n#if defined(_WIN32)\n#include <windows.h>\n#else\n#include <dirent.h>\n#include <dlfcn.h>\n#endif\n\n#include \"molfile_plugin.h\"\n\n#if vmdplugin_ABIVERSION < 16\n#error \"unsupported VMD molfile plugin ABI version\"\n#endif\n\n#define DEBUG 0\n\nextern \"C\" {\n  typedef int (*initfunc)(void);\n  typedef int (*regfunc)(void *, vmdplugin_register_cb);\n  typedef int (*finifunc)(void);\n\n  typedef struct {\n    void *p;\n    const char *name;\n  } plugin_reginfo_t;\n\n  // callback function for plugin registration.\n  static int plugin_register_cb(void *v, vmdplugin_t *p)\n  {\n    plugin_reginfo_t *r = static_cast<plugin_reginfo_t *>(v);\n    // make sure we have the proper plugin type (native reader)\n    // for the desired file type (called \"name\" at this level)\n    if ((strcmp(MOLFILE_PLUGIN_TYPE,p->type) == 0)\n        && (strcmp(r->name, p->name) == 0) ) {\n      r->p = static_cast<void *>(p);\n    }\n    return 0;\n  }\n\n  /* periodic table of elements for translation of ordinal to atom type */\n  static const char *pte_label[] = {\n    \"X\",  \"H\",  \"He\", \"Li\", \"Be\", \"B\",  \"C\",  \"N\",  \"O\",  \"F\",  \"Ne\",\n    \"Na\", \"Mg\", \"Al\", \"Si\", \"P\" , \"S\",  \"Cl\", \"Ar\", \"K\",  \"Ca\", \"Sc\",\n    \"Ti\", \"V\",  \"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Cu\", \"Zn\", \"Ga\", \"Ge\",\n    \"As\", \"Se\", \"Br\", \"Kr\", \"Rb\", \"Sr\", \"Y\",  \"Zr\", \"Nb\", \"Mo\", \"Tc\",\n    \"Ru\", \"Rh\", \"Pd\", \"Ag\", \"Cd\", \"In\", \"Sn\", \"Sb\", \"Te\", \"I\",  \"Xe\",\n    \"Cs\", \"Ba\", \"La\", \"Ce\", \"Pr\", \"Nd\", \"Pm\", \"Sm\", \"Eu\", \"Gd\", \"Tb\",\n    \"Dy\", \"Ho\", \"Er\", \"Tm\", \"Yb\", \"Lu\", \"Hf\", \"Ta\", \"W\",  \"Re\", \"Os\",\n    \"Ir\", \"Pt\", \"Au\", \"Hg\", \"Tl\", \"Pb\", \"Bi\", \"Po\", \"At\", \"Rn\", \"Fr\",\n    \"Ra\", \"Ac\", \"Th\", \"Pa\", \"U\",  \"Np\", \"Pu\", \"Am\", \"Cm\", \"Bk\", \"Cf\",\n    \"Es\", \"Fm\", \"Md\", \"No\", \"Lr\", \"Rf\", \"Db\", \"Sg\", \"Bh\", \"Hs\", \"Mt\",\n    \"Ds\", \"Rg\"\n  };\n  static const int nr_pte_entries = sizeof(pte_label) / sizeof(char *);\n\n  /* corresponding table of masses. */\n  static const float pte_mass[] = {\n    /* X  */ 0.00000, 1.00794, 4.00260, 6.941, 9.012182, 10.811,\n    /* C  */ 12.0107, 14.0067, 15.9994, 18.9984032, 20.1797,\n    /* Na */ 22.989770, 24.3050, 26.981538, 28.0855, 30.973761,\n    /* S  */ 32.065, 35.453, 39.948, 39.0983, 40.078, 44.955910,\n    /* Ti */ 47.867, 50.9415, 51.9961, 54.938049, 55.845, 58.9332,\n    /* Ni */ 58.6934, 63.546, 65.409, 69.723, 72.64, 74.92160,\n    /* Se */ 78.96, 79.904, 83.798, 85.4678, 87.62, 88.90585,\n    /* Zr */ 91.224, 92.90638, 95.94, 98.0, 101.07, 102.90550,\n    /* Pd */ 106.42, 107.8682, 112.411, 114.818, 118.710, 121.760,\n    /* Te */ 127.60, 126.90447, 131.293, 132.90545, 137.327,\n    /* La */ 138.9055, 140.116, 140.90765, 144.24, 145.0, 150.36,\n    /* Eu */ 151.964, 157.25, 158.92534, 162.500, 164.93032,\n    /* Er */ 167.259, 168.93421, 173.04, 174.967, 178.49, 180.9479,\n    /* W  */ 183.84, 186.207, 190.23, 192.217, 195.078, 196.96655,\n    /* Hg */ 200.59, 204.3833, 207.2, 208.98038, 209.0, 210.0, 222.0,\n    /* Fr */ 223.0, 226.0, 227.0, 232.0381, 231.03588, 238.02891,\n    /* Np */ 237.0, 244.0, 243.0, 247.0, 247.0, 251.0, 252.0, 257.0,\n    /* Md */ 258.0, 259.0, 262.0, 261.0, 262.0, 266.0, 264.0, 269.0,\n    /* Mt */ 268.0, 271.0, 272.0\n  };\n\n  /*\n   * corresponding table of VDW radii.\n   * van der Waals radii are taken from A. Bondi,\n   * J. Phys. Chem., 68, 441 - 452, 1964,\n   * except the value for H, which is taken from R.S. Rowland & R. Taylor,\n   * J.Phys.Chem., 100, 7384 - 7391, 1996. Radii that are not available in\n   * either of these publications have RvdW = 2.00 \\AA.\n   * The radii for Ions (Na, K, Cl, Ca, Mg, and Cs are based on the CHARMM27\n   * Rmin/2 parameters for (SOD, POT, CLA, CAL, MG, CES) by default.\n   */\n  static const float pte_vdw_radius[] = {\n    /* X  */ 1.5, 1.2, 1.4, 1.82, 2.0, 2.0,\n    /* C  */ 1.7, 1.55, 1.52, 1.47, 1.54,\n    /* Na */ 1.36, 1.18, 2.0, 2.1, 1.8,\n    /* S  */ 1.8, 2.27, 1.88, 1.76, 1.37, 2.0,\n    /* Ti */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Ni */ 1.63, 1.4, 1.39, 1.07, 2.0, 1.85,\n    /* Se */ 1.9, 1.85, 2.02, 2.0, 2.0, 2.0,\n    /* Zr */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Pd */ 1.63, 1.72, 1.58, 1.93, 2.17, 2.0,\n    /* Te */ 2.06, 1.98, 2.16, 2.1, 2.0,\n    /* La */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Eu */ 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Er */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* W  */ 2.0, 2.0, 2.0, 2.0, 1.72, 1.66,\n    /* Hg */ 1.55, 1.96, 2.02, 2.0, 2.0, 2.0, 2.0,\n    /* Fr */ 2.0, 2.0, 2.0, 2.0, 2.0, 1.86,\n    /* Np */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Md */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\n    /* Mt */ 2.0, 2.0, 2.0\n  };\n\n  /* lookup functions */\n\n  static const char *get_pte_label(const int idx)\n  {\n    if ((idx < 1) || (idx >= nr_pte_entries)) return pte_label[0];\n\n    return pte_label[idx];\n  }\n\n  static float get_pte_mass(const int idx)\n  {\n    if ((idx < 1) || (idx >= nr_pte_entries)) return pte_mass[0];\n\n    return pte_mass[idx];\n  }\n\n  static float get_pte_vdw_radius(const int idx)\n  {\n    if ((idx < 1) || (idx >= nr_pte_entries)) return pte_vdw_radius[0];\n\n#if 1\n    /* Replace with Hydrogen radius with an \"all-atom\" radius */\n    if (idx == 1)\n      return 1.0;    /* H  */\n#else\n    /* Replace with old VMD atom radii values */\n    switch (idx) {\n    case  1: return 1.0;    /* H  */\n    case  6: return 1.5;    /* C  */\n    case  7: return 1.4;    /* N  */\n    case  8: return 1.3;    /* O  */\n    case  9: return 1.2;    /* F  */\n    case 15: return 1.5;    /* P  */\n    case 16: return 1.9;    /* S  */\n    }\n#endif\n\n    return pte_vdw_radius[idx];\n  }\n\n  static int get_pte_idx_from_string(const char *label) {\n    int i, ind;\n    char atom[3];\n\n    if (label != NULL) {\n      /* zap string */\n      atom[0] = atom[1] = atom[2] = '\\0';\n\n      for (ind=0,i=0; (ind<2) && (label[i]!='\\0'); i++) {\n        if (label[i] != ' ') {\n          atom[ind] = toupper(label[i]);\n          ind++;\n        }\n      }\n\n      if (ind < 1)\n        return 0; /* no non-whitespace characters */\n\n      for (i=0; i < nr_pte_entries; ++i) {\n        if ((toupper(pte_label[i][0]) == atom[0]) && (toupper(pte_label[i][1]) == atom[1]))\n          return i;\n      }\n    }\n\n    return 0;\n  }\n\n  // directory traversal helper functions\n\n#if defined(_WIN32)\n\n  // Win32 directory traversal handle\n  typedef struct {\n    HANDLE h;\n    WIN32_FIND_DATA fd;\n    char *name;\n    char *searchname;\n    int dlen;\n  } dirhandle_t;\n\n  // open a directory handle\n  static dirhandle_t *my_opendir(const char *dirname)\n  {\n    dirhandle_t *d;\n    int len;\n\n    if (dirname == NULL)\n      return NULL;\n    d = new dirhandle_t;\n\n    len = 2 + strlen(dirname);\n    d->name = new char[len];\n    strcpy(d->name, dirname);\n    strcat(d->name, \"\\\\\");\n    d->dlen = len;\n\n    len += 1;\n    d->searchname = new char[len];\n    strcpy(d->searchname, dirname);\n    strcat(d->searchname, \"\\\\*\");\n\n    d->h = FindFirstFile(d->searchname, &(d->fd));\n    if (d->h == ((HANDLE)(-1))) {\n      delete[] d->searchname;\n      delete[] d->name;\n      delete d;\n      return NULL;\n    }\n    return d;\n  }\n\n  // get next file name from directory handle\n  static char *my_readdir(dirhandle_t *d)\n  {\n    if (FindNextFile(d->h, &(d->fd))) {\n      return d->fd.cFileName;\n    }\n    return NULL;\n  }\n\n  // close directory handle\n  static void my_closedir(dirhandle_t *d)\n  {\n    if (d->h != NULL) {\n      FindClose(d->h);\n    }\n    delete[] d->searchname;\n    delete[] d->name;\n    delete d;\n  }\n\n  // open a shared object file\n  static void *my_dlopen(const char *fname) {\n    return (void *)LoadLibrary(fname);\n  }\n\n  // resolve a symbol in shared object\n  static void *my_dlsym(void *h, const char *sym) {\n    return (void *)GetProcAddress((HINSTANCE)h, sym);\n  }\n\n  // close a shared object\n  static int my_dlclose(void *h) {\n    /* FreeLibrary returns nonzero on success */\n    return !FreeLibrary((HINSTANCE)h);\n  }\n\n#else\n\n  // Unix directory traversal handle\n  typedef struct {\n    DIR *d;\n    char *name;\n    int dlen;\n  } dirhandle_t;\n\n  // open a directory handle\n  static dirhandle_t *my_opendir(const char *dirname)\n  {\n    dirhandle_t *d;\n    int len;\n\n    if (dirname == NULL) return NULL;\n\n    d = new dirhandle_t;\n    len = 2 + strlen(dirname);\n    d->name = new char[len];\n    strcpy(d->name,dirname);\n    strcat(d->name,\"/\");\n    d->dlen = len;\n\n    d->d = opendir(d->name);\n    if (d->d == NULL) {\n      delete[] d->name;\n      delete d;\n      return NULL;\n    }\n    return d;\n  }\n\n  // get next file name from directory handle\n  static char *my_readdir(dirhandle_t *d)\n  {\n    struct dirent *p;\n\n    if ((p = readdir(d->d)) != NULL) {\n      return p->d_name;\n    }\n\n    return NULL;\n  }\n\n  // close directory handle\n  static void my_closedir(dirhandle_t *d)\n  {\n    if (d->d != NULL) {\n      closedir(d->d);\n    }\n    delete[] d->name;\n    delete d;\n    return;\n  }\n\n  // open a shared object file\n  static void *my_dlopen(const char *fname) {\n    return dlopen(fname, RTLD_NOW);\n  }\n\n  // resolve a symbol in shared object\n  static void *my_dlsym(void *h, const char *sym) {\n    return dlsym(h, sym);\n  }\n\n  // close a shared object\n  static int my_dlclose(void *h) {\n    return dlclose(h);\n  }\n\n#endif\n\n} // end of extern \"C\" region\n\nusing namespace LAMMPS_NS;\n\n// constructor.\nMolfileInterface::MolfileInterface(const char *type, const int mode)\n  : _plugin(0), _dso(0), _ptr(0), _info(0), _natoms(0),\n    _mode(mode), _caps(M_NONE)\n{\n  _name = new char[5];\n  strcpy(_name,\"none\");\n  _type = new char[1+strlen(type)];\n  strcpy(_type,type);\n}\n\n// destructor.\nMolfileInterface::~MolfileInterface()\n{\n  forget_plugin();\n\n  if (_info) {\n    molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n    delete[] a;\n    _info = NULL;\n  }\n  delete[] _name;\n  delete[] _type;\n}\n\n// register the best matching plugin in a given directory\nint MolfileInterface::find_plugin(const char *pluginpath)\n{\n  dirhandle_t *dir;\n  char *filename, *ext, *next, *path, *plugindir;\n  int retval = E_NONE;\n\n#if defined(_WIN32)\n#define MY_PATHSEP ';'\n#else\n#define MY_PATHSEP ':'\n#endif\n  if (pluginpath == NULL) return E_DIR;\n  plugindir = path = strdup(pluginpath);\n\n  while (plugindir) {\n    // check if this a single directory or path.\n    next = strchr(plugindir,MY_PATHSEP);\n    if (next) {\n      *next = '\\0';\n      ++next;\n    }\n\n    dir = my_opendir(plugindir);\n    if (!dir)\n      retval = (retval > E_DIR) ? retval : E_DIR;\n\n    // search for suitable file names and try to inspect them\n    while(dir) {\n      char *fullname;\n      int len;\n\n      filename = my_readdir(dir);\n      if (filename == NULL) break;\n\n      // only look at .so files\n      ext = strrchr(filename, '.');\n      if (ext == NULL) continue;\n      if (strcasecmp(ext,\".so\") != 0) continue;\n\n      // construct full pathname of potential DSO\n      len = dir->dlen;\n      len += strlen(filename);\n      fullname = new char[len];\n      strcpy(fullname,dir->name);\n      strcat(fullname,filename);\n\n      // try to register plugin at file name.\n      int rv = load_plugin(fullname);\n      if (rv > retval) retval = rv;\n\n      delete[] fullname;\n    }\n    if (dir)\n      my_closedir(dir);\n\n    plugindir = next;\n  }\n  free(path);\n  return retval;\n}\n\n// register the best matching plugin in a given directory\nint MolfileInterface::load_plugin(const char *filename)\n{\n  void *dso;\n  int len, retval = E_NONE;\n\n  // access shared object\n  dso = my_dlopen(filename);\n  if (dso == NULL)\n    return E_FILE;\n\n  // check for required plugin symbols\n  void *ifunc = my_dlsym(dso,\"vmdplugin_init\");\n  void *rfunc = my_dlsym(dso,\"vmdplugin_register\");\n  void *ffunc = my_dlsym(dso,\"vmdplugin_fini\");\n  if (ifunc == NULL || rfunc == NULL || ffunc == NULL) {\n    my_dlclose(dso);\n    return E_SYMBOL;\n  }\n\n  // initialize plugin. skip plugin if it fails.\n  if (((initfunc)(ifunc))()) {\n    my_dlclose(dso);\n    return E_SYMBOL;\n  }\n\n  // pre-register plugin.\n  // the callback will be called for each plugin in the DSO and\n  // check the file type. plugin->name will change if successful.\n  plugin_reginfo_t reginfo;\n  reginfo.p = NULL;\n  reginfo.name=_type;\n  ((regfunc)rfunc)(&reginfo, plugin_register_cb);\n\n  // make some checks to see if the plugin is suitable or not.\n  molfile_plugin_t *plugin = static_cast<molfile_plugin_t *>(reginfo.p);\n\n  // if the callback found a matching plugin and copied the struct,\n  // its name element will point to a different location now.\n  if (plugin == NULL) {\n    retval = E_TYPE;\n\n    // check if the ABI matches the one used to compile this code\n  } else if (plugin->abiversion != vmdplugin_ABIVERSION) {\n    retval = E_ABI;\n\n    // check if (basic) reading is supported\n  } else if ((_mode & M_READ) &&\n             ( (plugin->open_file_read == NULL) ||\n               (plugin->read_next_timestep  == NULL) ||\n               (plugin->close_file_read == NULL) )) {\n    retval = E_MODE;\n\n    // check if (basic) writing is supported\n  } else if ( (_mode & M_WRITE) &&\n              ( (plugin->open_file_write == NULL) ||\n                (plugin->write_timestep  == NULL) ||\n                (plugin->close_file_write == NULL) )) {\n    retval = E_MODE;\n\n    // make some additional check, if we\n    // already have a plugin registered.\n    // NOTE: this has to come last.\n  } else if (_dso && _plugin) {\n    molfile_plugin_t *p;\n    p = static_cast<molfile_plugin_t *>(_plugin);\n\n    // check if the new plugin is of a newer major version\n    if (p->majorv > plugin->majorv) {\n      retval = E_VERSION;\n\n    // check if the new plugin is of a newer minor version\n    } else if ( (p->majorv == plugin->majorv) &&\n                (p->minorv >= plugin->minorv) ) {\n      retval = E_VERSION;\n    }\n  }\n\n  // bingo! this one is a keeper.\n  if (retval == E_NONE) {\n\n    // make sure any existing plugin is wiped out\n    forget_plugin();\n\n    delete[] _name;\n    len = 16;\n    len += strlen(plugin->prettyname);\n    len += strlen(plugin->author);\n    _name = new char[len];\n    sprintf(_name,\"%s v%d.%d by %s\",plugin->prettyname,\n            plugin->majorv, plugin->minorv, plugin->author);\n\n    // determine plugin capabilities\n    _caps = M_NONE;\n    if (plugin->read_next_timestep)      _caps |= M_READ;\n    if (plugin->write_timestep)          _caps |= M_WRITE;\n#if vmdplugin_ABIVERSION > 10\n    // required to tell if velocities are present\n    if (plugin->read_timestep_metadata)  _caps |= M_RVELS;\n    // we can always offer velocities. we may not know if\n    // they will be written by the plugin though.\n    if (plugin->write_timestep)          _caps |= M_WVELS;\n#endif\n    if (plugin->read_structure)          _caps |= M_RSTRUCT;\n    if (plugin->write_structure)         _caps |= M_WSTRUCT;\n    if (plugin->read_bonds)              _caps |= M_RBONDS;\n    if (plugin->write_bonds)             _caps |= M_WBONDS;\n    if (plugin->read_angles)             _caps |= M_RANGLES;\n    if (plugin->write_angles)            _caps |= M_WANGLES;\n    if (plugin->read_volumetric_data)    _caps |= M_RVOL;\n    if (plugin->write_volumetric_data)   _caps |= M_WVOL;\n\n    if (_mode & M_WRITE) {\n      _mode |= (_caps & M_WSTRUCT);\n      _mode |= (_caps & M_WVELS);\n    } else if (_mode & M_READ) {\n      _mode |= (_caps & M_RSTRUCT);\n      _mode |= (_caps & M_RVELS);\n    }\n\n    _plugin = plugin;\n    _dso = dso;\n    return E_MATCH;\n  }\n\n  // better luck next time. clean up and return.\n  my_dlclose(dso);\n  return retval;\n}\n\n// deregister a plugin and close or reset all associated objects.\nvoid MolfileInterface::forget_plugin()\n{\n  if (_ptr)\n    close();\n\n  if (_plugin)\n    _plugin = NULL;\n\n  if (_dso) {\n    void *ffunc = my_dlsym(_dso,\"vmdplugin_fini\");\n    if (ffunc)\n      ((finifunc)ffunc)();\n    my_dlclose(_dso);\n  }\n  _dso = NULL;\n\n  delete[] _name;\n    _name = new char[5];\n  strcpy(_name,\"none\");\n\n  _caps = M_NONE;\n}\n\n// open file for reading or writing\nint MolfileInterface::open(const char *name, int *natoms)\n{\n  if (!_plugin || !_dso || !natoms)\n    return E_FILE;\n  molfile_plugin_t *p = static_cast<molfile_plugin_t *>(_plugin);\n\n  if (_mode & M_WRITE)\n    _ptr = p->open_file_write(name,_type,*natoms);\n  else if (_mode & M_READ)\n    _ptr = p->open_file_read(name,_type,natoms);\n\n  if (_ptr == NULL)\n    return E_FILE;\n\n  _natoms = *natoms;\n  // we need to deal with structure information,\n  // so we allocate and initialize storage for it.\n  if (_mode & (M_RSTRUCT|M_WSTRUCT)) {\n    molfile_atom_t *a = new molfile_atom_t[_natoms];\n    _info = a;\n    memset(_info,0,_natoms*sizeof(molfile_atom_t));\n    for (int i=0; i < _natoms; ++i) {\n      a[i].name[0] = 'X';\n      a[i].type[0] = a[i].resname[0] = a[i].segid[0] = 'U';\n      a[i].type[1] = a[i].resname[1] = a[i].segid[1] = 'N';\n      a[i].type[2] = a[i].resname[2] = a[i].segid[2] = 'K';\n      a[i].chain[0] = 'X';\n    }\n  }\n  return E_NONE;\n}\n\n// get of set atom structure information\nint MolfileInterface::structure()\n{\n  if (!_plugin || !_dso)\n    return E_FILE;\n  molfile_plugin_t *p = static_cast<molfile_plugin_t *>(_plugin);\n\n  int optflags = MOLFILE_NOOPTIONS;\n\n  if (_mode & M_WSTRUCT) {\n    optflags |= (_props & P_BFAC) ? MOLFILE_BFACTOR : 0;\n    optflags |= (_props & P_OCCP) ? MOLFILE_OCCUPANCY : 0;\n    optflags |= (_props & P_MASS) ? MOLFILE_MASS : 0;\n    optflags |= (_props & P_CHRG) ? MOLFILE_CHARGE : 0;\n    optflags |= (_props & P_RADS) ? MOLFILE_RADIUS : 0;\n    optflags |= (_props & P_ATMN) ? MOLFILE_ATOMICNUMBER : 0;\n\n    molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n    p->write_structure(_ptr,optflags,a);\n  } else if (_mode & M_RSTRUCT) {\n    molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n    p->read_structure(_ptr,&optflags,a);\n    // mandatory properties\n    _props = P_NAME|P_TYPE|P_RESN|P_RESI|P_SEGN|P_CHAI;\n    // optional properties\n    _props |= (optflags & MOLFILE_BFACTOR) ? P_BFAC : 0;\n    _props |= (optflags & MOLFILE_OCCUPANCY) ? P_OCCP : 0;\n    _props |= (optflags & MOLFILE_MASS) ? P_MASS : 0;\n    _props |= (optflags & MOLFILE_CHARGE) ? P_CHRG : 0;\n    _props |= (optflags & MOLFILE_RADIUS) ? P_RADS : 0;\n    _props |= (optflags & MOLFILE_ATOMICNUMBER) ? P_ATMN : 0;\n  }\n  return 0;\n}\n\n// safely close file\nint MolfileInterface::close()\n{\n  if (!_plugin || !_dso || !_ptr)\n    return E_FILE;\n\n  molfile_plugin_t *p = static_cast<molfile_plugin_t *>(_plugin);\n\n  if (_mode & M_WRITE) {\n    p->close_file_write(_ptr);\n  } else if (_mode & M_READ) {\n    p->close_file_read(_ptr);\n  }\n\n  if (_info) {\n    molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n    delete[] a;\n    _info = NULL;\n  }\n  _ptr = NULL;\n  _natoms = 0;\n\n  return E_NONE;\n}\n\n\n// read or write timestep\nint MolfileInterface::timestep(float *coords, float *vels,\n                               float *cell, double *simtime)\n{\n  if (!_plugin || !_dso || !_ptr)\n    return 1;\n\n  molfile_plugin_t *p = static_cast<molfile_plugin_t *>(_plugin);\n  molfile_timestep_t *t = new molfile_timestep_t;\n  int rv;\n\n  if (_mode & M_WRITE) {\n    t->coords = coords;\n    t->velocities = vels;\n    if (cell != NULL) {\n      t->A = cell[0];\n      t->B = cell[1];\n      t->C = cell[2];\n      t->alpha = cell[3];\n      t->beta = cell[4];\n      t->gamma = cell[5];\n    } else {\n      t->A = 0.0f;\n      t->B = 0.0f;\n      t->C = 0.0f;\n      t->alpha = 90.0f;\n      t->beta = 90.0f;\n      t->gamma = 90.0f;\n    }\n\n    if (simtime)\n      t->physical_time = *simtime;\n    else\n      t->physical_time = 0.0;\n\n    rv = p->write_timestep(_ptr,t);\n\n  } else {\n    // no coordinate storage => skip step\n    if (coords == NULL) {\n      rv = p->read_next_timestep(_ptr, _natoms, NULL);\n    } else {\n      t->coords = coords;\n      t->velocities = vels;\n      t->A = 0.0f;\n      t->B = 0.0f;\n      t->C = 0.0f;\n      t->alpha = 90.0f;\n      t->beta = 90.0f;\n      t->gamma = 90.0f;\n      t->physical_time = 0.0;\n      rv = p->read_next_timestep(_ptr, _natoms, t);\n      if (cell != NULL) {\n        cell[0] = t->A;\n        cell[1] = t->B;\n        cell[2] = t->C;\n        cell[3] = t->alpha;\n        cell[4] = t->beta;\n        cell[5] = t->gamma;\n      }\n      if (simtime)\n        *simtime = t->physical_time;\n    }\n\n    if (rv == MOLFILE_EOF) {\n      delete t;\n      return 1;\n    }\n  }\n\n  delete t;\n  return 0;\n}\n\n// functions to read properties from molfile structure\n\n#define PROPUPDATE(PROP,ENTRY,VAL)              \\\n  if (propid == PROP) { VAL = a.ENTRY; }\n\n#define PROPSTRCPY(PROP,ENTRY,VAL)              \\\n  if (propid == PROP) { strcpy(VAL,a.ENTRY); }\n\n// single precision floating point props\nstatic float read_float_property(molfile_atom_t &a, const int propid)\n{\n  float prop = 0.0f;\n  int iprop = 0;\n  PROPUPDATE(MolfileInterface::P_OCCP,occupancy,prop);\n  PROPUPDATE(MolfileInterface::P_BFAC,bfactor,prop);\n  PROPUPDATE(MolfileInterface::P_MASS,mass,prop);\n  PROPUPDATE(MolfileInterface::P_CHRG,charge,prop);\n  PROPUPDATE(MolfileInterface::P_RADS,radius,prop);\n\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_MASS),\n             atomicnumber,iprop);\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_RADS),\n             atomicnumber,iprop);\n  if (propid & MolfileInterface::P_ATMN) {\n    if (propid & MolfileInterface::P_MASS)\n      prop = get_pte_mass(iprop);\n    if (propid & MolfileInterface::P_RADS)\n      prop = get_pte_vdw_radius(iprop);\n  }\n\n  return prop;\n}\n\n// integer and derived props\nstatic int read_int_property(molfile_atom_t &a, const int propid)\n{\n  int prop = 0;\n  const char * sprop;\n\n  PROPUPDATE(MolfileInterface::P_RESI,resid,prop);\n  PROPUPDATE(MolfileInterface::P_ATMN,atomicnumber,prop);\n\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_NAME),\n             name,sprop);\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_TYPE),\n             type,sprop);\n\n  if (propid & MolfileInterface::P_ATMN) {\n    if (propid & (MolfileInterface::P_NAME|MolfileInterface::P_TYPE))\n      prop = get_pte_idx_from_string(sprop);\n  }\n\n  return prop;\n}\n\n// string and derived props\nstatic const char *read_string_property(molfile_atom_t &a,\n                                        const int propid)\n{\n  const char *prop = NULL;\n  int iprop = 0;\n  PROPUPDATE(MolfileInterface::P_NAME,name,prop);\n  PROPUPDATE(MolfileInterface::P_TYPE,type,prop);\n  PROPUPDATE(MolfileInterface::P_RESN,resname,prop);\n  PROPUPDATE(MolfileInterface::P_SEGN,segid,prop);\n\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_NAME),\n             atomicnumber,iprop);\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_TYPE),\n             atomicnumber,iprop);\n\n  if (propid & MolfileInterface::P_ATMN) {\n    if (propid & (MolfileInterface::P_NAME|MolfileInterface::P_TYPE))\n      prop = get_pte_label(iprop);\n  }\n\n  return prop;\n}\n#undef PROPUPDATE\n#undef PROPSTRCPY\n\n// functions to store properties into molfile structure\n\n#define PROPUPDATE(PROP,ENTRY,VAL)                                  \\\n  if ((propid & PROP) == PROP) { a.ENTRY = VAL; plist |= PROP; }\n\n#define PROPSTRCPY(PROP,ENTRY,VAL)                                      \\\n  if ((propid & PROP) == PROP) { strcpy(a.ENTRY,VAL); plist |= PROP; }\n\n// floating point props\nstatic int write_atom_property(molfile_atom_t &a,\n                               const int propid,\n                               const float prop)\n{\n  int plist = MolfileInterface::P_NONE;\n  PROPUPDATE(MolfileInterface::P_OCCP,occupancy,prop);\n  PROPUPDATE(MolfileInterface::P_BFAC,bfactor,prop);\n  PROPUPDATE(MolfileInterface::P_MASS,mass,prop);\n  PROPUPDATE(MolfileInterface::P_CHRG,charge,prop);\n  PROPUPDATE(MolfileInterface::P_RADS,radius,prop);\n  return plist;\n}\n\n// double precision floating point props\nstatic int write_atom_property(molfile_atom_t &a,\n                               const int propid,\n                               const double prop)\n{\n  return write_atom_property(a,propid,static_cast<float>(prop));\n}\n\n// integer and derived props\nstatic int write_atom_property(molfile_atom_t &a,\n                               const int propid,\n                               const int prop)\n{\n  int plist = MolfileInterface::P_NONE;\n  PROPUPDATE(MolfileInterface::P_RESI,resid,prop);\n  PROPUPDATE(MolfileInterface::P_ATMN,atomicnumber,prop);\n  PROPUPDATE((MolfileInterface::P_ATMN|MolfileInterface::P_MASS),\n             mass,get_pte_mass(prop));\n  PROPSTRCPY((MolfileInterface::P_ATMN|MolfileInterface::P_NAME),\n             name,get_pte_label(prop));\n  PROPSTRCPY((MolfileInterface::P_ATMN|MolfileInterface::P_TYPE),\n             type,get_pte_label(prop));\n  return plist;\n}\n\n// integer and derived props\nstatic int write_atom_property(molfile_atom_t &a,\n                               const int propid,\n                               const char *prop)\n{\n  int plist = MolfileInterface::P_NONE;\n  PROPSTRCPY(MolfileInterface::P_NAME,name,prop);\n  PROPSTRCPY(MolfileInterface::P_TYPE,type,prop);\n  PROPSTRCPY(MolfileInterface::P_RESN,resname,prop);\n  PROPSTRCPY(MolfileInterface::P_SEGN,segid,prop);\n  return plist;\n}\n#undef PROPUPDATE\n#undef PROPSTRCPY\n\n// set/get atom floating point property\nint MolfileInterface::property(int propid, int idx, float *prop)\n{\n  if ((_info == NULL) || (prop == NULL) || (idx < 0) || (idx >= _natoms))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT)\n    _props |= write_atom_property(a[idx], propid, *prop);\n\n  if (_mode & M_RSTRUCT)\n    *prop = read_float_property(a[idx], propid);\n\n  return _props;\n}\n\n// set/get per type floating point property\nint MolfileInterface::property(int propid, int *types, float *prop)\n{\n  if ((_info == NULL) || (types == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[types[i]]);\n  }\n\n  // useless for reading.\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n\n// set/get per atom floating point property\nint MolfileInterface::property(int propid, float *prop)\n{\n  if ((_info == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[i]);\n  }\n\n  if (_mode & M_RSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      prop[i] = read_float_property(a[i], propid);\n  }\n\n  return _props;\n}\n\n// set/get atom floating point property\nint MolfileInterface::property(int propid, int idx, double *prop)\n{\n  if ((_info == NULL) || (prop == NULL) || (idx < 0) || (idx >= _natoms))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT)\n    return write_atom_property(a[idx], propid, *prop);\n\n  if (_mode & M_RSTRUCT)\n    *prop = static_cast<double>(read_float_property(a[idx], propid));\n\n  return _props;\n}\n\n// set/get per type floating point property\nint MolfileInterface::property(int propid, int *types, double *prop)\n{\n  if ((_info == NULL) || (types == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[types[i]]);\n  }\n\n  // useless for reading\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n\n// set/get per atom floating point property\nint MolfileInterface::property(int propid, double *prop)\n{\n  if ((_info == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[i]);\n  }\n  if (_mode & M_RSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      prop[i] = static_cast<double>(read_float_property(a[i], propid));\n  }\n\n  return _props;\n}\n\n#define INT_TO_STRING_BODY(IDX)                         \\\n  buf[15] = 0;                                          \\\n  if (propid & P_NAME)                                  \\\n    _props |= write_atom_property(a[IDX],P_NAME,buf);   \\\n  if (propid & P_TYPE)                                  \\\n    _props |= write_atom_property(a[IDX],P_TYPE,buf);   \\\n  buf[7] = 0;                                           \\\n  if (propid & P_RESN)                                  \\\n    _props |= write_atom_property(a[IDX],P_RESN,buf);   \\\n  if (propid & P_SEGN)                                  \\\n    _props |= write_atom_property(a[IDX],P_SEGN,buf);   \\\n  buf[1] = 0;                                           \\\n  if (propid & P_CHAI)                                  \\\n    _props |= write_atom_property(a[IDX],P_CHAI,buf)\n\n// set/get atom integer property\nint MolfileInterface::property(int propid, int idx, int *prop)\n{\n  if ((_info == NULL) || (prop == NULL) || (idx < 0) || (idx >= _natoms))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    char buf[64];\n\n    _props |= write_atom_property(a[idx], propid, *prop);\n\n    if (propid & (P_NAME|P_TYPE|P_RESN|P_SEGN|P_CHAI)) {\n      sprintf(buf,\"%d\",*prop);\n      INT_TO_STRING_BODY(idx);\n    }\n  }\n\n  if (_mode & M_RSTRUCT)\n    *prop = read_int_property(a[idx], propid);\n\n  return _props;\n}\n\n// set/get per type integer property\nint MolfileInterface::property(int propid, int *types, int *prop)\n{\n  if ((_info == NULL) || (types == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    char buf[64];\n\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i], propid, prop[types[i]]);\n\n    if (propid & (P_NAME|P_TYPE|P_RESN|P_SEGN|P_CHAI)) {\n      for (int i=0; i < _natoms; ++i) {\n        sprintf(buf,\"%d\",prop[types[i]]);\n        INT_TO_STRING_BODY(i);\n      }\n    }\n  }\n\n  // useless when reading\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n\n// set/get per atom integer property\nint MolfileInterface::property(int propid, int *prop)\n{\n  if ((_info == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    char buf[64];\n\n    for (int i=0; i < _natoms; ++i)\n      _props |= write_atom_property(a[i],propid,prop[i]);\n\n    if (propid & (P_NAME|P_TYPE|P_RESN|P_SEGN|P_CHAI)) {\n      for (int i=0; i < _natoms; ++i) {\n        sprintf(buf,\"%d\",prop[i]);\n        INT_TO_STRING_BODY(i);\n      }\n    }\n  }\n\n  if (_mode & M_RSTRUCT) {\n    for (int i=0; i < _natoms; ++i)\n      prop[i] = read_int_property(a[i], propid);\n  }\n\n  return _props;\n}\n#undef INT_TO_STRING_BODY\n\n// set/get atom string property\nint MolfileInterface::property(int propid, int idx, char *prop)\n{\n  if ((_info == NULL) || (prop == NULL) || (idx < 0) || (idx >= _natoms))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    _props |= write_atom_property(a[idx], propid, prop);\n  }\n\n  if (_mode & M_RSTRUCT)\n    strcpy(prop,read_string_property(a[idx], propid));\n\n  return _props;\n}\n\n// set/get per type string property\nint MolfileInterface::property(int propid, int *types, char **prop)\n{\n  if ((_info == NULL) || (types == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i) {\n      _props |= write_atom_property(a[i], propid, prop[types[i]]);\n    }\n  }\n\n  // useless when reading\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n\n// set/get per atom string property\nint MolfileInterface::property(int propid, char **prop)\n{\n  if ((_info == NULL) || (prop == NULL))\n    return P_NONE;\n\n  molfile_atom_t *a = static_cast<molfile_atom_t *>(_info);\n\n  if (_mode & M_WSTRUCT) {\n    for (int i=0; i < _natoms; ++i) {\n      _props |= write_atom_property(a[i], propid, prop[i]);\n    }\n  }\n\n  // not supported right now. XXX: should we use strdup() here?\n  if (_mode & M_RSTRUCT)\n    return P_NONE;\n\n  return _props;\n}\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/lib/molfile/vmdplugin.h": "/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2006 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmdplugin.h,v $\n *      $Author: johns $       $Locker:  $             $State: Exp $\n *      $Revision: 1.33 $       $Date: 2015/10/29 05:10:54 $\n *\n ***************************************************************************/\n\n/** @file\n * This header must be included by every VMD plugin library.  It defines the\n * API for every plugin so that VMD can organize the plugins it finds.\n */\n\n#ifndef VMD_PLUGIN_H\n#define VMD_PLUGIN_H\n\n\n/*\n * Preprocessor tricks to make it easier for us to redefine the names of\n * functions when building static plugins.\n */\n#if !defined(VMDPLUGIN)\n/**\n  * macro defining VMDPLUGIN if it hasn't already been set to the name of\n  * a static plugin that is being compiled.  This is the catch-all case.\n  */\n#define VMDPLUGIN vmdplugin\n#endif\n/** concatenation macro, joins args x and y together as a single string */\n#define xcat(x, y) cat(x, y)\n/** concatenation macro, joins args x and y together as a single string */\n#define cat(x, y) x ## y\n\n/*\n *  macros to correctly define plugin function names depending on whether\n *  the plugin is being compiled for static linkage or dynamic loading.\n *  When compiled for static linkage, each plugin needs to have unique\n *  function names for all of its entry points.  When compiled for dynamic\n *  loading, the plugins must name their entry points consistently so that\n *  the plugin loading mechanism can find the register, register_tcl, init,\n *  and fini routines via dlopen() or similar operating system interfaces.\n */\n/*@{*/\n/** Macro names entry points correctly for static linkage or dynamic loading */\n#define VMDPLUGIN_register     xcat(VMDPLUGIN, _register)\n#define VMDPLUGIN_register_tcl xcat(VMDPLUGIN, _register_tcl)\n#define VMDPLUGIN_init         xcat(VMDPLUGIN, _init)\n#define VMDPLUGIN_fini         xcat(VMDPLUGIN, _fini)\n/*@}*/\n\n\n/** \"WIN32\" is defined on both WIN32 and WIN64 platforms... */\n#if (defined(WIN32))\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n\n#if !defined(STATIC_PLUGIN)\n#if defined(VMDPLUGIN_EXPORTS)\n/**\n *  Only define DllMain for plugins, not in VMD or in statically linked plugins\n *  VMDPLUGIN_EXPORTS is only defined when compiling dynamically loaded plugins\n */\nBOOL APIENTRY DllMain( HANDLE hModule,\n                       DWORD ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n  return TRUE;\n}\n\n#define VMDPLUGIN_API __declspec(dllexport)\n#else\n#define VMDPLUGIN_API __declspec(dllimport)\n#endif /* VMDPLUGIN_EXPORTS */\n#else  /* ! STATIC_PLUGIN */\n#define VMDPLUGIN_API\n#endif /* ! STATIC_PLUGIN */\n#else\n/** If we're not compiling on Windows, then this macro is defined empty */\n#define VMDPLUGIN_API\n#endif\n\n/** define plugin linkage correctly for both C and C++ based plugins */\n#ifdef __cplusplus\n#define VMDPLUGIN_EXTERN extern \"C\" VMDPLUGIN_API\n#else\n#define VMDPLUGIN_EXTERN extern VMDPLUGIN_API\n#endif  /* __cplusplus */\n\n/*\n * Plugin API functions start here\n */\n\n\n/**\n * Init routine: called the first time the library is loaded by the\n * application and before any other API functions are referenced.\n * Return 0 on success.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_init(void);\n\n/**\n * Macro for creating a struct header used in all plugin structures.\n *\n * This header should be placed at the top of every plugin API definition\n * so that it can be treated as a subtype of the base plugin type.\n *\n * abiversion: Defines the ABI for the base plugin type (not for other plugins)\n * type: A string descriptor of the plugin type.\n * name: A name for the plugin.\n * author: A string identifier, possibly including newlines.\n * Major and minor version.\n * is_reentrant: Whether this library can be run concurrently with itself.\n */\n#define vmdplugin_HEAD \\\n  int abiversion; \\\n  const char *type; \\\n  const char *name; \\\n  const char *prettyname; \\\n  const char *author; \\\n  int majorv; \\\n  int minorv; \\\n  int is_reentrant;\n\n/**\n  * Typedef for generic plugin header, individual plugins can\n  * make their own structures as long as the header info remains\n  * the same as the generic plugin header, most easily done by\n  * using the vmdplugin_HEAD macro.\n  */\ntypedef struct {\n  vmdplugin_HEAD\n} vmdplugin_t;\n\n/**\n * Use this macro to initialize the abiversion member of each plugin\n */\n#define vmdplugin_ABIVERSION  17\n\n/*@{*/\n/** Use this macro to indicate a plugin's thread-safety at registration time */\n#define VMDPLUGIN_THREADUNSAFE 0\n#define VMDPLUGIN_THREADSAFE   1\n/*@}*/\n\n/*@{*/\n/** Error return code for use in the plugin registration and init functions */\n#define VMDPLUGIN_SUCCESS      0\n#define VMDPLUGIN_ERROR       -1\n/*@}*/\n\n/**\n * Function pointer typedef for register callback functions\n */\ntypedef int (*vmdplugin_register_cb)(void *, vmdplugin_t *);\n\n/**\n * Allow the library to register plugins with the application.\n * The callback should be called using the passed-in void pointer, which\n * should not be interpreted in any way by the library.  Each vmdplugin_t\n * pointer passed to the application should point to statically-allocated\n * or heap-allocated memory and should never be later modified by the plugin.\n * Applications must be permitted to retain only a copy of the the plugin\n * pointer, without making any deep copy of the items in the struct.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register(void *, vmdplugin_register_cb);\n\n/**\n * Allow the library to register Tcl extensions.\n * This API is optional; if found by dlopen, it will be called after first\n * calling init and register.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register_tcl(void *, void *tcl_interp,\n    vmdplugin_register_cb);\n\n/**\n * The Fini method is called when the application will no longer use\n * any plugins in the library.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_fini(void);\n\n#endif   /* VMD_PLUGIN_H */\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/lib/molfile/Makefile.lammps": "# This file contains the hooks to build and link LAMMPS with the VMD\n# molfile plugins described here:\n# \n# http://www.ks.uiuc.edu/Research/vmd/plugins/molfile\n# \n# When you build LAMMPS with the USER-MOLFILE package installed, it will\n# use the 3 settings in this file.  They should be set as follows.\n# \n# The molfile_SYSINC setting is to point to the folder with the VMD\n# plugin headers. By default it points to bundled headers in this folder\n# \n# The molfile_SYSLIB setting is for a system dynamic loading library\n# that will be used to load the molfile plugins.  It contains functions\n# like dlopen(), dlsym() and so on for dynamic linking of executable\n# code into an executable.  For Linux and most current Unix-like\n# operating systems, the setting of \"-ldl\" will work.  On some platforms\n# you may need \"-ldld\".  For compilation on Windows, a different\n# mechanism is used that is part of the Windows programming environment\n# and thus molfile_SYSLIB can be left blank.\n# \n# The molfile_SYSINC and molfile_SYSPATH variables do not typically need\n# to be set.  If the dl library is not in a place the linker can find\n# it, specify its directory via the molfile_SYSPATH variable, e.g.\n# -Ldir.\n\n# -----------------------------------------------------------\n\n# Settings that the LAMMPS build will import when this package is installed\n\n# change this to -I/path/to/your/lib/vmd/plugins/include if the bundled\n# header files are incompatible with your VMD plugsins\nmolfile_SYSINC =-I../../lib/molfile\n#\nifneq ($(LIBOBJDIR),/Obj_mingw32)\nifneq ($(LIBOBJDIR),/Obj_mingw64)\nifneq ($(LIBOBJDIR),/Obj_mingw32-mpi)\nifneq ($(LIBOBJDIR),/Obj_mingw64-mpi)\nmolfile_SYSLIB = -ldl\nendif\nendif\nendif\nendif\nmolfile_SYSPATH =\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/lib/kokkos/core/src/impl/Kokkos_Profiling_Interface.cpp": "/*\n //@HEADER\n // ************************************************************************\n //\n //                        Kokkos v. 2.0\n //              Copyright (2014) Sandia Corporation\n //\n // Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,\n // the U.S. Government retains certain rights in this software.\n //\n // Redistribution and use in source and binary forms, with or without\n // modification, are permitted provided that the following conditions are\n // met:\n //\n // 1. Redistributions of source code must retain the above copyright\n // notice, this list of conditions and the following disclaimer.\n //\n // 2. Redistributions in binary form must reproduce the above copyright\n // notice, this list of conditions and the following disclaimer in the\n // documentation and/or other materials provided with the distribution.\n //\n // 3. Neither the name of the Corporation nor the names of the\n // contributors may be used to endorse or promote products derived from\n // this software without specific prior written permission.\n //\n // THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION \"AS IS\" AND ANY\n // EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n // PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE\n // CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n // EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n // PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n // PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n // LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n // NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n // SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n //\n // Questions? Contact Christian R. Trott (crtrott@sandia.gov)\n //\n // ************************************************************************\n //@HEADER\n */\n\n#include <Kokkos_Macros.hpp>\n\n#if defined(KOKKOS_ENABLE_PROFILING)\n\n#include <impl/Kokkos_Profiling_Interface.hpp>\n#include <cstring>\n\nnamespace Kokkos {\nnamespace Profiling {\n\nstatic initFunction initProfileLibrary = nullptr;\nstatic finalizeFunction finalizeProfileLibrary = nullptr;\n\nstatic beginFunction beginForCallee = nullptr;\nstatic beginFunction beginScanCallee = nullptr;\nstatic beginFunction beginReduceCallee = nullptr;\nstatic endFunction endForCallee = nullptr;\nstatic endFunction endScanCallee = nullptr;\nstatic endFunction endReduceCallee = nullptr;\n\nstatic pushFunction pushRegionCallee = nullptr;\nstatic popFunction popRegionCallee = nullptr;\n\nstatic allocateDataFunction allocateDataCallee = nullptr;\nstatic deallocateDataFunction deallocateDataCallee = nullptr;\n\nstatic beginDeepCopyFunction beginDeepCopyCallee = nullptr;\nstatic endDeepCopyFunction endDeepCopyCallee = nullptr;\n\nstatic createProfileSectionFunction createSectionCallee = nullptr;\nstatic startProfileSectionFunction startSectionCallee = nullptr;\nstatic stopProfileSectionFunction stopSectionCallee = nullptr;\nstatic destroyProfileSectionFunction destroySectionCallee = nullptr;\n\nstatic profileEventFunction profileEventCallee = nullptr;\n\nSpaceHandle::SpaceHandle(const char* space_name) {\n  strncpy(name,space_name,64);\n}\n\nbool profileLibraryLoaded() {\n  return (nullptr != initProfileLibrary);\n}\n\nvoid beginParallelFor(const std::string& kernelPrefix, const uint32_t devID, uint64_t* kernelID) {\n  if(nullptr != beginForCallee) {\n    Kokkos::fence();\n    (*beginForCallee)(kernelPrefix.c_str(), devID, kernelID);\n  }\n}\n\nvoid endParallelFor(const uint64_t kernelID) {\n  if(nullptr != endForCallee) {\n    Kokkos::fence();\n    (*endForCallee)(kernelID);\n  }\n}\n\nvoid beginParallelScan(const std::string& kernelPrefix, const uint32_t devID, uint64_t* kernelID) {\n  if(nullptr != beginScanCallee) {\n    Kokkos::fence();\n    (*beginScanCallee)(kernelPrefix.c_str(), devID, kernelID);\n  }\n}\n\nvoid endParallelScan(const uint64_t kernelID) {\n  if(nullptr != endScanCallee) {\n    Kokkos::fence();\n    (*endScanCallee)(kernelID);\n  }\n}\n\nvoid beginParallelReduce(const std::string& kernelPrefix, const uint32_t devID, uint64_t* kernelID) {\n  if(nullptr != beginReduceCallee) {\n    Kokkos::fence();\n    (*beginReduceCallee)(kernelPrefix.c_str(), devID, kernelID);\n  }\n}\n\nvoid endParallelReduce(const uint64_t kernelID) {\n  if(nullptr != endReduceCallee) {\n    Kokkos::fence();\n    (*endReduceCallee)(kernelID);\n  }\n}\n\n\nvoid pushRegion(const std::string& kName) {\n  if( nullptr != pushRegionCallee ) {\n    Kokkos::fence();\n    (*pushRegionCallee)(kName.c_str());\n  }\n}\n\nvoid popRegion() {\n  if( nullptr != popRegionCallee ) {\n    Kokkos::fence();\n    (*popRegionCallee)();\n  }\n}\n\nvoid allocateData(const SpaceHandle space, const std::string label, const void* ptr, const uint64_t size) {\n  if(nullptr != allocateDataCallee) {\n    (*allocateDataCallee)(space,label.c_str(),ptr,size);\n  }\n}\n\nvoid deallocateData(const SpaceHandle space, const std::string label, const void* ptr, const uint64_t size) {\n  if(nullptr != deallocateDataCallee) {\n    (*deallocateDataCallee)(space,label.c_str(),ptr,size);\n  }\n}\n\nvoid beginDeepCopy(const SpaceHandle dst_space, const std::string dst_label, const void* dst_ptr,\n    const SpaceHandle src_space, const std::string src_label, const void* src_ptr,\n    const uint64_t size) {\n  if(nullptr != beginDeepCopyCallee) {\n    (*beginDeepCopyCallee)(dst_space, dst_label.c_str(), dst_ptr,\n                      src_space, src_label.c_str(), src_ptr,\n                      size);\n  }\n}\n\nvoid endDeepCopy() {\n  if(nullptr != endDeepCopyCallee) {\n    (*endDeepCopyCallee)();\n  }\n}\n\nvoid createProfileSection(const std::string& sectionName, uint32_t* secID) {\n\n\tif(nullptr != createSectionCallee) {\n\t\t(*createSectionCallee)(sectionName.c_str(), secID);\n\t}\n}\n\nvoid startSection(const uint32_t secID) {\n\tif(nullptr != startSectionCallee) {\n\t\t(*startSectionCallee)(secID);\n\t}\n}\n\nvoid stopSection(const uint32_t secID) {\n\tif(nullptr != stopSectionCallee) {\n\t\t(*stopSectionCallee)(secID);\n\t}\n}\n\nvoid destroyProfileSection(const uint32_t secID) {\n\tif(nullptr != destroySectionCallee) {\n\t\t(*destroySectionCallee)(secID);\n\t}\n}\n\nvoid markEvent(const std::string& eventName) {\n\tif(nullptr != profileEventCallee) {\n\t\t(*profileEventCallee)(eventName.c_str());\n\t}\n}\n\nvoid initialize() {\n\n  // Make sure initialize calls happens only once\n  static int is_initialized = 0;\n  if(is_initialized) return;\n  is_initialized = 1;\n\n  void* firstProfileLibrary;\n\n  char* envProfileLibrary  = getenv(\"KOKKOS_PROFILE_LIBRARY\");\n\n  // If we do not find a profiling library in the environment then exit\n  // early.\n  if( nullptr == envProfileLibrary ) {\n    return ;\n  }\n\n  char* envProfileCopy = (char*) malloc(sizeof(char) * (strlen(envProfileLibrary) + 1));\n  sprintf(envProfileCopy, \"%s\", envProfileLibrary);\n\n  char* profileLibraryName = strtok(envProfileCopy, \";\");\n\n  if( (nullptr != profileLibraryName) && (strcmp(profileLibraryName, \"\") != 0) ) {\n    firstProfileLibrary = dlopen(profileLibraryName, RTLD_NOW | RTLD_GLOBAL);\n\n    if(nullptr == firstProfileLibrary) {\n      std::cerr << \"Error: Unable to load KokkosP library: \" <<\n        profileLibraryName << std::endl;\n      std::cerr << \"dlopen(\" << profileLibraryName << \", RTLD_NOW | RTLD_GLOBAL) failed with \"\n        << dlerror() << '\\n';\n    } else {\n#ifdef KOKKOS_ENABLE_PROFILING_LOAD_PRINT\n      std::cout << \"KokkosP: Library Loaded: \" << profileLibraryName << std::endl;\n#endif\n\n      // dlsym returns a pointer to an object, while we want to assign to pointer to function\n      // A direct cast will give warnings hence, we have to workaround the issue by casting pointer to pointers.\n      auto p1 = dlsym(firstProfileLibrary, \"kokkosp_begin_parallel_for\");\n      beginForCallee = *((beginFunction*) &p1);\n      auto p2 = dlsym(firstProfileLibrary, \"kokkosp_begin_parallel_scan\");\n      beginScanCallee = *((beginFunction*) &p2);\n      auto p3 = dlsym(firstProfileLibrary, \"kokkosp_begin_parallel_reduce\");\n      beginReduceCallee = *((beginFunction*) &p3);\n\n      auto p4 = dlsym(firstProfileLibrary, \"kokkosp_end_parallel_scan\");\n      endScanCallee = *((endFunction*) &p4);\n      auto p5 = dlsym(firstProfileLibrary, \"kokkosp_end_parallel_for\");\n      endForCallee = *((endFunction*) &p5);\n      auto p6 = dlsym(firstProfileLibrary, \"kokkosp_end_parallel_reduce\");\n      endReduceCallee = *((endFunction*) &p6);\n\n      auto p7 = dlsym(firstProfileLibrary, \"kokkosp_init_library\");\n      initProfileLibrary = *((initFunction*) &p7);\n      auto p8 = dlsym(firstProfileLibrary, \"kokkosp_finalize_library\");\n      finalizeProfileLibrary = *((finalizeFunction*) &p8);\n\n      auto p9 = dlsym(firstProfileLibrary, \"kokkosp_push_profile_region\");\n      pushRegionCallee = *((pushFunction*) &p9);\n      auto p10 = dlsym(firstProfileLibrary, \"kokkosp_pop_profile_region\");\n      popRegionCallee = *((popFunction*) &p10);\n\n      auto p11 = dlsym(firstProfileLibrary, \"kokkosp_allocate_data\");\n      allocateDataCallee = *((allocateDataFunction*) &p11);\n      auto p12 = dlsym(firstProfileLibrary, \"kokkosp_deallocate_data\");\n      deallocateDataCallee = *((deallocateDataFunction*) &p12);\n\n      auto p13 = dlsym(firstProfileLibrary, \"kokkosp_begin_deep_copy\");\n      beginDeepCopyCallee = *((beginDeepCopyFunction*) &p13);\n      auto p14 = dlsym(firstProfileLibrary, \"kokkosp_end_deep_copy\");\n      endDeepCopyCallee = *((endDeepCopyFunction*) &p14);\n      \n      auto p15 = dlsym(firstProfileLibrary, \"kokkosp_create_profile_section\");\n      createSectionCallee = *((createProfileSectionFunction*) &p15);\n      auto p16 = dlsym(firstProfileLibrary, \"kokkosp_start_profile_section\");\n      startSectionCallee = *((startProfileSectionFunction*) &p16);\n      auto p17 = dlsym(firstProfileLibrary, \"kokkosp_stop_profile_section\");\n      stopSectionCallee = *((stopProfileSectionFunction*) &p17);      \n      auto p18 = dlsym(firstProfileLibrary, \"kokkosp_destroy_profile_section\");\n      destroySectionCallee = *((destroyProfileSectionFunction*) &p18);\n      \n      auto p19 = dlsym(firstProfileLibrary, \"kokkosp_profile_event\");\n      profileEventCallee = *((profileEventFunction*) &p19);\n    }\n  }\n\n  if(nullptr != initProfileLibrary) {\n    (*initProfileLibrary)(0,\n        (uint64_t) KOKKOSP_INTERFACE_VERSION,\n        (uint32_t) 0,\n        nullptr);\n  }\n\n  free(envProfileCopy);\n}\n\nvoid finalize() {\n  // Make sure finalize calls happens only once\n  static int is_finalized = 0;\n  if(is_finalized) return;\n  is_finalized = 1;\n\n  if(nullptr != finalizeProfileLibrary) {\n    (*finalizeProfileLibrary)();\n\n    // Set all profile hooks to nullptr to prevent\n    // any additional calls. Once we are told to\n    // finalize, we mean it\n    initProfileLibrary = nullptr;\n    finalizeProfileLibrary = nullptr;\n\n    beginForCallee = nullptr;\n    beginScanCallee = nullptr;\n    beginReduceCallee = nullptr;\n    endScanCallee = nullptr;\n    endForCallee = nullptr;\n    endReduceCallee = nullptr;\n\n    pushRegionCallee = nullptr;\n    popRegionCallee = nullptr;\n\n    allocateDataCallee = nullptr;\n    deallocateDataCallee = nullptr;\n\n    beginDeepCopyCallee = nullptr;\n    endDeepCopyCallee = nullptr;\n    \n    createSectionCallee = nullptr;\n\tstartSectionCallee = nullptr;\n\tstopSectionCallee = nullptr;\n\tdestroySectionCallee = nullptr;\n\n\tprofileEventCallee = nullptr;\n  }\n}\n}\n}\n\n#else\n\n#include <impl/Kokkos_Profiling_Interface.hpp>\n#include <cstring>\n\nnamespace Kokkos {\nnamespace Profiling {\n\nbool profileLibraryLoaded() { return false; }\n\n\nvoid beginParallelFor(const std::string& , const uint32_t , uint64_t* ) {}\nvoid endParallelFor(const uint64_t ) {}\nvoid beginParallelScan(const std::string& , const uint32_t , uint64_t* ) {}\nvoid endParallelScan(const uint64_t ) {}\nvoid beginParallelReduce(const std::string& , const uint32_t , uint64_t* ) {}\nvoid endParallelReduce(const uint64_t ) {}\n\nvoid pushRegion(const std::string& ) {}\nvoid popRegion() {}\nvoid createProfileSection(const std::string& , uint32_t* ) {}\nvoid startSection(const uint32_t ) {}\nvoid stopSection(const uint32_t ) {}\nvoid destroyProfileSection(const uint32_t ) {}\n\nvoid markEvent(const std::string& ) {}\n\nvoid allocateData(const SpaceHandle , const std::string , const void* , const uint64_t ) {}\nvoid deallocateData(const SpaceHandle , const std::string , const void* , const uint64_t ) {}\n\nvoid beginDeepCopy(const SpaceHandle , const std::string , const void* , \n    const SpaceHandle , const std::string , const void* ,\n    const uint64_t ) {}\nvoid endDeepCopy() {}\n\nvoid initialize() {}\nvoid finalize() {}\n\n}} // end namespace Kokkos::Profiling\n\n#endif\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/false_positives.txt": "aa\naat\nabc\nabf\nabsTol\nAcc\nAccelrys\nacceptor\nAcceptor\nacceptors\naccomodate\naccuracies\nach\nachived\nachives\nackland\nAckland\nacolor\nacos\nActa\nactinide\nadaptation\naddforce\naddtorque\nAdhikari\nadiam\nAdjiman\nadof\nadp\nAdri\nadusting\nadvect\nadvection\nadvects\nafer\naffine\nAfshar\nagilio\nAgilio\nagni\nAi\nAidan\naij\nairebo\nAj\najaramil\nakohlmey\nAktulga\nal\nalain\nAlain\nalat\nAlbe\nalchemical\nAlCu\nAlderton\nAlejandre\nalessandro\nAlessandro\naliceblue\nallocaters\nallosws\nAlO\nalond\nAlonso\namap\nAmatrix\nAmit\namu\nAmzallag\nAndzelm\nAng\nangmom\nangmomx\nangmomy\nangmomz\nAngs\nanharmonic\nanharmonicity\naniso\nanisotropic\nansi\nantiquewhite\nAntisymmetrized\nantisymmetry\nAntonelli\naperiodic\napi\nAppl\nApu\narccos\narcsin\narg\nargs\nartefacts\nArun\nasin\nAskari\naskoose\nasphere\nASPHERE\naspherical\nAsq\nassinged\nassocidate\nAsta\nAstart\nAstop\nasub\nasubrama\nAsumming\natan\natc\nAtC\nATC\nathomps\natobody\natomeye\natomfile\natomID\natomistic\natomt\nattogram\nattograms\nattrac\nAtw\nAtwater\natwt\naugt\nAuO\nautocorrelation\nautomagically\nAvalos\navalue\naveforce\nAvendano\navi\nAVX\nawpmd\nAWPMD\nAxel\nAy\nAyton\nAz\nazimuthal\nba\nBabadi\nbackcolor\nbackend\nBaczewski\nBal\nbalancer\nBalasubramanian\nBallenegger\nBammann\nBarashev\nbarostat\nbarostated\nbarostating\nbarostatted\nbarostatting\nBarostatting\nbarosttating\nBarrat\nBartels\nbarycenter\nbarye\nBashford\nBaskes\nBatra\nBayly\nbb\nbcc\nbcolor\nbdiam\nBeckman\nbehaviour\nBelak\nBellott\nbenchmarking\nBennet\nBerardi\nBeraun\nberendsen\nBerendsen\nberger\nBerkowitz\nberlin\nBerne\nBeutler\nbgq\nBh\nbiaxial\nBiersack\nbigint\nbilayer\nbilayers\nbinsize\nbinstyle\nbiomolecular\nbiomolecule\nBiomolecules\nBiophys\nBiosym\nbisectioning\nbispectrum\nBispectrum\nbitmapped\nbitrate\nbitrates\nBitzek\nBlaise\nblanchedalmond\nblocksize\nblueviolet\nbn\nbni\nbodyflag\nbodystyle\nBogaerts\nBogusz\nBohrs\nbondchk\nbondings\nbondmax\nbondtype\nBonet\nboolean\nBoresch\nBotero\nBotu\nBouguet\nbount\nboxcolor\nbpclermont\nbr\nBranicio\nbrennan\nBrilliantov\nBroadwell\nbrownian\nbrownw\nBryantsev\nbtype\nbuckPlusAttr\nbugfixes\nBulatov\nburlywood\nBussi\nBuyl\nBybee\nbz\ncadetblue\ncaltech\nCaltech\nCampana\nCao\nCapolungo\nCaro\ncartesian\nCates\ncbecker\nCCu\ncd\ncdeam\ncdennist\ncdof\nceil\nCeil\ncentre\ncentro\ncentroid\nCentroid\ncentrosymmetry\nCerda\nceriotti\nCeriotti\nCerutti\ncfg\nCFG\ncfile\nCFL\ncgdna\nCGDNA\ncgs\nChalopin\nChampaign\ncharmm\nCHARMM\ncheckmark\ncheckqeq\nCheng\nChenoweth\nchiral\nchirality\nCho\nChristoph\nChu\nchunkID\nCiccotti\nCieplak\nCii\nCij\ncis\nciv\nclearstore\nClebsch\nClermont\nclo\nClovertown\ncmap\nCmax\ncmdlist\nCmin\ncmm\nCMM\ncn\ncN\nCn\ncna\ncnr\ncoaxstk\ncodebase\ncoeff\nCoeff\nCoefficientN\ncoeffs\nCoeffs\nColberg\ncoleman\nColliex\ncollinear\ncolvars\nColvars\nCOLVARS\ncomID\nCommun\ncomplier\ncompressibility\ncompressive\nComput\ncomputable\ncompute\nconcetric\ncond\nCondens\nconfig\nconfigfile\nconfigurational\nconformational\nconjuction\nconsiting\ncontinously\nContrib\ncoord\nCoord\nCoordN\ncoords\ncoprocessor\ncoprocessors\ncoreshell\ncornflowerblue\ncornsilk\ncorrelator\ncosineshifted\ncossq\ncostheta\nCouette\ncoul\ncoulombic\nCoulombic\nCoulombics\nCoulommbic\nCourant\ncovalent\ncovalently\ncovariance\ncpp\ncpu\ncreateatoms\ncreateAtoms\nCritchley\ncrossterm\ncrossterms\nCrozier\ncrystallisation\nCrystallogr\nCsanyi\ncsh\ncshrc\nCSiC\ncsld\ncstyle\ncsvr\nCtypes\ncuda\nCuda\nCUDA\nCuH\ncuthi\ncutinner\ncutlo\ncutmax\ncutoffA\ncutoffC\ncuu\ncv\nCv\nCval\ncvar\ncvff\ncwiggle\nCygwin\nCyrot\ncyrstals\nDaivis\nDammak\ndampflag\nDarden\ndarkblue\ndarkcyan\ndarkgoldenrod\ndarkgray\ndarkgreen\ndarkkhaki\ndarkmagenta\ndarkolivegreen\ndarkorange\ndarkorchid\ndarkred\ndarksalmon\ndarkseagreen\ndarkslateblue\ndarkslategray\ndarkturquoise\ndarkviolet\nDas\nDasgupta\ndatafile\ndatums\nDavidchack\nDaw\ndcd\nde\ndE\nDe\ndebye\nDebye\ndecompositions\ndeeppink\ndeepskyblue\ndefauls\ndefgrad\ndeformable\ndegress\ndel\nDellago\ndelocalization\ndelocalized\ndelr\ndeltaHf\nDendrimer\ndendtritic\nDenniston\ndephase\ndephasing\ndepositied\ndequidt\nDequidt\nder\nDerjagin\nDerlet\nDeserno\nDestree\ndetils\nDevanathan\nDevemy\ndeviatoric\nDevine\ndf\ndfftw\nDFT\ndia\ndiag\ndiagonalized\nDiallo\ndiel\ndifferentiable\ndiffusivity\ndihedral\ndihedrals\nDihedrals\ndihydride\nDij\ndimdim\ndimensionality\ndimgray\ndipolar\ndir\nDirec\ndirs\ndiscoverable\ndiscretization\ndiscretized\ndisp\ndisplacment\ndissipative\nDissipative\ndistro\ndivdes\ndl\ndlambda\nDLAMMPS\ndlopen\ndm\ndmax\nDmax\nDodds\ndodgerblue\ndof\nDonadio\ndotc\nDoty\nDoye\ndpd\nDPD\ndpdTheta\nDPhil\ndr\ndR\ndragforce\nDrautz\ndreiding\nDreiding\ndrfourth\ndrho\ndrsquared\ndrude\nDrude\nDRUDE\ndsf\ndsmc\ndt\ndu\ndU\nDudarev\nDuin\nDullweber\nDunbrack\nDunweg\nDupont\ndUs\ndV\ndvector\ndVx\ndW\ndx\ndy\ndyne\ndynes\nDyre\nEaa\nEaat\nEacn\neam\neangle\neatom\nEba\nebond\nebt\nEc\necoul\necp\nedihed\nedim\nedip\nedu\nee\nEebt\neFF\nefield\neflux\nEggebrecht\nehanced\nehex\neHEX\nEi\nEigensolve\nEike\neim\neimp\nEindhoven\nEjtehadi\nEl\nelaplong\nElectroneg\nelectronegative\nelectronegativity\nEleftheriou\nElementN\nelif\nElj\nEllad\nellipsoidflag\nelong\nelt\nemacs\nEmbt\nemi\nemol\neN\nenergetics\nenergyCorr\neng\nEngility\nengilitycorp\nengrot\nengtrans\nengvib\nenthalpy\nenvoke\neos\nepair\nepcc\nEpp\nEpq\neps\nEpton\neq\neqch\nEqp\nEqq\nEqs\nequi\nequil\nequilibrate\nequilibrated\nequilibrating\nequilibration\nEquilibria\nequilibribum\nequilization\neradius\nerate\nerc\nerfc\nErhart\nerorate\nerose\nerotate\nErtas\nervel\nesu\nesub\net\netag\netap\nethernet\netol\netot\netotal\nEurophys\nev\neV\nevalue\nEvanseck\nevdwl\nEveraers\nevirials\newald\nEwald\nexcitations\nexcv\nexe\nexecutables\nextrema\ney\nez\nfactorizable\nfactorizations\nFaken\nFarago\nFasolino\nFava\nfbMC\nFc\nfcc\nfcm\nFd\nfdotr\nfdt\nFehlberg\nFellinger\nfemtosecond\nfemtoseconds\nfene\nFennell\nfep\nFEP\nfermi\nFermionic\nFerrand\nfexternal\nFexternal\nffield\nffmpeg\nFFmpeg\nffplay\nfft\nfftbench\nfftw\nfhg\nFi\nfigshare\nFij\nfilenname\nfileper\nFincham\nFinchham\nFinnis\nFiorin\nfixID\nfj\nFji\nflagfld\nflagHI\nflaglog\nflagN\nflagVF\nfld\nfloralwhite\nflv\nfmackay\nfmag\nfmass\nfmsec\nfN\nFn\nfname\nfno\nfoces\nFock\nFogarty\nFoiles\nfopenmp\nforcefield\nforestgreen\nformulae\nFortran\nfourier\nfp\nfphi\nfPIC\nfplo\nFqq\nFraige\nframerate\nFraunhofer\nFreitas\nFrenkel\nFriedrichs\nfrontend\nFrontends\nfs\nfstyle\nftol\nfugacity\nFumi\nfunc\nfuncs\nfunctionals\nfunroll\nfx\nfy\nfz\nGahler\ngainsboro\nGalindo\ngammaA\ngammaFactor\ngammaR\nGan\nGaN\nganzenmueller\nGanzenmuller\nGao\nGathert\ngauss\ngaussian\nGaussians\nGavhane\ngayberne\ngcc\ngcmc\ngdot\nGeC\ngeorg\nGeorg\nGermann\nGermano\ngerolf\nGerolf\ngettimeofday\ngewald\nGezelter\nGflop\ngfortran\nghostwhite\nGiacomo\ngif\ngifsicle\nGillan\nGingold\ngithub\nGithub\ngjf\ngjwagne\ngl\ngld\ngle\nglobbing\nGlosli\nGlotzer\ngmail\ngmake\ngmask\nGmask\nGordan\nGPa\ngpu\ngpuID\ngpus\ngraining\nGraining\nGrama\ngrana\ngranregion\ngraphene\nGreathouse\ngreenyellow\nGreffet\ngrem\ngREM\nGrest\nGrigera\ngrmask\nGrmask\ngromacs\nGromacs\nGronbech\nGroot\ngroupbig\nGrueneisen\ngsmooth\ngstyle\nGTL\ngui\nguidline\nGumbsch\nGunsteren\nGunzenmuller\nGuo\ngwald\ngz\ngzipped\nHaak\nHafskjold\nHalperin\nHamaker\nhaptic\nHara\nHarpertown\nHarting\nHartree\nHartrees\nHasan\nHayoun\nHayre\nhbcut\nhbnewflag\nhbond\nhcp\nheatconduction\nHebenstreit\nHecht\nHeenen\nHendrik\nHenin\nHenkelman\nhenrich\nHenrich\nheristics\nHerrmann\nHertizian\nhertzian\nHertzsch\nhexahedrons\nhexatic\nhexorder\nHeyes\nHfO\nhgrid\nHibbs\nHigdon\nHilger\nhisto\nhistogrammed\nhistogramming\nhmaktulga\nhoc\nHofling\nHolian\nHolm\nholonomic\nHomebrew\nhooke\nHookean\nhotpink\nhowto\nHowto\nHoyt\nhstyle\nhtml\nhTST\nhu\nhugoniostat\nHugoniostat\nHugoniot\nHura\nhwloc\nhydrogens\nhydrostatic\nhydrostatically\nHynninen\nHyoungki\nhyperradius\nhyperspherical\nhyperthreaded\nHyperthreading\nibar\nibm\nicc\nicosohedral\nidealgas\nideaology\nIDR\nielement\nieni\nifdefs\niff\nifort\nIhle\nij\nijk\nijkl\nik\nIkeshoji\nilmenau\nIlmenau\nIlya\nim\nIm\nimageint\nImageint\nImagemagick\nimd\nImpey\nimporopers\nimpropers\nImpropers\nimroper\nincludelink\nincompressible\nincrementing\nindenter\nindenters\nindianred\ninertiax\ninertiay\ninertiaz\ninfty\ninhomogeneities\ninhomogeneous\ninit\ninitializations\nInP\ninregion\nintegrations\nintegrators\nIntegrators\nintel\nintelmpi\ninteral\ninteratomic\nInteratomic\ninterconvert\nintergation\ninterial\nintermolecular\ninterstitials\nintra\nintramolecular\nints\ninv\ninvariants\ninversed\nionocovalent\niparam\nipi\nipp\nIPython\nIsele\nisenthalpic\niso\nisodemic\nisoenergetic\nisoenthalpic\nisokinetic\nisomorphism\nisothermal\nisotropically\nisovolume\nIsralewitz\niteratively\nIth\nItsets\nitype\nitypeN\nIvector\nIw\nixcm\nixx\nIxx\nixy\nIxy\nixz\nIxz\niy\niycm\niyy\nIyy\niyz\nIyz\niz\nizcm\nized\nIzrailev\nIzumi\nIzvekov\nizz\nIzz\nJacobsen\njagreat\njames\nJanssens\nJaramillo\nJarzynski\njatempl\njea\njec\nJeffers\njewett\nJewett\nji\nJiang\nJiao\njik\nJIK\njku\nJoannopoulos\nJochim\nJonsson\nJorgensen\njparam\njpeg\njpeglib\njpg\nJPG\njpl\nJth\njtype\njtypeN\nJulien\nJupyter\nJusto\nJusufi\nJx\nJy\nJz\njzimmer\nKadiri\nKalia\nKamberaj\nKapfer\nKarlsruhe\nKarplus\nKarttunen\nkate\nKaufmann\nKayser\nkb\nkB\nkbit\nkbits\nkcal\nKd\nke\nKE\nKeblinski\nkeflag\nKeir\nKelchner\nKelkar\nKemper\nKeyes\nKhersonskii\nKhvostov\nKi\nkim\nkJ\nkk\nKlahn\nKlapp\nKloss\nkmax\nKmax\nknl\nKohlmeyer\nkokkos\nKolafa\nKollman\nKondor\nkonglt\nKoning\nKooser\nKoskinen\nKosztin\nKp\nKraker\nKraus\nKremer\nKress\nkspace\nKspace\nKSpace\nKspring\nkT\nkth\nKth\nKub\nKubo\nKumagai\nKumar\nKuronen\nKusters\nKutta\nkx\nLackmann\nLadd\nlagrangian\nlambdai\nlamda\nlammps\nLammps\nLAMMPS\nlammpsplot\nLamoureux\nLandron\nlangevin\nLangevin\nLangston\nlarentzos\nLarentzos\nLaroche\nlars\nlatencies\nlattce\nLaupretre\nlavenderblush\nlawngreen\nlB\nlbl\nLBtype\nlcbop\nld\nldfftw\nldg\nLechman\nLehoucq\nLeimkuhler\nleiu\nlemonchiffon\nLenart\nlennard\nLennard\nLenosky\nLett\nLeuven\nLewy\nlgvdw\nLiang\nlibAtoms\nlibdir\nlibgpu\nlibjpeg\nliblammps\nLiblammps\nliblink\nlibmeam\nlibmpi\nlibmpich\nlibpng\nlibpoems\nlibrar\nlibreax\nlibs\nligand\nlightblue\nlightcoral\nlightcyan\nlightgoldenrodyellow\nlightgreen\nlightgrey\nlightpink\nlightsalmon\nlightseagreen\nlightskyblue\nlightslategray\nlightsteelblue\nlightyellow\nLikhtman\nlimegreen\nLindahl\nlineflag\nlineforce\nlinesearch\nlinux\nLiouville\nLisal\nlistfile\nLittmark\nLiu\nLivermore\nlj\nlm\nlmp\nlmpptr\nlmpqst\nlmpsdata\nLmpsdata\nlmptype\nln\nlocalTemp\nlocalvectors\nlogfile\nlogfreq\nlogicals\nLomdahl\nlookups\nLookups\nLoopVar\nLorant\nlossy\nlps\nlrt\nlsfftw\nltbbmalloc\nlubricateU\nlucy\nLussetti\nLustig\nlx\nly\nLybrand\nLyulin\nlz\nMackay\nMackrodt\nmacroparticle\nMadura\nMagda\nMaginn\nmainboards\nmakefile\nMakefile\nmakefiles\nMakefiles\nmakelist\nMakse\nmalloc\nMalolepsza\nManby\nMandadapu\nManh\nmanifoldforce\nManolopoulos\nmanybody\nMANYBODY\nMaras\nMarrink\nMarsaglia\nMarseille\nMartyna\nMashayak\nmassless\nmasstotal\nMatchett\nmatlab\nmatplotlib\nMattox\nMattson\nmaxangle\nmaxbond\nmaxeval\nMaxfoo\nmaxit\nmaxiter\nmaxsize\nmaxspecial\nmaxSteps\nmaxX\nmbt\nMbytes\nMBytes\nMcLachlan\nmd\nmdf\nmeam\nmeamf\nmech\nmechanice\nmechanim\nMecke\nmediumaquamarine\nmediumblue\nmediumorchid\nmediumpurple\nmediumseagreen\nmediumslateblue\nmediumspringgreen\nmediumturquoise\nmediumvioletred\nMees\nMehl\nMei\nMeloni\nMelrose\nMem\nmemalign\nMEMALIGN\nmembered\nMendelev\nmer\nMeremianin\nMerz\nmescscopic\nmeshless\nmeso\nmesocopic\nmesoparticle\nmesoscale\nmesoscopic\nmetadynamics\nMetadynamics\nmethine\nMetin\nMezei\nmgpt\nMGPT\nmgptfast\nmh\nmicelle\nmichael\nmichele\nMickel\nmicrocanonical\nmicroelastic\nmicroporous\nMicroscale\nmicrosec\nmidnightblue\nmie\nMie\nMikami\nMilitzer\nMinary\nmincap\nminima\nminimizations\nminimizer\nminimizers\nminorder\nminSteps\nmintcream\nMintmire\nmis\nMises\nMishin\nMishra\nmistyped\nmistyrose\nMj\nmK\nmkdir\nmkv\nmlparks\nmlutiple\nmodc\nModell\nmodelled\nmodelling\nModelling\nModine\nmol\nMol\nmolfile\nMolfile\nmoltemplate\nmomoner\nMonaghan\nMonaghans\nmonodisperse\nmonodispersity\nmonovalent\nMontalenti\nMontero\nMorefoo\nmorris\nMorriss\nmorse\nMoseler\nMoskalev\nmov\nmpi\nMpi\nMPI\nmpicc\nmpich\nmpicxx\nmpiexec\nmpiio\nmpirun\nmplayer\nmscg\nMSCG\nmsd\nmsi\nMSI\nmsm\nmsse\nmsst\nMtchell\nMth\nmtk\nMtotal\nMuccioli\nMukherjee\nMulders\nmultibody\nMultibody\nmulticenter\nmulticmd\nmulticore\nmultielectron\nmultinode\nmultiphysics\nmultiscale\nmultisectioning\nmultithreading\nMultithreading\nMundy\nMurdick\nMurtola\nMurty\nMuser\nmutli\nmutliple\nmuVT\nmux\nmuy\nmuz\nmv\nmV\nMvapich\nMxN\nmyCompute\nmyIndex\nmylammps\nmysocket\nmyTemp\nmyVec\nnabla\nNakano\nnamespace\nnamespaces\nNaN\nNangletype\nnangletypes\nNangletypes\nnano\nnanoindentation\nNanoletters\nnanometer\nnanometers\nnanoparticles\nnanosec\nNarulkar\nnasa\nnasr\nNatoli\nnatoms\nNatoms\nNattempt\nnavajowhite\nNavier\nnb\nNbin\nNbins\nnbody\nNbody\nnbondtype\nNbondtype\nnbondtypes\nNbondtypes\nnBOt\nnbrhood\nNbtypes\nnc\nNc\nnchunk\nNchunk\nncoeff\nncorr\nncount\nnd\nNdihedraltype\nNdirango\nndof\nNdof\nNdouble\nndx\nneb\nNeelov\nneighbouring\nnelem\nNelement\nNelements\nnemd\nnetcdf\nNeumann\nnevery\nNevery\nNewns\nnewtype\nNeyts\nNf\nnfile\nNfile\nNfreq\nng\nNg\nnghost\nNghost\nNgpu\nnh\nnharmonic\nnhc\nNiAlH\nNicklas\nNimpropertype\nNinteger\nNissila\nnist\nnitrides\nniu\nNk\nnl\nnlen\nNlines\nnlocal\nNlocal\nNlog\nnm\nNm\nNmax\nNmin\nNmols\nnn\nNocedal\nnocite\nnocoeff\nnodeless\nnoforce\nNoid\nNonbond\nnonbonded\nnonequilibrium\nnongauss\nnonGaussian\nnonlocal\nNonlocal\nNoordhoek\nnopreliminary\nNord\nnorder\nNordlund\nnormals\nNoskov\nnoslip\nnoticable\nnoutcol\nNoutput\nnoutrow\nNovik\nNovint\nnp\nNpair\nNpairs\nnparticle\nnpernode\nnph\nNpH\nNphi\nnphug\nnprocs\nNprocs\nnpt\nnr\nNr\nNrecompute\nNrepeat\nnreset\nNrho\nnrun\nNs\nNsample\nnsec\nNskip\nnsq\nNstart\nnstats\nNstep\nNsteplast\nNstop\nNswap\nNt\nNtable\nntheta\nnthreads\nNtptask\nNtype\nntypes\nNtypes\nnucleotides\nnulcear\nnum\nnuma\nnumactl\nnumerics\nnumpy\nNumpy\nNvalue\nNvaluelast\nNvalues\nnvc\nnvcc\nnve\nnvidia\nNvidia\nnvk\nnvt\nNwait\nnx\nNx\nnxnodes\nny\nNy\nnz\nNz\noctahedral\noctants\nohenrich\nok\nOKeefe\nOKeefe\nO'Keefe\noldlace\nOleinik\nOlfason\nolivedrab\nOllila\nomegaDD\nomegax\nomegay\nomegaz\nomp\nOMP\nonelevel\noneway\nonn\nons\nOO\nopenKIM\nOpenMP\nopls\nOppelstrup\noptionns\norangered\norderomg\norganised\norganometallic\norientational\norientorder\nOrlikowski\nornl\nOrnstein\nOrsi\northonormal\northorhombic\not\nOuldridge\noutmost\noutpur\noutputss\noutut\noverlayed\noverviewed\nOvito\noxdna\noxDNA\noxygens\npadua\nPadua\npalegoldenrod\npalegreen\npaleturquoise\npalevioletred\nPanagiotopoulos\nPandit\nPapaconstantopoulos\npapayawhip\npaquay\nPaquay\nparallelepiped\nparallelipiped\nParallelizable\nparallelization\nparallelized\nparallelizing\nparam\nparameterization\nparameterizations\nparameterize\nparameterized\nparametrization\nparametrized\nparams\nParinello\nparmin\nParrinello\nPartay\npartices\nParticuology\npastewka\nPastewka\nPattnaik\nPavese\npbc\npc\npchain\nPchain\nPdamp\npdb\npdf\npdim\npe\nPeachey\npeachpuff\nPearlman\nPedersen\nPeng\nperatom\nperfoms\nPergamon\nperi\nPeridymaics\nperidynamic\nPeridynamic\nperidynamics\nPeridynamics\npermittivity\nPerram\npersp\nPersp\nperu\nPeskin\nPettifor\npfactor\nph\nPhillpot\nphonon\nphophorous\nphosphide\nPhysica\nphysik\npicocoulomb\npicocoulombs\npicogram\npicograms\npicosecond\npicoseconds\npicosend\npid\nPieter\npimd\nPisarev\nPishevar\nPitera\npj\npjintve\nplaneforce\nPlathe\nPlimpton\nplog\nploop\nPloS\nplt\npmb\npN\npng\nPoiseuille\nPolak\npolarizabilities\npolarizability\npolarizable\nPolarizable\npolarizables\nPolitano\npolyA\npolybond\npolydisperse\npolydispersity\npopen\npopstore\npos\nPoschel\nposix\nPostma\npostprocessing\npotin\nPourtois\npowderblue\nppn\npppm\nprd\npre\nPre\nprec\npreexponential\nprefactor\nprefactors\nprepend\npreprint\npreprocessor\nprintf\nprintflag\nPriya\nproc\nProc\nprocs\nProny\nps\nPs\npscreen\npscrozi\npsec\npseudodynamics\npseudopotential\nPstart\nPstop\npstyle\nPtarget\npthread\npthreads\nptr\npu\npurdue\npushded\npushstore\npvar\npw\npx\nPx\npxx\nPxx\nPxy\npy\nPy\npydir\npylammps\nPyLammps\npymol\npypar\nPyy\npz\nPz\nPzz\nqbmsst\nqcore\nqdist\nqE\nqeq\nQeQ\nQEq\nqfile\nqi\nQi\nqj\nQj\nQl\nqm\nQmin\nqmmm\nqmol\nqoffload\nqopenmp\nqoverride\nqtb\nQuant\nquantic\nquartic\nquaternion\nquaternions\nquati\nquatj\nquatk\nquatw\nQueteschiner\nradian\nradians\nRafferty\nrahman\nRahman\nRaman\nramped\nRamprasad\nrandomizations\nRaphson\nRappe\nRavelo\nrc\nRc\nRcm\nRcmx\nRcmy\nRcut\nrcutfac\nrdc\nrdf\nREADME\nrealtime\nreamin\nreax\nReaxFF\nrebalance\nrebalancing\nrebo\nrecentered\nrecentering\nrecursing\nRee\nregoin\nReinders\nrelect\nrelesed\nrelTol\nremappings\nremediate\nRen\nRendon\nreneighboring\nReneighboring\nreneighborings\nRensselaer\nreparametrizing\nrepresentable\nrepuls\nrescale\nrescaled\nrescales\nrescaling\nRescaling\nrespa\nRESPA\nrespecified\nresponder\nresquared\nREsquared\nrestartfile\nrethrowing\nrewrap\nrezwanur\nrfac\nrfile\nrg\nRg\nRhaphson\nrheological\nrhodo\nRhodo\nrhodopsin\nrhosum\nRi\nRibiere\nrichard\nrigidID\nrigidify\nrij\nRij\nRIj\nRin\nRino\nRiRj\nRisi\nRix\nRiy\nrj\nRj\nRjk\nrjones\nrk\nrkf\nrmask\nRmask\nrmax\nRmax\nrmdir\nrmin\nRmin\nRMS\nrNEMD\nro\nRockett\nRonchetti\nRosati\nRossky\nrosybrown\nrotationally\nrotationsl\nroyalblue\nrozero\nRperp\nrRESPA\nRspace\nRubia\nRudd\nRudra\nRudranarayan\nRunge\nruntime\nRutuparna\nrx\nRyckaert\nRycroft\nRydbergs\nRz\nsaddlebrown\nSadigh\nsaed\nsafezone\nSafran\nSagui\nSalles\nsandia\nSandia\nsandybrown\nsc\nscalability\nscalable\nScalable\nscalexy\nscalexz\nscaleyz\nSchaik\nSchlitter\nSchmid\nSchoen\nSchulten\nSchunk\nSchwen\nscriping\nScripta\nsdk\nseagreen\nSecor\nsed\nsegmental\nsellerio\nSellerio\nsemiaxes\nsemimetals\nSemin\nSensable\nsetfl\nsetforce\nsetmask\nSetmask\nsetpoint\nsetvel\nsevereal\nsfftw\nSg\nShan\nshapex\nshapey\nshapez\nshapshot\nshardlow\nShardlow\nshawn\nShen\nShenderova\nShiga\nShinoda\nshockvel\nshoule\nsi\nSiC\nSiepmann\nSij\nSikandar\nSilbert\nSilling\nSimul\nsimulataneous\nsimulations\nSinnott\nsinusoid\nsinusoidally\nSiO\nSirk\nSival\nsizeI\nsizeJ\nsizex\nsjplimp\nsjtu\nskyblue\nslateblue\nslategray\nslater\nSlepoy\nsligthly\nSliozberg\nsllod\nsmallint\nSmallint\nsmd\nSMD\nsmi\nSmirichinski\nSmit\nsmtbq\nsna\nsnad\nsnapcoeff\nsnaphots\nsnapparam\nsnav\nSodani\nSoderlind\nsofted\nsolvated\nSorensen\nsoundspeed\nSouza\nsp\nspacings\nSpearot\nSpellmeyer\nsph\nSPH\nspheriods\nspparks\nSpringer\nspringgreen\nsqrt\nsrc\nsrd\nSrolovitz\nsrp\nsrun\nss\nssao\nstamoore\nstanford\nStarikov\nstartstep\nStartstep\nstatcoul\nstatcoulombs\nstatvolt\nstdin\nsteelblue\nStegailov\nSteinhardt\nSteinhauser\nStepaniants\nstepwise\nStesmans\nStillinger\nstk\nStockmayer\nStoddard\nstoichiometric\nstoichiometry\nStokesian\nStoll\nstopstep\nStouch\nStraatsma\nStratford\nStraub\nstrcmp\nstreitz\nStreitz\nStreiz\nstrided\nstrietz\nStukowski\nstylecomputes\nSu\nsubbox\nsubcutoff\nsubdirectory\nsubdomains\nsubinterval\nsubintervals\nSubramaniyan\nsubscripted\nsubscripting\nsubsteps\nsubstyle\nsubstyles\nsudo\nSukumaran\nsumsq\nSunderland\nsuperset\nsupersphere\nSupinski\nsurc\nsurfactants\nsw\nSwegat\nswiggle\nSwiler\nSwol\nSwope\nSx\nsy\nSy\nsymplectic\nSynechococcus\nsys\nsysdim\nsysmte\nSyst\nSz\nTabbernor\ntabinner\nTadmor\ntagint\nTait\ntaitwater\nTajkhorshid\ntanh\ntaskset\ntaubi\ntchain\nTchain\nTcom\ntcsh\ntdamp\nTdrude\nTechnolgy\nTelsa\ntempCorrCoeff\ntemplated\nTempleton\nters\ntersoff\nTersoff\ntesselation\ntesselations\nTetot\ntex\ntfmc\ntfMC\nth\nThakkar\nThakker\nthb\nthei\nTheor\nthermalization\nthermalize\nthermalized\nthermalizing\nthermo\nthermochemical\nthermochemistry\nthermodynamic\nthermodynamically\nThermophysical\nthermostate\nthermostated\nthermostates\nthermostating\nThermostating\nthermostatted\nthermostatting\nThermostatting\nThes\nThess\nThexe\nThijsse\nThirumalai\nthreebody\nthrid\nthylakoid\nTHz\nTij\nTildesley\ntimespan\ntimestamp\ntimestamps\ntimestep\ntimestepping\ntimesteps\nTiN\nTiO\nTirrell\nTiter\nTji\nTk\nTkin\ntloop\ntlsph\ntmax\nTmax\ntmd\nTmin\ntmp\ntN\nTobias\ntol\ntopologies\nTorder\ntorsions\nTosi\nToukmaji\nToxvaerd\ntpa\ntpc\ntptask\ntqx\ntqy\ntqz\ntradeoff\ntraj\ntransferability\ntranslational\ntrate\nTref\nTretyakov\ntri\ntriangleflag\ntriclinic\ntriflag\ntrigonal\ntrilinear\ntripflag\ntris\ntrj\ntrott\nTrott\nTrung\ntscale\nTschopp\nTsige\nTsrd\nTstart\ntstat\nTstop\nTsuzuki\nTt\nTThis\nttm\ntu\nTuckerman\ntue\nTurkand\nTutein\ntwobody\ntwojmax\nTx\ntxt\ntypeI\ntypeJ\ntypeN\nTz\nTzou\nub\nUberuaga\nuChem\nuCond\nUhlenbeck\nUi\nuk\nul\nuloop\nulsph\nuMech\numin\nUmin\nun\nunary\nunbonded\nuncomment\nuncompute\nunderprediction\nundump\nuniaxial\nuniaxially\nunimodal\nunitless\nUniversite\nunix\nunoptimized\nunpadded\nunphysical\nunphysically\nunscaled\nunsets\nunshifted\nunsmoothed\nunsolvated\nunsplit\nunstrained\nuntar\nuntilted\nupenn\nupto\nUrbana\nusec\nuserguide\nusr\nutil\nutils\nutsa\nUttormark\nuvm\nuwo\nvacf\nvalent\nValeriu\nvalgrind\nValone\nvaluev\nValuev\nvalus\nvaluse\nVarshalovich\nVarshney\nvashishta\nVashishta\nvcm\nVcm\nvdim\nvdisplace\nvec\nvectorial\nvectorization\nvectorized\nVectorized\nvel\nvelocites\nVerlag\nverlet\nVerlet\nves\nvhi\nvibrational\nVij\nVikas\nvirial\nVirial\nvirialmode\nvirials\nvirtualenv\nvirutal\nviscoelastic\nviscoelasticity\nviscosities\nviscously\nvizplotgui\nVj\nvlo\nvmax\nvmd\nVMDARCH\nVMDHOME\nvn\nVoigt\nvolfactor\nvolpress\nvolumetric\nvon\nVoro\nVorobyov\nvoronoi\nVoronoi\nVORONOI\nVorselaars\nVoth\nvpz\nvratio\nVries\nVstream\nvtarget\nvtk\nVTK\nvtp\nvtr\nvtu\nvv\nvx\nVx\nvxcm\nvy\nVy\nvycm\nvz\nVz\nvzcm\nvzi\nWaals\nWadley\nwallstyle\nwalltime\nwarmup\nwavefunction\nwavepacket\nwavepackets\nwavevector\nwB\nWbody\nWeckner\nWennberg\nWestview\nWhelan\nwhenthe\nwhitesmoke\nwhitespace\nWi\nWicaksono\nwih\nWirnsberger\nwirtes\nwitin\nwn\nWolde\nWorley\nWriggers\nWurtzite\nwww\nwx\nWx\nwy\nWy\nwz\nWz\nxa\nxAVX\nxb\nXc\nxcm\nXcm\nxCORE\nXeon\nxflag\nxhi\nxHost\nXiaowang\nxk\nxlat\nxlo\nxmax\nXmax\nxmgrace\nxMIC\nxmovie\nXmovie\nxmu\nXmu\nXP\nXPlor\nxrd\nxs\nxstk\nxsu\nxtc\nxu\nXu\nxy\nxyz\nxz\nxzhou\nYamada\nYbar\nybox\nYc\nycm\nYeh\nyellowgreen\nyflag\nyhi\nyi\nylat\nylo\nYoshida\nys\nysu\nyu\nYu\nyukawa\nYukawa\nyx\nyy\nyz\nZannoni\nzbl\nZBL\nZc\nzcm\nZepeda\nzflag\nZhang\nzhi\nZhou\nZhu\nzi\nZi\nziegenhain\nZiegenhain\nZj\nzlim\nzlo\nzN\nzs\nzsu\nzu\nzx\nzy\nZybin\nzz\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Section_howto.txt": "\"Previous Section\"_Section_accelerate.html - \"LAMMPS WWW Site\"_lws - \"LAMMPS Documentation\"_ld - \"LAMMPS Commands\"_lc - \"Next Section\"_Section_example.html :c\n\n:link(lws,http://lammps.sandia.gov)\n:link(ld,Manual.html)\n:link(lc,Section_commands.html#comm)\n\n:line\n\n6. How-to discussions :h2\n\nThis section describes how to perform common tasks using LAMMPS.\n\n6.1 \"Restarting a simulation\"_#howto_1\n6.2 \"2d simulations\"_#howto_2\n6.3 \"CHARMM, AMBER, and DREIDING force fields\"_#howto_3\n6.4 \"Running multiple simulations from one input script\"_#howto_4\n6.5 \"Multi-replica simulations\"_#howto_5\n6.6 \"Granular models\"_#howto_6\n6.7 \"TIP3P water model\"_#howto_7\n6.8 \"TIP4P water model\"_#howto_8\n6.9 \"SPC water model\"_#howto_9\n6.10 \"Coupling LAMMPS to other codes\"_#howto_10\n6.11 \"Visualizing LAMMPS snapshots\"_#howto_11\n6.12 \"Triclinic (non-orthogonal) simulation boxes\"_#howto_12\n6.13 \"NEMD simulations\"_#howto_13\n6.14 \"Finite-size spherical and aspherical particles\"_#howto_14\n6.15 \"Output from LAMMPS (thermo, dumps, computes, fixes, variables)\"_#howto_15\n6.16 \"Thermostatting, barostatting and computing temperature\"_#howto_16\n6.17 \"Walls\"_#howto_17\n6.18 \"Elastic constants\"_#howto_18\n6.19 \"Library interface to LAMMPS\"_#howto_19\n6.20 \"Calculating thermal conductivity\"_#howto_20\n6.21 \"Calculating viscosity\"_#howto_21\n6.22 \"Calculating a diffusion coefficient\"_#howto_22\n6.23 \"Using chunks to calculate system properties\"_#howto_23\n6.24 \"Setting parameters for the kspace_style pppm/disp command\"_#howto_24\n6.25 \"Polarizable models\"_#howto_25\n6.26 \"Adiabatic core/shell model\"_#howto_26\n6.27 \"Drude induced dipoles\"_#howto_27\n6.28 \"Magnetic spins\"_#howto_28 :all(b)\n\nThe example input scripts included in the LAMMPS distribution and\nhighlighted in \"Section 7\"_Section_example.html also show how to\nsetup and run various kinds of simulations.\n\n:line\n:line\n\n6.1 Restarting a simulation :link(howto_1),h4\n\nThere are 3 ways to continue a long LAMMPS simulation.  Multiple\n\"run\"_run.html commands can be used in the same input script.  Each\nrun will continue from where the previous run left off.  Or binary\nrestart files can be saved to disk using the \"restart\"_restart.html\ncommand.  At a later time, these binary files can be read via a\n\"read_restart\"_read_restart.html command in a new script.  Or they can\nbe converted to text data files using the \"-r command-line\nswitch\"_Section_start.html#start_6 and read by a\n\"read_data\"_read_data.html command in a new script.\n\nHere we give examples of 2 scripts that read either a binary restart\nfile or a converted data file and then issue a new run command to\ncontinue where the previous run left off.  They illustrate what\nsettings must be made in the new script.  Details are discussed in the\ndocumentation for the \"read_restart\"_read_restart.html and\n\"read_data\"_read_data.html commands.\n\nLook at the {in.chain} input script provided in the {bench} directory\nof the LAMMPS distribution to see the original script that these 2\nscripts are based on.  If that script had the line\n\nrestart         50 tmp.restart :pre\n\nadded to it, it would produce 2 binary restart files (tmp.restart.50\nand tmp.restart.100) as it ran.\n\nThis script could be used to read the 1st restart file and re-run the\nlast 50 timesteps:\n\nread_restart    tmp.restart.50 :pre\n\nneighbor        0.4 bin\nneigh_modify    every 1 delay 1 :pre\n\nfix             1 all nve\nfix             2 all langevin 1.0 1.0 10.0 904297 :pre\n\ntimestep        0.012 :pre\n\nrun             50 :pre\n\nNote that the following commands do not need to be repeated because\ntheir settings are included in the restart file: {units, atom_style,\nspecial_bonds, pair_style, bond_style}.  However these commands do\nneed to be used, since their settings are not in the restart file:\n{neighbor, fix, timestep}.\n\nIf you actually use this script to perform a restarted run, you will\nnotice that the thermodynamic data match at step 50 (if you also put a\n\"thermo 50\" command in the original script), but do not match at step\n100.  This is because the \"fix langevin\"_fix_langevin.html command\nuses random numbers in a way that does not allow for perfect restarts.\n\nAs an alternate approach, the restart file could be converted to a data\nfile as follows:\n\nlmp_g++ -r tmp.restart.50 tmp.restart.data :pre\n\nThen, this script could be used to re-run the last 50 steps:\n\nunits           lj\natom_style      bond\npair_style      lj/cut 1.12\npair_modify     shift yes\nbond_style      fene\nspecial_bonds   0.0 1.0 1.0 :pre\n\nread_data       tmp.restart.data :pre\n\nneighbor        0.4 bin\nneigh_modify    every 1 delay 1 :pre\n\nfix             1 all nve\nfix             2 all langevin 1.0 1.0 10.0 904297 :pre\n\ntimestep        0.012 :pre\n\nreset_timestep  50\nrun             50 :pre\n\nNote that nearly all the settings specified in the original {in.chain}\nscript must be repeated, except the {pair_coeff} and {bond_coeff}\ncommands since the new data file lists the force field coefficients.\nAlso, the \"reset_timestep\"_reset_timestep.html command is used to tell\nLAMMPS the current timestep.  This value is stored in restart files,\nbut not in data files.\n\n:line\n\n6.2 2d simulations :link(howto_2),h4\n\nUse the \"dimension\"_dimension.html command to specify a 2d simulation.\n\nMake the simulation box periodic in z via the \"boundary\"_boundary.html\ncommand.  This is the default.\n\nIf using the \"create box\"_create_box.html command to define a\nsimulation box, set the z dimensions narrow, but finite, so that the\ncreate_atoms command will tile the 3d simulation box with a single z\nplane of atoms - e.g.\n\n\"create box\"_create_box.html 1 -10 10 -10 10 -0.25 0.25 :pre\n\nIf using the \"read data\"_read_data.html command to read in a file of\natom coordinates, set the \"zlo zhi\" values to be finite but narrow,\nsimilar to the create_box command settings just described.  For each\natom in the file, assign a z coordinate so it falls inside the\nz-boundaries of the box - e.g. 0.0.\n\nUse the \"fix enforce2d\"_fix_enforce2d.html command as the last\ndefined fix to insure that the z-components of velocities and forces\nare zeroed out every timestep.  The reason to make it the last fix is\nso that any forces induced by other fixes will be zeroed out.\n\nMany of the example input scripts included in the LAMMPS distribution\nare for 2d models.\n\nNOTE: Some models in LAMMPS treat particles as finite-size spheres, as\nopposed to point particles.  See the \"atom_style\nsphere\"_atom_style.html and \"fix nve/sphere\"_fix_nve_sphere.html\ncommands for details.  By default, for 2d simulations, such particles\nwill still be modeled as 3d spheres, not 2d discs (circles), meaning\ntheir moment of inertia will be that of a sphere.  If you wish to\nmodel them as 2d discs, see the \"set density/disc\"_set.html command\nand the {disc} option for the \"fix nve/sphere\"_fix_nve_sphere.html,\n\"fix nvt/sphere\"_fix_nvt_sphere.html, \"fix\nnph/sphere\"_fix_nph_sphere.html, \"fix npt/sphere\"_fix_npt_sphere.html\ncommands.\n\n:line\n\n6.3 CHARMM, AMBER, and DREIDING force fields :link(howto_3),h4\n\nA force field has 2 parts: the formulas that define it and the\ncoefficients used for a particular system.  Here we only discuss\nformulas implemented in LAMMPS that correspond to formulas commonly\nused in the CHARMM, AMBER, and DREIDING force fields.  Setting\ncoefficients is done in the input data file via the\n\"read_data\"_read_data.html command or in the input script with\ncommands like \"pair_coeff\"_pair_coeff.html or\n\"bond_coeff\"_bond_coeff.html.  See \"Section 9\"_Section_tools.html\nfor additional tools that can use CHARMM or AMBER to assign force\nfield coefficients and convert their output into LAMMPS input.\n\nSee \"(MacKerell)\"_#howto-MacKerell for a description of the CHARMM force\nfield.  See \"(Cornell)\"_#howto-Cornell for a description of the AMBER force\nfield.\n\n:link(charmm,http://www.scripps.edu/brooks)\n:link(amber,http://amber.scripps.edu)\n\nThese style choices compute force field formulas that are consistent\nwith common options in CHARMM or AMBER.  See each command's\ndocumentation for the formula it computes.\n\n\"bond_style\"_bond_harmonic.html harmonic\n\"angle_style\"_angle_charmm.html charmm\n\"dihedral_style\"_dihedral_charmm.html charmmfsh\n\"dihedral_style\"_dihedral_charmm.html charmm\n\"pair_style\"_pair_charmm.html lj/charmmfsw/coul/charmmfsh\n\"pair_style\"_pair_charmm.html lj/charmmfsw/coul/long\n\"pair_style\"_pair_charmm.html lj/charmm/coul/charmm\n\"pair_style\"_pair_charmm.html lj/charmm/coul/charmm/implicit\n\"pair_style\"_pair_charmm.html lj/charmm/coul/long :ul\n\n\"special_bonds\"_special_bonds.html charmm\n\"special_bonds\"_special_bonds.html amber :ul\n\nNOTE: For CHARMM, newer {charmmfsw} or {charmmfsh} styles were\nreleased in March 2017.  We recommend they be used instead of the\nolder {charmm} styles.  See discussion of the differences on the \"pair\ncharmm\"_pair_charmm.html and \"dihedral charmm\"_dihedral_charmm.html\ndoc pages.\n\nDREIDING is a generic force field developed by the \"Goddard\ngroup\"_http://www.wag.caltech.edu at Caltech and is useful for\npredicting structures and dynamics of organic, biological and\nmain-group inorganic molecules. The philosophy in DREIDING is to use\ngeneral force constants and geometry parameters based on simple\nhybridization considerations, rather than individual force constants\nand geometric parameters that depend on the particular combinations of\natoms involved in the bond, angle, or torsion terms. DREIDING has an\n\"explicit hydrogen bond term\"_pair_hbond_dreiding.html to describe\ninteractions involving a hydrogen atom on very electronegative atoms\n(N, O, F).\n\nSee \"(Mayo)\"_#howto-Mayo for a description of the DREIDING force field\n\nThese style choices compute force field formulas that are consistent\nwith the DREIDING force field.  See each command's\ndocumentation for the formula it computes.\n\n\"bond_style\"_bond_harmonic.html harmonic\n\"bond_style\"_bond_morse.html morse :ul\n\n\"angle_style\"_angle_harmonic.html harmonic\n\"angle_style\"_angle_cosine.html cosine\n\"angle_style\"_angle_cosine_periodic.html cosine/periodic :ul\n\n\"dihedral_style\"_dihedral_charmm.html charmm\n\"improper_style\"_improper_umbrella.html umbrella :ul\n\n\"pair_style\"_pair_buck.html buck\n\"pair_style\"_pair_buck.html buck/coul/cut\n\"pair_style\"_pair_buck.html buck/coul/long\n\"pair_style\"_pair_lj.html lj/cut\n\"pair_style\"_pair_lj.html lj/cut/coul/cut\n\"pair_style\"_pair_lj.html lj/cut/coul/long :ul\n\n\"pair_style\"_pair_hbond_dreiding.html hbond/dreiding/lj\n\"pair_style\"_pair_hbond_dreiding.html hbond/dreiding/morse :ul\n\n\"special_bonds\"_special_bonds.html dreiding :ul\n\n:line\n\n6.4 Running multiple simulations from one input script :link(howto_4),h4\n\nThis can be done in several ways.  See the documentation for\nindividual commands for more details on how these examples work.\n\nIf \"multiple simulations\" means continue a previous simulation for\nmore timesteps, then you simply use the \"run\"_run.html command\nmultiple times.  For example, this script\n\nunits lj\natom_style atomic\nread_data data.lj\nrun 10000\nrun 10000\nrun 10000\nrun 10000\nrun 10000 :pre\n\nwould run 5 successive simulations of the same system for a total of\n50,000 timesteps.\n\nIf you wish to run totally different simulations, one after the other,\nthe \"clear\"_clear.html command can be used in between them to\nre-initialize LAMMPS.  For example, this script\n\nunits lj\natom_style atomic\nread_data data.lj\nrun 10000\nclear\nunits lj\natom_style atomic\nread_data data.lj.new\nrun 10000 :pre\n\nwould run 2 independent simulations, one after the other.\n\nFor large numbers of independent simulations, you can use\n\"variables\"_variable.html and the \"next\"_next.html and\n\"jump\"_jump.html commands to loop over the same input script\nmultiple times with different settings.  For example, this\nscript, named in.polymer\n\nvariable d index run1 run2 run3 run4 run5 run6 run7 run8\nshell cd $d\nread_data data.polymer\nrun 10000\nshell cd ..\nclear\nnext d\njump in.polymer :pre\n\nwould run 8 simulations in different directories, using a data.polymer\nfile in each directory.  The same concept could be used to run the\nsame system at 8 different temperatures, using a temperature variable\nand storing the output in different log and dump files, for example\n\nvariable a loop 8\nvariable t index 0.8 0.85 0.9 0.95 1.0 1.05 1.1 1.15\nlog log.$a\nread data.polymer\nvelocity all create $t 352839\nfix 1 all nvt $t $t 100.0\ndump 1 all atom 1000 dump.$a\nrun 100000\nclear\nnext t\nnext a\njump in.polymer :pre\n\nAll of the above examples work whether you are running on 1 or\nmultiple processors, but assumed you are running LAMMPS on a single\npartition of processors.  LAMMPS can be run on multiple partitions via\nthe \"-partition\" command-line switch as described in \"this\nsection\"_Section_start.html#start_6 of the manual.\n\nIn the last 2 examples, if LAMMPS were run on 3 partitions, the same\nscripts could be used if the \"index\" and \"loop\" variables were\nreplaced with {universe}-style variables, as described in the\n\"variable\"_variable.html command.  Also, the \"next t\" and \"next a\"\ncommands would need to be replaced with a single \"next a t\" command.\nWith these modifications, the 8 simulations of each script would run\non the 3 partitions one after the other until all were finished.\nInitially, 3 simulations would be started simultaneously, one on each\npartition.  When one finished, that partition would then start\nthe 4th simulation, and so forth, until all 8 were completed.\n\n:line\n\n6.5 Multi-replica simulations :link(howto_5),h4\n\nSeveral commands in LAMMPS run mutli-replica simulations, meaning\nthat multiple instances (replicas) of your simulation are run\nsimultaneously, with small amounts of data exchanged between replicas\nperiodically.\n\nThese are the relevant commands:\n\n\"neb\"_neb.html for nudged elastic band calculations\n\"prd\"_prd.html for parallel replica dynamics\n\"tad\"_tad.html for temperature accelerated dynamics\n\"temper\"_temper.html for parallel tempering\n\"fix pimd\"_fix_pimd.html for path-integral molecular dynamics (PIMD) :ul\n\nNEB is a method for finding transition states and barrier energies.\nPRD and TAD are methods for performing accelerated dynamics to find\nand perform infrequent events.  Parallel tempering or replica exchange\nruns different replicas at a series of temperature to facilitate\nrare-event sampling.\n\nThese commands can only be used if LAMMPS was built with the REPLICA\npackage.  See the \"Making LAMMPS\"_Section_start.html#start_3 section\nfor more info on packages.\n\nPIMD runs different replicas whose individual particles are coupled\ntogether by springs to model a system or ring-polymers.\n\nThis commands can only be used if LAMMPS was built with the USER-MISC\npackage.  See the \"Making LAMMPS\"_Section_start.html#start_3 section\nfor more info on packages.\n\nIn all these cases, you must run with one or more processors per\nreplica.  The processors assigned to each replica are determined at\nrun-time by using the \"-partition command-line\nswitch\"_Section_start.html#start_6 to launch LAMMPS on multiple\npartitions, which in this context are the same as replicas.  E.g.\nthese commands:\n\nmpirun -np 16 lmp_linux -partition 8x2 -in in.temper\nmpirun -np 8 lmp_linux -partition 8x1 -in in.neb :pre\n\nwould each run 8 replicas, on either 16 or 8 processors.  Note the use\nof the \"-in command-line switch\"_Section_start.html#start_6 to specify\nthe input script which is required when running in multi-replica mode.\n\nAlso note that with MPI installed on a machine (e.g. your desktop),\nyou can run on more (virtual) processors than you have physical\nprocessors.  Thus the above commands could be run on a\nsingle-processor (or few-processor) desktop so that you can run\na multi-replica simulation on more replicas than you have\nphysical processors.\n\n:line\n\n6.6 Granular models :link(howto_6),h4\n\nGranular system are composed of spherical particles with a diameter,\nas opposed to point particles.  This means they have an angular\nvelocity and torque can be imparted to them to cause them to rotate.\n\nTo run a simulation of a granular model, you will want to use\nthe following commands:\n\n\"atom_style sphere\"_atom_style.html\n\"fix nve/sphere\"_fix_nve_sphere.html\n\"fix gravity\"_fix_gravity.html :ul\n\nThis compute\n\n\"compute erotate/sphere\"_compute_erotate_sphere.html :ul\n\ncalculates rotational kinetic energy which can be \"output with\nthermodynamic info\"_Section_howto.html#howto_15.\n\nUse one of these 3 pair potentials, which compute forces and torques\nbetween interacting pairs of particles:\n\n\"pair_style\"_pair_style.html gran/history\n\"pair_style\"_pair_style.html gran/no_history\n\"pair_style\"_pair_style.html gran/hertzian :ul\n\nThese commands implement fix options specific to granular systems:\n\n\"fix freeze\"_fix_freeze.html\n\"fix pour\"_fix_pour.html\n\"fix viscous\"_fix_viscous.html\n\"fix wall/gran\"_fix_wall_gran.html :ul\n\nThe fix style {freeze} zeroes both the force and torque of frozen\natoms, and should be used for granular system instead of the fix style\n{setforce}.\n\nFor computational efficiency, you can eliminate needless pairwise\ncomputations between frozen atoms by using this command:\n\n\"neigh_modify\"_neigh_modify.html exclude :ul\n\nNOTE: By default, for 2d systems, granular particles are still modeled\nas 3d spheres, not 2d discs (circles), meaning their moment of inertia\nwill be the same as in 3d.  If you wish to model granular particles in\n2d as 2d discs, see the note on this topic in \"Section\n6.2\"_Section_howto.html#howto_2, where 2d simulations are discussed.\n\n:line\n\n6.7 TIP3P water model :link(howto_7),h4\n\nThe TIP3P water model as implemented in CHARMM\n\"(MacKerell)\"_#howto-MacKerell specifies a 3-site rigid water molecule with\ncharges and Lennard-Jones parameters assigned to each of the 3 atoms.\nIn LAMMPS the \"fix shake\"_fix_shake.html command can be used to hold\nthe two O-H bonds and the H-O-H angle rigid.  A bond style of\n{harmonic} and an angle style of {harmonic} or {charmm} should also be\nused.\n\nThese are the additional parameters (in real units) to set for O and H\natoms and the water molecule to run a rigid TIP3P-CHARMM model with a\ncutoff.  The K values can be used if a flexible TIP3P model (without\nfix shake) is desired.  If the LJ epsilon and sigma for HH and OH are\nset to 0.0, it corresponds to the original 1983 TIP3P model\n\"(Jorgensen)\"_#Jorgensen1.\n\nO mass = 15.9994\nH mass = 1.008\nO charge = -0.834\nH charge = 0.417\nLJ epsilon of OO = 0.1521\nLJ sigma of OO = 3.1507\nLJ epsilon of HH = 0.0460\nLJ sigma of HH = 0.4000\nLJ epsilon of OH = 0.0836\nLJ sigma of OH = 1.7753\nK of OH bond = 450\nr0 of OH bond = 0.9572\nK of HOH angle = 55\ntheta of HOH angle = 104.52 :all(b),p\n\nThese are the parameters to use for TIP3P with a long-range Coulombic\nsolver (e.g. Ewald or PPPM in LAMMPS), see \"(Price)\"_#Price1 for\ndetails:\n\nO mass = 15.9994\nH mass = 1.008\nO charge = -0.830\nH charge = 0.415\nLJ epsilon of OO = 0.102\nLJ sigma of OO = 3.188\nLJ epsilon, sigma of OH, HH = 0.0\nK of OH bond = 450\nr0 of OH bond = 0.9572\nK of HOH angle = 55\ntheta of HOH angle = 104.52 :all(b),p\n\nWikipedia also has a nice article on \"water\nmodels\"_http://en.wikipedia.org/wiki/Water_model.\n\n:line\n\n6.8 TIP4P water model :link(howto_8),h4\n\nThe four-point TIP4P rigid water model extends the traditional\nthree-point TIP3P model by adding an additional site, usually\nmassless, where the charge associated with the oxygen atom is placed.\nThis site M is located at a fixed distance away from the oxygen along\nthe bisector of the HOH bond angle.  A bond style of {harmonic} and an\nangle style of {harmonic} or {charmm} should also be used.\n\nA TIP4P model is run with LAMMPS using either this command\nfor a cutoff model:\n\n\"pair_style lj/cut/tip4p/cut\"_pair_lj.html\n\nor these two commands for a long-range model:\n\n\"pair_style lj/cut/tip4p/long\"_pair_lj.html\n\"kspace_style pppm/tip4p\"_kspace_style.html :ul\n\nFor both models, the bond lengths and bond angles should be held fixed\nusing the \"fix shake\"_fix_shake.html command.\n\nThese are the additional parameters (in real units) to set for O and H\natoms and the water molecule to run a rigid TIP4P model with a cutoff\n\"(Jorgensen)\"_#Jorgensen1.  Note that the OM distance is specified in\nthe \"pair_style\"_pair_style.html command, not as part of the pair\ncoefficients.\n\nO mass = 15.9994\nH mass = 1.008\nO charge = -1.040\nH charge = 0.520\nr0 of OH bond = 0.9572\ntheta of HOH angle = 104.52\nOM distance = 0.15\nLJ epsilon of O-O = 0.1550\nLJ sigma of O-O = 3.1536\nLJ epsilon, sigma of OH, HH = 0.0\nCoulombic cutoff = 8.5 :all(b),p\n\nFor the TIP4/Ice model (J Chem Phys, 122, 234511 (2005);\nhttp://dx.doi.org/10.1063/1.1931662) these values can be used:\n\nO mass = 15.9994\nH mass =  1.008\nO charge = -1.1794\nH charge =  0.5897\nr0 of OH bond = 0.9572\ntheta of HOH angle = 104.52\nOM distance = 0.1577\nLJ epsilon of O-O = 0.21084\nLJ sigma of O-O = 3.1668\nLJ epsilon, sigma of OH, HH = 0.0\nCoulombic cutoff = 8.5 :all(b),p\n\nFor the TIP4P/2005 model (J Chem Phys, 123, 234505 (2005);\nhttp://dx.doi.org/10.1063/1.2121687), these values can be used:\n\nO mass = 15.9994\nH mass =  1.008\nO charge = -1.1128\nH charge = 0.5564\nr0 of OH bond = 0.9572\ntheta of HOH angle = 104.52\nOM distance = 0.1546\nLJ epsilon of O-O = 0.1852\nLJ sigma of O-O = 3.1589\nLJ epsilon, sigma of OH, HH = 0.0\nCoulombic cutoff = 8.5 :all(b),p\n\nThese are the parameters to use for TIP4P with a long-range Coulombic\nsolver (e.g. Ewald or PPPM in LAMMPS):\n\nO mass = 15.9994\nH mass = 1.008\nO charge = -1.0484\nH charge = 0.5242\nr0 of OH bond = 0.9572\ntheta of HOH angle = 104.52\nOM distance = 0.1250\nLJ epsilon of O-O = 0.16275\nLJ sigma of O-O = 3.16435\nLJ epsilon, sigma of OH, HH = 0.0 :all(b),p\n\nNote that the when using the TIP4P pair style, the neighbor list\ncutoff for Coulomb interactions is effectively extended by a distance\n2 * (OM distance), to account for the offset distance of the\nfictitious charges on O atoms in water molecules.  Thus it is\ntypically best in an efficiency sense to use a LJ cutoff >= Coulomb\ncutoff + 2*(OM distance), to shrink the size of the neighbor list.\nThis leads to slightly larger cost for the long-range calculation, so\nyou can test the trade-off for your model.  The OM distance and the LJ\nand Coulombic cutoffs are set in the \"pair_style\nlj/cut/tip4p/long\"_pair_lj.html command.\n\nWikipedia also has a nice article on \"water\nmodels\"_http://en.wikipedia.org/wiki/Water_model.\n\n:line\n\n6.9 SPC water model :link(howto_9),h4\n\nThe SPC water model specifies a 3-site rigid water molecule with\ncharges and Lennard-Jones parameters assigned to each of the 3 atoms.\nIn LAMMPS the \"fix shake\"_fix_shake.html command can be used to hold\nthe two O-H bonds and the H-O-H angle rigid.  A bond style of\n{harmonic} and an angle style of {harmonic} or {charmm} should also be\nused.\n\nThese are the additional parameters (in real units) to set for O and H\natoms and the water molecule to run a rigid SPC model.\n\nO mass = 15.9994\nH mass = 1.008\nO charge = -0.820\nH charge = 0.410\nLJ epsilon of OO = 0.1553\nLJ sigma of OO = 3.166\nLJ epsilon, sigma of OH, HH = 0.0\nr0 of OH bond = 1.0\ntheta of HOH angle = 109.47 :all(b),p\n\nNote that as originally proposed, the SPC model was run with a 9\nAngstrom cutoff for both LJ and Coulommbic terms.  It can also be used\nwith long-range Coulombics (Ewald or PPPM in LAMMPS), without changing\nany of the parameters above, though it becomes a different model in\nthat mode of usage.\n\nThe SPC/E (extended) water model is the same, except\nthe partial charge assignments change:\n\nO charge = -0.8476\nH charge = 0.4238 :all(b),p\n\nSee the \"(Berendsen)\"_#howto-Berendsen reference for more details on both\nthe SPC and SPC/E models.\n\nWikipedia also has a nice article on \"water\nmodels\"_http://en.wikipedia.org/wiki/Water_model.\n\n:line\n\n6.10 Coupling LAMMPS to other codes :link(howto_10),h4\n\nLAMMPS is designed to allow it to be coupled to other codes.  For\nexample, a quantum mechanics code might compute forces on a subset of\natoms and pass those forces to LAMMPS.  Or a continuum finite element\n(FE) simulation might use atom positions as boundary conditions on FE\nnodal points, compute a FE solution, and return interpolated forces on\nMD atoms.\n\nLAMMPS can be coupled to other codes in at least 3 ways.  Each has\nadvantages and disadvantages, which you'll have to think about in the\ncontext of your application.\n\n(1) Define a new \"fix\"_fix.html command that calls the other code.  In\nthis scenario, LAMMPS is the driver code.  During its timestepping,\nthe fix is invoked, and can make library calls to the other code,\nwhich has been linked to LAMMPS as a library.  This is the way the\n\"POEMS\"_poems package that performs constrained rigid-body motion on\ngroups of atoms is hooked to LAMMPS.  See the\n\"fix poems\"_fix_poems.html command for more details.  See \"this\nsection\"_Section_modify.html of the documentation for info on how to add\na new fix to LAMMPS.\n\n:link(poems,http://www.rpi.edu/~anderk5/lab)\n\n(2) Define a new LAMMPS command that calls the other code.  This is\nconceptually similar to method (1), but in this case LAMMPS and the\nother code are on a more equal footing.  Note that now the other code\nis not called during the timestepping of a LAMMPS run, but between\nruns.  The LAMMPS input script can be used to alternate LAMMPS runs\nwith calls to the other code, invoked via the new command.  The\n\"run\"_run.html command facilitates this with its {every} option, which\nmakes it easy to run a few steps, invoke the command, run a few steps,\ninvoke the command, etc.\n\nIn this scenario, the other code can be called as a library, as in\n(1), or it could be a stand-alone code, invoked by a system() call\nmade by the command (assuming your parallel machine allows one or more\nprocessors to start up another program).  In the latter case the\nstand-alone code could communicate with LAMMPS thru files that the\ncommand writes and reads.\n\nSee \"Section 10\"_Section_modify.html of the documentation for how\nto add a new command to LAMMPS.\n\n(3) Use LAMMPS as a library called by another code.  In this case the\nother code is the driver and calls LAMMPS as needed.  Or a wrapper\ncode could link and call both LAMMPS and another code as libraries.\nAgain, the \"run\"_run.html command has options that allow it to be\ninvoked with minimal overhead (no setup or clean-up) if you wish to do\nmultiple short runs, driven by another program.\n\nExamples of driver codes that call LAMMPS as a library are included in\nthe examples/COUPLE directory of the LAMMPS distribution; see\nexamples/COUPLE/README for more details:\n\nsimple: simple driver programs in C++ and C which invoke LAMMPS as a\nlibrary :ulb,l\n\nlammps_quest: coupling of LAMMPS and \"Quest\"_quest, to run classical\nMD with quantum forces calculated by a density functional code :l\n\nlammps_spparks: coupling of LAMMPS and \"SPPARKS\"_spparks, to couple\na kinetic Monte Carlo model for grain growth using MD to calculate\nstrain induced across grain boundaries :l\n:ule\n\n:link(quest,http://dft.sandia.gov/Quest)\n:link(spparks,http://www.sandia.gov/~sjplimp/spparks.html)\n\n\"This section\"_Section_start.html#start_5 of the documentation\ndescribes how to build LAMMPS as a library.  Once this is done, you\ncan interface with LAMMPS either via C++, C, Fortran, or Python (or\nany other language that supports a vanilla C-like interface).  For\nexample, from C++ you could create one (or more) \"instances\" of\nLAMMPS, pass it an input script to process, or execute individual\ncommands, all by invoking the correct class methods in LAMMPS.  From C\nor Fortran you can make function calls to do the same things.  See\n\"Section 11\"_Section_python.html of the manual for a description\nof the Python wrapper provided with LAMMPS that operates through the\nLAMMPS library interface.\n\nThe files src/library.cpp and library.h contain the C-style interface\nto LAMMPS.  See \"Section 6.19\"_Section_howto.html#howto_19 of the\nmanual for a description of the interface and how to extend it for\nyour needs.\n\nNote that the lammps_open() function that creates an instance of\nLAMMPS takes an MPI communicator as an argument.  This means that\ninstance of LAMMPS will run on the set of processors in the\ncommunicator.  Thus the calling code can run LAMMPS on all or a subset\nof processors.  For example, a wrapper script might decide to\nalternate between LAMMPS and another code, allowing them both to run\non all the processors.  Or it might allocate half the processors to\nLAMMPS and half to the other code and run both codes simultaneously\nbefore syncing them up periodically.  Or it might instantiate multiple\ninstances of LAMMPS to perform different calculations.\n\n:line\n\n6.11 Visualizing LAMMPS snapshots :link(howto_11),h4\n\nLAMMPS itself does not do visualization, but snapshots from LAMMPS\nsimulations can be visualized (and analyzed) in a variety of ways.\n\nLAMMPS snapshots are created by the \"dump\"_dump.html command which can\ncreate files in several formats. The native LAMMPS dump format is a\ntext file (see \"dump atom\" or \"dump custom\") which can be visualized\nby several popular visualization tools. The \"dump image\"_dump_image.html\nand \"dump movie\"_dump_image.html styles can output internally rendered\nimages and convert a sequence of them to a movie during the MD run.\nSeveral programs included with LAMMPS as auxiliary tools can convert\nbetween LAMMPS format files and other formats.\nSee the \"Section 9\"_Section_tools.html doc page for details.\n\nA Python-based toolkit distributed by our group can read native LAMMPS\ndump files, including custom dump files with additional columns of\nuser-specified atom information, and convert them to various formats\nor pipe them into visualization software directly.  See the \"Pizza.py\nWWW site\"_pizza for details.  Specifically, Pizza.py can convert\nLAMMPS dump files into PDB, XYZ, \"Ensight\"_ensight, and VTK formats.\nPizza.py can pipe LAMMPS dump files directly into the Raster3d and\nRasMol visualization programs.  Pizza.py has tools that do interactive\n3d OpenGL visualization and one that creates SVG images of dump file\nsnapshots.\n\n:link(pizza,http://www.sandia.gov/~sjplimp/pizza.html)\n:link(ensight,http://www.ensight.com)\n:link(atomeye,http://mt.seas.upenn.edu/Archive/Graphics/A)\n\n:line\n\n6.12 Triclinic (non-orthogonal) simulation boxes :link(howto_12),h4\n\nBy default, LAMMPS uses an orthogonal simulation box to encompass the\nparticles.  The \"boundary\"_boundary.html command sets the boundary\nconditions of the box (periodic, non-periodic, etc).  The orthogonal\nbox has its \"origin\" at (xlo,ylo,zlo) and is defined by 3 edge vectors\nstarting from the origin given by [a] = (xhi-xlo,0,0); [b] =\n(0,yhi-ylo,0); [c] = (0,0,zhi-zlo).  The 6 parameters\n(xlo,xhi,ylo,yhi,zlo,zhi) are defined at the time the simulation box\nis created, e.g. by the \"create_box\"_create_box.html or\n\"read_data\"_read_data.html or \"read_restart\"_read_restart.html\ncommands.  Additionally, LAMMPS defines box size parameters lx,ly,lz\nwhere lx = xhi-xlo, and similarly in the y and z dimensions.  The 6\nparameters, as well as lx,ly,lz, can be output via the \"thermo_style\ncustom\"_thermo_style.html command.\n\nLAMMPS also allows simulations to be performed in triclinic\n(non-orthogonal) simulation boxes shaped as a parallelepiped with\ntriclinic symmetry.  The parallelepiped has its \"origin\" at\n(xlo,ylo,zlo) and is defined by 3 edge vectors starting from the\norigin given by [a] = (xhi-xlo,0,0); [b] = (xy,yhi-ylo,0); [c] =\n(xz,yz,zhi-zlo).  {xy,xz,yz} can be 0.0 or positive or negative values\nand are called \"tilt factors\" because they are the amount of\ndisplacement applied to faces of an originally orthogonal box to\ntransform it into the parallelepiped.  In LAMMPS the triclinic\nsimulation box edge vectors [a], [b], and [c] cannot be arbitrary\nvectors.  As indicated, [a] must lie on the positive x axis.  [b] must\nlie in the xy plane, with strictly positive y component. [c] may have\nany orientation with strictly positive z component.  The requirement\nthat [a], [b], and [c] have strictly positive x, y, and z components,\nrespectively, ensures that [a], [b], and [c] form a complete\nright-handed basis.  These restrictions impose no loss of generality,\nsince it is possible to rotate/invert any set of 3 crystal basis\nvectors so that they conform to the restrictions.\n\nFor example, assume that the 3 vectors [A],[B],[C] are the edge\nvectors of a general parallelepiped, where there is no restriction on\n[A],[B],[C] other than they form a complete right-handed basis i.e.\n[A] x [B] . [C] > 0.  The equivalent LAMMPS [a],[b],[c] are a linear\nrotation of [A], [B], and [C] and can be computed as follows:\n\n:c,image(Eqs/transform.jpg)\n\nwhere A = | [A] | indicates the scalar length of [A]. The hat symbol (^)\nindicates the corresponding unit vector. {beta} and {gamma} are angles\nbetween the vectors described below. Note that by construction,\n[a], [b], and [c] have strictly positive x, y, and z components, respectively.\nIf it should happen that\n[A], [B], and [C] form a left-handed basis, then the above equations\nare not valid for [c]. In this case, it is necessary\nto first apply an inversion. This can be achieved\nby interchanging two basis vectors or by changing the sign of one of them.\n\nFor consistency, the same rotation/inversion applied to the basis vectors\nmust also be applied to atom positions, velocities,\nand any other vector quantities.\nThis can be conveniently achieved by first converting to\nfractional coordinates in the\nold basis and then converting to distance coordinates in the new basis.\nThe transformation is given by the following equation:\n\n:c,image(Eqs/rotate.jpg)\n\nwhere {V} is the volume of the box, [X] is the original vector quantity and\n[x] is the vector in the LAMMPS basis.\n\nThere is no requirement that a triclinic box be periodic in any\ndimension, though it typically should be in at least the 2nd dimension\nof the tilt (y in xy) if you want to enforce a shift in periodic\nboundary conditions across that boundary.  Some commands that work\nwith triclinic boxes, e.g. the \"fix deform\"_fix_deform.html and \"fix\nnpt\"_fix_nh.html commands, require periodicity or non-shrink-wrap\nboundary conditions in specific dimensions.  See the command doc pages\nfor details.\n\nThe 9 parameters (xlo,xhi,ylo,yhi,zlo,zhi,xy,xz,yz) are defined at the\ntime the simulation box is created.  This happens in one of 3 ways.\nIf the \"create_box\"_create_box.html command is used with a region of\nstyle {prism}, then a triclinic box is setup.  See the\n\"region\"_region.html command for details.  If the\n\"read_data\"_read_data.html command is used to define the simulation\nbox, and the header of the data file contains a line with the \"xy xz\nyz\" keyword, then a triclinic box is setup.  See the\n\"read_data\"_read_data.html command for details.  Finally, if the\n\"read_restart\"_read_restart.html command reads a restart file which\nwas written from a simulation using a triclinic box, then a triclinic\nbox will be setup for the restarted simulation.\n\nNote that you can define a triclinic box with all 3 tilt factors =\n0.0, so that it is initially orthogonal.  This is necessary if the box\nwill become non-orthogonal, e.g. due to the \"fix npt\"_fix_nh.html or\n\"fix deform\"_fix_deform.html commands.  Alternatively, you can use the\n\"change_box\"_change_box.html command to convert a simulation box from\northogonal to triclinic and vice versa.\n\nAs with orthogonal boxes, LAMMPS defines triclinic box size parameters\nlx,ly,lz where lx = xhi-xlo, and similarly in the y and z dimensions.\nThe 9 parameters, as well as lx,ly,lz, can be output via the\n\"thermo_style custom\"_thermo_style.html command.\n\nTo avoid extremely tilted boxes (which would be computationally\ninefficient), LAMMPS normally requires that no tilt factor can skew\nthe box more than half the distance of the parallel box length, which\nis the 1st dimension in the tilt factor (x for xz).  This is required\nboth when the simulation box is created, e.g. via the\n\"create_box\"_create_box.html or \"read_data\"_read_data.html commands,\nas well as when the box shape changes dynamically during a simulation,\ne.g. via the \"fix deform\"_fix_deform.html or \"fix npt\"_fix_nh.html\ncommands.\n\nFor example, if xlo = 2 and xhi = 12, then the x box length is 10 and\nthe xy tilt factor must be between -5 and 5.  Similarly, both xz and\nyz must be between -(xhi-xlo)/2 and +(yhi-ylo)/2.  Note that this is\nnot a limitation, since if the maximum tilt factor is 5 (as in this\nexample), then configurations with tilt = ..., -15, -5, 5, 15, 25,\n... are geometrically all equivalent.  If the box tilt exceeds this\nlimit during a dynamics run (e.g. via the \"fix deform\"_fix_deform.html\ncommand), then the box is \"flipped\" to an equivalent shape with a tilt\nfactor within the bounds, so the run can continue.  See the \"fix\ndeform\"_fix_deform.html doc page for further details.\n\nOne exception to this rule is if the 1st dimension in the tilt\nfactor (x for xy) is non-periodic.  In that case, the limits on the\ntilt factor are not enforced, since flipping the box in that dimension\ndoes not change the atom positions due to non-periodicity.  In this\nmode, if you tilt the system to extreme angles, the simulation will\nsimply become inefficient, due to the highly skewed simulation box.\n\nThe limitation on not creating a simulation box with a tilt factor\nskewing the box more than half the distance of the parallel box length\ncan be overridden via the \"box\"_box.html command.  Setting the {tilt}\nkeyword to {large} allows any tilt factors to be specified.\n\nBox flips that may occur using the \"fix deform\"_fix_deform.html or\n\"fix npt\"_fix_nh.html commands can be turned off using the {flip no}\noption with either of the commands.\n\nNote that if a simulation box has a large tilt factor, LAMMPS will run\nless efficiently, due to the large volume of communication needed to\nacquire ghost atoms around a processor's irregular-shaped sub-domain.\nFor extreme values of tilt, LAMMPS may also lose atoms and generate an\nerror.\n\nTriclinic crystal structures are often defined using three lattice\nconstants {a}, {b}, and {c}, and three angles {alpha}, {beta} and\n{gamma}. Note that in this nomenclature, the a, b, and c lattice\nconstants are the scalar lengths of the edge vectors [a], [b], and [c]\ndefined above.  The relationship between these 6 quantities\n(a,b,c,alpha,beta,gamma) and the LAMMPS box sizes (lx,ly,lz) =\n(xhi-xlo,yhi-ylo,zhi-zlo) and tilt factors (xy,xz,yz) is as follows:\n\n:c,image(Eqs/box.jpg)\n\nThe inverse relationship can be written as follows:\n\n:c,image(Eqs/box_inverse.jpg)\n\nThe values of {a}, {b}, {c} , {alpha}, {beta} , and {gamma} can be printed\nout or accessed by computes using the\n\"thermo_style custom\"_thermo_style.html keywords\n{cella}, {cellb}, {cellc}, {cellalpha}, {cellbeta}, {cellgamma},\nrespectively.\n\nAs discussed on the \"dump\"_dump.html command doc page, when the BOX\nBOUNDS for a snapshot is written to a dump file for a triclinic box,\nan orthogonal bounding box which encloses the triclinic simulation box\nis output, along with the 3 tilt factors (xy, xz, yz) of the triclinic\nbox, formatted as follows:\n\nITEM: BOX BOUNDS xy xz yz\nxlo_bound xhi_bound xy\nylo_bound yhi_bound xz\nzlo_bound zhi_bound yz :pre\n\nThis bounding box is convenient for many visualization programs and is\ncalculated from the 9 triclinic box parameters\n(xlo,xhi,ylo,yhi,zlo,zhi,xy,xz,yz) as follows:\n\nxlo_bound = xlo + MIN(0.0,xy,xz,xy+xz)\nxhi_bound = xhi + MAX(0.0,xy,xz,xy+xz)\nylo_bound = ylo + MIN(0.0,yz)\nyhi_bound = yhi + MAX(0.0,yz)\nzlo_bound = zlo\nzhi_bound = zhi :pre\n\nThese formulas can be inverted if you need to convert the bounding box\nback into the triclinic box parameters, e.g. xlo = xlo_bound -\nMIN(0.0,xy,xz,xy+xz).\n\nOne use of triclinic simulation boxes is to model solid-state crystals\nwith triclinic symmetry.  The \"lattice\"_lattice.html command can be\nused with non-orthogonal basis vectors to define a lattice that will\ntile a triclinic simulation box via the\n\"create_atoms\"_create_atoms.html command.\n\nA second use is to run Parinello-Rahman dynamics via the \"fix\nnpt\"_fix_nh.html command, which will adjust the xy, xz, yz tilt\nfactors to compensate for off-diagonal components of the pressure\ntensor.  The analog for an \"energy minimization\"_minimize.html is\nthe \"fix box/relax\"_fix_box_relax.html command.\n\nA third use is to shear a bulk solid to study the response of the\nmaterial.  The \"fix deform\"_fix_deform.html command can be used for\nthis purpose.  It allows dynamic control of the xy, xz, yz tilt\nfactors as a simulation runs.  This is discussed in the next section\non non-equilibrium MD (NEMD) simulations.\n\n:line\n\n6.13 NEMD simulations :link(howto_13),h4\n\nNon-equilibrium molecular dynamics or NEMD simulations are typically\nused to measure a fluid's rheological properties such as viscosity.\nIn LAMMPS, such simulations can be performed by first setting up a\nnon-orthogonal simulation box (see the preceding Howto section).\n\nA shear strain can be applied to the simulation box at a desired\nstrain rate by using the \"fix deform\"_fix_deform.html command.  The\n\"fix nvt/sllod\"_fix_nvt_sllod.html command can be used to thermostat\nthe sheared fluid and integrate the SLLOD equations of motion for the\nsystem.  Fix nvt/sllod uses \"compute\ntemp/deform\"_compute_temp_deform.html to compute a thermal temperature\nby subtracting out the streaming velocity of the shearing atoms.  The\nvelocity profile or other properties of the fluid can be monitored via\nthe \"fix ave/chunk\"_fix_ave_chunk.html command.\n\nAs discussed in the previous section on non-orthogonal simulation\nboxes, the amount of tilt or skew that can be applied is limited by\nLAMMPS for computational efficiency to be 1/2 of the parallel box\nlength.  However, \"fix deform\"_fix_deform.html can continuously strain\na box by an arbitrary amount.  As discussed in the \"fix\ndeform\"_fix_deform.html command, when the tilt value reaches a limit,\nthe box is flipped to the opposite limit which is an equivalent tiling\nof periodic space.  The strain rate can then continue to change as\nbefore.  In a long NEMD simulation these box re-shaping events may\noccur many times.\n\nIn a NEMD simulation, the \"remap\" option of \"fix\ndeform\"_fix_deform.html should be set to \"remap v\", since that is what\n\"fix nvt/sllod\"_fix_nvt_sllod.html assumes to generate a velocity\nprofile consistent with the applied shear strain rate.\n\nAn alternative method for calculating viscosities is provided via the\n\"fix viscosity\"_fix_viscosity.html command.\n\nNEMD simulations can also be used to measure transport properties of a fluid\nthrough a pore or channel. Simulations of steady-state flow can be performed\nusing the \"fix flow/gauss\"_fix_flow_gauss.html command.\n\n:line\n\n6.14 Finite-size spherical and aspherical particles :link(howto_14),h4\n\nTypical MD models treat atoms or particles as point masses.  Sometimes\nit is desirable to have a model with finite-size particles such as\nspheroids or ellipsoids or generalized aspherical bodies.  The\ndifference is that such particles have a moment of inertia, rotational\nenergy, and angular momentum.  Rotation is induced by torque coming\nfrom interactions with other particles.\n\nLAMMPS has several options for running simulations with these kinds of\nparticles.  The following aspects are discussed in turn:\n\natom styles\npair potentials\ntime integration\ncomputes, thermodynamics, and dump output\nrigid bodies composed of finite-size particles :ul\n\nExample input scripts for these kinds of models are in the body,\ncolloid, dipole, ellipse, line, peri, pour, and tri directories of the\n\"examples directory\"_Section_example.html in the LAMMPS distribution.\n\nAtom styles :h4\n\nThere are several \"atom styles\"_atom_style.html that allow for\ndefinition of finite-size particles: sphere, dipole, ellipsoid, line,\ntri, peri, and body.\n\nThe sphere style defines particles that are spheriods and each\nparticle can have a unique diameter and mass (or density).  These\nparticles store an angular velocity (omega) and can be acted upon by\ntorque.  The \"set\" command can be used to modify the diameter and mass\nof individual particles, after then are created.\n\nThe dipole style does not actually define finite-size particles, but\nis often used in conjunction with spherical particles, via a command\nlike\n\natom_style hybrid sphere dipole :pre\n\nThis is because when dipoles interact with each other, they induce\ntorques, and a particle must be finite-size (i.e. have a moment of\ninertia) in order to respond and rotate.  See the \"atom_style\ndipole\"_atom_style.html command for details.  The \"set\" command can be\nused to modify the orientation and length of the dipole moment of\nindividual particles, after then are created.\n\nThe ellipsoid style defines particles that are ellipsoids and thus can\nbe aspherical.  Each particle has a shape, specified by 3 diameters,\nand mass (or density).  These particles store an angular momentum and\ntheir orientation (quaternion), and can be acted upon by torque.  They\ndo not store an angular velocity (omega), which can be in a different\ndirection than angular momentum, rather they compute it as needed.\nThe \"set\" command can be used to modify the diameter, orientation, and\nmass of individual particles, after then are created.  It also has a\nbrief explanation of what quaternions are.\n\nThe line style defines line segment particles with two end points and\na mass (or density).  They can be used in 2d simulations, and they can\nbe joined together to form rigid bodies which represent arbitrary\npolygons.\n\nThe tri style defines triangular particles with three corner points\nand a mass (or density).  They can be used in 3d simulations, and they\ncan be joined together to form rigid bodies which represent arbitrary\nparticles with a triangulated surface.\n\nThe peri style is used with \"Peridynamic models\"_pair_peri.html and\ndefines particles as having a volume, that is used internally in the\n\"pair_style peri\"_pair_peri.html potentials.\n\nThe body style allows for definition of particles which can represent\ncomplex entities, such as surface meshes of discrete points,\ncollections of sub-particles, deformable objects, etc.  The body style\nis discussed in more detail on the \"body\"_body.html doc page.\n\nNote that if one of these atom styles is used (or multiple styles via\nthe \"atom_style hybrid\"_atom_style.html command), not all particles in\nthe system are required to be finite-size or aspherical.\n\nFor example, in the ellipsoid style, if the 3 shape parameters are set\nto the same value, the particle will be a sphere rather than an\nellipsoid.  If the 3 shape parameters are all set to 0.0 or if the\ndiameter is set to 0.0, it will be a point particle.  In the line or\ntri style, if the lineflag or triflag is specified as 0, then it\nwill be a point particle.\n\nSome of the pair styles used to compute pairwise interactions between\nfinite-size particles also compute the correct interaction with point\nparticles as well, e.g. the interaction between a point particle and a\nfinite-size particle or between two point particles.  If necessary,\n\"pair_style hybrid\"_pair_hybrid.html can be used to insure the correct\ninteractions are computed for the appropriate style of interactions.\nLikewise, using groups to partition particles (ellipsoids versus\nspheres versus point particles) will allow you to use the appropriate\ntime integrators and temperature computations for each class of\nparticles.  See the doc pages for various commands for details.\n\nAlso note that for \"2d simulations\"_dimension.html, atom styles sphere\nand ellipsoid still use 3d particles, rather than as circular disks or\nellipses.  This means they have the same moment of inertia as the 3d\nobject.  When temperature is computed, the correct degrees of freedom\nare used for rotation in a 2d versus 3d system.\n\nPair potentials :h4\n\nWhen a system with finite-size particles is defined, the particles\nwill only rotate and experience torque if the force field computes\nsuch interactions.  These are the various \"pair\nstyles\"_pair_style.html that generate torque:\n\n\"pair_style gran/history\"_pair_gran.html\n\"pair_style gran/hertzian\"_pair_gran.html\n\"pair_style gran/no_history\"_pair_gran.html\n\"pair_style dipole/cut\"_pair_dipole.html\n\"pair_style gayberne\"_pair_gayberne.html\n\"pair_style resquared\"_pair_resquared.html\n\"pair_style brownian\"_pair_brownian.html\n\"pair_style lubricate\"_pair_lubricate.html\n\"pair_style line/lj\"_pair_line_lj.html\n\"pair_style tri/lj\"_pair_tri_lj.html\n\"pair_style body\"_pair_body.html :ul\n\nThe granular pair styles are used with spherical particles.  The\ndipole pair style is used with the dipole atom style, which could be\napplied to spherical or ellipsoidal particles.  The GayBerne and\nREsquared potentials require ellipsoidal particles, though they will\nalso work if the 3 shape parameters are the same (a sphere).  The\nBrownian and lubrication potentials are used with spherical particles.\nThe line, tri, and body potentials are used with line segment,\ntriangular, and body particles respectively.\n\nTime integration :h4\n\nThere are several fixes that perform time integration on finite-size\nspherical particles, meaning the integrators update the rotational\norientation and angular velocity or angular momentum of the particles:\n\n\"fix nve/sphere\"_fix_nve_sphere.html\n\"fix nvt/sphere\"_fix_nvt_sphere.html\n\"fix npt/sphere\"_fix_npt_sphere.html :ul\n\nLikewise, there are 3 fixes that perform time integration on\nellipsoidal particles:\n\n\"fix nve/asphere\"_fix_nve_asphere.html\n\"fix nvt/asphere\"_fix_nvt_asphere.html\n\"fix npt/asphere\"_fix_npt_asphere.html :ul\n\nThe advantage of these fixes is that those which thermostat the\nparticles include the rotational degrees of freedom in the temperature\ncalculation and thermostatting.  The \"fix langevin\"_fix_langevin\ncommand can also be used with its {omgea} or {angmom} options to\nthermostat the rotational degrees of freedom for spherical or\nellipsoidal particles.  Other thermostatting fixes only operate on the\ntranslational kinetic energy of finite-size particles.\n\nThese fixes perform constant NVE time integration on line segment,\ntriangular, and body particles:\n\n\"fix nve/line\"_fix_nve_line.html\n\"fix nve/tri\"_fix_nve_tri.html\n\"fix nve/body\"_fix_nve_body.html :ul\n\nNote that for mixtures of point and finite-size particles, these\nintegration fixes can only be used with \"groups\"_group.html which\ncontain finite-size particles.\n\nComputes, thermodynamics, and dump output :h4\n\nThere are several computes that calculate the temperature or\nrotational energy of spherical or ellipsoidal particles:\n\n\"compute temp/sphere\"_compute_temp_sphere.html\n\"compute temp/asphere\"_compute_temp_asphere.html\n\"compute erotate/sphere\"_compute_erotate_sphere.html\n\"compute erotate/asphere\"_compute_erotate_asphere.html :ul\n\nThese include rotational degrees of freedom in their computation.  If\nyou wish the thermodynamic output of temperature or pressure to use\none of these computes (e.g. for a system entirely composed of\nfinite-size particles), then the compute can be defined and the\n\"thermo_modify\"_thermo_modify.html command used.  Note that by default\nthermodynamic quantities will be calculated with a temperature that\nonly includes translational degrees of freedom.  See the\n\"thermo_style\"_thermo_style.html command for details.\n\nThese commands can be used to output various attributes of finite-size\nparticles:\n\n\"dump custom\"_dump.html\n\"compute property/atom\"_compute_property_atom.html\n\"dump local\"_dump.html\n\"compute body/local\"_compute_body_local.html :ul\n\nAttributes include the dipole moment, the angular velocity, the\nangular momentum, the quaternion, the torque, the end-point and\ncorner-point coordinates (for line and tri particles), and\nsub-particle attributes of body particles.\n\nRigid bodies composed of finite-size particles :h4\n\nThe \"fix rigid\"_fix_rigid.html command treats a collection of\nparticles as a rigid body, computes its inertia tensor, sums the total\nforce and torque on the rigid body each timestep due to forces on its\nconstituent particles, and integrates the motion of the rigid body.\n\nIf any of the constituent particles of a rigid body are finite-size\nparticles (spheres or ellipsoids or line segments or triangles), then\ntheir contribution to the inertia tensor of the body is different than\nif they were point particles.  This means the rotational dynamics of\nthe rigid body will be different.  Thus a model of a dimer is\ndifferent if the dimer consists of two point masses versus two\nspheroids, even if the two particles have the same mass.  Finite-size\nparticles that experience torque due to their interaction with other\nparticles will also impart that torque to a rigid body they are part\nof.\n\nSee the \"fix rigid\" command for example of complex rigid-body models\nit is possible to define in LAMMPS.\n\nNote that the \"fix shake\"_fix_shake.html command can also be used to\ntreat 2, 3, or 4 particles as a rigid body, but it always assumes the\nparticles are point masses.\n\nAlso note that body particles cannot be modeled with the \"fix\nrigid\"_fix_rigid.html command.  Body particles are treated by LAMMPS\nas single particles, though they can store internal state, such as a\nlist of sub-particles.  Individual body partices are typically treated\nas rigid bodies, and their motion integrated with a command like \"fix\nnve/body\"_fix_nve_body.html.  Interactions between pairs of body\nparticles are computed via a command like \"pair_style\nbody\"_pair_body.html.\n\n:line\n\n6.15 Output from LAMMPS (thermo, dumps, computes, fixes, variables) :link(howto_15),h4\n\nThere are four basic kinds of LAMMPS output:\n\n\"Thermodynamic output\"_thermo_style.html, which is a list\nof quantities printed every few timesteps to the screen and logfile. :ulb,l\n\n\"Dump files\"_dump.html, which contain snapshots of atoms and various\nper-atom values and are written at a specified frequency. :l\n\nCertain fixes can output user-specified quantities to files: \"fix\nave/time\"_fix_ave_time.html for time averaging, \"fix\nave/chunk\"_fix_ave_chunk.html for spatial or other averaging, and \"fix\nprint\"_fix_print.html for single-line output of\n\"variables\"_variable.html.  Fix print can also output to the\nscreen. :l\n\n\"Restart files\"_restart.html. :l\n:ule\n\nA simulation prints one set of thermodynamic output and (optionally)\nrestart files.  It can generate any number of dump files and fix\noutput files, depending on what \"dump\"_dump.html and \"fix\"_fix.html\ncommands you specify.\n\nAs discussed below, LAMMPS gives you a variety of ways to determine\nwhat quantities are computed and printed when the thermodynamics,\ndump, or fix commands listed above perform output.  Throughout this\ndiscussion, note that users can also \"add their own computes and fixes\nto LAMMPS\"_Section_modify.html which can then generate values that can\nthen be output with these commands.\n\nThe following sub-sections discuss different LAMMPS command related\nto output and the kind of data they operate on and produce:\n\n\"Global/per-atom/local data\"_#global\n\"Scalar/vector/array data\"_#scalar\n\"Thermodynamic output\"_#thermo\n\"Dump file output\"_#dump\n\"Fixes that write output files\"_#fixoutput\n\"Computes that process output quantities\"_#computeoutput\n\"Fixes that process output quantities\"_#fixprocoutput\n\"Computes that generate values to output\"_#compute\n\"Fixes that generate values to output\"_#fix\n\"Variables that generate values to output\"_#variable\n\"Summary table of output options and data flow between commands\"_#table :ul\n\nGlobal/per-atom/local data :h4,link(global)\n\nVarious output-related commands work with three different styles of\ndata: global, per-atom, or local.  A global datum is one or more\nsystem-wide values, e.g. the temperature of the system.  A per-atom\ndatum is one or more values per atom, e.g. the kinetic energy of each\natom.  Local datums are calculated by each processor based on the\natoms it owns, but there may be zero or more per atom, e.g. a list of\nbond distances.\n\nScalar/vector/array data :h4,link(scalar)\n\nGlobal, per-atom, and local datums can each come in three kinds: a\nsingle scalar value, a vector of values, or a 2d array of values.  The\ndoc page for a \"compute\" or \"fix\" or \"variable\" that generates data\nwill specify both the style and kind of data it produces, e.g. a\nper-atom vector.\n\nWhen a quantity is accessed, as in many of the output commands\ndiscussed below, it can be referenced via the following bracket\nnotation, where ID in this case is the ID of a compute.  The leading\n\"c_\" would be replaced by \"f_\" for a fix, or \"v_\" for a variable:\n\nc_ID | entire scalar, vector, or array\nc_ID\\[I\\] | one element of vector, one column of array\nc_ID\\[I\\]\\[J\\] | one element of array :tb(s=|)\n\nIn other words, using one bracket reduces the dimension of the data\nonce (vector -> scalar, array -> vector).  Using two brackets reduces\nthe dimension twice (array -> scalar).  Thus a command that uses\nscalar values as input can typically also process elements of a vector\nor array.\n\nThermodynamic output :h4,link(thermo)\n\nThe frequency and format of thermodynamic output is set by the\n\"thermo\"_thermo.html, \"thermo_style\"_thermo_style.html, and\n\"thermo_modify\"_thermo_modify.html commands.  The\n\"thermo_style\"_thermo_style.html command also specifies what values\nare calculated and written out.  Pre-defined keywords can be specified\n(e.g. press, etotal, etc).  Three additional kinds of keywords can\nalso be specified (c_ID, f_ID, v_name), where a \"compute\"_compute.html\nor \"fix\"_fix.html or \"variable\"_variable.html provides the value to be\noutput.  In each case, the compute, fix, or variable must generate\nglobal values for input to the \"thermo_style custom\"_dump.html\ncommand.\n\nNote that thermodynamic output values can be \"extensive\" or\n\"intensive\".  The former scale with the number of atoms in the system\n(e.g. total energy), the latter do not (e.g. temperature).  The\nsetting for \"thermo_modify norm\"_thermo_modify.html determines whether\nextensive quantities are normalized or not.  Computes and fixes\nproduce either extensive or intensive values; see their individual doc\npages for details.  \"Equal-style variables\"_variable.html produce only\nintensive values; you can include a division by \"natoms\" in the\nformula if desired, to make an extensive calculation produce an\nintensive result.\n\nDump file output :h4,link(dump)\n\nDump file output is specified by the \"dump\"_dump.html and\n\"dump_modify\"_dump_modify.html commands.  There are several\npre-defined formats (dump atom, dump xtc, etc).\n\nThere is also a \"dump custom\"_dump.html format where the user\nspecifies what values are output with each atom.  Pre-defined atom\nattributes can be specified (id, x, fx, etc).  Three additional kinds\nof keywords can also be specified (c_ID, f_ID, v_name), where a\n\"compute\"_compute.html or \"fix\"_fix.html or \"variable\"_variable.html\nprovides the values to be output.  In each case, the compute, fix, or\nvariable must generate per-atom values for input to the \"dump\ncustom\"_dump.html command.\n\nThere is also a \"dump local\"_dump.html format where the user specifies\nwhat local values to output.  A pre-defined index keyword can be\nspecified to enumerate the local values.  Two additional kinds of\nkeywords can also be specified (c_ID, f_ID), where a\n\"compute\"_compute.html or \"fix\"_fix.html or \"variable\"_variable.html\nprovides the values to be output.  In each case, the compute or fix\nmust generate local values for input to the \"dump local\"_dump.html\ncommand.\n\nFixes that write output files :h4,link(fixoutput)\n\nSeveral fixes take various quantities as input and can write output\nfiles: \"fix ave/time\"_fix_ave_time.html, \"fix\nave/chunk\"_fix_ave_chunk.html, \"fix ave/histo\"_fix_ave_histo.html,\n\"fix ave/correlate\"_fix_ave_correlate.html, and \"fix\nprint\"_fix_print.html.\n\nThe \"fix ave/time\"_fix_ave_time.html command enables direct output to\na file and/or time-averaging of global scalars or vectors.  The user\nspecifies one or more quantities as input.  These can be global\n\"compute\"_compute.html values, global \"fix\"_fix.html values, or\n\"variables\"_variable.html of any style except the atom style which\nproduces per-atom values.  Since a variable can refer to keywords used\nby the \"thermo_style custom\"_thermo_style.html command (like temp or\npress) and individual per-atom values, a wide variety of quantities\ncan be time averaged and/or output in this way.  If the inputs are one\nor more scalar values, then the fix generate a global scalar or vector\nof output.  If the inputs are one or more vector values, then the fix\ngenerates a global vector or array of output.  The time-averaged\noutput of this fix can also be used as input to other output commands.\n\nThe \"fix ave/chunk\"_fix_ave_chunk.html command enables direct output\nto a file of chunk-averaged per-atom quantities like those output in\ndump files.  Chunks can represent spatial bins or other collections of\natoms, e.g. individual molecules.  The per-atom quantities can be atom\ndensity (mass or number) or atom attributes such as position,\nvelocity, force.  They can also be per-atom quantities calculated by a\n\"compute\"_compute.html, by a \"fix\"_fix.html, or by an atom-style\n\"variable\"_variable.html.  The chunk-averaged output of this fix can\nalso be used as input to other output commands.\n\nThe \"fix ave/histo\"_fix_ave_histo.html command enables direct output\nto a file of histogrammed quantities, which can be global or per-atom\nor local quantities.  The histogram output of this fix can also be\nused as input to other output commands.\n\nThe \"fix ave/correlate\"_fix_ave_correlate.html command enables direct\noutput to a file of time-correlated quantities, which can be global\nvalues.  The correlation matrix output of this fix can also be used as\ninput to other output commands.\n\nThe \"fix print\"_fix_print.html command can generate a line of output\nwritten to the screen and log file or to a separate file, periodically\nduring a running simulation.  The line can contain one or more\n\"variable\"_variable.html values for any style variable except the\nvector or atom styles).  As explained above, variables themselves can\ncontain references to global values generated by \"thermodynamic\nkeywords\"_thermo_style.html, \"computes\"_compute.html,\n\"fixes\"_fix.html, or other \"variables\"_variable.html, or to per-atom\nvalues for a specific atom.  Thus the \"fix print\"_fix_print.html\ncommand is a means to output a wide variety of quantities separate\nfrom normal thermodynamic or dump file output.\n\nComputes that process output quantities :h4,link(computeoutput)\n\nThe \"compute reduce\"_compute_reduce.html and \"compute\nreduce/region\"_compute_reduce.html commands take one or more per-atom\nor local vector quantities as inputs and \"reduce\" them (sum, min, max,\nave) to scalar quantities.  These are produced as output values which\ncan be used as input to other output commands.\n\nThe \"compute slice\"_compute_slice.html command take one or more global\nvector or array quantities as inputs and extracts a subset of their\nvalues to create a new vector or array.  These are produced as output\nvalues which can be used as input to other output commands.\n\nThe \"compute property/atom\"_compute_property_atom.html command takes a\nlist of one or more pre-defined atom attributes (id, x, fx, etc) and\nstores the values in a per-atom vector or array.  These are produced\nas output values which can be used as input to other output commands.\nThe list of atom attributes is the same as for the \"dump\ncustom\"_dump.html command.\n\nThe \"compute property/local\"_compute_property_local.html command takes\na list of one or more pre-defined local attributes (bond info, angle\ninfo, etc) and stores the values in a local vector or array.  These\nare produced as output values which can be used as input to other\noutput commands.\n\nFixes that process output quantities :h4,link(fixprocoutput)\n\nThe \"fix vector\"_fix_vector.html command can create global vectors as\noutput from global scalars as input, accumulating them one element at\na time.\n\nThe \"fix ave/atom\"_fix_ave_atom.html command performs time-averaging\nof per-atom vectors.  The per-atom quantities can be atom attributes\nsuch as position, velocity, force.  They can also be per-atom\nquantities calculated by a \"compute\"_compute.html, by a\n\"fix\"_fix.html, or by an atom-style \"variable\"_variable.html.  The\ntime-averaged per-atom output of this fix can be used as input to\nother output commands.\n\nThe \"fix store/state\"_fix_store_state.html command can archive one or\nmore per-atom attributes at a particular time, so that the old values\ncan be used in a future calculation or output.  The list of atom\nattributes is the same as for the \"dump custom\"_dump.html command,\nincluding per-atom quantities calculated by a \"compute\"_compute.html,\nby a \"fix\"_fix.html, or by an atom-style \"variable\"_variable.html.\nThe output of this fix can be used as input to other output commands.\n\nComputes that generate values to output :h4,link(compute)\n\nEvery \"compute\"_compute.html in LAMMPS produces either global or\nper-atom or local values.  The values can be scalars or vectors or\narrays of data.  These values can be output using the other commands\ndescribed in this section.  The doc page for each compute command\ndescribes what it produces.  Computes that produce per-atom or local\nvalues have the word \"atom\" or \"local\" in their style name.  Computes\nwithout the word \"atom\" or \"local\" produce global values.\n\nFixes that generate values to output :h4,link(fix)\n\nSome \"fixes\"_fix.html in LAMMPS produces either global or per-atom or\nlocal values which can be accessed by other commands.  The values can\nbe scalars or vectors or arrays of data.  These values can be output\nusing the other commands described in this section.  The doc page for\neach fix command tells whether it produces any output quantities and\ndescribes them.\n\nVariables that generate values to output :h4,link(variable)\n\n\"Variables\"_variable.html defined in an input script can store one or\nmore strings.  But equal-style, vector-style, and atom-style or\natomfile-style variables generate a global scalar value, global vector\nor values, or a per-atom vector, respectively, when accessed.  The\nformulas used to define these variables can contain references to the\nthermodynamic keywords and to global and per-atom data generated by\ncomputes, fixes, and other variables.  The values generated by\nvariables can be used as input to and thus output by the other\ncommands described in this section.\n\nSummary table of output options and data flow between commands :h4,link(table)\n\nThis table summarizes the various commands that can be used for\ngenerating output from LAMMPS.  Each command produces output data of\nsome kind and/or writes data to a file.  Most of the commands can take\ndata from other commands as input.  Thus you can link many of these\ncommands together in pipeline form, where data produced by one command\nis used as input to another command and eventually written to the\nscreen or to a file.  Note that to hook two commands together the\noutput and input data types must match, e.g. global/per-atom/local\ndata and scalar/vector/array data.\n\nAlso note that, as described above, when a command takes a scalar as\ninput, that could be an element of a vector or array.  Likewise a\nvector input could be a column of an array.\n\nCommand: Input: Output:\n\"thermo_style custom\"_thermo_style.html: global scalars: screen, log file:\n\"dump custom\"_dump.html: per-atom vectors: dump file:\n\"dump local\"_dump.html: local vectors: dump file:\n\"fix print\"_fix_print.html: global scalar from variable: screen, file:\n\"print\"_print.html: global scalar from variable: screen:\n\"computes\"_compute.html: N/A: global/per-atom/local scalar/vector/array:\n\"fixes\"_fix.html: N/A: global/per-atom/local scalar/vector/array:\n\"variables\"_variable.html: global scalars and vectors, per-atom vectors: global scalar and vector, per-atom vector:\n\"compute reduce\"_compute_reduce.html: per-atom/local vectors: global scalar/vector:\n\"compute slice\"_compute_slice.html: global vectors/arrays: global vector/array:\n\"compute property/atom\"_compute_property_atom.html: per-atom vectors: per-atom vector/array:\n\"compute property/local\"_compute_property_local.html: local vectors: local vector/array:\n\"fix vector\"_fix_vector.html: global scalars: global vector:\n\"fix ave/atom\"_fix_ave_atom.html: per-atom vectors: per-atom vector/array:\n\"fix ave/time\"_fix_ave_time.html: global scalars/vectors: global scalar/vector/array, file:\n\"fix ave/chunk\"_fix_ave_chunk.html: per-atom vectors: global array, file:\n\"fix ave/histo\"_fix_ave_histo.html: global/per-atom/local scalars and vectors: global array, file:\n\"fix ave/correlate\"_fix_ave_correlate.html: global scalars: global array, file:\n\"fix store/state\"_fix_store_state.html: per-atom vectors: per-atom vector/array :tb(c=3,s=:)\n\n:line\n\n6.16 Thermostatting, barostatting, and computing temperature :link(howto_16),h4\n\nThermostatting means controlling the temperature of particles in an MD\nsimulation.  Barostatting means controlling the pressure.  Since the\npressure includes a kinetic component due to particle velocities, both\nthese operations require calculation of the temperature.  Typically a\ntarget temperature (T) and/or pressure (P) is specified by the user,\nand the thermostat or barostat attempts to equilibrate the system to\nthe requested T and/or P.\n\nTemperature is computed as kinetic energy divided by some number of\ndegrees of freedom (and the Boltzmann constant).  Since kinetic energy\nis a function of particle velocity, there is often a need to\ndistinguish between a particle's advection velocity (due to some\naggregate motion of particles) and its thermal velocity.  The sum of\nthe two is the particle's total velocity, but the latter is often what\nis wanted to compute a temperature.\n\nLAMMPS has several options for computing temperatures, any of which\ncan be used in thermostatting and barostatting.  These \"compute\ncommands\"_compute.html calculate temperature, and the \"compute\npressure\"_compute_pressure.html command calculates pressure.\n\n\"compute temp\"_compute_temp.html\n\"compute temp/sphere\"_compute_temp_sphere.html\n\"compute temp/asphere\"_compute_temp_asphere.html\n\"compute temp/com\"_compute_temp_com.html\n\"compute temp/deform\"_compute_temp_deform.html\n\"compute temp/partial\"_compute_temp_partial.html\n\"compute temp/profile\"_compute_temp_profile.html\n\"compute temp/ramp\"_compute_temp_ramp.html\n\"compute temp/region\"_compute_temp_region.html :ul\n\nAll but the first 3 calculate velocity biases directly (e.g. advection\nvelocities) that are removed when computing the thermal temperature.\n\"Compute temp/sphere\"_compute_temp_sphere.html and \"compute\ntemp/asphere\"_compute_temp_asphere.html compute kinetic energy for\nfinite-size particles that includes rotational degrees of freedom.\nThey both allow for velocity biases indirectly, via an optional extra\nargument, another temperature compute that subtracts a velocity bias.\nThis allows the translational velocity of spherical or aspherical\nparticles to be adjusted in prescribed ways.\n\nThermostatting in LAMMPS is performed by \"fixes\"_fix.html, or in one\ncase by a pair style.  Several thermostatting fixes are available:\nNose-Hoover (nvt), Berendsen, CSVR, Langevin, and direct rescaling\n(temp/rescale).  Dissipative particle dynamics (DPD) thermostatting\ncan be invoked via the {dpd/tstat} pair style:\n\n\"fix nvt\"_fix_nh.html\n\"fix nvt/sphere\"_fix_nvt_sphere.html\n\"fix nvt/asphere\"_fix_nvt_asphere.html\n\"fix nvt/sllod\"_fix_nvt_sllod.html\n\"fix temp/berendsen\"_fix_temp_berendsen.html\n\"fix temp/csvr\"_fix_temp_csvr.html\n\"fix langevin\"_fix_langevin.html\n\"fix temp/rescale\"_fix_temp_rescale.html\n\"pair_style dpd/tstat\"_pair_dpd.html :ul\n\n\"Fix nvt\"_fix_nh.html only thermostats the translational velocity of\nparticles.  \"Fix nvt/sllod\"_fix_nvt_sllod.html also does this, except\nthat it subtracts out a velocity bias due to a deforming box and\nintegrates the SLLOD equations of motion.  See the \"NEMD\nsimulations\"_#howto_13 section of this page for further details.  \"Fix\nnvt/sphere\"_fix_nvt_sphere.html and \"fix\nnvt/asphere\"_fix_nvt_asphere.html thermostat not only translation\nvelocities but also rotational velocities for spherical and aspherical\nparticles.\n\nDPD thermostatting alters pairwise interactions in a manner analogous\nto the per-particle thermostatting of \"fix\nlangevin\"_fix_langevin.html.\n\nAny of the thermostatting fixes can use temperature computes that\nremove bias which has two effects.  First, the current calculated\ntemperature, which is compared to the requested target temperature, is\ncalculated with the velocity bias removed.  Second, the thermostat\nadjusts only the thermal temperature component of the particle's\nvelocities, which are the velocities with the bias removed.  The\nremoved bias is then added back to the adjusted velocities.  See the\ndoc pages for the individual fixes and for the\n\"fix_modify\"_fix_modify.html command for instructions on how to assign\na temperature compute to a thermostatting fix.  For example, you can\napply a thermostat to only the x and z components of velocity by using\nit in conjunction with \"compute\ntemp/partial\"_compute_temp_partial.html.  Of you could thermostat only\nthe thermal temperature of a streaming flow of particles without\naffecting the streaming velocity, by using \"compute\ntemp/profile\"_compute_temp_profile.html.\n\nNOTE: Only the nvt fixes perform time integration, meaning they update\nthe velocities and positions of particles due to forces and velocities\nrespectively.  The other thermostat fixes only adjust velocities; they\ndo NOT perform time integration updates.  Thus they should be used in\nconjunction with a constant NVE integration fix such as these:\n\n\"fix nve\"_fix_nve.html\n\"fix nve/sphere\"_fix_nve_sphere.html\n\"fix nve/asphere\"_fix_nve_asphere.html :ul\n\nBarostatting in LAMMPS is also performed by \"fixes\"_fix.html.  Two\nbarosttating methods are currently available: Nose-Hoover (npt and\nnph) and Berendsen:\n\n\"fix npt\"_fix_nh.html\n\"fix npt/sphere\"_fix_npt_sphere.html\n\"fix npt/asphere\"_fix_npt_asphere.html\n\"fix nph\"_fix_nh.html\n\"fix press/berendsen\"_fix_press_berendsen.html :ul\n\nThe \"fix npt\"_fix_nh.html commands include a Nose-Hoover thermostat\nand barostat.  \"Fix nph\"_fix_nh.html is just a Nose/Hoover barostat;\nit does no thermostatting.  Both \"fix nph\"_fix_nh.html and \"fix\npress/berendsen\"_fix_press_berendsen.html can be used in conjunction\nwith any of the thermostatting fixes.\n\nAs with the thermostats, \"fix npt\"_fix_nh.html and \"fix\nnph\"_fix_nh.html only use translational motion of the particles in\ncomputing T and P and performing thermo/barostatting.  \"Fix\nnpt/sphere\"_fix_npt_sphere.html and \"fix\nnpt/asphere\"_fix_npt_asphere.html thermo/barostat using not only\ntranslation velocities but also rotational velocities for spherical\nand aspherical particles.\n\nAll of the barostatting fixes use the \"compute\npressure\"_compute_pressure.html compute to calculate a current\npressure.  By default, this compute is created with a simple \"compute\ntemp\"_compute_temp.html (see the last argument of the \"compute\npressure\"_compute_pressure.html command), which is used to calculated\nthe kinetic component of the pressure.  The barostatting fixes can\nalso use temperature computes that remove bias for the purpose of\ncomputing the kinetic component which contributes to the current\npressure.  See the doc pages for the individual fixes and for the\n\"fix_modify\"_fix_modify.html command for instructions on how to assign\na temperature or pressure compute to a barostatting fix.\n\nNOTE: As with the thermostats, the Nose/Hoover methods (\"fix\nnpt\"_fix_nh.html and \"fix nph\"_fix_nh.html) perform time integration.\n\"Fix press/berendsen\"_fix_press_berendsen.html does NOT, so it should\nbe used with one of the constant NVE fixes or with one of the NVT\nfixes.\n\nFinally, thermodynamic output, which can be setup via the\n\"thermo_style\"_thermo_style.html command, often includes temperature\nand pressure values.  As explained on the doc page for the\n\"thermo_style\"_thermo_style.html command, the default T and P are\nsetup by the thermo command itself.  They are NOT the ones associated\nwith any thermostatting or barostatting fix you have defined or with\nany compute that calculates a temperature or pressure.  Thus if you\nwant to view these values of T and P, you need to specify them\nexplicitly via a \"thermo_style custom\"_thermo_style.html command.  Or\nyou can use the \"thermo_modify\"_thermo_modify.html command to\nre-define what temperature or pressure compute is used for default\nthermodynamic output.\n\n:line\n\n6.17 Walls :link(howto_17),h4\n\nWalls in an MD simulation are typically used to bound particle motion,\ni.e. to serve as a boundary condition.\n\nWalls in LAMMPS can be of rough (made of particles) or idealized\nsurfaces.  Ideal walls can be smooth, generating forces only in the\nnormal direction, or frictional, generating forces also in the\ntangential direction.\n\nRough walls, built of particles, can be created in various ways.  The\nparticles themselves can be generated like any other particle, via the\n\"lattice\"_lattice.html and \"create_atoms\"_create_atoms.html commands,\nor read in via the \"read_data\"_read_data.html command.\n\nTheir motion can be constrained by many different commands, so that\nthey do not move at all, move together as a group at constant velocity\nor in response to a net force acting on them, move in a prescribed\nfashion (e.g. rotate around a point), etc.  Note that if a time\nintegration fix like \"fix nve\"_fix_nve.html or \"fix nvt\"_fix_nh.html\nis not used with the group that contains wall particles, their\npositions and velocities will not be updated.\n\n\"fix aveforce\"_fix_aveforce.html - set force on particles to average value, so they move together\n\"fix setforce\"_fix_setforce.html - set force on particles to a value, e.g. 0.0\n\"fix freeze\"_fix_freeze.html - freeze particles for use as granular walls\n\"fix nve/noforce\"_fix_nve_noforce.html - advect particles by their velocity, but without force\n\"fix move\"_fix_move.html - prescribe motion of particles by a linear velocity, oscillation, rotation, variable :ul\n\nThe \"fix move\"_fix_move.html command offers the most generality, since\nthe motion of individual particles can be specified with\n\"variable\"_variable.html formula which depends on time and/or the\nparticle position.\n\nFor rough walls, it may be useful to turn off pairwise interactions\nbetween wall particles via the \"neigh_modify\nexclude\"_neigh_modify.html command.\n\nRough walls can also be created by specifying frozen particles that do\nnot move and do not interact with mobile particles, and then tethering\nother particles to the fixed particles, via a \"bond\"_bond_style.html.\nThe bonded particles do interact with other mobile particles.\n\nIdealized walls can be specified via several fix commands.  \"Fix\nwall/gran\"_fix_wall_gran.html creates frictional walls for use with\ngranular particles; all the other commands create smooth walls.\n\n\"fix wall/reflect\"_fix_wall_reflect.html - reflective flat walls\n\"fix wall/lj93\"_fix_wall.html - flat walls, with Lennard-Jones 9/3 potential\n\"fix wall/lj126\"_fix_wall.html - flat walls, with Lennard-Jones 12/6 potential\n\"fix wall/colloid\"_fix_wall.html - flat walls, with \"pair_style colloid\"_pair_colloid.html potential\n\"fix wall/harmonic\"_fix_wall.html - flat walls, with repulsive harmonic spring potential\n\"fix wall/region\"_fix_wall_region.html - use region surface as wall\n\"fix wall/gran\"_fix_wall_gran.html - flat or curved walls with \"pair_style granular\"_pair_gran.html potential :ul\n\nThe {lj93}, {lj126}, {colloid}, and {harmonic} styles all allow the\nflat walls to move with a constant velocity, or oscillate in time.\nThe \"fix wall/region\"_fix_wall_region.html command offers the most\ngenerality, since the region surface is treated as a wall, and the\ngeometry of the region can be a simple primitive volume (e.g. a\nsphere, or cube, or plane), or a complex volume made from the union\nand intersection of primitive volumes.  \"Regions\"_region.html can also\nspecify a volume \"interior\" or \"exterior\" to the specified primitive\nshape or {union} or {intersection}.  \"Regions\"_region.html can also be\n\"dynamic\" meaning they move with constant velocity, oscillate, or\nrotate.\n\nThe only frictional idealized walls currently in LAMMPS are flat or\ncurved surfaces specified by the \"fix wall/gran\"_fix_wall_gran.html\ncommand.  At some point we plan to allow regoin surfaces to be used as\nfrictional walls, as well as triangulated surfaces.\n\n:line\n\n6.18 Elastic constants :link(howto_18),h4\n\nElastic constants characterize the stiffness of a material. The formal\ndefinition is provided by the linear relation that holds between the\nstress and strain tensors in the limit of infinitesimal deformation.\nIn tensor notation, this is expressed as s_ij = C_ijkl * e_kl, where\nthe repeated indices imply summation. s_ij are the elements of the\nsymmetric stress tensor. e_kl are the elements of the symmetric strain\ntensor. C_ijkl are the elements of the fourth rank tensor of elastic\nconstants. In three dimensions, this tensor has 3^4=81 elements. Using\nVoigt notation, the tensor can be written as a 6x6 matrix, where C_ij\nis now the derivative of s_i w.r.t. e_j. Because s_i is itself a\nderivative w.r.t. e_i, it follows that C_ij is also symmetric, with at\nmost 7*6/2 = 21 distinct elements.\n\nAt zero temperature, it is easy to estimate these derivatives by\ndeforming the simulation box in one of the six directions using the\n\"change_box\"_change_box.html command and measuring the change in the\nstress tensor. A general-purpose script that does this is given in the\nexamples/elastic directory described in \"this\nsection\"_Section_example.html.\n\nCalculating elastic constants at finite temperature is more\nchallenging, because it is necessary to run a simulation that perfoms\ntime averages of differential properties. One way to do this is to\nmeasure the change in average stress tensor in an NVT simulations when\nthe cell volume undergoes a finite deformation. In order to balance\nthe systematic and statistical errors in this method, the magnitude of\nthe deformation must be chosen judiciously, and care must be taken to\nfully equilibrate the deformed cell before sampling the stress\ntensor. Another approach is to sample the triclinic cell fluctuations\nthat occur in an NPT simulation. This method can also be slow to\nconverge and requires careful post-processing \"(Shinoda)\"_#Shinoda1\n\n:line\n\n6.19 Library interface to LAMMPS :link(howto_19),h4\n\nAs described in \"Section 2.5\"_Section_start.html#start_5, LAMMPS\ncan be built as a library, so that it can be called by another code,\nused in a \"coupled manner\"_Section_howto.html#howto_10 with other\ncodes, or driven through a \"Python interface\"_Section_python.html.\n\nAll of these methodologies use a C-style interface to LAMMPS that is\nprovided in the files src/library.cpp and src/library.h.  The\nfunctions therein have a C-style argument list, but contain C++ code\nyou could write yourself in a C++ application that was invoking LAMMPS\ndirectly.  The C++ code in the functions illustrates how to invoke\ninternal LAMMPS operations.  Note that LAMMPS classes are defined\nwithin a LAMMPS namespace (LAMMPS_NS) if you use them from another C++\napplication.\n\nThe examples/COUPLE and python/examples directories have example C++\nand C and Python codes which show how a driver code can link to LAMMPS\nas a library, run LAMMPS on a subset of processors, grab data from\nLAMMPS, change it, and put it back into LAMMPS.\n\nThe file src/library.cpp contains the following functions for creating\nand destroying an instance of LAMMPS and sending it commands to\nexecute.  See the documentation in the src/library.cpp file for\ndetails.\n\nNOTE: You can write code for additional functions as needed to define\nhow your code talks to LAMMPS and add them to src/library.cpp and\nsrc/library.h, as well as to the \"Python\ninterface\"_Section_python.html.  The added functions can access or\nchange any internal LAMMPS data you wish.\n\nvoid lammps_open(int, char **, MPI_Comm, void **)\nvoid lammps_open_no_mpi(int, char **, void **)\nvoid lammps_close(void *)\nint lammps_version(void *)\nvoid lammps_file(void *, char *)\nchar *lammps_command(void *, char *)\nvoid lammps_commands_list(void *, int, char **)\nvoid lammps_commands_string(void *, char *)\nvoid lammps_free(void *) :pre\n\nThe lammps_open() function is used to initialize LAMMPS, passing in a\nlist of strings as if they were \"command-line\narguments\"_Section_start.html#start_6 when LAMMPS is run in\nstand-alone mode from the command line, and a MPI communicator for\nLAMMPS to run under.  It returns a ptr to the LAMMPS object that is\ncreated, and which is used in subsequent library calls.  The\nlammps_open() function can be called multiple times, to create\nmultiple instances of LAMMPS.\n\nLAMMPS will run on the set of processors in the communicator.  This\nmeans the calling code can run LAMMPS on all or a subset of\nprocessors.  For example, a wrapper script might decide to alternate\nbetween LAMMPS and another code, allowing them both to run on all the\nprocessors.  Or it might allocate half the processors to LAMMPS and\nhalf to the other code and run both codes simultaneously before\nsyncing them up periodically.  Or it might instantiate multiple\ninstances of LAMMPS to perform different calculations.\n\nThe lammps_open_no_mpi() function is similar except that no MPI\ncommunicator is passed from the caller.  Instead, MPI_COMM_WORLD is\nused to instantiate LAMMPS, and MPI is initialized if necessary.\n\nThe lammps_close() function is used to shut down an instance of LAMMPS\nand free all its memory.\n\nThe lammps_version() function can be used to determined the specific\nversion of the underlying LAMMPS code. This is particularly useful\nwhen loading LAMMPS as a shared library via dlopen(). The code using\nthe library interface can than use this information to adapt to\nchanges to the LAMMPS command syntax between versions. The returned\nLAMMPS version code is an integer (e.g. 2 Sep 2015 results in\n20150902) that grows with every new LAMMPS version.\n\nThe lammps_file(), lammps_command(), lammps_commands_list(), and\nlammps_commands_string() functions are used to pass one or more\ncommands to LAMMPS to execute, the same as if they were coming from an\ninput script.\n\nVia these functions, the calling code can read or generate a series of\nLAMMPS commands one or multiple at a time and pass it thru the library\ninterface to setup a problem and then run it in stages.  The caller\ncan interleave the command function calls with operations it performs,\ncalls to extract information from or set information within LAMMPS, or\ncalls to another code's library.\n\nThe lammps_file() function passes the filename of an input script.\nThe lammps_command() function passes a single command as a string.\nThe lammps_commands_list() function passes multiple commands in a\nchar** list.  In both lammps_command() and lammps_commands_list(),\nindividual commands may or may not have a trailing newline.  The\nlammps_commands_string() function passes multiple commands\nconcatenated into one long string, separated by newline characters.\nIn both lammps_commands_list() and lammps_commands_string(), a single\ncommand can be spread across multiple lines, if the last printable\ncharacter of all but the last line is \"&\", the same as if the lines\nappeared in an input script.\n\nThe lammps_free() function is a clean-up function to free memory that\nthe library allocated previously via other function calls.  See\ncomments in src/library.cpp file for which other functions need this\nclean-up.\n\nThe file src/library.cpp also contains these functions for extracting\ninformation from LAMMPS and setting value within LAMMPS.  Again, see\nthe documentation in the src/library.cpp file for details, including\nwhich quantities can be queried by name:\n\nint lammps_extract_setting(void *, char *)\nvoid *lammps_extract_global(void *, char *)\nvoid lammps_extract_box(void *, double *, double *,\n                        double *, double *, double *, int *, int *)\nvoid *lammps_extract_atom(void *, char *)\nvoid *lammps_extract_compute(void *, char *, int, int)\nvoid *lammps_extract_fix(void *, char *, int, int, int, int)\nvoid *lammps_extract_variable(void *, char *, char *) :pre\n\nThe extract_setting() function returns info on the size\nof data types (e.g. 32-bit or 64-bit atom IDs) used\nby the LAMMPS executable (a compile-time choice).\n\nThe other extract functions return a pointer to various global or\nper-atom quantities stored in LAMMPS or to values calculated by a\ncompute, fix, or variable.  The pointer returned by the\nextract_global() function can be used as a permanent reference to a\nvalue which may change.  For the extract_atom() method, see the\nextract() method in the src/atom.cpp file for a list of valid per-atom\nproperties.  New names could easily be added if the property you want\nis not listed.  For the other extract functions, the underlying\nstorage may be reallocated as LAMMPS runs, so you need to re-call the\nfunction to assure a current pointer or returned value(s).\n\ndouble lammps_get_thermo(void *, char *)\nint lammps_get_natoms(void *) :pre\n\nint lammps_set_variable(void *, char *, char *)\nvoid lammps_reset_box(void *, double *, double *, double, double, double) :pre\n\nThe lammps_get_thermo() function returns the current value of a thermo\nkeyword as a double precision value.\n\nThe lammps_get_natoms() function returns the total number of atoms in\nthe system and can be used by the caller to allocate memory for the\nlammps_gather_atoms() and lammps_scatter_atoms() functions.\n\nThe lammps_set_variable() function can set an existing string-style\nvariable to a new string value, so that subsequent LAMMPS commands can\naccess the variable.\n\nThe lammps_reset_box() function resets the size and shape of the\nsimulation box, e.g. as part of restoring a previously extracted and\nsaved state of a simulation.\n\nvoid lammps_gather_atoms(void *, char *, int, int, void *)\nvoid lammps_gather_atoms_concat(void *, char *, int, int, void *)\nvoid lammps_gather_atoms_subset(void *, char *, int, int, int, int *, void *)\nvoid lammps_scatter_atoms(void *, char *, int, int, void *)\nvoid lammps_scatter_atoms_subset(void *, char *, int, int, int, int *, void *) :pre\n\nvoid lammps_create_atoms(void *, int, tagint *, int *, double *, double *,\n                         imageint *, int) :pre\n\nThe gather functions collect peratom info of the requested type (atom\ncoords, atom types, forces, etc) from all processors, and returns the\nsame vector of values to each callling processor.  The scatter\nfunctions do the inverse.  They distribute a vector of peratom values,\npassed by all calling processors, to invididual atoms, which may be\nowned by different processos.\n\nThe lammps_gather_atoms() function does this for all N atoms in the\nsystem, ordered by atom ID, from 1 to N.  The\nlammps_gather_atoms_concat() function does it for all N atoms, but\nsimply concatenates the subset of atoms owned by each processor.  The\nresulting vector is not ordered by atom ID.  Atom IDs can be requetsed\nby the same function if the caller needs to know the ordering.  The\nlammps_gather_subset() function allows the caller to request values\nfor only a subset of atoms (identified by ID).\nFor all 3 gather function, per-atom image flags can be retrieved in 2 ways.\nIf the count is specified as 1, they are returned \nin a packed format with all three image flags stored in a single integer.\nIf the count is specified as 3, the values are unpacked into xyz flags\nby the library before returning them.\n\nThe lammps_scatter_atoms() function takes a list of values for all N\natoms in the system, ordered by atom ID, from 1 to N, and assigns\nthose values to each atom in the system.  The\nlammps_scatter_atoms_subset() function takes a subset of IDs as an\nargument and only scatters those values to the owning atoms.\n\nThe lammps_create_atoms() function takes a list of N atoms as input\nwith atom types and coords (required), an optionally atom IDs and\nvelocities and image flags.  It uses the coords of each atom to assign\nit as a new atom to the processor that owns it.  This function is\nuseful to add atoms to a simulation or (in tandem with\nlammps_reset_box()) to restore a previously extracted and saved state\nof a simulation.  Additional properties for the new atoms can then be\nassigned via the lammps_scatter_atoms() or lammps_extract_atom()\nfunctions.\n\n:line\n\n6.20 Calculating thermal conductivity :link(howto_20),h4\n\nThe thermal conductivity kappa of a material can be measured in at\nleast 4 ways using various options in LAMMPS.  See the examples/KAPPA\ndirectory for scripts that implement the 4 methods discussed here for\na simple Lennard-Jones fluid model.  Also, see \"this\nsection\"_Section_howto.html#howto_21 of the manual for an analogous\ndiscussion for viscosity.\n\nThe thermal conductivity tensor kappa is a measure of the propensity\nof a material to transmit heat energy in a diffusive manner as given\nby Fourier's law\n\nJ = -kappa grad(T)\n\nwhere J is the heat flux in units of energy per area per time and\ngrad(T) is the spatial gradient of temperature.  The thermal\nconductivity thus has units of energy per distance per time per degree\nK and is often approximated as an isotropic quantity, i.e. as a\nscalar.\n\nThe first method is to setup two thermostatted regions at opposite\nends of a simulation box, or one in the middle and one at the end of a\nperiodic box.  By holding the two regions at different temperatures\nwith a \"thermostatting fix\"_Section_howto.html#howto_13, the energy\nadded to the hot region should equal the energy subtracted from the\ncold region and be proportional to the heat flux moving between the\nregions.  See the papers by \"Ikeshoji and Hafskjold\"_#howto-Ikeshoji\nand \"Wirnsberger et al\"_#howto-Wirnsberger for details of this idea.\nNote that thermostatting fixes such as \"fix nvt\"_fix_nh.html, \"fix\nlangevin\"_fix_langevin.html, and \"fix\ntemp/rescale\"_fix_temp_rescale.html store the cumulative energy they\nadd/subtract.\n\nAlternatively, as a second method, the \"fix heat\"_fix_heat.html or\n\"fix ehex\"_fix_ehex.html commands can be used in place of thermostats\non each of two regions to add/subtract specified amounts of energy to\nboth regions.  In both cases, the resulting temperatures of the two\nregions can be monitored with the \"compute temp/region\" command and\nthe temperature profile of the intermediate region can be monitored\nwith the \"fix ave/chunk\"_fix_ave_chunk.html and \"compute\nke/atom\"_compute_ke_atom.html commands.\n\nThe third method is to perform a reverse non-equilibrium MD simulation\nusing the \"fix thermal/conductivity\"_fix_thermal_conductivity.html\ncommand which implements the rNEMD algorithm of Muller-Plathe.\nKinetic energy is swapped between atoms in two different layers of the\nsimulation box.  This induces a temperature gradient between the two\nlayers which can be monitored with the \"fix\nave/chunk\"_fix_ave_chunk.html and \"compute\nke/atom\"_compute_ke_atom.html commands.  The fix tallies the\ncumulative energy transfer that it performs.  See the \"fix\nthermal/conductivity\"_fix_thermal_conductivity.html command for\ndetails.\n\nThe fourth method is based on the Green-Kubo (GK) formula which\nrelates the ensemble average of the auto-correlation of the heat flux\nto kappa.  The heat flux can be calculated from the fluctuations of\nper-atom potential and kinetic energies and per-atom stress tensor in\na steady-state equilibrated simulation.  This is in contrast to the\ntwo preceding non-equilibrium methods, where energy flows continuously\nbetween hot and cold regions of the simulation box.\n\nThe \"compute heat/flux\"_compute_heat_flux.html command can calculate\nthe needed heat flux and describes how to implement the Green_Kubo\nformalism using additional LAMMPS commands, such as the \"fix\nave/correlate\"_fix_ave_correlate.html command to calculate the needed\nauto-correlation.  See the doc page for the \"compute\nheat/flux\"_compute_heat_flux.html command for an example input script\nthat calculates the thermal conductivity of solid Ar via the GK\nformalism.\n\n:line\n\n6.21 Calculating viscosity :link(howto_21),h4\n\nThe shear viscosity eta of a fluid can be measured in at least 5 ways\nusing various options in LAMMPS.  See the examples/VISCOSITY directory\nfor scripts that implement the 5 methods discussed here for a simple\nLennard-Jones fluid model.  Also, see \"this\nsection\"_Section_howto.html#howto_20 of the manual for an analogous\ndiscussion for thermal conductivity.\n\nEta is a measure of the propensity of a fluid to transmit momentum in\na direction perpendicular to the direction of velocity or momentum\nflow.  Alternatively it is the resistance the fluid has to being\nsheared.  It is given by\n\nJ = -eta grad(Vstream)\n\nwhere J is the momentum flux in units of momentum per area per time.\nand grad(Vstream) is the spatial gradient of the velocity of the fluid\nmoving in another direction, normal to the area through which the\nmomentum flows.  Viscosity thus has units of pressure-time.\n\nThe first method is to perform a non-equilibrium MD (NEMD) simulation\nby shearing the simulation box via the \"fix deform\"_fix_deform.html\ncommand, and using the \"fix nvt/sllod\"_fix_nvt_sllod.html command to\nthermostat the fluid via the SLLOD equations of motion.\nAlternatively, as a second method, one or more moving walls can be\nused to shear the fluid in between them, again with some kind of\nthermostat that modifies only the thermal (non-shearing) components of\nvelocity to prevent the fluid from heating up.\n\nIn both cases, the velocity profile setup in the fluid by this\nprocedure can be monitored by the \"fix\nave/chunk\"_fix_ave_chunk.html command, which determines\ngrad(Vstream) in the equation above.  E.g. the derivative in the\ny-direction of the Vx component of fluid motion or grad(Vstream) =\ndVx/dy.  The Pxy off-diagonal component of the pressure or stress\ntensor, as calculated by the \"compute pressure\"_compute_pressure.html\ncommand, can also be monitored, which is the J term in the equation\nabove.  See \"this section\"_Section_howto.html#howto_13 of the manual\nfor details on NEMD simulations.\n\nThe third method is to perform a reverse non-equilibrium MD simulation\nusing the \"fix viscosity\"_fix_viscosity.html command which implements\nthe rNEMD algorithm of Muller-Plathe.  Momentum in one dimension is\nswapped between atoms in two different layers of the simulation box in\na different dimension.  This induces a velocity gradient which can be\nmonitored with the \"fix ave/chunk\"_fix_ave_chunk.html command.\nThe fix tallies the cumulative momentum transfer that it performs.\nSee the \"fix viscosity\"_fix_viscosity.html command for details.\n\nThe fourth method is based on the Green-Kubo (GK) formula which\nrelates the ensemble average of the auto-correlation of the\nstress/pressure tensor to eta.  This can be done in a fully\nequilibrated simulation which is in contrast to the two preceding\nnon-equilibrium methods, where momentum flows continuously through the\nsimulation box.\n\nHere is an example input script that calculates the viscosity of\nliquid Ar via the GK formalism:\n\n# Sample LAMMPS input script for viscosity of liquid Ar :pre\n\nunits       real\nvariable    T equal 86.4956\nvariable    V equal vol\nvariable    dt equal 4.0\nvariable    p equal 400     # correlation length\nvariable    s equal 5       # sample interval\nvariable    d equal $p*$s   # dump interval :pre\n\n# convert from LAMMPS real units to SI :pre\n\nvariable    kB equal 1.3806504e-23    # \\[J/K/] Boltzmann\nvariable    atm2Pa equal 101325.0\nvariable    A2m equal 1.0e-10\nvariable    fs2s equal 1.0e-15\nvariable    convert equal $\\{atm2Pa\\}*$\\{atm2Pa\\}*$\\{fs2s\\}*$\\{A2m\\}*$\\{A2m\\}*$\\{A2m\\} :pre\n\n# setup problem :pre\n\ndimension    3\nboundary     p p p\nlattice      fcc 5.376 orient x 1 0 0 orient y 0 1 0 orient z 0 0 1\nregion       box block 0 4 0 4 0 4\ncreate_box   1 box\ncreate_atoms 1 box\nmass         1 39.948\npair_style   lj/cut 13.0\npair_coeff   * * 0.2381 3.405\ntimestep     $\\{dt\\}\nthermo       $d :pre\n\n# equilibration and thermalization :pre\n\nvelocity     all create $T 102486 mom yes rot yes dist gaussian\nfix          NVT all nvt temp $T $T 10 drag 0.2\nrun          8000 :pre\n\n# viscosity calculation, switch to NVE if desired :pre\n\n#unfix       NVT\n#fix         NVE all nve :pre\n\nreset_timestep 0\nvariable     pxy equal pxy\nvariable     pxz equal pxz\nvariable     pyz equal pyz\nfix          SS all ave/correlate $s $p $d &\n             v_pxy v_pxz v_pyz type auto file S0St.dat ave running\nvariable     scale equal $\\{convert\\}/($\\{kB\\}*$T)*$V*$s*$\\{dt\\}\nvariable     v11 equal trap(f_SS\\[3\\])*$\\{scale\\}\nvariable     v22 equal trap(f_SS\\[4\\])*$\\{scale\\}\nvariable     v33 equal trap(f_SS\\[5\\])*$\\{scale\\}\nthermo_style custom step temp press v_pxy v_pxz v_pyz v_v11 v_v22 v_v33\nrun          100000\nvariable     v equal (v_v11+v_v22+v_v33)/3.0\nvariable     ndens equal count(all)/vol\nprint        \"average viscosity: $v \\[Pa.s\\] @ $T K, $\\{ndens\\} /A^3\" :pre\n\nThe fifth method is related to the above Green-Kubo method,\nbut uses the Einstein formulation, analogous to the Einstein\nmean-square-displacement formulation for self-diffusivity. The\ntime-integrated momentum fluxes play the role of Cartesian\ncoordinates, whose mean-square displacement increases linearly\nwith time at sufficiently long times.\n\n:line\n\n6.22 Calculating a diffusion coefficient :link(howto_22),h4\n\nThe diffusion coefficient D of a material can be measured in at least\n2 ways using various options in LAMMPS.  See the examples/DIFFUSE\ndirectory for scripts that implement the 2 methods discussed here for\na simple Lennard-Jones fluid model.\n\nThe first method is to measure the mean-squared displacement (MSD) of\nthe system, via the \"compute msd\"_compute_msd.html command.  The slope\nof the MSD versus time is proportional to the diffusion coefficient.\nThe instantaneous MSD values can be accumulated in a vector via the\n\"fix vector\"_fix_vector.html command, and a line fit to the vector to\ncompute its slope via the \"variable slope\"_variable.html function, and\nthus extract D.\n\nThe second method is to measure the velocity auto-correlation function\n(VACF) of the system, via the \"compute vacf\"_compute_vacf.html\ncommand.  The time-integral of the VACF is proportional to the\ndiffusion coefficient.  The instantaneous VACF values can be\naccumulated in a vector via the \"fix vector\"_fix_vector.html command,\nand time integrated via the \"variable trap\"_variable.html function,\nand thus extract D.\n\n:line\n\n6.23 Using chunks to calculate system properties :link(howto_23),h4\n\nIn LAMMS, \"chunks\" are collections of atoms, as defined by the\n\"compute chunk/atom\"_compute_chunk_atom.html command, which assigns\neach atom to a chunk ID (or to no chunk at all).  The number of chunks\nand the assignment of chunk IDs to atoms can be static or change over\ntime.  Examples of \"chunks\" are molecules or spatial bins or atoms\nwith similar values (e.g. coordination number or potential energy).\n\nThe per-atom chunk IDs can be used as input to two other kinds of\ncommands, to calculate various properties of a system:\n\n\"fix ave/chunk\"_fix_ave_chunk.html\nany of the \"compute */chunk\"_compute.html commands :ul\n\nHere, each of the 3 kinds of chunk-related commands is briefly\noverviewed.  Then some examples are given of how to compute different\nproperties with chunk commands.\n\nCompute chunk/atom command: :h4\n\nThis compute can assign atoms to chunks of various styles.  Only atoms\nin the specified group and optional specified region are assigned to a\nchunk.  Here are some possible chunk definitions:\n\natoms in same molecule | chunk ID = molecule ID |\natoms of same atom type | chunk ID = atom type |\nall atoms with same atom property (charge, radius, etc) | chunk ID = output of compute property/atom |\natoms in same cluster | chunk ID = output of \"compute cluster/atom\"_compute_cluster_atom.html command |\natoms in same spatial bin | chunk ID = bin ID |\natoms in same rigid body | chunk ID = molecule ID used to define rigid bodies |\natoms with similar potential energy | chunk ID = output of \"compute pe/atom\"_compute_pe_atom.html |\natoms with same local defect structure | chunk ID = output of \"compute centro/atom\"_compute_centro_atom.html or \"compute coord/atom\"_compute_coord_atom.html command :tb(s=|,c=2)\n\nNote that chunk IDs are integer values, so for atom properties or\ncomputes that produce a floating point value, they will be truncated\nto an integer.  You could also use the compute in a variable that\nscales the floating point value to spread it across multiple integers.\n\nSpatial bins can be of various kinds, e.g. 1d bins = slabs, 2d bins =\npencils, 3d bins = boxes, spherical bins, cylindrical bins.\n\nThis compute also calculates the number of chunks {Nchunk}, which is\nused by other commands to tally per-chunk data.  {Nchunk} can be a\nstatic value or change over time (e.g. the number of clusters).  The\nchunk ID for an individual atom can also be static (e.g. a molecule\nID), or dynamic (e.g. what spatial bin an atom is in as it moves).\n\nNote that this compute allows the per-atom output of other\n\"computes\"_compute.html, \"fixes\"_fix.html, and\n\"variables\"_variable.html to be used to define chunk IDs for each\natom.  This means you can write your own compute or fix to output a\nper-atom quantity to use as chunk ID.  See\n\"Section 10\"_Section_modify.html of the documentation for how to\ndo this.  You can also define a \"per-atom variable\"_variable.html in\nthe input script that uses a formula to generate a chunk ID for each\natom.\n\nFix ave/chunk command: :h4\n\nThis fix takes the ID of a \"compute\nchunk/atom\"_compute_chunk_atom.html command as input.  For each chunk,\nit then sums one or more specified per-atom values over the atoms in\neach chunk.  The per-atom values can be any atom property, such as\nvelocity, force, charge, potential energy, kinetic energy, stress,\netc.  Additional keywords are defined for per-chunk properties like\ndensity and temperature.  More generally any per-atom value generated\nby other \"computes\"_compute.html, \"fixes\"_fix.html, and \"per-atom\nvariables\"_variable.html, can be summed over atoms in each chunk.\n\nSimilar to other averaging fixes, this fix allows the summed per-chunk\nvalues to be time-averaged in various ways, and output to a file.  The\nfix produces a global array as output with one row of values per\nchunk.\n\nCompute */chunk commands: :h4\n\nCurrently the following computes operate on chunks of atoms to produce\nper-chunk values.\n\n\"compute com/chunk\"_compute_com_chunk.html\n\"compute gyration/chunk\"_compute_gyration_chunk.html\n\"compute inertia/chunk\"_compute_inertia_chunk.html\n\"compute msd/chunk\"_compute_msd_chunk.html\n\"compute property/chunk\"_compute_property_chunk.html\n\"compute temp/chunk\"_compute_temp_chunk.html\n\"compute torque/chunk\"_compute_vcm_chunk.html\n\"compute vcm/chunk\"_compute_vcm_chunk.html :ul\n\nThey each take the ID of a \"compute\nchunk/atom\"_compute_chunk_atom.html command as input.  As their names\nindicate, they calculate the center-of-mass, radius of gyration,\nmoments of inertia, mean-squared displacement, temperature, torque,\nand velocity of center-of-mass for each chunk of atoms.  The \"compute\nproperty/chunk\"_compute_property_chunk.html command can tally the\ncount of atoms in each chunk and extract other per-chunk properties.\n\nThe reason these various calculations are not part of the \"fix\nave/chunk command\"_fix_ave_chunk.html, is that each requires a more\ncomplicated operation than simply summing and averaging over per-atom\nvalues in each chunk.  For example, many of them require calculation\nof a center of mass, which requires summing mass*position over the\natoms and then dividing by summed mass.\n\nAll of these computes produce a global vector or global array as\noutput, wih one or more values per chunk.  They can be used\nin various ways:\n\nAs input to the \"fix ave/time\"_fix_ave_time.html command, which can\nwrite the values to a file and optionally time average them. :ulb,l\n\nAs input to the \"fix ave/histo\"_fix_ave_histo.html command to\nhistogram values across chunks.  E.g. a histogram of cluster sizes or\nmolecule diffusion rates. :l\n\nAs input to special functions of \"equal-style\nvariables\"_variable.html, like sum() and max().  E.g. to find the\nlargest cluster or fastest diffusing molecule. :l\n:ule\n\nExample calculations with chunks :h4\n\nHere are examples using chunk commands to calculate various\nproperties:\n\n(1) Average velocity in each of 1000 2d spatial bins:\n\ncompute cc1 all chunk/atom bin/2d x 0.0 0.1 y lower 0.01 units reduced\nfix 1 all ave/chunk 100 10 1000 cc1 vx vy file tmp.out :pre\n\n(2) Temperature in each spatial bin, after subtracting a flow\nvelocity:\n\ncompute cc1 all chunk/atom bin/2d x 0.0 0.1 y lower 0.1 units reduced\ncompute vbias all temp/profile 1 0 0 y 10\nfix 1 all ave/chunk 100 10 1000 cc1 temp bias vbias file tmp.out :pre\n\n(3) Center of mass of each molecule:\n\ncompute cc1 all chunk/atom molecule\ncompute myChunk all com/chunk cc1\nfix 1 all ave/time 100 1 100 c_myChunk\\[*\\] file tmp.out mode vector :pre\n\n(4) Total force on each molecule and ave/max across all molecules:\n\ncompute cc1 all chunk/atom molecule\nfix 1 all ave/chunk 1000 1 1000 cc1 fx fy fz file tmp.out\nvariable xave equal ave(f_1\\[2\\])\nvariable xmax equal max(f_1\\[2\\])\nthermo 1000\nthermo_style custom step temp v_xave v_xmax :pre\n\n(5) Histogram of cluster sizes:\n\ncompute cluster all cluster/atom 1.0\ncompute cc1 all chunk/atom c_cluster compress yes\ncompute size all property/chunk cc1 count\nfix 1 all ave/histo 100 1 100 0 20 20 c_size mode vector ave running beyond ignore file tmp.histo :pre\n\n:line\n\n6.24 Setting parameters for the \"kspace_style pppm/disp\"_kspace_style.html command :link(howto_24),h4\n\nThe PPPM method computes interactions by splitting the pair potential\ninto two parts, one of which is computed in a normal pairwise fashion,\nthe so-called real-space part, and one of which is computed using the\nFourier transform, the so called reciprocal-space or kspace part.  For\nboth parts, the potential is not computed exactly but is approximated.\nThus, there is an error in both parts of the computation, the\nreal-space and the kspace error. The just mentioned facts are true\nboth for the PPPM for Coulomb as well as dispersion interactions. The\ndeciding difference - and also the reason why the parameters for\npppm/disp have to be selected with more care - is the impact of the\nerrors on the results: The kspace error of the PPPM for Coulomb and\ndispersion interaction and the real-space error of the PPPM for\nCoulomb interaction have the character of noise. In contrast, the\nreal-space error of the PPPM for dispersion has a clear physical\ninterpretation: the underprediction of cohesion. As a consequence, the\nreal-space error has a much stronger effect than the kspace error on\nsimulation results for pppm/disp.  Parameters must thus be chosen in a\nway that this error is much smaller than the kspace error.\n\nWhen using pppm/disp and not making any specifications on the PPPM\nparameters via the kspace modify command, parameters will be tuned\nsuch that the real-space error and the kspace error are equal.  This\nwill result in simulations that are either inaccurate or slow, both of\nwhich is not desirable. For selecting parameters for the pppm/disp\nthat provide fast and accurate simulations, there are two approaches,\nwhich both have their up- and downsides.\n\nThe first approach is to set desired real-space an kspace accuracies\nvia the {kspace_modify force/disp/real} and {kspace_modify\nforce/disp/kspace} commands. Note that the accuracies have to be\nspecified in force units and are thus dependent on the chosen unit\nsettings. For real units, 0.0001 and 0.002 seem to provide reasonable\naccurate and efficient computations for the real-space and kspace\naccuracies.  0.002 and 0.05 work well for most systems using lj\nunits. PPPM parameters will be generated based on the desired\naccuracies. The upside of this approach is that it usually provides a\ngood set of parameters and will work for both the {kspace_modify diff\nad} and {kspace_modify diff ik} options.  The downside of the method\nis that setting the PPPM parameters will take some time during the\ninitialization of the simulation.\n\nThe second approach is to set the parameters for the pppm/disp\nexplicitly using the {kspace_modify mesh/disp}, {kspace_modify\norder/disp}, and {kspace_modify gewald/disp} commands. This approach\nrequires a more experienced user who understands well the impact of\nthe choice of parameters on the simulation accuracy and\nperformance. This approach provides a fast initialization of the\nsimulation. However, it is sensitive to errors: A combination of\nparameters that will perform well for one system might result in\nfar-from-optimal conditions for other simulations. For example,\nparameters that provide accurate and fast computations for\nall-atomistic force fields can provide insufficient accuracy or\nunited-atomistic force fields (which is related to that the latter\ntypically have larger dispersion coefficients).\n\nTo avoid inaccurate or inefficient simulations, the pppm/disp stops\nsimulations with an error message if no action is taken to control the\nPPPM parameters. If the automatic parameter generation is desired and\nreal-space and kspace accuracies are desired to be equal, this error\nmessage can be suppressed using the {kspace_modify disp/auto yes}\ncommand.\n\nA reasonable approach that combines the upsides of both methods is to\nmake the first run using the {kspace_modify force/disp/real} and\n{kspace_modify force/disp/kspace} commands, write down the PPPM\nparameters from the outut, and specify these parameters using the\nsecond approach in subsequent runs (which have the same composition,\nforce field, and approximately the same volume).\n\nConcerning the performance of the pppm/disp there are two more things\nto consider. The first is that when using the pppm/disp, the cutoff\nparameter does no longer affect the accuracy of the simulation\n(subject to that gewald/disp is adjusted when changing the cutoff).\nThe performance can thus be increased by examining different values\nfor the cutoff parameter. A lower bound for the cutoff is only set by\nthe truncation error of the repulsive term of pair potentials.\n\nThe second is that the mixing rule of the pair style has an impact on\nthe computation time when using the pppm/disp. Fastest computations\nare achieved when using the geometric mixing rule. Using the\narithmetic mixing rule substantially increases the computational cost.\nThe computational overhead can be reduced using the {kspace_modify\nmix/disp geom} and {kspace_modify splittol} commands. The first\ncommand simply enforces geometric mixing of the dispersion\ncoefficients in kspace computations.  This introduces some error in\nthe computations but will also significantly speed-up the\nsimulations. The second keyword sets the accuracy with which the\ndispersion coefficients are approximated using a matrix factorization\napproach.  This may result in better accuracy then using the first\ncommand, but will usually also not provide an equally good increase of\nefficiency.\n\nFinally, pppm/disp can also be used when no mixing rules apply.\nThis can be achieved using the {kspace_modify mix/disp none} command.\nNote that the code does not check automatically whether any mixing\nrule is fulfilled. If mixing rules do not apply, the user will have\nto specify this command explicitly.\n\n:line\n\n6.25 Polarizable models :link(howto_25),h4\n\nIn polarizable force fields the charge distributions in molecules and\nmaterials respond to their electrostatic environments. Polarizable\nsystems can be simulated in LAMMPS using three methods:\n\nthe fluctuating charge method, implemented in the \"QEQ\"_fix_qeq.html\npackage, :ulb,l\nthe adiabatic core-shell method, implemented in the\n\"CORESHELL\"_#howto_26 package, :l\nthe thermalized Drude dipole method, implemented in the\n\"USER-DRUDE\"_#howto_27 package. :l\n:ule\n\nThe fluctuating charge method calculates instantaneous charges on\ninteracting atoms based on the electronegativity equalization\nprinciple. It is implemented in the \"fix qeq\"_fix_qeq.html which is\navailable in several variants. It is a relatively efficient technique\nsince no additional particles are introduced. This method allows for\ncharge transfer between molecules or atom groups. However, because the\ncharges are located at the interaction sites, off-plane components of\npolarization cannot be represented in planar molecules or atom groups.\n\nThe two other methods share the same basic idea: polarizable atoms are\nsplit into one core atom and one satellite particle (called shell or\nDrude particle) attached to it by a harmonic spring.  Both atoms bear\na charge and they represent collectively an induced electric dipole.\nThese techniques are computationally more expensive than the QEq\nmethod because of additional particles and bonds. These two\ncharge-on-spring methods differ in certain features, with the\ncore-shell model being normally used for ionic/crystalline materials,\nwhereas the so-called Drude model is normally used for molecular\nsystems and fluid states.\n\nThe core-shell model is applicable to crystalline materials where the\nhigh symmetry around each site leads to stable trajectories of the\ncore-shell pairs. However, bonded atoms in molecules can be so close\nthat a core would interact too strongly or even capture the Drude\nparticle of a neighbor. The Drude dipole model is relatively more\ncomplex in order to remediate this and other issues. Specifically, the\nDrude model includes specific thermostating of the core-Drude pairs\nand short-range damping of the induced dipoles.\n\nThe three polarization methods can be implemented through a\nself-consistent calculation of charges or induced dipoles at each\ntimestep. In the fluctuating charge scheme this is done by the matrix\ninversion method in \"fix qeq/point\"_fix_qeq.html, but for core-shell\nor Drude-dipoles the relaxed-dipoles technique would require an slow\niterative procedure. These self-consistent solutions yield accurate\ntrajectories since the additional degrees of freedom representing\npolarization are massless.  An alternative is to attribute a mass to\nthe additional degrees of freedom and perform time integration using\nan extended Lagrangian technique. For the fluctuating charge scheme\nthis is done by \"fix qeq/dynamic\"_fix_qeq.html, and for the\ncharge-on-spring models by the methods outlined in the next two\nsections. The assignment of masses to the additional degrees of\nfreedom can lead to unphysical trajectories if care is not exerted in\nchoosing the parameters of the polarizable models and the simulation\nconditions.\n\nIn the core-shell model the vibration of the shells is kept faster\nthan the ionic vibrations to mimic the fast response of the\npolarizable electrons.  But in molecular systems thermalizing the\ncore-Drude pairs at temperatures comparable to the rest of the\nsimulation leads to several problems (kinetic energy transfer, too\nshort a timestep, etc.) In order to avoid these problems the relative\nmotion of the Drude particles with respect to their cores is kept\n\"cold\" so the vibration of the core-Drude pairs is very slow,\napproaching the self-consistent regime.  In both models the\ntemperature is regulated using the velocities of the center of mass of\ncore+shell (or Drude) pairs, but in the Drude model the actual\nrelative core-Drude particle motion is thermostated separately as\nwell.\n\n:line\n\n6.26 Adiabatic core/shell model :link(howto_26),h4\n\nThe adiabatic core-shell model by \"Mitchell and\nFincham\"_#MitchellFincham is a simple method for adding\npolarizability to a system.  In order to mimic the electron shell of\nan ion, a satellite particle is attached to it. This way the ions are\nsplit into a core and a shell where the latter is meant to react to\nthe electrostatic environment inducing polarizability.\n\nTechnically, shells are attached to the cores by a spring force f =\nk*r where k is a parametrized spring constant and r is the distance\nbetween the core and the shell. The charges of the core and the shell\nadd up to the ion charge, thus q(ion) = q(core) + q(shell). This\nsetup introduces the ion polarizability (alpha) given by\nalpha = q(shell)^2 / k. In a\nsimilar fashion the mass of the ion is distributed on the core and the\nshell with the core having the larger mass.\n\nTo run this model in LAMMPS, \"atom_style\"_atom_style.html {full} can\nbe used since atom charge and bonds are needed.  Each kind of\ncore/shell pair requires two atom types and a bond type.  The core and\nshell of a core/shell pair should be bonded to each other with a\nharmonic bond that provides the spring force. For example, a data file\nfor NaCl, as found in examples/coreshell, has this format:\n\n432   atoms  # core and shell atoms\n216   bonds  # number of core/shell springs :pre\n\n4     atom types  # 2 cores and 2 shells for Na and Cl\n2     bond types :pre\n\n0.0 24.09597 xlo xhi\n0.0 24.09597 ylo yhi\n0.0 24.09597 zlo zhi :pre\n\nMasses       # core/shell mass ratio = 0.1 :pre\n\n1 20.690784  # Na core\n2 31.90500   # Cl core\n3 2.298976   # Na shell\n4 3.54500    # Cl shell :pre\n\nAtoms :pre\n\n1    1    2   1.5005    0.00000000   0.00000000   0.00000000 # core of core/shell pair 1\n2    1    4  -2.5005    0.00000000   0.00000000   0.00000000 # shell of core/shell pair 1\n3    2    1   1.5056    4.01599500   4.01599500   4.01599500 # core of core/shell pair 2\n4    2    3  -0.5056    4.01599500   4.01599500   4.01599500 # shell of core/shell pair 2\n(...) :pre\n\nBonds   # Bond topology for spring forces :pre\n\n1     2     1     2   # spring for core/shell pair 1\n2     2     3     4   # spring for core/shell pair 2\n(...) :pre\n\nNon-Coulombic (e.g. Lennard-Jones) pairwise interactions are only\ndefined between the shells.  Coulombic interactions are defined\nbetween all cores and shells.  If desired, additional bonds can be\nspecified between cores.\n\nThe \"special_bonds\"_special_bonds.html command should be used to\nturn-off the Coulombic interaction within core/shell pairs, since that\ninteraction is set by the bond spring.  This is done using the\n\"special_bonds\"_special_bonds.html command with a 1-2 weight = 0.0,\nwhich is the default value.  It needs to be considered whether one has\nto adjust the \"special_bonds\"_special_bonds.html weighting according\nto the molecular topology since the interactions of the shells are\nbypassed over an extra bond.\n\nNote that this core/shell implementation does not require all ions to\nbe polarized.  One can mix core/shell pairs and ions without a\nsatellite particle if desired.\n\nSince the core/shell model permits distances of r = 0.0 between the\ncore and shell, a pair style with a \"cs\" suffix needs to be used to\nimplement a valid long-range Coulombic correction.  Several such pair\nstyles are provided in the CORESHELL package.  See \"this doc\npage\"_pair_cs.html for details.  All of the core/shell enabled pair\nstyles require the use of a long-range Coulombic solver, as specified\nby the \"kspace_style\"_kspace_style.html command.  Either the PPPM or\nEwald solvers can be used.\n\nFor the NaCL example problem, these pair style and bond style settings\nare used:\n\npair_style      born/coul/long/cs 20.0 20.0\npair_coeff      * *      0.0 1.000   0.00  0.00   0.00\npair_coeff      3 3    487.0 0.23768 0.00  1.05   0.50 #Na-Na\npair_coeff      3 4 145134.0 0.23768 0.00  6.99   8.70 #Na-Cl\npair_coeff      4 4 405774.0 0.23768 0.00 72.40 145.40 #Cl-Cl :pre\n\nbond_style      harmonic\nbond_coeff      1 63.014 0.0\nbond_coeff      2 25.724 0.0 :pre\n\nWhen running dynamics with the adiabatic core/shell model, the\nfollowing issues should be considered.  The relative motion of\nthe core and shell particles corresponds to the polarization,\nhereby an instantaneous relaxation of the shells is approximated\nand a fast core/shell spring frequency ensures a nearly constant\ninternal kinetic energy during the simulation.\nThermostats can alter this polarization behaviour, by scaling the\ninternal kinetic energy, meaning the shell will not react freely to\nits electrostatic environment.\nTherefore it is typically desirable to decouple the relative motion of\nthe core/shell pair, which is an imaginary degree of freedom, from the\nreal physical system.  To do that, the \"compute\ntemp/cs\"_compute_temp_cs.html command can be used, in conjunction with\nany of the thermostat fixes, such as \"fix nvt\"_fix_nh.html or \"fix\nlangevin\"_fix_langevin.  This compute uses the center-of-mass velocity\nof the core/shell pairs to calculate a temperature, and insures that\nvelocity is what is rescaled for thermostatting purposes.  This\ncompute also works for a system with both core/shell pairs and\nnon-polarized ions (ions without an attached satellite particle).  The\n\"compute temp/cs\"_compute_temp_cs.html command requires input of two\ngroups, one for the core atoms, another for the shell atoms.\nNon-polarized ions which might also be included in the treated system\nshould not be included into either of these groups, they are taken\ninto account by the {group-ID} (2nd argument) of the compute.  The\ngroups can be defined using the \"group {type}\"_group.html command.\nNote that to perform thermostatting using this definition of\ntemperature, the \"fix modify temp\"_fix_modify.html command should be\nused to assign the compute to the thermostat fix.  Likewise the\n\"thermo_modify temp\"_thermo_modify.html command can be used to make\nthis temperature be output for the overall system.\n\nFor the NaCl example, this can be done as follows:\n\ngroup cores type 1 2\ngroup shells type 3 4\ncompute CSequ all temp/cs cores shells\nfix thermoberendsen all temp/berendsen 1427 1427 0.4    # thermostat for the true physical system\nfix thermostatequ all nve                               # integrator as needed for the berendsen thermostat\nfix_modify thermoberendsen temp CSequ\nthermo_modify temp CSequ                                # output of center-of-mass derived temperature :pre\n\nThe pressure for the core/shell system is computed via the regular\nLAMMPS convention by \"treating the cores and shells as individual\nparticles\"_#MitchellFincham2. For the thermo output of the pressure\nas well as for the application of a barostat, it is necessary to\nuse an additional \"pressure\"_compute_pressure compute based on the\ndefault \"temperature\"_compute_temp and specifying it as a second\nargument in \"fix modify\"_fix_modify.html and\n\"thermo_modify\"_thermo_modify.html resulting in:\n\n(...)\ncompute CSequ all temp/cs cores shells\ncompute thermo_press_lmp all pressure thermo_temp       # pressure for individual particles\nthermo_modify temp CSequ press thermo_press_lmp         # modify thermo to regular pressure\nfix press_bar all npt temp 300 300 0.04 iso 0 0 0.4\nfix_modify press_bar temp CSequ press thermo_press_lmp  # pressure modification for correct kinetic scalar :pre\n\nIf \"compute temp/cs\"_compute_temp_cs.html is used, the decoupled\nrelative motion of the core and the shell should in theory be\nstable.  However numerical fluctuation can introduce a small\nmomentum to the system, which is noticable over long trajectories.\nTherefore it is recommendable to use the \"fix\nmomentum\"_fix_momentum.html command in combination with \"compute\ntemp/cs\"_compute_temp_cs.html when equilibrating the system to\nprevent any drift.\n\nWhen initializing the velocities of a system with core/shell pairs, it\nis also desirable to not introduce energy into the relative motion of\nthe core/shell particles, but only assign a center-of-mass velocity to\nthe pairs.  This can be done by using the {bias} keyword of the\n\"velocity create\"_velocity.html command and assigning the \"compute\ntemp/cs\"_compute_temp_cs.html command to the {temp} keyword of the\n\"velocity\"_velocity.html command, e.g.\n\nvelocity all create 1427 134 bias yes temp CSequ\nvelocity all scale 1427 temp CSequ :pre\n\nTo maintain the correct polarizability of the core/shell pairs, the\nkinetic energy of the internal motion shall remain nearly constant.\nTherefore the choice of spring force and mass ratio need to ensure\nmuch faster relative motion of the 2 atoms within the core/shell pair\nthan their center-of-mass velocity. This allows the shells to\neffectively react instantaneously to the electrostatic environment and\nlimits energy transfer to or from the core/shell oscillators.\nThis fast movement also dictates the timestep that can be used.\n\nThe primary literature of the adiabatic core/shell model suggests that\nthe fast relative motion of the core/shell pairs only allows negligible\nenergy transfer to the environment.\nThe mentioned energy transfer will typically lead to a small drift\nin total energy over time.  This internal energy can be monitored\nusing the \"compute chunk/atom\"_compute_chunk_atom.html and \"compute\ntemp/chunk\"_compute_temp_chunk.html commands.  The internal kinetic\nenergies of each core/shell pair can then be summed using the sum()\nspecial function of the \"variable\"_variable.html command.  Or they can\nbe time/averaged and output using the \"fix ave/time\"_fix_ave_time.html\ncommand.  To use these commands, each core/shell pair must be defined\nas a \"chunk\".  If each core/shell pair is defined as its own molecule,\nthe molecule ID can be used to define the chunks.  If cores are bonded\nto each other to form larger molecules, the chunks can be identified\nby the \"fix property/atom\"_fix_property_atom.html via assigning a\ncore/shell ID to each atom using a special field in the data file read\nby the \"read_data\"_read_data.html command.  This field can then be\naccessed by the \"compute property/atom\"_compute_property_atom.html\ncommand, to use as input to the \"compute\nchunk/atom\"_compute_chunk_atom.html command to define the core/shell\npairs as chunks.\n\nFor example if core/shell pairs are the only molecules:\n\nread_data NaCl_CS_x0.1_prop.data\ncompute prop all property/atom molecule\ncompute cs_chunk all chunk/atom c_prop\ncompute cstherm all temp/chunk cs_chunk temp internal com yes cdof 3.0     # note the chosen degrees of freedom for the core/shell pairs\nfix ave_chunk all ave/time 10 1 10 c_cstherm file chunk.dump mode vector :pre\n\nFor example if core/shell pairs and other molecules are present:\n\nfix csinfo all property/atom i_CSID                       # property/atom command\nread_data NaCl_CS_x0.1_prop.data fix csinfo NULL CS-Info  # atom property added in the data-file\ncompute prop all property/atom i_CSID\n(...) :pre\n\nThe additional section in the date file would be formatted like this:\n\nCS-Info         # header of additional section :pre\n\n1   1           # column 1 = atom ID, column 2 = core/shell ID\n2   1\n3   2\n4   2\n5   3\n6   3\n7   4\n8   4\n(...) :pre\n\n:line\n\n6.27 Drude induced dipoles :link(howto_27),h4\n\nThe thermalized Drude model, similarly to the \"core-shell\"_#howto_26\nmodel, represents induced dipoles by a pair of charges (the core atom\nand the Drude particle) connected by a harmonic spring. The Drude\nmodel has a number of features aimed at its use in molecular systems\n(\"Lamoureux and Roux\"_#howto-Lamoureux):\n\nThermostating of the additional degrees of freedom associated with the\ninduced dipoles at very low temperature, in terms of the reduced\ncoordinates of the Drude particles with respect to their cores. This\nmakes the trajectory close to that of relaxed induced dipoles. :ulb,l\n\nConsistent definition of 1-2 to 1-4 neighbors. A core-Drude particle\npair represents a single (polarizable) atom, so the special screening\nfactors in a covalent structure should be the same for the core and\nthe Drude particle.  Drude particles have to inherit the 1-2, 1-3, 1-4\nspecial neighbor relations from their respective cores. :l\n\nStabilization of the interactions between induced dipoles. Drude\ndipoles on covalently bonded atoms interact too strongly due to the\nshort distances, so an atom may capture the Drude particle of a\nneighbor, or the induced dipoles within the same molecule may align\ntoo much. To avoid this, damping at short range can be done by Thole\nfunctions (for which there are physical grounds). This Thole damping\nis applied to the point charges composing the induced dipole (the\ncharge of the Drude particle and the opposite charge on the core, not\nto the total charge of the core atom). :l\n:ule\n\nA detailed tutorial covering the usage of Drude induced dipoles in\nLAMMPS is \"available here\"_tutorial_drude.html.\n\nAs with the core-shell model, the cores and Drude particles should\nappear in the data file as standard atoms. The same holds for the\nsprings between them, which are described by standard harmonic bonds.\nThe nature of the atoms (core, Drude particle or non-polarizable) is\nspecified via the \"fix drude\"_fix_drude.html command.  The special\nlist of neighbors is automatically refactored to account for the\nequivalence of core and Drude particles as regards special 1-2 to 1-4\nscreening. It may be necessary to use the {extra/special/per/atom}\nkeyword of the \"read_data\"_read_data.html command. If using \"fix\nshake\"_fix_shake.html, make sure no Drude particle is in this fix\ngroup.\n\nThere are two ways to thermostat the Drude particles at a low\ntemperature: use either \"fix langevin/drude\"_fix_langevin_drude.html\nfor a Langevin thermostat, or \"fix\ndrude/transform/*\"_fix_drude_transform.html for a Nose-Hoover\nthermostat. The former requires use of the command \"comm_modify vel\nyes\"_comm_modify.html. The latter requires two separate integration\nfixes like {nvt} or {npt}. The correct temperatures of the reduced\ndegrees of freedom can be calculated using the \"compute\ntemp/drude\"_compute_temp_drude.html. This requires also to use the\ncommand {comm_modify vel yes}.\n\nShort-range damping of the induced dipole interactions can be achieved\nusing Thole functions through the \"pair style\nthole\"_pair_thole.html in \"pair_style hybrid/overlay\"_pair_hybrid.html\nwith a Coulomb pair style. It may be useful to use {coul/long/cs} or\nsimilar from the CORESHELL package if the core and Drude particle come\ntoo close, which can cause numerical issues.\n\n:line\n\n6.28 Magnetic spins :link(howto_28),h4\n\nClassical magnetic spin simualtions can be performed via the SPIN\npackage.  The algrorithmic and implementation details are described in\n\"Tranchida\"_#Tranchida7.\n\nThe model representents the simulation of atomic magnetic spins\ncoupled to lattice vibrations. The dynamics of those magnetic spins\ncan be used to simulate a broad range a phenomena related to\nmagneto-elasticity, or or to study the influence of defects on the\nmagnetic properties of materials.\n\nThe magnetic spins are interacting with each others and with the \nlattice via pair interactions. Typically, the magnetic exchange \ninteraction can be defined using the \n\"pair/spin/exchange\"_pair_spin_exchange.html command. This exchange\napplies a magnetic torque to a given spin, considering the orientation\nof its neighboring spins and their relative distances. \nIt also applies a force on the atoms as a function of the spin \norientations and their associated inter-atomic distances. \n \nThe command \"fix precession/spin\"_fix_precession_spin.html allows to\napply a constant magnetic torque on all the spins in the system. This\ntorque can be an external magnetic field (Zeeman interaction), or an\nuniaxial magnetic anisotropy. \n\nA Langevin thermostat can be applied to those magnetic spins using \n\"fix langevin/spin\"_fix_langevin_spin.html. Typically, this thermostat \ncan be coupled to another Langevin thermostat applied to the atoms \nusing \"fix langevin\"_fix_langevin.html in order to simulate \nthermostated spin-lattice system. \n\nThe magnetic Gilbert damping can also be applied using \"fix \nlangevin/spin\"_fix_langevin_spin.html. It allows to either dissipate \nthe thermal energy of the Langevin thermostat, or to perform a \nrelaxation of the magnetic configuration toward an equilibrium state.\n\nAll the computed magnetic properties can be outputed by two main \ncommands. The first one is \"compute spin\"_compute_spin.html, that \nenables to evaluate magnetic averaged quantities, such as the total \nmagnetization of the system along x, y, or z, the spin temperature, or\nthe magnetic energy. The second command is \"compute \nproperty/atom\"_compute_property_atom.html. It enables to output all the\nper atom magnetic quantities. Typically, the orientation of a given \nmagnetic spin, or the magnetic force acting on this spin.\n\n:line\n:line\n\n:link(howto-Berendsen)\n[(Berendsen)] Berendsen, Grigera, Straatsma, J Phys Chem, 91,\n6269-6271 (1987).\n\n:link(howto-Cornell)\n[(Cornell)] Cornell, Cieplak, Bayly, Gould, Merz, Ferguson,\nSpellmeyer, Fox, Caldwell, Kollman, JACS 117, 5179-5197 (1995).\n\n:link(Horn)\n[(Horn)] Horn, Swope, Pitera, Madura, Dick, Hura, and Head-Gordon,\nJ Chem Phys, 120, 9665 (2004).\n\n:link(howto-Ikeshoji)\n[(Ikeshoji)] Ikeshoji and Hafskjold, Molecular Physics, 81, 251-261\n(1994).\n\n:link(howto-Wirnsberger)\n[(Wirnsberger)] Wirnsberger, Frenkel, and Dellago, J Chem Phys, 143, 124104\n(2015).\n\n:link(howto-MacKerell)\n[(MacKerell)] MacKerell, Bashford, Bellott, Dunbrack, Evanseck, Field,\nFischer, Gao, Guo, Ha, et al, J Phys Chem, 102, 3586 (1998).\n\n:link(howto-Mayo)\n[(Mayo)] Mayo, Olfason, Goddard III, J Phys Chem, 94, 8897-8909\n(1990).\n\n:link(Jorgensen1)\n[(Jorgensen)] Jorgensen, Chandrasekhar, Madura, Impey, Klein, J Chem\nPhys, 79, 926 (1983).\n\n:link(Price1)\n[(Price)] Price and Brooks, J Chem Phys, 121, 10096 (2004).\n\n:link(Shinoda1)\n[(Shinoda)] Shinoda, Shiga, and Mikami, Phys Rev B, 69, 134103 (2004).\n\n:link(MitchellFincham)\n[(Mitchell and Fincham)] Mitchell, Fincham, J Phys Condensed Matter,\n5, 1031-1038 (1993).\n\n:link(MitchellFincham2)\n[(Fincham)] Fincham, Mackrodt and Mitchell, J Phys Condensed Matter,\n6, 393-404 (1994).\n\n:link(howto-Lamoureux)\n[(Lamoureux and Roux)] G. Lamoureux, B. Roux, J. Chem. Phys 119, 3025 (2003)\n\n:link(Tranchida7)\n[(Tranchida)] Tranchida, Plimpton, Thibaudeau and Thompson, \narXiv preprint arXiv:1801.10233, (2018).\n"
    },
    "skipped": [
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/xmgrace/lammpsplot.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/pymol_asphere/doc/asphere_vis.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/polybond/Manual.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/moltemplate/ttree_lex.py",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/moltemplate/force_fields/images/spce_ball_and_stick.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/moltemplate/force_fields/images/ice_rect8_unitcell.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/moltemplate/force_fields/images/graphene_unit_cell.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/pyramids_vs_LAMMPS/images/pyramids_vs_gravity_t=33000steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/pyramids_vs_LAMMPS/images/pyramids_vs_gravity_t=12200steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/pyramids_vs_LAMMPS/images/pyramids_vs_gravity_t=04800steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/menger_sponge_lattice_8cells_t=7400_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/menger_sponge_lattice_8cells_t=0_zoom1_LR2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/lvl3_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/lvl2_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/lvl1_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/misc_examples/menger_sponge/images/AlCell_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/file_conversion_examples/convert_LAMMPS_to_LT_examples/cnad-cnt/images/cnt.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/file_conversion_examples/convert_LAMMPS_to_LT_examples/cnad-cnt/images/cnad.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/file_conversion_examples/convert_LAMMPS_to_LT_examples/cnad-cnt/images/cnad-cnt_orig.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/file_conversion_examples/convert_LAMMPS_to_LT_examples/cnad-cnt/images/cnad-cnt_after_rotate_copy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/vesicle_Brannigan2005+Bellesia2010/images/vesicle_membrane+protein_L.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1beadProtSci2010/images/4SheetBundle_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1beadProtSci2010/images/4HelixBundle_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/unfrustrated/images/unfrustrated_t=200tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/unfrustrated/images/unfrustrated_t=0tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/unfrustrated+chaperonin/images/unfrustrated+chaperonin_t=105tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/unfrustrated+chaperonin/images/unfrustrated+chaperonin_t=0tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated/images/misfolded_conformation_t=1250tau.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated/images/initial_conformation_t=0tau.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated+minichaperone/images/protein2x2x2+minichaperones2x2x2_t=67500tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated+minichaperone/images/protein2x2x2+minichaperones2x2x2_t=0tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated+chaperonin/images/unfolded+chaperonin_t=508750tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/protein_folding_examples/1bead+chaperone/frustrated+chaperonin/images/misfolded+chaperonin_t=0tau_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=40000steps_npt_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=120000steps_npt_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=1000000steps_npt_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=0_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_mixture_t=0_nopbc_occ_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_B.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_mixture_Cooke_Kremer_DesernoPRE2005/images/CDlipid_A.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_t=600000steps_npt_occ.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_t=0_occ.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_Cooke_Kremer_DesernoPRE2005/images/CDlipid_bilayer_t=0_nopbc_occ.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_Cooke_Kremer_DesernoPRE2005/images/CDlipid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DPPC.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DPPC+DLPC_bilayer32x37_t=500ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DPPC+DLPC_bilayer32x37_t=0ps_no_pbc_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DPPC+DLPC_bilayer32x37_t=0ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane_BranniganPRE2005/images/DLPC.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/membrane+protein_t=5000ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/membrane+protein_t=0ps_top_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/membrane+protein_t=0ps_no_pbc_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/membrane+protein_t=0ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/membrane+protein/images/4HelixOrig+Lipid2005_t=1290ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/ellipsoids_CG_benzene/README_visualization_OVITO_ellipsoids.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/ellipsoids_CG_benzene/images/t=14900.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/ellipsoids_CG_benzene/images/t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/ellipsoids_CG_benzene/images/benzene_cg_ellipsoid.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/chromosome_metaphase_Naumova2013/images/t=0_before_minimizaion.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/chromosome_metaphase_Naumova2013/images/stage2_interior_rotated.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/chromosome_metaphase_Naumova2013/images/stage2_interior.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_translocation/images/walls_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_translocation/images/walls+solvent+polymer_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_translocation/images/solvent_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_translocation/images/polymer_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_random_heteropolymer/images/random_heteropolymer_30_20_t=700ps.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_random_heteropolymer/images/random_heteropolymer_30_20_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_random_heteropolymer/images/3bead.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_random_heteropolymer/images/2bead.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_lennard_jones_tube/images/tubewall+solvent_t=3000steps.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_lennard_jones_tube/images/tubewall+solvent_t=0steps.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_polymer/images/2bead_t=4850000_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_polymer/images/2bead_polymer_array3x3x3_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_polymer/images/2bead_polymer_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_polymer/images/2bead_monomer.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_heteropolymer/images/trajectory.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_heteropolymer/images/polymer_LR.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_heteropolymer/images/monomer_P.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/abstract_2bead_heteropolymer/images/monomer_H.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_preformed/images/water_martini_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_preformed/images/t=4ns_bilayer_preformed_GL_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_preformed/images/t=0_bilayer_preformed_GL_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_preformed/images/DPPC_martini_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/water_martini_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/t=6ns_300K_NPT_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/t=26ns_300K_NPT_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/t=13ns_450K_NVT_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/t=0_after_minimization_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/MARTINI_examples/force_field_explicit/DPPC_bilayer_formation_PACKMOL/images/DPPC_martini_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/ELBAwater+methanol/images/ELBAwater+methanol_rendered_with_ovito.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/watMW.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclopentane_unrelaxed.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclopentane.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclododecane+watMW_t=50ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclododecane+watMW_t=400ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/coarse_grained/3bodyWater+hydrocarbons_MW+TraPPE/images/cyclododecane+watMW_t=0ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/waterSPCE+Na+Cl_t=100ps.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/waterSPCE+Na+Cl_t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/wat.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/Na.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/waterSPCE+Na+Cl/images/Cl.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/water_side_nopbc_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube_capillary_bbk_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls_side_nopbc_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls+water_top_nopbc_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls+water_side_pbc_t=305ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls+water_side_pbc_t=108ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/nanotube+walls+water_side_pbc_t=0ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/nanotube+water/images/graphene_unit_cell.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/ice_crystal/images/ice_rect8_unitcell.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/ice_crystal/images/ice_rect8_crystal_3x2x2_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/aluminum_crystal_strain/images/AlCrystal10x10x10_t=20000steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/aluminum_crystal_strain/images/AlCrystal10x10x10_t=0steps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_explicit_parameters/aluminum_crystal_strain/images/AlCell_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/hexadecane_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/hexadecane_12x12x2_t=10ps_npt_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/hexadecane_12x12x2_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/ch3_ry60_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/hexadecane/images/ch2_ry60_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene_PACKMOL/images/ethylene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene_PACKMOL/images/ethylene+benzene_box80x80x80_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene_PACKMOL/images/benzene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene/images/ethylene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene/images/ethylene+benzene_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene/images/ethylene+benzene_50bar_t=100000_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/ethylene+benzene/images/benzene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/initial_configuration_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/ch3_ry60.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/ch2_ry90.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/butane.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/butane/images/after_pressure_equilibration_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/alkane_chain_single/images/t=1ns.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/alkane_chain_single/images/t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/alkane_chain_single/images/ch3_ry60.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_OPLSAA/alkane_chain_single/images/ch2_ry90.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/hexadecane/images/hexadecane_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/hexadecane/images/hexadecane_12x12x2_t=10ps_npt_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/hexadecane/images/hexadecane_12x12x2_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/initial_configuration_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/ch3_ry60.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/ch2_ry90.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/butane.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/butane/images/after_pressure_equilibration_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/alkane_chain_single/images/t=1ns.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/alkane_chain_single/images/t=0.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/alkane_chain_single/images/ch3_ry60.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_COMPASS/alkane_chain_single/images/ch2_ry90.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/waterTIP3P+isobutane/images/water.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/waterTIP3P+isobutane/images/water+isobutane_t=840ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/waterTIP3P+isobutane/images/water+isobutane_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/waterTIP3P+isobutane/images/isobutane.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/hexadecane/images/hexadecane_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/hexadecane/images/hexadecane_12x12x2_t=10ps_npt_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/hexadecane/images/hexadecane_12x12x2_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/ethylene+benzene/images/ethylene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/ethylene+benzene/images/ethylene+benzene_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/ethylene+benzene/images/ethylene+benzene_50bar_t=100000_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/examples/all_atom/force_field_AMBER/ethylene+benzene/images/benzene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/waterSPCEx1000_t=25_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/waterSPCEx1000_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/tether.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/single_water_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/random_heteropolymer.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/random_3bead.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/random_2bead.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/mol_complex_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/mol_complex+mol_complex0_transparent_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/lipid_bilayer_vacancies.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/lipid_bilayer_mixture.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/delete_holes1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/author_email.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/2bead_polymers_t=100ps_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/2bead_polymers_nopbc_t=0_LR.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/2bead_polymer.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/moltemplate/doc/moltemplate_manual_src/2bead_monomer.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/matlab/README.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/i-pi/manual.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/emacs/lammps.el",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/tools/createatoms/Manual.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/src/USER-SMTBQ/pair_smtbq.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/src/USER-INTEL/pair_tersoff_intel.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/src/USER-INTEL/intel_intrinsics.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/src/KSPACE/msm.cpp",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/lib/kokkos/doc/SAND2017-10464-Kokkos-Task-DAG.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/lib/kokkos/doc/Kokkos_PG.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/lib/awpmd/ivutils/include/vector_3.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/lib/awpmd/ivutils/include/pairhash.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/lib/awpmd/ivutils/include/cvector_3.h",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/mscg/output_9Jan17/x.out",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/phonon/4-Graphene/Graphene.bin.6000000",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/phonon/3-3D-FCC-Cu-EAM/CuPhonon.bin.6500000",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/phonon/2-1D-diatomic/phonon.bin.2000000",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/phonon/1-1D-mono/phonon.bin.2000000",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/misc/bond_react/nylon,6-6_melt/large_nylon_melt.data.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/manifold/energy/energy_conservation.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/manifold/energy/energy_conservation.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/manifold/diffusion/msd_plot2.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/manifold/diffusion/msd.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/diffraction/Output/bulkNi_001.saed.0_VisIt_Image.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/cgsdk/sds-monolayer/data.sds.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/examples/USER/cgsdk/peg-verlet/data.pegc12e8.gz",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/fontawesome-webfont.woff",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/fontawesome-webfont.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/fontawesome-webfont.eot",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/RobotoSlab-Regular.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/RobotoSlab-Bold.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/Lato-Regular.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/Lato-Bold.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/Inconsolata.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/Inconsolata-Bold.ttf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/utils/sphinx-config/_themes/lammps_theme/static/fonts/FontAwesome.otf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/pair_resquared_extra.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/pair_gayberne_extra.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/kspace.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/colvars-refman-lammps.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/USER-CGDNA.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/SPH_LAMMPS_userguide.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/SMD_LAMMPS_userguide.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/PDLammps_overview.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/PDLammps_VES.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/PDF/PDLammps_EPS.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/xrd_mesh_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/xrd_mesh.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/user_intel.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/uef_frames.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_steve_assignee.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_reverse_pull_request7.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_reverse_pull_request6.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_reverse_pull_request5.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_reverse_pull_request4.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_reverse_pull_request3.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_reverse_pull_request2.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_reverse_pull_request.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_pull_request_feature_branch1.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_pull_request4.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_pull_request3.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_pull_request2.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_new_pull_request.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_merged.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_https_block.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_fork.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_edits_maintainers.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_create_new_pull_request2.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_create_new_pull_request1.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_changes_others.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_branch.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_automated_checks_passed.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_automated_checks.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/tutorial_additional_changes.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/sinusoid_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/sinusoid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/screenshot_vmd_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/screenshot_vmd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/screenshot_pymol_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/screenshot_pymol.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/screenshot_gl_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/screenshot_gl.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/screenshot_atomeye_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/screenshot_atomeye.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/saed_mesh_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/saed_mesh.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/saed_ewald_intersect_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/saed_ewald_intersect.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/rhodo_staggered.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/qbmsst_shock.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/qbmsst_init.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/pylammps_mc_minimum.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/pylammps_mc_energies_plot.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/pylammps_mc_disordered.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/pylammps_dihedral.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/pimd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/offload_knc.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/lj_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/lammps-logo.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/improper_distance.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/hop2_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/hop2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/hop1_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/hop1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/gran_mixer_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/gran_mixer.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/gran_funnel_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/gran_funnel.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/fix_wall_ees_image.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/examples_tdpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/examples_mdpd_last.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/examples_mdpd_first.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/examples_mdpd.gif",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/examples_edpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/dump2_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/dump2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/dump1_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/dump1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/dihedral_spherical_angles.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/dihedral_sign.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/coul_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_10.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_09.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_08.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_07.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_06.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_05.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_04_small.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_04.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_03_small.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_03.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_02_small.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_02.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_01_small.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bow_tutorial_01.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/bondswap.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/balance_uniform_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/balance_uniform.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/balance_rcb_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/balance_rcb.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/balance_nonuniform_small.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/balance_nonuniform.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/JPG/atc_nanotube.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/umbrella.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/transform.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/stress_tensor.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/rotate.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pressure_tensor.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pressure.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic9.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic8.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic7.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic6.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic5.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/polymorphic1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_zbl.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_yukawa_colloid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_yukawa.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_vashishta.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_ufm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tersoff_zbl.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tersoff_mod_c.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tersoff_mod.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tersoff_2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tersoff_1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tersoff.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tdpd_gov.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tdpd_force.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_tdpd_flux.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_sw.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_srp2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_srp1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_spin_neel_interaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_spin_neel_functions.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_spin_me_interaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_spin_me_forces.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_spin_exchange_interaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_spin_exchange_function.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_spin_exchange_forces.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_spin_dmi_interaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_sph_tait.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_sph_ideal.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_snap.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_smtbq3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_smtbq2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_smtbq1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_resquared4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_resquared3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_resquared2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_resquared.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_nm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_nb3b_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_multi_lucy_energy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_multi_lucy2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_multi_lucy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_morse_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_morse_smooth_linear.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_morse.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_momb.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mie2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mie.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mgpt.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_meam_sw_spline.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_meam_spline_multicomponent.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_meam_spline.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_meam.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mdpd_force.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mdf-6.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mdf-5.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mdf-4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mdf-3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mdf-2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_mdf-1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_lubricate.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_lj_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_lj_smooth_linear.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_lj_smooth.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_lj_expand.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_lj_cubic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_lj96.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_lj.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_kolmogorov_crespi_z.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_kolmogorov_crespi_full.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_ilp_graphene_hbn.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_hbond_dreiding.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_gromacs.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_gran_hooke.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_gran_hertz.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_gayberne2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_gayberne.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_gauss_cut.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_gauss.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_exp6_rx_oneFluid2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_exp6_rx_oneFluid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_exp6_rx.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_entropy3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_entropy2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_entropy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_eim3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_eim2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_eim1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_edpd_kappa.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_edpd_heat.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_edpd_gov.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_edpd_force.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_edip.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_eam_fs.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_eam.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_dpd_omega.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_dpd_energy_terms.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_dpd_energy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_dpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_dipole_sf2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_dipole_sf.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_dipole.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_debye.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_cs.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_coulomb.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_coul_wolf.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_coul_soft.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_coul_shield.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_coul_gauss.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_coul_dsf.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_coul_diel.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_comb2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_comb1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_colloid_ss.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_colloid_cs.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_colloid_cc.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_cmm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_charmm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_buck6d.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_buck.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_born.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_bop.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_beck.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_airebo.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_agni.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/pair_adp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/orientorder.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/min_energy.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_umbrella.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_ring.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_inversion_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_fourier.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_dist-1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_cvff.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_cossq.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/improper_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/hexorder.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/heat_flux_k.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/heat_flux_J.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/force_spin_zeeman.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/force_spin_aniso.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fld2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fld.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_wall_lj93.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_wall_lj1043.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_wall_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_wall_ees.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_wall_colloid.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ttm_mod.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ttm_ce.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ttm_blast1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ttm_blast.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ttm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ti_spring_function_2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ti_spring_function_1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ti_spring_force.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_spring_rg.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_rx_reactionRate.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_rx_reaction.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_rx_localTemp2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_rx_localTemp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_rx.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_rhok.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_rattle_rij.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_rattle_constraints.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_pimd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_orient_fcc.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_nphug.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_nh1.tex",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_nh1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_mvv_dpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_lb_fluid_viscosity.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_lb_fluid_stress.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_lb_fluid_properties.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_lb_fluid_navierstokes.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_lb_fluid_gammadefault.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_lb_fluid_fluidforce.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_lb_fluid_boltzmann.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_langevin_spin_sLLG.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_integration_spin_stdecomposition.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_grem.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_gld1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_gcmc3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_gcmc2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_gcmc1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_eos_table_rx.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_eos-cv.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ehex_f.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_ehex_eom.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_controller2.tex",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_controller2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_controller1.tex",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_controller1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_box_relax2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/fix_box_relax1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/eff_energy_expression.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/eff_ee.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/eff_Pauli.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/eff_Ne.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/eff_NN.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/eff_KE.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/eff_ECP2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/eff_ECP1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dreiding_hbond.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_table_cut.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_spherical.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_quadratic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_opls.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_nharmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_multi_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_helix.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_fourier.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_cosine_shift_exp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/dihedral_charmm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_xrd5.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_xrd4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_xrd3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_xrd2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_xrd1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_sna_atom6.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_sna_atom5.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_sna_atom4.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_sna_atom3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_sna_atom2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_sna_atom1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_saed3.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_saed2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_saed1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_msd_nongauss.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_gyration.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_fep_vol.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_fep_u.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_fep_ti.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_fep_lambda.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_fep_fep.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_fep_fdti.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_fep_bar.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/compute_dpd.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/cnp_eq.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/cnp_cutoff2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/cnp_cutoff.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/cna_cutoff2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/cna_cutoff1.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/centro_symmetry.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/box_inverse.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/box.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_quartic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_oxdna_fene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_nonlinear.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_morse.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_harmonic_shift_cut.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_harmonic_shift.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_gromos.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_fene_expand.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_fene.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/bond_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_quartic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_harmonic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_fourier_simple.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_fourier.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_dipole_torque.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_dipole_potential.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_dipole_gamma.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_dipole_couple.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_cosine_squared.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_cosine_shift_exp.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_cosine_shift.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_cosine_periodic.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_cosine_delta.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_cosine_buck6d.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_cosine.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_class2_p6.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_class2.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Eqs/angle_charmm.jpg",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Developer/developer.tex",
        "/var/tmp/sochat1/spack-stage/spack-stage-lammps-20180629-qevb66w6akz3c5lkyttsafe3zp3fdw4o/spack-src/doc/src/Developer/classes.pdf"
    ],
    "total_files": 10738
}