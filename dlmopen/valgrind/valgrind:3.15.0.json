{
    "matches": {
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/internals/segments-seginfos.txt": "\n-----------------------------------------------------------------------------\nInfo about the relationship between Segments and SegInfos\n-----------------------------------------------------------------------------\n\nSegInfo is from the very original Valgrind code, and so it predates\nSegments.  It's poorly named now; its really just a container for all\nthe object file metadata (symbols, debug info, etc).\n\nSegments describe memory mapped into the address space, and so any\naddress-space chaging operation needs to update the Segment structure.\nAfter the process is initialized, this means one of:\n\n    * mmap\n    * munmap\n    * mprotect\n    * brk\n    * stack growth\n\nA piece of address space may or may not be mmaped from a file.\n\nA SegInfo specifically describes memory mmaped from an ELF object file.\nBecause a single ELF file may be mmaped with multiple Segments, multiple\nSegments can point to one Seginfo.  A SegInfo can relate to a memory\nrange which is not yet mmaped.  For example, if the process mmaps the\nfirst page of an ELF file (the one containing the header), a SegInfo\nwill be created for that ELF file's mappings, which will include memory\nwhich will be later mmaped by the client's ELF loader.  If a new mmap\nappears in the address range of an existing SegInfo, it will have that\nSegInfo attached to it, presumably because its part of a .so file.\nSimilarly, if a Segment gets split (by mprotect, for example), the two\npieces will still be associated with the same SegInfo.  For this reason,\nthe address/length info in a SegInfo is not a duplicate of the Segment\naddress/length.\n\nThis is complex for several reasons:\n\n   1. We assume that if a process is mmaping a file which contains an\n      ELF header, it intends to use it as an ELF object.  If a program\n      which just mmaps ELF files but just uses it as raw data (copy, for\n      example), we still treat it as a shared-library opening.\n   2. Even if it is being loaded as a shared library/other ELF object,\n      Valgrind doesn't control the mmaps.  It just observes the mmaps\n      being generated by the client and has to cope.  One of the reasons\n      that Valgrind has to make its own mmap of each .so for reading\n      symtab information is because the client won't necessary mmap the\n      right pieces, or do so in the wrong order for us.\n\nSegInfos are reference counted, and freed when no Segments point to them any\nmore.\n\n> Aha.  So the range of a SegInfo will always be equal to or greater\n> than the range of its parent Segment?  Or can you eg. mmap a whole\n> file plus some extra pages, and then the SegInfo won't cover the extra\n> part of the range?\n\nThat would be unusual, but possible.  You could imagine ld generating an\nELF file via a mapping this way (which would probably upset Valgrind no\nend).\n\n-----------------------------------------------------------------------------\nMore from John Reiser\n-----------------------------------------------------------------------------\n> Can a Segment get split (eg. by mprotect)?\n\nThis happens when a debugger inserts a breakpoint, or when ld-linux\nrelocates a module that has DT_TEXTREL, or when a co-resident monitor\nrewrites some instructions.  On x86, a shared lib with relocations to\n.text \"works\" just fine.  The modified pages are no longer sharable,\nbut the instruction stream is functional.  It's even rather common,\nwhen a builder forgets to use -fpic for one or more files.  It\ncan be done on purpose when the modularity is more important than\nthe page sharing.  Non-pic code is faster, too: register %ebx is\nnot dedicated to _GLOBAL_OFFSET_TABLE_ addressing, and global variables\ncan be accessed by [relocated] inline 32-bit offset rather than by\naddress fetched from the GOT.\n\n> Can a new mmap appear in the address range of an existing SegInfo?\n\nOn x86_64 the static linker ld inserts a 1MB \"hole\" between .text\nand .data.  This is on advice from the hardware performance mavens,\nbecause various caching+prefetching hardware can look ahead that far.\nCurrently ld-linux leaves this as PROT_NONE, but anybody else is\nfree to override that assignment.\n\n> From peering at various /proc/*/maps files, the following scheme\n> sounds plausible:\n>\n> Load symbols following an mmap if:\n>\n>   map is to a file\n>   map has r-x permissions\n>   file has a valid ELF header\n>   possibly: mapping is > 1 page (catches the case of mapping first\n>      page just to examine the header)\n>\n> If the client wants to subsequently chop up the mapping, or change its\n> permissions, we ignore that.  I have never seen any evidence in\n> proc/*/maps that ld.so does such things.\n\nglibc-2.3.5 ld-linux does.  It finds the minimum interval of pages which\ncovers the p_memsz of all PT_LOAD, mmap()s that much from the file [even if\nthis maps beyond EOF of the file], then munmap()s [or mprotect(,,PROT_NONE)]\neverything that is not covered by the first PT_LOAD, then\nmmap(,,,MAP_FIXED,,) each remaining PT_LOAD.  This is done to overcome the\npossibility that a kernel which randomizes the placement of mmap(0, ...)\nmight place the first PT_LOAD so that subsequent PT_LOAD [must maintain\nrelative addressing to other PT_LOAD from the same file] would evict\nsomething else.  Needless to say, ld-linux assumes that it is the only actor\n(well, dlopen() does try for mutual exclusion) and that any \"holes\" between\nPT_LOAD from the same module are ignorable as far as allocation is\nconcerned.  Also, there is nothing to stop a file from having PT_LOAD that\noverlap, or appear in non-ascending order, etc.  The results might depend on\norder of processing, but always it has been by order of appearance in the\nfile.  [Probably this is a good way to trigger \"bugs\" in ld-linux and/or the\nkernel.]\n\nSome algorithms and data structures internal to glibc-2.3.5 assume that\nmodules do not overlap.  In particular, ld-linux sometimes searches\nfor __builtin_return_address_(0) in a set of intervals in order to determine\nwhich shared lib called ld-linux.  This matters for dlsym(), dlmopen(),\netc., and assumes that the intervals are a disjoint cover of any\n\"legal\" callers.  ld-linux tries to hide all of this from the prying\neyes of anyone else [the internal version of struct link_map contains\nmuch more than specified in <link.h>].  Some of this is good because\nit changes very frequently, but some parts are bad because in the past\nld-linux has been slow to provide needed services [such as\ndl_iterate_phdr()] and even antagonistic towards anybody else\ntrying for peaceful co-existence without the blessing of ld-linux.\n\n"
    },
    "skipped": [
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/memcheck/tests/vcpu_fbench.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/perf/ffbench.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/perf/fbench.c",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/index.pdf",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/mc-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/sg-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/hg-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/manual-core-adv.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.news.old.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/quick-start.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme-android_emulator.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/license.gpl.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/lk-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.news.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme-android.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/index.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme-missing.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/faq.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme-packagers.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/license.gfdl.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/ms-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/QuickStart.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.authors.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme-developers.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme-mips.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dh-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/manual-core.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/cl-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme-solaris.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/FAQ.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/dist.readme-s390.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/design-impl.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/cl-format.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/cg-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/licenses.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/nl-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/drd-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/bbv-manual.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/manual-intro.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/manual-writing-tools.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/tech-docs.html",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/images/up.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/images/next.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/images/home.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/images/kcachegrind_xtree.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/images/prev.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/html/images/dh-tree.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/images/up.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/images/next.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/images/home.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/images/kcachegrind_xtree.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/images/prev.png",
        "/var/tmp/sochat1/spack-stage/spack-stage-valgrind-3.15.0-ouysyutefann3lda6rf7gspdswuydrdw/spack-src/docs/images/dh-tree.png"
    ],
    "total_files": 5833
}