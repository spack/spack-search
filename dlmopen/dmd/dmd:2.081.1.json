{
    "matches": {
        "/var/tmp/sochat1/spack-stage/spack-stage-dmd-2.081.1-auyaa2ciyjkhzjvejajvnzxl7oxeyvlg/spack-src/druntime/src/core/sys/linux/dlfcn.d": "/**\n * D header file for GNU/Linux\n *\n * $(LINK2 http://sourceware.org/git/?p=glibc.git;a=blob;f=dlfcn/dlfcn.h, glibc dlfcn/dlfcn.h)\n */\nmodule core.sys.linux.dlfcn;\n\nversion (linux):\nextern (C):\nnothrow:\n@nogc:\n\npublic import core.sys.posix.dlfcn;\nimport core.sys.linux.config;\n\n// <bits/dlfcn.h>\nversion (X86)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n    // enum RTLD_LAZY = 0x00001; // POSIX\n    // enum RTLD_NOW = 0x00002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00004;\n    enum RTLD_DEEPBIND = 0x00008;\n\n    // enum RTLD_GLOBAL = 0x00100; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (X86_64)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n    // enum RTLD_LAZY = 0x00001; // POSIX\n    // enum RTLD_NOW = 0x00002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00004;\n    enum RTLD_DEEPBIND = 0x00008;\n\n    // enum RTLD_GLOBAL = 0x00100; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (MIPS32)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=ports/sysdeps/mips/bits/dlfcn.h\n    // enum RTLD_LAZY = 0x0001; // POSIX\n    // enum RTLD_NOW = 0x0002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00008;\n    enum RTLD_DEEPBIND = 0x00010;\n\n    // enum RTLD_GLOBAL = 0x0004; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (MIPS64)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=ports/sysdeps/mips/bits/dlfcn.h\n    // enum RTLD_LAZY = 0x0001; // POSIX\n    // enum RTLD_NOW = 0x0002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00008;\n    enum RTLD_DEEPBIND = 0x00010;\n\n    // enum RTLD_GLOBAL = 0x0004; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (PPC)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n    // enum RTLD_LAZY = 0x0001; // POSIX\n    // enum RTLD_NOW = 0x0002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00004;\n    enum RTLD_DEEPBIND = 0x00008;\n\n    // enum RTLD_GLOBAL = 0x00100; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (PPC64)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n    // enum RTLD_LAZY = 0x0001; // POSIX\n    // enum RTLD_NOW = 0x0002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00004;\n    enum RTLD_DEEPBIND = 0x00008;\n\n    // enum RTLD_GLOBAL = 0x00100; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (ARM)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n    // enum RTLD_LAZY = 0x0001; // POSIX\n    // enum RTLD_NOW = 0x0002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00004;\n    enum RTLD_DEEPBIND = 0x00008;\n\n    // enum RTLD_GLOBAL = 0x00100; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (AArch64)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n    // enum RTLD_LAZY = 0x0001; // POSIX\n    // enum RTLD_NOW = 0x0002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00004;\n    enum RTLD_DEEPBIND = 0x00008;\n\n    // enum RTLD_GLOBAL = 0x00100; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (SPARC64)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n    // enum RTLD_LAZY = 0x0001; // POSIX\n    // enum RTLD_NOW = 0x0002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00004;\n    enum RTLD_DEEPBIND = 0x00008;\n\n    // enum RTLD_GLOBAL = 0x00100; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse version (SystemZ)\n{\n    // http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/dlfcn.h\n    // enum RTLD_LAZY = 0x0001; // POSIX\n    // enum RTLD_NOW = 0x0002; // POSIX\n    enum RTLD_BINDING_MASK = 0x3;\n    enum RTLD_NOLOAD = 0x00004;\n    enum RTLD_DEEPBIND = 0x00008;\n\n    // enum RTLD_GLOBAL = 0x00100; // POSIX\n    // enum RTLD_LOCAL = 0; // POSIX\n    enum RTLD_NODELETE = 0x01000;\n\n    static if (__USE_GNU)\n    {\n        RT DL_CALL_FCT(RT, Args...)(RT function(Args) fctp, auto ref Args args)\n        {\n            _dl_mcount_wrapper_check(cast(void*)fctp);\n            return fctp(args);\n        }\n\n        void _dl_mcount_wrapper_check(void* __selfpc);\n    }\n}\nelse\n    static assert(0, \"unimplemented\");\n\n// <bits/dlfcn.h>\n\nstatic if (__USE_GNU)\n{\n    enum RTLD_NEXT = cast(void *)-1L;\n    enum RTLD_DEFAULT = cast(void *)0;\n    alias c_long Lmid_t;\n    enum LM_ID_BASE = 0;\n    enum LM_ID_NEWLM = -1;\n}\n\n// void* dlopen(in char* __file, int __mode); // POSIX\n// int dlclose(void* __handle); // POSIX\n// void* dlsym(void* __handle, in char* __name); // POSIX\n\nstatic if (__USE_GNU)\n{\n    void* dlmopen(Lmid_t __nsid, in char* __file, int __mode);\n    void* dlvsym(void* __handle, in char* __name, in char* __version);\n}\n\n// char* dlerror(); // POSIX\n\nstatic if (__USE_GNU)\n{\n    struct Dl_info\n    {\n        const(char)* dli_fname;\n        void* dli_fbase;\n        const(char)* dli_sname;\n        void* dli_saddr;\n    }\n\n    int dladdr(in void* __address, Dl_info* __info);\n    int dladdr1(void* __address, Dl_info* __info, void** __extra_info, int __flags);\n\n    enum\n    {\n        RTLD_DL_SYMENT = 1,\n        RTLD_DL_LINKMAP = 2,\n    }\n\n    int dlinfo(void* __handle, int __request, void* __arg);\n\n    enum\n    {\n        RTLD_DI_LMID = 1,\n        RTLD_DI_LINKMAP = 2,\n        RTLD_DI_CONFIGADDR = 3,\n        RTLD_DI_SERINFO = 4,\n        RTLD_DI_SERINFOSIZE = 5,\n        RTLD_DI_ORIGIN = 6,\n        RTLD_DI_PROFILENAME = 7,\n        RTLD_DI_PROFILEOUT = 8,\n        RTLD_DI_TLS_MODID = 9,\n        RTLD_DI_TLS_DATA = 10,\n        RTLD_DI_MAX = 10,\n    }\n\n    struct Dl_serpath\n    {\n        char* dls_name;\n        uint dls_flags;\n    }\n\n    struct Dl_serinfo\n    {\n        size_t dls_size;\n        uint dls_cnt;\n        Dl_serpath[1] dls_serpath;\n    }\n}\n",
        "/var/tmp/sochat1/spack-stage/spack-stage-dmd-2.081.1-auyaa2ciyjkhzjvejajvnzxl7oxeyvlg/spack-src/druntime/src/core/sys/solaris/dlfcn.d": "/**\n * D header file for Solaris\n *\n * $(LINK2 http://src.illumos.org/source/xref/illumos-gate/usr/src/head/dlfcn.h, illumos dlfcn.h)\n */\n\nmodule core.sys.solaris.dlfcn;\n\nversion (Solaris):\nextern (C):\nnothrow:\n\npublic import core.sys.posix.dlfcn;\nimport core.stdc.config;\n\n// enum RTLD_LAZY = 0x00001; // POSIX\n// enum RTLD_NOW = 0x00002; // POSIX\nenum RTLD_NOLOAD = 0x00004;\nenum RTLD_DEEPBIND = 0x00008;\n\n// enum RTLD_GLOBAL = 0x00100; // POSIX\n// enum RTLD_LOCAL = 0; // POSIX\nenum RTLD_PARENT   = 0x00200;\nenum RTLD_GROUP    = 0x00400;\nenum RTLD_WORLD    = 0x00800;\nenum RTLD_NODELETE = 0x01000;\nenum RTLD_FIRST    = 0x02000;\nenum RTLD_CONFGEN  = 0x10000;\n\n\nenum\n{\n    RTLD_NEXT    = cast(void *)-1,\n    RTLD_DEFAULT = cast(void *)-2,\n    RTLD_SELF    = cast(void *)-3,\n    RTLD_PROBE   = cast(void *)-4,\n}\n\nalias c_ulong Lmid_t;\n\nvoid* dlmopen(Lmid_t, in char*, int);\n\nenum\n{\n    RTLD_REL_RELATIVE = 0x00001,\n    RTLD_REL_EXEC     = 0x00002,\n    RTLD_REL_DEPENDS  = 0x00004,\n    RTLD_REL_PRELOAD  = 0x00008,\n    RTLD_REL_SELF     = 0x00010,\n    RTLD_REL_WEAK     = 0x00020,\n    RTLD_REL_ALL      = 0x00fff,\n    RTLD_MEMORY       = 0x01000,\n    RTLD_STRIP        = 0x02000,\n    RTLD_NOHEAP       = 0x04000,\n    RTLD_CONFSET      = 0x10000,\n}\n\nint dldump(in char*, in char*, int);\n\nstruct Dl_info\n{\n    const(char)* dli_fname;\n    void*        dli_fbase;\n    const(char)* dli_sname;\n    void*        dli_saddr;\n}\n\nenum\n{\n    RTLD_DL_SYMENT = 1,\n    RTLD_DL_LINKMAP = 2,\n}\n\nint dladdr(const(void)*, Dl_info*);\nint dladdr1(void*, Dl_info*, void**, int);\n\nenum\n{\n    RTLD_DI_LMID         = 1,\n    RTLD_DI_LINKMAP      = 2,\n    RTLD_DI_CONFIGADDR   = 3,\n    RTLD_DI_SERINFO      = 4,\n    RTLD_DI_SERINFOSIZE  = 5,\n    RTLD_DI_ORIGIN       = 6,\n    RTLD_DI_PROFILENAME  = 7,\n    RTLD_DI_PROFILEOUT   = 8,\n    RTLD_DI_GETSIGNAL    = 9,\n    RTLD_DI_SETSIGNAL    = 10,\n    RTLD_DI_ARGSINFO     = 11,\n    RTLD_DI_MMAPS        = 12,\n    RTLD_DI_MMAPCNT      = 13,\n    RTLD_DI_DEFERRED     = 14,\n    RTLD_DI_DEFERRED_SYM = 15,\n    RTLD_DI_MAX          = 15,\n}\n\nint dlinfo(void*, int, void*);\n\nstruct Dl_serpath\n{\n    char*  dls_name;\n    uint   dls_flags;\n}\n\nstruct Dl_serinfo\n{\n    size_t         dls_size;\n    uint           dls_cnt;\n    Dl_serpath[1]  dls_serpath;\n}\n\n// FIXME: Dl_argsinfo, Dl_mapinfo, Dl_amd64_unwindinfo are missing"
    },
    "skipped": [
        "/var/tmp/sochat1/spack-stage/spack-stage-dmd-2.081.1-auyaa2ciyjkhzjvejajvnzxl7oxeyvlg/spack-src/druntime/src/rt/minit.obj",
        "/var/tmp/sochat1/spack-stage/spack-stage-dmd-2.081.1-auyaa2ciyjkhzjvejajvnzxl7oxeyvlg/spack-src/test/runnable/testUTF32.d",
        "/var/tmp/sochat1/spack-stage/spack-stage-dmd-2.081.1-auyaa2ciyjkhzjvejajvnzxl7oxeyvlg/spack-src/test/runnable/helloUTF16BE.d",
        "/var/tmp/sochat1/spack-stage/spack-stage-dmd-2.081.1-auyaa2ciyjkhzjvejajvnzxl7oxeyvlg/spack-src/test/runnable/helloUTF16.d",
        "/var/tmp/sochat1/spack-stage/spack-stage-dmd-2.081.1-auyaa2ciyjkhzjvejajvnzxl7oxeyvlg/spack-src/test/fail_compilation/fail6458.d",
        "/var/tmp/sochat1/spack-stage/spack-stage-dmd-2.081.1-auyaa2ciyjkhzjvejajvnzxl7oxeyvlg/spack-src/test/compilable/test13512.d"
    ],
    "total_files": 4009
}